- path: /{path}
  method: Delete
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go//methods/default#generic-delete
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
             ""
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          path := `path_example` // string |  # string | 

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient..DefaultAPI.GenericDelete(context.Background(), path).Execute()
          //resp, r, err := apiClient..DefaultAPI.GenericDelete(context.Background(), path).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `DefaultAPI.GenericDelete``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GenericDelete`: GenericResponse
          fmt.Fprintf(os.Stdout, "Response from `DefaultAPI.GenericDelete`: %v\n", resp)
        }
- path: /{path}
  method: Get
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go//methods/default#generic-get
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
             ""
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          path := `path_example` // string |  # string | 

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient..DefaultAPI.GenericGet(context.Background(), path).Execute()
          //resp, r, err := apiClient..DefaultAPI.GenericGet(context.Background(), path).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `DefaultAPI.GenericGet``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GenericGet`: GenericResponse
          fmt.Fprintf(os.Stdout, "Response from `DefaultAPI.GenericGet`: %v\n", resp)
        }
- path: /{path}
  method: Patch
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go//methods/default#generic-patch
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
             ""
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          path := `path_example` // string |  # string | 
          requestBody := Object // map[string]interface{} |  (optional) # map[string]interface{} |  (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient..DefaultAPI.GenericPatch(context.Background(), path).Execute()
          //resp, r, err := apiClient..DefaultAPI.GenericPatch(context.Background(), path).RequestBody(requestBody).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `DefaultAPI.GenericPatch``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GenericPatch`: GenericResponse
          fmt.Fprintf(os.Stdout, "Response from `DefaultAPI.GenericPatch`: %v\n", resp)
        }
- path: /{path}
  method: Post
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go//methods/default#generic-post
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
             ""
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          path := `path_example` // string |  # string | 
          requestBody := Object // map[string]interface{} |  (optional) # map[string]interface{} |  (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient..DefaultAPI.GenericPost(context.Background(), path).Execute()
          //resp, r, err := apiClient..DefaultAPI.GenericPost(context.Background(), path).RequestBody(requestBody).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `DefaultAPI.GenericPost``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GenericPost`: GenericResponse
          fmt.Fprintf(os.Stdout, "Response from `DefaultAPI.GenericPost`: %v\n", resp)
        }
- path: /{path}
  method: Put
  xCodeSample:
    - lang: Go
      label: SDK_tools/sdk/go//methods/default#generic-put
      source: |
        package main

        import (
          "context"
          "fmt"
          "os"
            
             ""
          sailpoint "github.com/sailpoint-oss/golang-sdk/v2"
        )

        func main() {
          path := `path_example` // string |  # string | 
          requestBody := Object // map[string]interface{} |  (optional) # map[string]interface{} |  (optional)

          


          configuration := sailpoint.NewDefaultConfiguration()
          apiClient := sailpoint.NewAPIClient(configuration)
          resp, r, err := apiClient..DefaultAPI.GenericPut(context.Background(), path).Execute()
          //resp, r, err := apiClient..DefaultAPI.GenericPut(context.Background(), path).RequestBody(requestBody).Execute()
          if err != nil {
            fmt.Fprintf(os.Stderr, "Error when calling `DefaultAPI.GenericPut``: %v\n", err)
            fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
          }
          // response from `GenericPut`: GenericResponse
          fmt.Fprintf(os.Stdout, "Response from `DefaultAPI.GenericPut`: %v\n", resp)
        }
