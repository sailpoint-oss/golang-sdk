/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
	
	"fmt"
)

// checks if the MachineIdentity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MachineIdentity{}

// MachineIdentity struct for MachineIdentity
type MachineIdentity struct {
	// System-generated unique ID of the Object
	Id *string `json:"id,omitempty"`
	// Name of the Object
	Name NullableString `json:"name"`
	// Creation date of the Object
	Created *SailPointTime `json:"created,omitempty"`
	// Last modification date of the Object
	Modified *SailPointTime `json:"modified,omitempty"`
	// The business application that the identity represents
	BusinessApplication string `json:"businessApplication"`
	// Description of machine identity
	Description *string `json:"description,omitempty"`
	// A map of custom machine identity attributes
	Attributes map[string]interface{} `json:"attributes,omitempty"`
	// The subtype value associated to the machine identity
	Subtype string `json:"subtype"`
	Owners *MachineIdentityDtoOwners `json:"owners,omitempty"`
	// The source id associated to the machine identity
	SourceId *string `json:"sourceId,omitempty"`
	// The UUID associated to the machine identity directly aggregated from a source
	Uuid *string `json:"uuid,omitempty"`
	// The native identity associated to the machine identity directly aggregated from a source
	NativeIdentity *string `json:"nativeIdentity,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MachineIdentity MachineIdentity

// NewMachineIdentity instantiates a new MachineIdentity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMachineIdentity(name NullableString, businessApplication string, subtype string) *MachineIdentity {
	this := MachineIdentity{}
	this.Name = name
	this.BusinessApplication = businessApplication
	this.Subtype = subtype
	return &this
}

// NewMachineIdentityWithDefaults instantiates a new MachineIdentity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMachineIdentityWithDefaults() *MachineIdentity {
	this := MachineIdentity{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MachineIdentity) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineIdentity) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MachineIdentity) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MachineIdentity) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *MachineIdentity) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MachineIdentity) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *MachineIdentity) SetName(v string) {
	o.Name.Set(&v)
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *MachineIdentity) GetCreated() SailPointTime {
	if o == nil || IsNil(o.Created) {
		var ret SailPointTime
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineIdentity) GetCreatedOk() (*SailPointTime, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *MachineIdentity) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given SailPointTime and assigns it to the Created field.
func (o *MachineIdentity) SetCreated(v SailPointTime) {
	o.Created = &v
}

// GetModified returns the Modified field value if set, zero value otherwise.
func (o *MachineIdentity) GetModified() SailPointTime {
	if o == nil || IsNil(o.Modified) {
		var ret SailPointTime
		return ret
	}
	return *o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineIdentity) GetModifiedOk() (*SailPointTime, bool) {
	if o == nil || IsNil(o.Modified) {
		return nil, false
	}
	return o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *MachineIdentity) HasModified() bool {
	if o != nil && !IsNil(o.Modified) {
		return true
	}

	return false
}

// SetModified gets a reference to the given SailPointTime and assigns it to the Modified field.
func (o *MachineIdentity) SetModified(v SailPointTime) {
	o.Modified = &v
}

// GetBusinessApplication returns the BusinessApplication field value
func (o *MachineIdentity) GetBusinessApplication() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BusinessApplication
}

// GetBusinessApplicationOk returns a tuple with the BusinessApplication field value
// and a boolean to check if the value has been set.
func (o *MachineIdentity) GetBusinessApplicationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BusinessApplication, true
}

// SetBusinessApplication sets field value
func (o *MachineIdentity) SetBusinessApplication(v string) {
	o.BusinessApplication = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *MachineIdentity) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineIdentity) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *MachineIdentity) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *MachineIdentity) SetDescription(v string) {
	o.Description = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *MachineIdentity) GetAttributes() map[string]interface{} {
	if o == nil || IsNil(o.Attributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineIdentity) GetAttributesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Attributes) {
		return map[string]interface{}{}, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *MachineIdentity) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]interface{} and assigns it to the Attributes field.
func (o *MachineIdentity) SetAttributes(v map[string]interface{}) {
	o.Attributes = v
}

// GetSubtype returns the Subtype field value
func (o *MachineIdentity) GetSubtype() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subtype
}

// GetSubtypeOk returns a tuple with the Subtype field value
// and a boolean to check if the value has been set.
func (o *MachineIdentity) GetSubtypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subtype, true
}

// SetSubtype sets field value
func (o *MachineIdentity) SetSubtype(v string) {
	o.Subtype = v
}

// GetOwners returns the Owners field value if set, zero value otherwise.
func (o *MachineIdentity) GetOwners() MachineIdentityDtoOwners {
	if o == nil || IsNil(o.Owners) {
		var ret MachineIdentityDtoOwners
		return ret
	}
	return *o.Owners
}

// GetOwnersOk returns a tuple with the Owners field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineIdentity) GetOwnersOk() (*MachineIdentityDtoOwners, bool) {
	if o == nil || IsNil(o.Owners) {
		return nil, false
	}
	return o.Owners, true
}

// HasOwners returns a boolean if a field has been set.
func (o *MachineIdentity) HasOwners() bool {
	if o != nil && !IsNil(o.Owners) {
		return true
	}

	return false
}

// SetOwners gets a reference to the given MachineIdentityDtoOwners and assigns it to the Owners field.
func (o *MachineIdentity) SetOwners(v MachineIdentityDtoOwners) {
	o.Owners = &v
}

// GetSourceId returns the SourceId field value if set, zero value otherwise.
func (o *MachineIdentity) GetSourceId() string {
	if o == nil || IsNil(o.SourceId) {
		var ret string
		return ret
	}
	return *o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineIdentity) GetSourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.SourceId) {
		return nil, false
	}
	return o.SourceId, true
}

// HasSourceId returns a boolean if a field has been set.
func (o *MachineIdentity) HasSourceId() bool {
	if o != nil && !IsNil(o.SourceId) {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given string and assigns it to the SourceId field.
func (o *MachineIdentity) SetSourceId(v string) {
	o.SourceId = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *MachineIdentity) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineIdentity) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *MachineIdentity) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *MachineIdentity) SetUuid(v string) {
	o.Uuid = &v
}

// GetNativeIdentity returns the NativeIdentity field value if set, zero value otherwise.
func (o *MachineIdentity) GetNativeIdentity() string {
	if o == nil || IsNil(o.NativeIdentity) {
		var ret string
		return ret
	}
	return *o.NativeIdentity
}

// GetNativeIdentityOk returns a tuple with the NativeIdentity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MachineIdentity) GetNativeIdentityOk() (*string, bool) {
	if o == nil || IsNil(o.NativeIdentity) {
		return nil, false
	}
	return o.NativeIdentity, true
}

// HasNativeIdentity returns a boolean if a field has been set.
func (o *MachineIdentity) HasNativeIdentity() bool {
	if o != nil && !IsNil(o.NativeIdentity) {
		return true
	}

	return false
}

// SetNativeIdentity gets a reference to the given string and assigns it to the NativeIdentity field.
func (o *MachineIdentity) SetNativeIdentity(v string) {
	o.NativeIdentity = &v
}

func (o MachineIdentity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MachineIdentity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name.Get()
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Modified) {
		toSerialize["modified"] = o.Modified
	}
	toSerialize["businessApplication"] = o.BusinessApplication
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	toSerialize["subtype"] = o.Subtype
	if !IsNil(o.Owners) {
		toSerialize["owners"] = o.Owners
	}
	if !IsNil(o.SourceId) {
		toSerialize["sourceId"] = o.SourceId
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.NativeIdentity) {
		toSerialize["nativeIdentity"] = o.NativeIdentity
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MachineIdentity) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"businessApplication",
		"subtype",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMachineIdentity := _MachineIdentity{}

	err = json.Unmarshal(data, &varMachineIdentity)

	if err != nil {
		return err
	}

	*o = MachineIdentity(varMachineIdentity)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "created")
		delete(additionalProperties, "modified")
		delete(additionalProperties, "businessApplication")
		delete(additionalProperties, "description")
		delete(additionalProperties, "attributes")
		delete(additionalProperties, "subtype")
		delete(additionalProperties, "owners")
		delete(additionalProperties, "sourceId")
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "nativeIdentity")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMachineIdentity struct {
	value *MachineIdentity
	isSet bool
}

func (v NullableMachineIdentity) Get() *MachineIdentity {
	return v.value
}

func (v *NullableMachineIdentity) Set(val *MachineIdentity) {
	v.value = val
	v.isSet = true
}

func (v NullableMachineIdentity) IsSet() bool {
	return v.isSet
}

func (v *NullableMachineIdentity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMachineIdentity(val *MachineIdentity) *NullableMachineIdentity {
	return &NullableMachineIdentity{value: val, isSet: true}
}

func (v NullableMachineIdentity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMachineIdentity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


