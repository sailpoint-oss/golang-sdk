/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
)

// checks if the MultiHostIntegrationsConnectorAttributesConnectorFileUploadHistory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MultiHostIntegrationsConnectorAttributesConnectorFileUploadHistory{}

// MultiHostIntegrationsConnectorAttributesConnectorFileUploadHistory struct for MultiHostIntegrationsConnectorAttributesConnectorFileUploadHistory
type MultiHostIntegrationsConnectorAttributesConnectorFileUploadHistory struct {
	// File name of the connector JAR
	ConnectorFileNameUploadedDate *string `json:"connectorFileNameUploadedDate,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MultiHostIntegrationsConnectorAttributesConnectorFileUploadHistory MultiHostIntegrationsConnectorAttributesConnectorFileUploadHistory

// NewMultiHostIntegrationsConnectorAttributesConnectorFileUploadHistory instantiates a new MultiHostIntegrationsConnectorAttributesConnectorFileUploadHistory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultiHostIntegrationsConnectorAttributesConnectorFileUploadHistory() *MultiHostIntegrationsConnectorAttributesConnectorFileUploadHistory {
	this := MultiHostIntegrationsConnectorAttributesConnectorFileUploadHistory{}
	return &this
}

// NewMultiHostIntegrationsConnectorAttributesConnectorFileUploadHistoryWithDefaults instantiates a new MultiHostIntegrationsConnectorAttributesConnectorFileUploadHistory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultiHostIntegrationsConnectorAttributesConnectorFileUploadHistoryWithDefaults() *MultiHostIntegrationsConnectorAttributesConnectorFileUploadHistory {
	this := MultiHostIntegrationsConnectorAttributesConnectorFileUploadHistory{}
	return &this
}

// GetConnectorFileNameUploadedDate returns the ConnectorFileNameUploadedDate field value if set, zero value otherwise.
func (o *MultiHostIntegrationsConnectorAttributesConnectorFileUploadHistory) GetConnectorFileNameUploadedDate() string {
	if o == nil || IsNil(o.ConnectorFileNameUploadedDate) {
		var ret string
		return ret
	}
	return *o.ConnectorFileNameUploadedDate
}

// GetConnectorFileNameUploadedDateOk returns a tuple with the ConnectorFileNameUploadedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrationsConnectorAttributesConnectorFileUploadHistory) GetConnectorFileNameUploadedDateOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectorFileNameUploadedDate) {
		return nil, false
	}
	return o.ConnectorFileNameUploadedDate, true
}

// HasConnectorFileNameUploadedDate returns a boolean if a field has been set.
func (o *MultiHostIntegrationsConnectorAttributesConnectorFileUploadHistory) HasConnectorFileNameUploadedDate() bool {
	if o != nil && !IsNil(o.ConnectorFileNameUploadedDate) {
		return true
	}

	return false
}

// SetConnectorFileNameUploadedDate gets a reference to the given string and assigns it to the ConnectorFileNameUploadedDate field.
func (o *MultiHostIntegrationsConnectorAttributesConnectorFileUploadHistory) SetConnectorFileNameUploadedDate(v string) {
	o.ConnectorFileNameUploadedDate = &v
}

func (o MultiHostIntegrationsConnectorAttributesConnectorFileUploadHistory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MultiHostIntegrationsConnectorAttributesConnectorFileUploadHistory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConnectorFileNameUploadedDate) {
		toSerialize["connectorFileNameUploadedDate"] = o.ConnectorFileNameUploadedDate
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MultiHostIntegrationsConnectorAttributesConnectorFileUploadHistory) UnmarshalJSON(data []byte) (err error) {
	varMultiHostIntegrationsConnectorAttributesConnectorFileUploadHistory := _MultiHostIntegrationsConnectorAttributesConnectorFileUploadHistory{}

	err = json.Unmarshal(data, &varMultiHostIntegrationsConnectorAttributesConnectorFileUploadHistory)

	if err != nil {
		return err
	}

	*o = MultiHostIntegrationsConnectorAttributesConnectorFileUploadHistory(varMultiHostIntegrationsConnectorAttributesConnectorFileUploadHistory)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "connectorFileNameUploadedDate")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMultiHostIntegrationsConnectorAttributesConnectorFileUploadHistory struct {
	value *MultiHostIntegrationsConnectorAttributesConnectorFileUploadHistory
	isSet bool
}

func (v NullableMultiHostIntegrationsConnectorAttributesConnectorFileUploadHistory) Get() *MultiHostIntegrationsConnectorAttributesConnectorFileUploadHistory {
	return v.value
}

func (v *NullableMultiHostIntegrationsConnectorAttributesConnectorFileUploadHistory) Set(val *MultiHostIntegrationsConnectorAttributesConnectorFileUploadHistory) {
	v.value = val
	v.isSet = true
}

func (v NullableMultiHostIntegrationsConnectorAttributesConnectorFileUploadHistory) IsSet() bool {
	return v.isSet
}

func (v *NullableMultiHostIntegrationsConnectorAttributesConnectorFileUploadHistory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultiHostIntegrationsConnectorAttributesConnectorFileUploadHistory(val *MultiHostIntegrationsConnectorAttributesConnectorFileUploadHistory) *NullableMultiHostIntegrationsConnectorAttributesConnectorFileUploadHistory {
	return &NullableMultiHostIntegrationsConnectorAttributesConnectorFileUploadHistory{value: val, isSet: true}
}

func (v NullableMultiHostIntegrationsConnectorAttributesConnectorFileUploadHistory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultiHostIntegrationsConnectorAttributesConnectorFileUploadHistory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


