/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
)

// checks if the SpConfigObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpConfigObject{}

// SpConfigObject Response model for get object configuration.
type SpConfigObject struct {
	// The object type this configuration is for.
	ObjectType *string `json:"objectType,omitempty"`
	// List of json paths within an exported object of this type that represent references that need to be resolved.
	ReferenceExtractors []string `json:"referenceExtractors,omitempty"`
	// If true, this type of object will be JWS signed and cannot be modified before import.
	SignatureRequired *bool `json:"signatureRequired,omitempty"`
	// Whether this object type has to be resolved always by ID
	AlwaysResolveById *bool `json:"alwaysResolveById,omitempty"`
	// Whether this is a legacy object
	LegacyObject *bool `json:"legacyObject,omitempty"`
	// Whether there is only one object of this type
	OnePerTenant *bool `json:"onePerTenant,omitempty"`
	// Whether this object can be exported or it is just a reference object
	Exportable *bool `json:"exportable,omitempty"`
	Rules *SpConfigRules `json:"rules,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SpConfigObject SpConfigObject

// NewSpConfigObject instantiates a new SpConfigObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpConfigObject() *SpConfigObject {
	this := SpConfigObject{}
	var signatureRequired bool = false
	this.SignatureRequired = &signatureRequired
	var alwaysResolveById bool = false
	this.AlwaysResolveById = &alwaysResolveById
	var legacyObject bool = false
	this.LegacyObject = &legacyObject
	var onePerTenant bool = false
	this.OnePerTenant = &onePerTenant
	var exportable bool = false
	this.Exportable = &exportable
	return &this
}

// NewSpConfigObjectWithDefaults instantiates a new SpConfigObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpConfigObjectWithDefaults() *SpConfigObject {
	this := SpConfigObject{}
	var signatureRequired bool = false
	this.SignatureRequired = &signatureRequired
	var alwaysResolveById bool = false
	this.AlwaysResolveById = &alwaysResolveById
	var legacyObject bool = false
	this.LegacyObject = &legacyObject
	var onePerTenant bool = false
	this.OnePerTenant = &onePerTenant
	var exportable bool = false
	this.Exportable = &exportable
	return &this
}

// GetObjectType returns the ObjectType field value if set, zero value otherwise.
func (o *SpConfigObject) GetObjectType() string {
	if o == nil || IsNil(o.ObjectType) {
		var ret string
		return ret
	}
	return *o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpConfigObject) GetObjectTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ObjectType) {
		return nil, false
	}
	return o.ObjectType, true
}

// HasObjectType returns a boolean if a field has been set.
func (o *SpConfigObject) HasObjectType() bool {
	if o != nil && !IsNil(o.ObjectType) {
		return true
	}

	return false
}

// SetObjectType gets a reference to the given string and assigns it to the ObjectType field.
func (o *SpConfigObject) SetObjectType(v string) {
	o.ObjectType = &v
}

// GetReferenceExtractors returns the ReferenceExtractors field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SpConfigObject) GetReferenceExtractors() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ReferenceExtractors
}

// GetReferenceExtractorsOk returns a tuple with the ReferenceExtractors field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SpConfigObject) GetReferenceExtractorsOk() ([]string, bool) {
	if o == nil || IsNil(o.ReferenceExtractors) {
		return nil, false
	}
	return o.ReferenceExtractors, true
}

// HasReferenceExtractors returns a boolean if a field has been set.
func (o *SpConfigObject) HasReferenceExtractors() bool {
	if o != nil && !IsNil(o.ReferenceExtractors) {
		return true
	}

	return false
}

// SetReferenceExtractors gets a reference to the given []string and assigns it to the ReferenceExtractors field.
func (o *SpConfigObject) SetReferenceExtractors(v []string) {
	o.ReferenceExtractors = v
}

// GetSignatureRequired returns the SignatureRequired field value if set, zero value otherwise.
func (o *SpConfigObject) GetSignatureRequired() bool {
	if o == nil || IsNil(o.SignatureRequired) {
		var ret bool
		return ret
	}
	return *o.SignatureRequired
}

// GetSignatureRequiredOk returns a tuple with the SignatureRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpConfigObject) GetSignatureRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.SignatureRequired) {
		return nil, false
	}
	return o.SignatureRequired, true
}

// HasSignatureRequired returns a boolean if a field has been set.
func (o *SpConfigObject) HasSignatureRequired() bool {
	if o != nil && !IsNil(o.SignatureRequired) {
		return true
	}

	return false
}

// SetSignatureRequired gets a reference to the given bool and assigns it to the SignatureRequired field.
func (o *SpConfigObject) SetSignatureRequired(v bool) {
	o.SignatureRequired = &v
}

// GetAlwaysResolveById returns the AlwaysResolveById field value if set, zero value otherwise.
func (o *SpConfigObject) GetAlwaysResolveById() bool {
	if o == nil || IsNil(o.AlwaysResolveById) {
		var ret bool
		return ret
	}
	return *o.AlwaysResolveById
}

// GetAlwaysResolveByIdOk returns a tuple with the AlwaysResolveById field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpConfigObject) GetAlwaysResolveByIdOk() (*bool, bool) {
	if o == nil || IsNil(o.AlwaysResolveById) {
		return nil, false
	}
	return o.AlwaysResolveById, true
}

// HasAlwaysResolveById returns a boolean if a field has been set.
func (o *SpConfigObject) HasAlwaysResolveById() bool {
	if o != nil && !IsNil(o.AlwaysResolveById) {
		return true
	}

	return false
}

// SetAlwaysResolveById gets a reference to the given bool and assigns it to the AlwaysResolveById field.
func (o *SpConfigObject) SetAlwaysResolveById(v bool) {
	o.AlwaysResolveById = &v
}

// GetLegacyObject returns the LegacyObject field value if set, zero value otherwise.
func (o *SpConfigObject) GetLegacyObject() bool {
	if o == nil || IsNil(o.LegacyObject) {
		var ret bool
		return ret
	}
	return *o.LegacyObject
}

// GetLegacyObjectOk returns a tuple with the LegacyObject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpConfigObject) GetLegacyObjectOk() (*bool, bool) {
	if o == nil || IsNil(o.LegacyObject) {
		return nil, false
	}
	return o.LegacyObject, true
}

// HasLegacyObject returns a boolean if a field has been set.
func (o *SpConfigObject) HasLegacyObject() bool {
	if o != nil && !IsNil(o.LegacyObject) {
		return true
	}

	return false
}

// SetLegacyObject gets a reference to the given bool and assigns it to the LegacyObject field.
func (o *SpConfigObject) SetLegacyObject(v bool) {
	o.LegacyObject = &v
}

// GetOnePerTenant returns the OnePerTenant field value if set, zero value otherwise.
func (o *SpConfigObject) GetOnePerTenant() bool {
	if o == nil || IsNil(o.OnePerTenant) {
		var ret bool
		return ret
	}
	return *o.OnePerTenant
}

// GetOnePerTenantOk returns a tuple with the OnePerTenant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpConfigObject) GetOnePerTenantOk() (*bool, bool) {
	if o == nil || IsNil(o.OnePerTenant) {
		return nil, false
	}
	return o.OnePerTenant, true
}

// HasOnePerTenant returns a boolean if a field has been set.
func (o *SpConfigObject) HasOnePerTenant() bool {
	if o != nil && !IsNil(o.OnePerTenant) {
		return true
	}

	return false
}

// SetOnePerTenant gets a reference to the given bool and assigns it to the OnePerTenant field.
func (o *SpConfigObject) SetOnePerTenant(v bool) {
	o.OnePerTenant = &v
}

// GetExportable returns the Exportable field value if set, zero value otherwise.
func (o *SpConfigObject) GetExportable() bool {
	if o == nil || IsNil(o.Exportable) {
		var ret bool
		return ret
	}
	return *o.Exportable
}

// GetExportableOk returns a tuple with the Exportable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpConfigObject) GetExportableOk() (*bool, bool) {
	if o == nil || IsNil(o.Exportable) {
		return nil, false
	}
	return o.Exportable, true
}

// HasExportable returns a boolean if a field has been set.
func (o *SpConfigObject) HasExportable() bool {
	if o != nil && !IsNil(o.Exportable) {
		return true
	}

	return false
}

// SetExportable gets a reference to the given bool and assigns it to the Exportable field.
func (o *SpConfigObject) SetExportable(v bool) {
	o.Exportable = &v
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *SpConfigObject) GetRules() SpConfigRules {
	if o == nil || IsNil(o.Rules) {
		var ret SpConfigRules
		return ret
	}
	return *o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpConfigObject) GetRulesOk() (*SpConfigRules, bool) {
	if o == nil || IsNil(o.Rules) {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *SpConfigObject) HasRules() bool {
	if o != nil && !IsNil(o.Rules) {
		return true
	}

	return false
}

// SetRules gets a reference to the given SpConfigRules and assigns it to the Rules field.
func (o *SpConfigObject) SetRules(v SpConfigRules) {
	o.Rules = &v
}

func (o SpConfigObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpConfigObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ObjectType) {
		toSerialize["objectType"] = o.ObjectType
	}
	if o.ReferenceExtractors != nil {
		toSerialize["referenceExtractors"] = o.ReferenceExtractors
	}
	if !IsNil(o.SignatureRequired) {
		toSerialize["signatureRequired"] = o.SignatureRequired
	}
	if !IsNil(o.AlwaysResolveById) {
		toSerialize["alwaysResolveById"] = o.AlwaysResolveById
	}
	if !IsNil(o.LegacyObject) {
		toSerialize["legacyObject"] = o.LegacyObject
	}
	if !IsNil(o.OnePerTenant) {
		toSerialize["onePerTenant"] = o.OnePerTenant
	}
	if !IsNil(o.Exportable) {
		toSerialize["exportable"] = o.Exportable
	}
	if !IsNil(o.Rules) {
		toSerialize["rules"] = o.Rules
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SpConfigObject) UnmarshalJSON(data []byte) (err error) {
	varSpConfigObject := _SpConfigObject{}

	err = json.Unmarshal(data, &varSpConfigObject)

	if err != nil {
		return err
	}

	*o = SpConfigObject(varSpConfigObject)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "objectType")
		delete(additionalProperties, "referenceExtractors")
		delete(additionalProperties, "signatureRequired")
		delete(additionalProperties, "alwaysResolveById")
		delete(additionalProperties, "legacyObject")
		delete(additionalProperties, "onePerTenant")
		delete(additionalProperties, "exportable")
		delete(additionalProperties, "rules")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSpConfigObject struct {
	value *SpConfigObject
	isSet bool
}

func (v NullableSpConfigObject) Get() *SpConfigObject {
	return v.value
}

func (v *NullableSpConfigObject) Set(val *SpConfigObject) {
	v.value = val
	v.isSet = true
}

func (v NullableSpConfigObject) IsSet() bool {
	return v.isSet
}

func (v *NullableSpConfigObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpConfigObject(val *SpConfigObject) *NullableSpConfigObject {
	return &NullableSpConfigObject{value: val, isSet: true}
}

func (v NullableSpConfigObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpConfigObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


