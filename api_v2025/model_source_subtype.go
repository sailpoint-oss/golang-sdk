/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
	
	"fmt"
)

// checks if the SourceSubtype type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SourceSubtype{}

// SourceSubtype struct for SourceSubtype
type SourceSubtype struct {
	// Unique identifier for the subtype.
	Id *string `json:"id,omitempty"`
	// The ID of the source.
	SourceId *string `json:"sourceId,omitempty"`
	// Technical name of the subtype.
	TechnicalName string `json:"technicalName"`
	// Display name of the subtype.
	DisplayName string `json:"displayName"`
	// Description of the subtype.
	Description string `json:"description"`
	// Creation timestamp.
	Created *SailPointTime `json:"created,omitempty"`
	// Last modified timestamp.
	Modified *SailPointTime `json:"modified,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SourceSubtype SourceSubtype

// NewSourceSubtype instantiates a new SourceSubtype object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceSubtype(technicalName string, displayName string, description string) *SourceSubtype {
	this := SourceSubtype{}
	this.TechnicalName = technicalName
	this.DisplayName = displayName
	this.Description = description
	return &this
}

// NewSourceSubtypeWithDefaults instantiates a new SourceSubtype object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceSubtypeWithDefaults() *SourceSubtype {
	this := SourceSubtype{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SourceSubtype) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceSubtype) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SourceSubtype) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SourceSubtype) SetId(v string) {
	o.Id = &v
}

// GetSourceId returns the SourceId field value if set, zero value otherwise.
func (o *SourceSubtype) GetSourceId() string {
	if o == nil || IsNil(o.SourceId) {
		var ret string
		return ret
	}
	return *o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceSubtype) GetSourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.SourceId) {
		return nil, false
	}
	return o.SourceId, true
}

// HasSourceId returns a boolean if a field has been set.
func (o *SourceSubtype) HasSourceId() bool {
	if o != nil && !IsNil(o.SourceId) {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given string and assigns it to the SourceId field.
func (o *SourceSubtype) SetSourceId(v string) {
	o.SourceId = &v
}

// GetTechnicalName returns the TechnicalName field value
func (o *SourceSubtype) GetTechnicalName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TechnicalName
}

// GetTechnicalNameOk returns a tuple with the TechnicalName field value
// and a boolean to check if the value has been set.
func (o *SourceSubtype) GetTechnicalNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TechnicalName, true
}

// SetTechnicalName sets field value
func (o *SourceSubtype) SetTechnicalName(v string) {
	o.TechnicalName = v
}

// GetDisplayName returns the DisplayName field value
func (o *SourceSubtype) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *SourceSubtype) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *SourceSubtype) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetDescription returns the Description field value
func (o *SourceSubtype) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *SourceSubtype) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *SourceSubtype) SetDescription(v string) {
	o.Description = v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *SourceSubtype) GetCreated() SailPointTime {
	if o == nil || IsNil(o.Created) {
		var ret SailPointTime
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceSubtype) GetCreatedOk() (*SailPointTime, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *SourceSubtype) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given SailPointTime and assigns it to the Created field.
func (o *SourceSubtype) SetCreated(v SailPointTime) {
	o.Created = &v
}

// GetModified returns the Modified field value if set, zero value otherwise.
func (o *SourceSubtype) GetModified() SailPointTime {
	if o == nil || IsNil(o.Modified) {
		var ret SailPointTime
		return ret
	}
	return *o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceSubtype) GetModifiedOk() (*SailPointTime, bool) {
	if o == nil || IsNil(o.Modified) {
		return nil, false
	}
	return o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *SourceSubtype) HasModified() bool {
	if o != nil && !IsNil(o.Modified) {
		return true
	}

	return false
}

// SetModified gets a reference to the given SailPointTime and assigns it to the Modified field.
func (o *SourceSubtype) SetModified(v SailPointTime) {
	o.Modified = &v
}

func (o SourceSubtype) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SourceSubtype) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.SourceId) {
		toSerialize["sourceId"] = o.SourceId
	}
	toSerialize["technicalName"] = o.TechnicalName
	toSerialize["displayName"] = o.DisplayName
	toSerialize["description"] = o.Description
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Modified) {
		toSerialize["modified"] = o.Modified
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SourceSubtype) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"technicalName",
		"displayName",
		"description",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSourceSubtype := _SourceSubtype{}

	err = json.Unmarshal(data, &varSourceSubtype)

	if err != nil {
		return err
	}

	*o = SourceSubtype(varSourceSubtype)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "sourceId")
		delete(additionalProperties, "technicalName")
		delete(additionalProperties, "displayName")
		delete(additionalProperties, "description")
		delete(additionalProperties, "created")
		delete(additionalProperties, "modified")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSourceSubtype struct {
	value *SourceSubtype
	isSet bool
}

func (v NullableSourceSubtype) Get() *SourceSubtype {
	return v.value
}

func (v *NullableSourceSubtype) Set(val *SourceSubtype) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceSubtype) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceSubtype) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceSubtype(val *SourceSubtype) *NullableSourceSubtype {
	return &NullableSourceSubtype{value: val, isSet: true}
}

func (v NullableSourceSubtype) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceSubtype) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


