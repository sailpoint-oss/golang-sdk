/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
	"fmt"
)

// checks if the SourceClassificationStatusAllOfCounts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SourceClassificationStatusAllOfCounts{}

// SourceClassificationStatusAllOfCounts A map containing numbers relevant to the source classification process
type SourceClassificationStatusAllOfCounts struct {
	// total number of source accounts
	EXPECTED int64 `json:"EXPECTED"`
	// number of accounts that have been sent for processing (should be the same as expected when all accounts are collected)
	RECEIVED int64 `json:"RECEIVED"`
	// number of accounts that have been classified
	COMPLETED int64 `json:"COMPLETED"`
	AdditionalProperties map[string]interface{}
}

type _SourceClassificationStatusAllOfCounts SourceClassificationStatusAllOfCounts

// NewSourceClassificationStatusAllOfCounts instantiates a new SourceClassificationStatusAllOfCounts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceClassificationStatusAllOfCounts(eXPECTED int64, rECEIVED int64, cOMPLETED int64) *SourceClassificationStatusAllOfCounts {
	this := SourceClassificationStatusAllOfCounts{}
	this.EXPECTED = eXPECTED
	this.RECEIVED = rECEIVED
	this.COMPLETED = cOMPLETED
	return &this
}

// NewSourceClassificationStatusAllOfCountsWithDefaults instantiates a new SourceClassificationStatusAllOfCounts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceClassificationStatusAllOfCountsWithDefaults() *SourceClassificationStatusAllOfCounts {
	this := SourceClassificationStatusAllOfCounts{}
	return &this
}

// GetEXPECTED returns the EXPECTED field value
func (o *SourceClassificationStatusAllOfCounts) GetEXPECTED() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.EXPECTED
}

// GetEXPECTEDOk returns a tuple with the EXPECTED field value
// and a boolean to check if the value has been set.
func (o *SourceClassificationStatusAllOfCounts) GetEXPECTEDOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EXPECTED, true
}

// SetEXPECTED sets field value
func (o *SourceClassificationStatusAllOfCounts) SetEXPECTED(v int64) {
	o.EXPECTED = v
}

// GetRECEIVED returns the RECEIVED field value
func (o *SourceClassificationStatusAllOfCounts) GetRECEIVED() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.RECEIVED
}

// GetRECEIVEDOk returns a tuple with the RECEIVED field value
// and a boolean to check if the value has been set.
func (o *SourceClassificationStatusAllOfCounts) GetRECEIVEDOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RECEIVED, true
}

// SetRECEIVED sets field value
func (o *SourceClassificationStatusAllOfCounts) SetRECEIVED(v int64) {
	o.RECEIVED = v
}

// GetCOMPLETED returns the COMPLETED field value
func (o *SourceClassificationStatusAllOfCounts) GetCOMPLETED() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.COMPLETED
}

// GetCOMPLETEDOk returns a tuple with the COMPLETED field value
// and a boolean to check if the value has been set.
func (o *SourceClassificationStatusAllOfCounts) GetCOMPLETEDOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.COMPLETED, true
}

// SetCOMPLETED sets field value
func (o *SourceClassificationStatusAllOfCounts) SetCOMPLETED(v int64) {
	o.COMPLETED = v
}

func (o SourceClassificationStatusAllOfCounts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SourceClassificationStatusAllOfCounts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["EXPECTED"] = o.EXPECTED
	toSerialize["RECEIVED"] = o.RECEIVED
	toSerialize["COMPLETED"] = o.COMPLETED

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SourceClassificationStatusAllOfCounts) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"EXPECTED",
		"RECEIVED",
		"COMPLETED",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSourceClassificationStatusAllOfCounts := _SourceClassificationStatusAllOfCounts{}

	err = json.Unmarshal(data, &varSourceClassificationStatusAllOfCounts)

	if err != nil {
		return err
	}

	*o = SourceClassificationStatusAllOfCounts(varSourceClassificationStatusAllOfCounts)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "EXPECTED")
		delete(additionalProperties, "RECEIVED")
		delete(additionalProperties, "COMPLETED")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSourceClassificationStatusAllOfCounts struct {
	value *SourceClassificationStatusAllOfCounts
	isSet bool
}

func (v NullableSourceClassificationStatusAllOfCounts) Get() *SourceClassificationStatusAllOfCounts {
	return v.value
}

func (v *NullableSourceClassificationStatusAllOfCounts) Set(val *SourceClassificationStatusAllOfCounts) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceClassificationStatusAllOfCounts) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceClassificationStatusAllOfCounts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceClassificationStatusAllOfCounts(val *SourceClassificationStatusAllOfCounts) *NullableSourceClassificationStatusAllOfCounts {
	return &NullableSourceClassificationStatusAllOfCounts{value: val, isSet: true}
}

func (v NullableSourceClassificationStatusAllOfCounts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceClassificationStatusAllOfCounts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


