/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
)

// checks if the SearchCriteriaFiltersValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchCriteriaFiltersValue{}

// SearchCriteriaFiltersValue struct for SearchCriteriaFiltersValue
type SearchCriteriaFiltersValue struct {
	// The type of filter, e.g., \"TERMS\" or \"RANGE\".
	Type *string `json:"type,omitempty"`
	// Terms to filter by (for \"TERMS\" type).
	Terms []string `json:"terms,omitempty"`
	Range *SearchCriteriaFiltersValueRange `json:"range,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SearchCriteriaFiltersValue SearchCriteriaFiltersValue

// NewSearchCriteriaFiltersValue instantiates a new SearchCriteriaFiltersValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchCriteriaFiltersValue() *SearchCriteriaFiltersValue {
	this := SearchCriteriaFiltersValue{}
	return &this
}

// NewSearchCriteriaFiltersValueWithDefaults instantiates a new SearchCriteriaFiltersValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchCriteriaFiltersValueWithDefaults() *SearchCriteriaFiltersValue {
	this := SearchCriteriaFiltersValue{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SearchCriteriaFiltersValue) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCriteriaFiltersValue) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SearchCriteriaFiltersValue) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SearchCriteriaFiltersValue) SetType(v string) {
	o.Type = &v
}

// GetTerms returns the Terms field value if set, zero value otherwise.
func (o *SearchCriteriaFiltersValue) GetTerms() []string {
	if o == nil || IsNil(o.Terms) {
		var ret []string
		return ret
	}
	return o.Terms
}

// GetTermsOk returns a tuple with the Terms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCriteriaFiltersValue) GetTermsOk() ([]string, bool) {
	if o == nil || IsNil(o.Terms) {
		return nil, false
	}
	return o.Terms, true
}

// HasTerms returns a boolean if a field has been set.
func (o *SearchCriteriaFiltersValue) HasTerms() bool {
	if o != nil && !IsNil(o.Terms) {
		return true
	}

	return false
}

// SetTerms gets a reference to the given []string and assigns it to the Terms field.
func (o *SearchCriteriaFiltersValue) SetTerms(v []string) {
	o.Terms = v
}

// GetRange returns the Range field value if set, zero value otherwise.
func (o *SearchCriteriaFiltersValue) GetRange() SearchCriteriaFiltersValueRange {
	if o == nil || IsNil(o.Range) {
		var ret SearchCriteriaFiltersValueRange
		return ret
	}
	return *o.Range
}

// GetRangeOk returns a tuple with the Range field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCriteriaFiltersValue) GetRangeOk() (*SearchCriteriaFiltersValueRange, bool) {
	if o == nil || IsNil(o.Range) {
		return nil, false
	}
	return o.Range, true
}

// HasRange returns a boolean if a field has been set.
func (o *SearchCriteriaFiltersValue) HasRange() bool {
	if o != nil && !IsNil(o.Range) {
		return true
	}

	return false
}

// SetRange gets a reference to the given SearchCriteriaFiltersValueRange and assigns it to the Range field.
func (o *SearchCriteriaFiltersValue) SetRange(v SearchCriteriaFiltersValueRange) {
	o.Range = &v
}

func (o SearchCriteriaFiltersValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchCriteriaFiltersValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Terms) {
		toSerialize["terms"] = o.Terms
	}
	if !IsNil(o.Range) {
		toSerialize["range"] = o.Range
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SearchCriteriaFiltersValue) UnmarshalJSON(data []byte) (err error) {
	varSearchCriteriaFiltersValue := _SearchCriteriaFiltersValue{}

	err = json.Unmarshal(data, &varSearchCriteriaFiltersValue)

	if err != nil {
		return err
	}

	*o = SearchCriteriaFiltersValue(varSearchCriteriaFiltersValue)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "terms")
		delete(additionalProperties, "range")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSearchCriteriaFiltersValue struct {
	value *SearchCriteriaFiltersValue
	isSet bool
}

func (v NullableSearchCriteriaFiltersValue) Get() *SearchCriteriaFiltersValue {
	return v.value
}

func (v *NullableSearchCriteriaFiltersValue) Set(val *SearchCriteriaFiltersValue) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchCriteriaFiltersValue) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchCriteriaFiltersValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchCriteriaFiltersValue(val *SearchCriteriaFiltersValue) *NullableSearchCriteriaFiltersValue {
	return &NullableSearchCriteriaFiltersValue{value: val, isSet: true}
}

func (v NullableSearchCriteriaFiltersValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchCriteriaFiltersValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


