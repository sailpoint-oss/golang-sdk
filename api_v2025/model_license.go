/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
)

// checks if the License type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &License{}

// License struct for License
type License struct {
	// Name of the license
	LicenseId *string `json:"licenseId,omitempty"`
	// Legacy name of the license
	LegacyFeatureName *string `json:"legacyFeatureName,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _License License

// NewLicense instantiates a new License object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicense() *License {
	this := License{}
	return &this
}

// NewLicenseWithDefaults instantiates a new License object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseWithDefaults() *License {
	this := License{}
	return &this
}

// GetLicenseId returns the LicenseId field value if set, zero value otherwise.
func (o *License) GetLicenseId() string {
	if o == nil || IsNil(o.LicenseId) {
		var ret string
		return ret
	}
	return *o.LicenseId
}

// GetLicenseIdOk returns a tuple with the LicenseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *License) GetLicenseIdOk() (*string, bool) {
	if o == nil || IsNil(o.LicenseId) {
		return nil, false
	}
	return o.LicenseId, true
}

// HasLicenseId returns a boolean if a field has been set.
func (o *License) HasLicenseId() bool {
	if o != nil && !IsNil(o.LicenseId) {
		return true
	}

	return false
}

// SetLicenseId gets a reference to the given string and assigns it to the LicenseId field.
func (o *License) SetLicenseId(v string) {
	o.LicenseId = &v
}

// GetLegacyFeatureName returns the LegacyFeatureName field value if set, zero value otherwise.
func (o *License) GetLegacyFeatureName() string {
	if o == nil || IsNil(o.LegacyFeatureName) {
		var ret string
		return ret
	}
	return *o.LegacyFeatureName
}

// GetLegacyFeatureNameOk returns a tuple with the LegacyFeatureName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *License) GetLegacyFeatureNameOk() (*string, bool) {
	if o == nil || IsNil(o.LegacyFeatureName) {
		return nil, false
	}
	return o.LegacyFeatureName, true
}

// HasLegacyFeatureName returns a boolean if a field has been set.
func (o *License) HasLegacyFeatureName() bool {
	if o != nil && !IsNil(o.LegacyFeatureName) {
		return true
	}

	return false
}

// SetLegacyFeatureName gets a reference to the given string and assigns it to the LegacyFeatureName field.
func (o *License) SetLegacyFeatureName(v string) {
	o.LegacyFeatureName = &v
}

func (o License) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o License) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LicenseId) {
		toSerialize["licenseId"] = o.LicenseId
	}
	if !IsNil(o.LegacyFeatureName) {
		toSerialize["legacyFeatureName"] = o.LegacyFeatureName
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *License) UnmarshalJSON(data []byte) (err error) {
	varLicense := _License{}

	err = json.Unmarshal(data, &varLicense)

	if err != nil {
		return err
	}

	*o = License(varLicense)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "licenseId")
		delete(additionalProperties, "legacyFeatureName")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLicense struct {
	value *License
	isSet bool
}

func (v NullableLicense) Get() *License {
	return v.value
}

func (v *NullableLicense) Set(val *License) {
	v.value = val
	v.isSet = true
}

func (v NullableLicense) IsSet() bool {
	return v.isSet
}

func (v *NullableLicense) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicense(val *License) *NullableLicense {
	return &NullableLicense{value: val, isSet: true}
}

func (v NullableLicense) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicense) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


