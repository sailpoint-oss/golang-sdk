/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
	"fmt"
)

// checks if the ObjectMappingRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectMappingRequest{}

// ObjectMappingRequest struct for ObjectMappingRequest
type ObjectMappingRequest struct {
	// Type of the object the mapping value applies to, must be one from enum
	ObjectType string `json:"objectType"`
	// JSONPath expression denoting the path within the object where the mapping value should be applied
	JsonPath string `json:"jsonPath"`
	// Original value at the jsonPath location within the object
	SourceValue string `json:"sourceValue"`
	// Value to be assigned at the jsonPath location within the object
	TargetValue string `json:"targetValue"`
	// Whether or not this object mapping is enabled
	Enabled *bool `json:"enabled,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ObjectMappingRequest ObjectMappingRequest

// NewObjectMappingRequest instantiates a new ObjectMappingRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectMappingRequest(objectType string, jsonPath string, sourceValue string, targetValue string) *ObjectMappingRequest {
	this := ObjectMappingRequest{}
	this.ObjectType = objectType
	this.JsonPath = jsonPath
	this.SourceValue = sourceValue
	this.TargetValue = targetValue
	var enabled bool = false
	this.Enabled = &enabled
	return &this
}

// NewObjectMappingRequestWithDefaults instantiates a new ObjectMappingRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectMappingRequestWithDefaults() *ObjectMappingRequest {
	this := ObjectMappingRequest{}
	var enabled bool = false
	this.Enabled = &enabled
	return &this
}

// GetObjectType returns the ObjectType field value
func (o *ObjectMappingRequest) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *ObjectMappingRequest) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *ObjectMappingRequest) SetObjectType(v string) {
	o.ObjectType = v
}

// GetJsonPath returns the JsonPath field value
func (o *ObjectMappingRequest) GetJsonPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.JsonPath
}

// GetJsonPathOk returns a tuple with the JsonPath field value
// and a boolean to check if the value has been set.
func (o *ObjectMappingRequest) GetJsonPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JsonPath, true
}

// SetJsonPath sets field value
func (o *ObjectMappingRequest) SetJsonPath(v string) {
	o.JsonPath = v
}

// GetSourceValue returns the SourceValue field value
func (o *ObjectMappingRequest) GetSourceValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceValue
}

// GetSourceValueOk returns a tuple with the SourceValue field value
// and a boolean to check if the value has been set.
func (o *ObjectMappingRequest) GetSourceValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceValue, true
}

// SetSourceValue sets field value
func (o *ObjectMappingRequest) SetSourceValue(v string) {
	o.SourceValue = v
}

// GetTargetValue returns the TargetValue field value
func (o *ObjectMappingRequest) GetTargetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetValue
}

// GetTargetValueOk returns a tuple with the TargetValue field value
// and a boolean to check if the value has been set.
func (o *ObjectMappingRequest) GetTargetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetValue, true
}

// SetTargetValue sets field value
func (o *ObjectMappingRequest) SetTargetValue(v string) {
	o.TargetValue = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ObjectMappingRequest) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectMappingRequest) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ObjectMappingRequest) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ObjectMappingRequest) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o ObjectMappingRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectMappingRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["objectType"] = o.ObjectType
	toSerialize["jsonPath"] = o.JsonPath
	toSerialize["sourceValue"] = o.SourceValue
	toSerialize["targetValue"] = o.TargetValue
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ObjectMappingRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"objectType",
		"jsonPath",
		"sourceValue",
		"targetValue",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varObjectMappingRequest := _ObjectMappingRequest{}

	err = json.Unmarshal(data, &varObjectMappingRequest)

	if err != nil {
		return err
	}

	*o = ObjectMappingRequest(varObjectMappingRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "objectType")
		delete(additionalProperties, "jsonPath")
		delete(additionalProperties, "sourceValue")
		delete(additionalProperties, "targetValue")
		delete(additionalProperties, "enabled")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableObjectMappingRequest struct {
	value *ObjectMappingRequest
	isSet bool
}

func (v NullableObjectMappingRequest) Get() *ObjectMappingRequest {
	return v.value
}

func (v *NullableObjectMappingRequest) Set(val *ObjectMappingRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectMappingRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectMappingRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectMappingRequest(val *ObjectMappingRequest) *NullableObjectMappingRequest {
	return &NullableObjectMappingRequest{value: val, isSet: true}
}

func (v NullableObjectMappingRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectMappingRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


