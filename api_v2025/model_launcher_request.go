/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
	"fmt"
)

// checks if the LauncherRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LauncherRequest{}

// LauncherRequest struct for LauncherRequest
type LauncherRequest struct {
	// Name of the Launcher, limited to 255 characters
	Name string `json:"name"`
	// Description of the Launcher, limited to 2000 characters
	Description string `json:"description"`
	// Launcher type
	Type string `json:"type"`
	// State of the Launcher
	Disabled bool `json:"disabled"`
	Reference *LauncherRequestReference `json:"reference,omitempty"`
	// JSON configuration associated with this Launcher, restricted to a max size of 4KB 
	Config string `json:"config" validate:"regexp=^\\\\{\\\\}$"`
	AdditionalProperties map[string]interface{}
}

type _LauncherRequest LauncherRequest

// NewLauncherRequest instantiates a new LauncherRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLauncherRequest(name string, description string, type_ string, disabled bool, config string) *LauncherRequest {
	this := LauncherRequest{}
	this.Name = name
	this.Description = description
	this.Type = type_
	this.Disabled = disabled
	this.Config = config
	return &this
}

// NewLauncherRequestWithDefaults instantiates a new LauncherRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLauncherRequestWithDefaults() *LauncherRequest {
	this := LauncherRequest{}
	return &this
}

// GetName returns the Name field value
func (o *LauncherRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *LauncherRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *LauncherRequest) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *LauncherRequest) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *LauncherRequest) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *LauncherRequest) SetDescription(v string) {
	o.Description = v
}

// GetType returns the Type field value
func (o *LauncherRequest) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *LauncherRequest) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *LauncherRequest) SetType(v string) {
	o.Type = v
}

// GetDisabled returns the Disabled field value
func (o *LauncherRequest) GetDisabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value
// and a boolean to check if the value has been set.
func (o *LauncherRequest) GetDisabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Disabled, true
}

// SetDisabled sets field value
func (o *LauncherRequest) SetDisabled(v bool) {
	o.Disabled = v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *LauncherRequest) GetReference() LauncherRequestReference {
	if o == nil || IsNil(o.Reference) {
		var ret LauncherRequestReference
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LauncherRequest) GetReferenceOk() (*LauncherRequestReference, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *LauncherRequest) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given LauncherRequestReference and assigns it to the Reference field.
func (o *LauncherRequest) SetReference(v LauncherRequestReference) {
	o.Reference = &v
}

// GetConfig returns the Config field value
func (o *LauncherRequest) GetConfig() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *LauncherRequest) GetConfigOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Config, true
}

// SetConfig sets field value
func (o *LauncherRequest) SetConfig(v string) {
	o.Config = v
}

func (o LauncherRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LauncherRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	toSerialize["type"] = o.Type
	toSerialize["disabled"] = o.Disabled
	if !IsNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	toSerialize["config"] = o.Config

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LauncherRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"description",
		"type",
		"disabled",
		"config",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLauncherRequest := _LauncherRequest{}

	err = json.Unmarshal(data, &varLauncherRequest)

	if err != nil {
		return err
	}

	*o = LauncherRequest(varLauncherRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "type")
		delete(additionalProperties, "disabled")
		delete(additionalProperties, "reference")
		delete(additionalProperties, "config")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLauncherRequest struct {
	value *LauncherRequest
	isSet bool
}

func (v NullableLauncherRequest) Get() *LauncherRequest {
	return v.value
}

func (v *NullableLauncherRequest) Set(val *LauncherRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableLauncherRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableLauncherRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLauncherRequest(val *LauncherRequest) *NullableLauncherRequest {
	return &NullableLauncherRequest{value: val, isSet: true}
}

func (v NullableLauncherRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLauncherRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


