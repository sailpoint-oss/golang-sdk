/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
)

// checks if the ApprovalConfigEscalationConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApprovalConfigEscalationConfig{}

// ApprovalConfigEscalationConfig Configuration for escalations.
type ApprovalConfigEscalationConfig struct {
	// Indicates if escalations are enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// Number of days until the first escalation.
	DaysUntilFirstEscalation *int64 `json:"daysUntilFirstEscalation,omitempty"`
	// Cron schedule for escalations.
	EscalationCronSchedule *string `json:"escalationCronSchedule,omitempty"`
	// Escalation chain configuration.
	EscalationChain []ApprovalConfigEscalationConfigEscalationChainInner `json:"escalationChain,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ApprovalConfigEscalationConfig ApprovalConfigEscalationConfig

// NewApprovalConfigEscalationConfig instantiates a new ApprovalConfigEscalationConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApprovalConfigEscalationConfig() *ApprovalConfigEscalationConfig {
	this := ApprovalConfigEscalationConfig{}
	var enabled bool = false
	this.Enabled = &enabled
	return &this
}

// NewApprovalConfigEscalationConfigWithDefaults instantiates a new ApprovalConfigEscalationConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApprovalConfigEscalationConfigWithDefaults() *ApprovalConfigEscalationConfig {
	this := ApprovalConfigEscalationConfig{}
	var enabled bool = false
	this.Enabled = &enabled
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ApprovalConfigEscalationConfig) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalConfigEscalationConfig) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ApprovalConfigEscalationConfig) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ApprovalConfigEscalationConfig) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetDaysUntilFirstEscalation returns the DaysUntilFirstEscalation field value if set, zero value otherwise.
func (o *ApprovalConfigEscalationConfig) GetDaysUntilFirstEscalation() int64 {
	if o == nil || IsNil(o.DaysUntilFirstEscalation) {
		var ret int64
		return ret
	}
	return *o.DaysUntilFirstEscalation
}

// GetDaysUntilFirstEscalationOk returns a tuple with the DaysUntilFirstEscalation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalConfigEscalationConfig) GetDaysUntilFirstEscalationOk() (*int64, bool) {
	if o == nil || IsNil(o.DaysUntilFirstEscalation) {
		return nil, false
	}
	return o.DaysUntilFirstEscalation, true
}

// HasDaysUntilFirstEscalation returns a boolean if a field has been set.
func (o *ApprovalConfigEscalationConfig) HasDaysUntilFirstEscalation() bool {
	if o != nil && !IsNil(o.DaysUntilFirstEscalation) {
		return true
	}

	return false
}

// SetDaysUntilFirstEscalation gets a reference to the given int64 and assigns it to the DaysUntilFirstEscalation field.
func (o *ApprovalConfigEscalationConfig) SetDaysUntilFirstEscalation(v int64) {
	o.DaysUntilFirstEscalation = &v
}

// GetEscalationCronSchedule returns the EscalationCronSchedule field value if set, zero value otherwise.
func (o *ApprovalConfigEscalationConfig) GetEscalationCronSchedule() string {
	if o == nil || IsNil(o.EscalationCronSchedule) {
		var ret string
		return ret
	}
	return *o.EscalationCronSchedule
}

// GetEscalationCronScheduleOk returns a tuple with the EscalationCronSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalConfigEscalationConfig) GetEscalationCronScheduleOk() (*string, bool) {
	if o == nil || IsNil(o.EscalationCronSchedule) {
		return nil, false
	}
	return o.EscalationCronSchedule, true
}

// HasEscalationCronSchedule returns a boolean if a field has been set.
func (o *ApprovalConfigEscalationConfig) HasEscalationCronSchedule() bool {
	if o != nil && !IsNil(o.EscalationCronSchedule) {
		return true
	}

	return false
}

// SetEscalationCronSchedule gets a reference to the given string and assigns it to the EscalationCronSchedule field.
func (o *ApprovalConfigEscalationConfig) SetEscalationCronSchedule(v string) {
	o.EscalationCronSchedule = &v
}

// GetEscalationChain returns the EscalationChain field value if set, zero value otherwise.
func (o *ApprovalConfigEscalationConfig) GetEscalationChain() []ApprovalConfigEscalationConfigEscalationChainInner {
	if o == nil || IsNil(o.EscalationChain) {
		var ret []ApprovalConfigEscalationConfigEscalationChainInner
		return ret
	}
	return o.EscalationChain
}

// GetEscalationChainOk returns a tuple with the EscalationChain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalConfigEscalationConfig) GetEscalationChainOk() ([]ApprovalConfigEscalationConfigEscalationChainInner, bool) {
	if o == nil || IsNil(o.EscalationChain) {
		return nil, false
	}
	return o.EscalationChain, true
}

// HasEscalationChain returns a boolean if a field has been set.
func (o *ApprovalConfigEscalationConfig) HasEscalationChain() bool {
	if o != nil && !IsNil(o.EscalationChain) {
		return true
	}

	return false
}

// SetEscalationChain gets a reference to the given []ApprovalConfigEscalationConfigEscalationChainInner and assigns it to the EscalationChain field.
func (o *ApprovalConfigEscalationConfig) SetEscalationChain(v []ApprovalConfigEscalationConfigEscalationChainInner) {
	o.EscalationChain = v
}

func (o ApprovalConfigEscalationConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApprovalConfigEscalationConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.DaysUntilFirstEscalation) {
		toSerialize["daysUntilFirstEscalation"] = o.DaysUntilFirstEscalation
	}
	if !IsNil(o.EscalationCronSchedule) {
		toSerialize["escalationCronSchedule"] = o.EscalationCronSchedule
	}
	if !IsNil(o.EscalationChain) {
		toSerialize["escalationChain"] = o.EscalationChain
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ApprovalConfigEscalationConfig) UnmarshalJSON(data []byte) (err error) {
	varApprovalConfigEscalationConfig := _ApprovalConfigEscalationConfig{}

	err = json.Unmarshal(data, &varApprovalConfigEscalationConfig)

	if err != nil {
		return err
	}

	*o = ApprovalConfigEscalationConfig(varApprovalConfigEscalationConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "daysUntilFirstEscalation")
		delete(additionalProperties, "escalationCronSchedule")
		delete(additionalProperties, "escalationChain")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApprovalConfigEscalationConfig struct {
	value *ApprovalConfigEscalationConfig
	isSet bool
}

func (v NullableApprovalConfigEscalationConfig) Get() *ApprovalConfigEscalationConfig {
	return v.value
}

func (v *NullableApprovalConfigEscalationConfig) Set(val *ApprovalConfigEscalationConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableApprovalConfigEscalationConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableApprovalConfigEscalationConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApprovalConfigEscalationConfig(val *ApprovalConfigEscalationConfig) *NullableApprovalConfigEscalationConfig {
	return &NullableApprovalConfigEscalationConfig{value: val, isSet: true}
}

func (v NullableApprovalConfigEscalationConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApprovalConfigEscalationConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


