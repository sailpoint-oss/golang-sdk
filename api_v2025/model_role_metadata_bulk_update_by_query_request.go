/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
	"fmt"
)

// checks if the RoleMetadataBulkUpdateByQueryRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoleMetadataBulkUpdateByQueryRequest{}

// RoleMetadataBulkUpdateByQueryRequest Bulk update by query request of Role metadata. The maximum meta data values that one single role assigned can not exceed 25. Custom metadata need suit licensed. For more information about the query could refer to  [V3 API Perform Search](https://developer.sailpoint.com/docs/api/v3/search-post)
type RoleMetadataBulkUpdateByQueryRequest struct {
	// query the identities to be updated
	Query map[string]interface{} `json:"query"`
	// The operation to be performed
	Operation string `json:"operation"`
	// The choice of update scope.
	ReplaceScope *string `json:"replaceScope,omitempty"`
	// The metadata to be updated, including attribute key and value.
	Values []RoleMetadataBulkUpdateByQueryRequestValuesInner `json:"values"`
	AdditionalProperties map[string]interface{}
}

type _RoleMetadataBulkUpdateByQueryRequest RoleMetadataBulkUpdateByQueryRequest

// NewRoleMetadataBulkUpdateByQueryRequest instantiates a new RoleMetadataBulkUpdateByQueryRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleMetadataBulkUpdateByQueryRequest(query map[string]interface{}, operation string, values []RoleMetadataBulkUpdateByQueryRequestValuesInner) *RoleMetadataBulkUpdateByQueryRequest {
	this := RoleMetadataBulkUpdateByQueryRequest{}
	this.Query = query
	this.Operation = operation
	this.Values = values
	return &this
}

// NewRoleMetadataBulkUpdateByQueryRequestWithDefaults instantiates a new RoleMetadataBulkUpdateByQueryRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleMetadataBulkUpdateByQueryRequestWithDefaults() *RoleMetadataBulkUpdateByQueryRequest {
	this := RoleMetadataBulkUpdateByQueryRequest{}
	return &this
}

// GetQuery returns the Query field value
func (o *RoleMetadataBulkUpdateByQueryRequest) GetQuery() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Query
}

// GetQueryOk returns a tuple with the Query field value
// and a boolean to check if the value has been set.
func (o *RoleMetadataBulkUpdateByQueryRequest) GetQueryOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Query, true
}

// SetQuery sets field value
func (o *RoleMetadataBulkUpdateByQueryRequest) SetQuery(v map[string]interface{}) {
	o.Query = v
}

// GetOperation returns the Operation field value
func (o *RoleMetadataBulkUpdateByQueryRequest) GetOperation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operation
}

// GetOperationOk returns a tuple with the Operation field value
// and a boolean to check if the value has been set.
func (o *RoleMetadataBulkUpdateByQueryRequest) GetOperationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operation, true
}

// SetOperation sets field value
func (o *RoleMetadataBulkUpdateByQueryRequest) SetOperation(v string) {
	o.Operation = v
}

// GetReplaceScope returns the ReplaceScope field value if set, zero value otherwise.
func (o *RoleMetadataBulkUpdateByQueryRequest) GetReplaceScope() string {
	if o == nil || IsNil(o.ReplaceScope) {
		var ret string
		return ret
	}
	return *o.ReplaceScope
}

// GetReplaceScopeOk returns a tuple with the ReplaceScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleMetadataBulkUpdateByQueryRequest) GetReplaceScopeOk() (*string, bool) {
	if o == nil || IsNil(o.ReplaceScope) {
		return nil, false
	}
	return o.ReplaceScope, true
}

// HasReplaceScope returns a boolean if a field has been set.
func (o *RoleMetadataBulkUpdateByQueryRequest) HasReplaceScope() bool {
	if o != nil && !IsNil(o.ReplaceScope) {
		return true
	}

	return false
}

// SetReplaceScope gets a reference to the given string and assigns it to the ReplaceScope field.
func (o *RoleMetadataBulkUpdateByQueryRequest) SetReplaceScope(v string) {
	o.ReplaceScope = &v
}

// GetValues returns the Values field value
func (o *RoleMetadataBulkUpdateByQueryRequest) GetValues() []RoleMetadataBulkUpdateByQueryRequestValuesInner {
	if o == nil {
		var ret []RoleMetadataBulkUpdateByQueryRequestValuesInner
		return ret
	}

	return o.Values
}

// GetValuesOk returns a tuple with the Values field value
// and a boolean to check if the value has been set.
func (o *RoleMetadataBulkUpdateByQueryRequest) GetValuesOk() ([]RoleMetadataBulkUpdateByQueryRequestValuesInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Values, true
}

// SetValues sets field value
func (o *RoleMetadataBulkUpdateByQueryRequest) SetValues(v []RoleMetadataBulkUpdateByQueryRequestValuesInner) {
	o.Values = v
}

func (o RoleMetadataBulkUpdateByQueryRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoleMetadataBulkUpdateByQueryRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["query"] = o.Query
	toSerialize["operation"] = o.Operation
	if !IsNil(o.ReplaceScope) {
		toSerialize["replaceScope"] = o.ReplaceScope
	}
	toSerialize["values"] = o.Values

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RoleMetadataBulkUpdateByQueryRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"query",
		"operation",
		"values",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRoleMetadataBulkUpdateByQueryRequest := _RoleMetadataBulkUpdateByQueryRequest{}

	err = json.Unmarshal(data, &varRoleMetadataBulkUpdateByQueryRequest)

	if err != nil {
		return err
	}

	*o = RoleMetadataBulkUpdateByQueryRequest(varRoleMetadataBulkUpdateByQueryRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "query")
		delete(additionalProperties, "operation")
		delete(additionalProperties, "replaceScope")
		delete(additionalProperties, "values")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRoleMetadataBulkUpdateByQueryRequest struct {
	value *RoleMetadataBulkUpdateByQueryRequest
	isSet bool
}

func (v NullableRoleMetadataBulkUpdateByQueryRequest) Get() *RoleMetadataBulkUpdateByQueryRequest {
	return v.value
}

func (v *NullableRoleMetadataBulkUpdateByQueryRequest) Set(val *RoleMetadataBulkUpdateByQueryRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleMetadataBulkUpdateByQueryRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleMetadataBulkUpdateByQueryRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleMetadataBulkUpdateByQueryRequest(val *RoleMetadataBulkUpdateByQueryRequest) *NullableRoleMetadataBulkUpdateByQueryRequest {
	return &NullableRoleMetadataBulkUpdateByQueryRequest{value: val, isSet: true}
}

func (v NullableRoleMetadataBulkUpdateByQueryRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleMetadataBulkUpdateByQueryRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


