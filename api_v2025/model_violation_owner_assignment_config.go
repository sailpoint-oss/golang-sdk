/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
)

// checks if the ViolationOwnerAssignmentConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ViolationOwnerAssignmentConfig{}

// ViolationOwnerAssignmentConfig struct for ViolationOwnerAssignmentConfig
type ViolationOwnerAssignmentConfig struct {
	// Details about the violations owner. MANAGER - identity's manager STATIC - Governance Group or Identity
	AssignmentRule NullableString `json:"assignmentRule,omitempty"`
	OwnerRef NullableViolationOwnerAssignmentConfigOwnerRef `json:"ownerRef,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ViolationOwnerAssignmentConfig ViolationOwnerAssignmentConfig

// NewViolationOwnerAssignmentConfig instantiates a new ViolationOwnerAssignmentConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViolationOwnerAssignmentConfig() *ViolationOwnerAssignmentConfig {
	this := ViolationOwnerAssignmentConfig{}
	return &this
}

// NewViolationOwnerAssignmentConfigWithDefaults instantiates a new ViolationOwnerAssignmentConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViolationOwnerAssignmentConfigWithDefaults() *ViolationOwnerAssignmentConfig {
	this := ViolationOwnerAssignmentConfig{}
	return &this
}

// GetAssignmentRule returns the AssignmentRule field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViolationOwnerAssignmentConfig) GetAssignmentRule() string {
	if o == nil || IsNil(o.AssignmentRule.Get()) {
		var ret string
		return ret
	}
	return *o.AssignmentRule.Get()
}

// GetAssignmentRuleOk returns a tuple with the AssignmentRule field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViolationOwnerAssignmentConfig) GetAssignmentRuleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AssignmentRule.Get(), o.AssignmentRule.IsSet()
}

// HasAssignmentRule returns a boolean if a field has been set.
func (o *ViolationOwnerAssignmentConfig) HasAssignmentRule() bool {
	if o != nil && o.AssignmentRule.IsSet() {
		return true
	}

	return false
}

// SetAssignmentRule gets a reference to the given NullableString and assigns it to the AssignmentRule field.
func (o *ViolationOwnerAssignmentConfig) SetAssignmentRule(v string) {
	o.AssignmentRule.Set(&v)
}
// SetAssignmentRuleNil sets the value for AssignmentRule to be an explicit nil
func (o *ViolationOwnerAssignmentConfig) SetAssignmentRuleNil() {
	o.AssignmentRule.Set(nil)
}

// UnsetAssignmentRule ensures that no value is present for AssignmentRule, not even an explicit nil
func (o *ViolationOwnerAssignmentConfig) UnsetAssignmentRule() {
	o.AssignmentRule.Unset()
}

// GetOwnerRef returns the OwnerRef field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViolationOwnerAssignmentConfig) GetOwnerRef() ViolationOwnerAssignmentConfigOwnerRef {
	if o == nil || IsNil(o.OwnerRef.Get()) {
		var ret ViolationOwnerAssignmentConfigOwnerRef
		return ret
	}
	return *o.OwnerRef.Get()
}

// GetOwnerRefOk returns a tuple with the OwnerRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViolationOwnerAssignmentConfig) GetOwnerRefOk() (*ViolationOwnerAssignmentConfigOwnerRef, bool) {
	if o == nil {
		return nil, false
	}
	return o.OwnerRef.Get(), o.OwnerRef.IsSet()
}

// HasOwnerRef returns a boolean if a field has been set.
func (o *ViolationOwnerAssignmentConfig) HasOwnerRef() bool {
	if o != nil && o.OwnerRef.IsSet() {
		return true
	}

	return false
}

// SetOwnerRef gets a reference to the given NullableViolationOwnerAssignmentConfigOwnerRef and assigns it to the OwnerRef field.
func (o *ViolationOwnerAssignmentConfig) SetOwnerRef(v ViolationOwnerAssignmentConfigOwnerRef) {
	o.OwnerRef.Set(&v)
}
// SetOwnerRefNil sets the value for OwnerRef to be an explicit nil
func (o *ViolationOwnerAssignmentConfig) SetOwnerRefNil() {
	o.OwnerRef.Set(nil)
}

// UnsetOwnerRef ensures that no value is present for OwnerRef, not even an explicit nil
func (o *ViolationOwnerAssignmentConfig) UnsetOwnerRef() {
	o.OwnerRef.Unset()
}

func (o ViolationOwnerAssignmentConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ViolationOwnerAssignmentConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AssignmentRule.IsSet() {
		toSerialize["assignmentRule"] = o.AssignmentRule.Get()
	}
	if o.OwnerRef.IsSet() {
		toSerialize["ownerRef"] = o.OwnerRef.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ViolationOwnerAssignmentConfig) UnmarshalJSON(data []byte) (err error) {
	varViolationOwnerAssignmentConfig := _ViolationOwnerAssignmentConfig{}

	err = json.Unmarshal(data, &varViolationOwnerAssignmentConfig)

	if err != nil {
		return err
	}

	*o = ViolationOwnerAssignmentConfig(varViolationOwnerAssignmentConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "assignmentRule")
		delete(additionalProperties, "ownerRef")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableViolationOwnerAssignmentConfig struct {
	value *ViolationOwnerAssignmentConfig
	isSet bool
}

func (v NullableViolationOwnerAssignmentConfig) Get() *ViolationOwnerAssignmentConfig {
	return v.value
}

func (v *NullableViolationOwnerAssignmentConfig) Set(val *ViolationOwnerAssignmentConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableViolationOwnerAssignmentConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableViolationOwnerAssignmentConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViolationOwnerAssignmentConfig(val *ViolationOwnerAssignmentConfig) *NullableViolationOwnerAssignmentConfig {
	return &NullableViolationOwnerAssignmentConfig{value: val, isSet: true}
}

func (v NullableViolationOwnerAssignmentConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViolationOwnerAssignmentConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


