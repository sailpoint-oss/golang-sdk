/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
	
)

// checks if the UserLevelSummaryDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserLevelSummaryDTO{}

// UserLevelSummaryDTO It represents a summary of a user level, including its metadata, attributes, and associated properties.
type UserLevelSummaryDTO struct {
	// The unique identifier of the UserLevel.
	Id *string `json:"id,omitempty"`
	// The human-readable name of the UserLevel.
	Name *string `json:"name,omitempty"`
	// A human-readable description of the UserLevel.
	Description NullableString `json:"description,omitempty"`
	// The legacy group associated with the UserLevel, used for backward compatibility for the UserLevel id.
	LegacyGroup NullableString `json:"legacyGroup,omitempty"`
	// List of RightSets associated with the UserLevel.
	RightSets []RightSetDTO `json:"rightSets,omitempty"`
	// Indicates whether the UserLevel is custom.
	Custom *bool `json:"custom,omitempty"`
	// Indicates whether the UserLevel is admin-assignable.
	AdminAssignable *bool `json:"adminAssignable,omitempty"`
	// The translated name of the UserLevel.
	TranslatedName NullableString `json:"translatedName,omitempty"`
	// The translated grant message for the UserLevel.
	TranslatedGrant NullableString `json:"translatedGrant,omitempty"`
	// The translated remove message for the UserLevel.
	TranslatedRemove NullableString `json:"translatedRemove,omitempty"`
	Owner *BaseReferenceDto `json:"owner,omitempty"`
	// The status of the UserLevel.
	Status *string `json:"status,omitempty"`
	// The creation timestamp of the UserLevel.
	Created *SailPointTime `json:"created,omitempty"`
	// The last modification timestamp of the UserLevel.
	Modified *SailPointTime `json:"modified,omitempty"`
	// The count of associated identities for the UserLevel.
	AssociatedIdentitiesCount NullableInt32 `json:"associatedIdentitiesCount,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UserLevelSummaryDTO UserLevelSummaryDTO

// NewUserLevelSummaryDTO instantiates a new UserLevelSummaryDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserLevelSummaryDTO() *UserLevelSummaryDTO {
	this := UserLevelSummaryDTO{}
	var custom bool = true
	this.Custom = &custom
	var adminAssignable bool = true
	this.AdminAssignable = &adminAssignable
	return &this
}

// NewUserLevelSummaryDTOWithDefaults instantiates a new UserLevelSummaryDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserLevelSummaryDTOWithDefaults() *UserLevelSummaryDTO {
	this := UserLevelSummaryDTO{}
	var custom bool = true
	this.Custom = &custom
	var adminAssignable bool = true
	this.AdminAssignable = &adminAssignable
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UserLevelSummaryDTO) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLevelSummaryDTO) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UserLevelSummaryDTO) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UserLevelSummaryDTO) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UserLevelSummaryDTO) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLevelSummaryDTO) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UserLevelSummaryDTO) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UserLevelSummaryDTO) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserLevelSummaryDTO) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserLevelSummaryDTO) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *UserLevelSummaryDTO) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *UserLevelSummaryDTO) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *UserLevelSummaryDTO) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *UserLevelSummaryDTO) UnsetDescription() {
	o.Description.Unset()
}

// GetLegacyGroup returns the LegacyGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserLevelSummaryDTO) GetLegacyGroup() string {
	if o == nil || IsNil(o.LegacyGroup.Get()) {
		var ret string
		return ret
	}
	return *o.LegacyGroup.Get()
}

// GetLegacyGroupOk returns a tuple with the LegacyGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserLevelSummaryDTO) GetLegacyGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LegacyGroup.Get(), o.LegacyGroup.IsSet()
}

// HasLegacyGroup returns a boolean if a field has been set.
func (o *UserLevelSummaryDTO) HasLegacyGroup() bool {
	if o != nil && o.LegacyGroup.IsSet() {
		return true
	}

	return false
}

// SetLegacyGroup gets a reference to the given NullableString and assigns it to the LegacyGroup field.
func (o *UserLevelSummaryDTO) SetLegacyGroup(v string) {
	o.LegacyGroup.Set(&v)
}
// SetLegacyGroupNil sets the value for LegacyGroup to be an explicit nil
func (o *UserLevelSummaryDTO) SetLegacyGroupNil() {
	o.LegacyGroup.Set(nil)
}

// UnsetLegacyGroup ensures that no value is present for LegacyGroup, not even an explicit nil
func (o *UserLevelSummaryDTO) UnsetLegacyGroup() {
	o.LegacyGroup.Unset()
}

// GetRightSets returns the RightSets field value if set, zero value otherwise.
func (o *UserLevelSummaryDTO) GetRightSets() []RightSetDTO {
	if o == nil || IsNil(o.RightSets) {
		var ret []RightSetDTO
		return ret
	}
	return o.RightSets
}

// GetRightSetsOk returns a tuple with the RightSets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLevelSummaryDTO) GetRightSetsOk() ([]RightSetDTO, bool) {
	if o == nil || IsNil(o.RightSets) {
		return nil, false
	}
	return o.RightSets, true
}

// HasRightSets returns a boolean if a field has been set.
func (o *UserLevelSummaryDTO) HasRightSets() bool {
	if o != nil && !IsNil(o.RightSets) {
		return true
	}

	return false
}

// SetRightSets gets a reference to the given []RightSetDTO and assigns it to the RightSets field.
func (o *UserLevelSummaryDTO) SetRightSets(v []RightSetDTO) {
	o.RightSets = v
}

// GetCustom returns the Custom field value if set, zero value otherwise.
func (o *UserLevelSummaryDTO) GetCustom() bool {
	if o == nil || IsNil(o.Custom) {
		var ret bool
		return ret
	}
	return *o.Custom
}

// GetCustomOk returns a tuple with the Custom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLevelSummaryDTO) GetCustomOk() (*bool, bool) {
	if o == nil || IsNil(o.Custom) {
		return nil, false
	}
	return o.Custom, true
}

// HasCustom returns a boolean if a field has been set.
func (o *UserLevelSummaryDTO) HasCustom() bool {
	if o != nil && !IsNil(o.Custom) {
		return true
	}

	return false
}

// SetCustom gets a reference to the given bool and assigns it to the Custom field.
func (o *UserLevelSummaryDTO) SetCustom(v bool) {
	o.Custom = &v
}

// GetAdminAssignable returns the AdminAssignable field value if set, zero value otherwise.
func (o *UserLevelSummaryDTO) GetAdminAssignable() bool {
	if o == nil || IsNil(o.AdminAssignable) {
		var ret bool
		return ret
	}
	return *o.AdminAssignable
}

// GetAdminAssignableOk returns a tuple with the AdminAssignable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLevelSummaryDTO) GetAdminAssignableOk() (*bool, bool) {
	if o == nil || IsNil(o.AdminAssignable) {
		return nil, false
	}
	return o.AdminAssignable, true
}

// HasAdminAssignable returns a boolean if a field has been set.
func (o *UserLevelSummaryDTO) HasAdminAssignable() bool {
	if o != nil && !IsNil(o.AdminAssignable) {
		return true
	}

	return false
}

// SetAdminAssignable gets a reference to the given bool and assigns it to the AdminAssignable field.
func (o *UserLevelSummaryDTO) SetAdminAssignable(v bool) {
	o.AdminAssignable = &v
}

// GetTranslatedName returns the TranslatedName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserLevelSummaryDTO) GetTranslatedName() string {
	if o == nil || IsNil(o.TranslatedName.Get()) {
		var ret string
		return ret
	}
	return *o.TranslatedName.Get()
}

// GetTranslatedNameOk returns a tuple with the TranslatedName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserLevelSummaryDTO) GetTranslatedNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TranslatedName.Get(), o.TranslatedName.IsSet()
}

// HasTranslatedName returns a boolean if a field has been set.
func (o *UserLevelSummaryDTO) HasTranslatedName() bool {
	if o != nil && o.TranslatedName.IsSet() {
		return true
	}

	return false
}

// SetTranslatedName gets a reference to the given NullableString and assigns it to the TranslatedName field.
func (o *UserLevelSummaryDTO) SetTranslatedName(v string) {
	o.TranslatedName.Set(&v)
}
// SetTranslatedNameNil sets the value for TranslatedName to be an explicit nil
func (o *UserLevelSummaryDTO) SetTranslatedNameNil() {
	o.TranslatedName.Set(nil)
}

// UnsetTranslatedName ensures that no value is present for TranslatedName, not even an explicit nil
func (o *UserLevelSummaryDTO) UnsetTranslatedName() {
	o.TranslatedName.Unset()
}

// GetTranslatedGrant returns the TranslatedGrant field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserLevelSummaryDTO) GetTranslatedGrant() string {
	if o == nil || IsNil(o.TranslatedGrant.Get()) {
		var ret string
		return ret
	}
	return *o.TranslatedGrant.Get()
}

// GetTranslatedGrantOk returns a tuple with the TranslatedGrant field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserLevelSummaryDTO) GetTranslatedGrantOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TranslatedGrant.Get(), o.TranslatedGrant.IsSet()
}

// HasTranslatedGrant returns a boolean if a field has been set.
func (o *UserLevelSummaryDTO) HasTranslatedGrant() bool {
	if o != nil && o.TranslatedGrant.IsSet() {
		return true
	}

	return false
}

// SetTranslatedGrant gets a reference to the given NullableString and assigns it to the TranslatedGrant field.
func (o *UserLevelSummaryDTO) SetTranslatedGrant(v string) {
	o.TranslatedGrant.Set(&v)
}
// SetTranslatedGrantNil sets the value for TranslatedGrant to be an explicit nil
func (o *UserLevelSummaryDTO) SetTranslatedGrantNil() {
	o.TranslatedGrant.Set(nil)
}

// UnsetTranslatedGrant ensures that no value is present for TranslatedGrant, not even an explicit nil
func (o *UserLevelSummaryDTO) UnsetTranslatedGrant() {
	o.TranslatedGrant.Unset()
}

// GetTranslatedRemove returns the TranslatedRemove field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserLevelSummaryDTO) GetTranslatedRemove() string {
	if o == nil || IsNil(o.TranslatedRemove.Get()) {
		var ret string
		return ret
	}
	return *o.TranslatedRemove.Get()
}

// GetTranslatedRemoveOk returns a tuple with the TranslatedRemove field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserLevelSummaryDTO) GetTranslatedRemoveOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TranslatedRemove.Get(), o.TranslatedRemove.IsSet()
}

// HasTranslatedRemove returns a boolean if a field has been set.
func (o *UserLevelSummaryDTO) HasTranslatedRemove() bool {
	if o != nil && o.TranslatedRemove.IsSet() {
		return true
	}

	return false
}

// SetTranslatedRemove gets a reference to the given NullableString and assigns it to the TranslatedRemove field.
func (o *UserLevelSummaryDTO) SetTranslatedRemove(v string) {
	o.TranslatedRemove.Set(&v)
}
// SetTranslatedRemoveNil sets the value for TranslatedRemove to be an explicit nil
func (o *UserLevelSummaryDTO) SetTranslatedRemoveNil() {
	o.TranslatedRemove.Set(nil)
}

// UnsetTranslatedRemove ensures that no value is present for TranslatedRemove, not even an explicit nil
func (o *UserLevelSummaryDTO) UnsetTranslatedRemove() {
	o.TranslatedRemove.Unset()
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *UserLevelSummaryDTO) GetOwner() BaseReferenceDto {
	if o == nil || IsNil(o.Owner) {
		var ret BaseReferenceDto
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLevelSummaryDTO) GetOwnerOk() (*BaseReferenceDto, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *UserLevelSummaryDTO) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given BaseReferenceDto and assigns it to the Owner field.
func (o *UserLevelSummaryDTO) SetOwner(v BaseReferenceDto) {
	o.Owner = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *UserLevelSummaryDTO) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLevelSummaryDTO) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *UserLevelSummaryDTO) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *UserLevelSummaryDTO) SetStatus(v string) {
	o.Status = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *UserLevelSummaryDTO) GetCreated() SailPointTime {
	if o == nil || IsNil(o.Created) {
		var ret SailPointTime
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLevelSummaryDTO) GetCreatedOk() (*SailPointTime, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *UserLevelSummaryDTO) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given SailPointTime and assigns it to the Created field.
func (o *UserLevelSummaryDTO) SetCreated(v SailPointTime) {
	o.Created = &v
}

// GetModified returns the Modified field value if set, zero value otherwise.
func (o *UserLevelSummaryDTO) GetModified() SailPointTime {
	if o == nil || IsNil(o.Modified) {
		var ret SailPointTime
		return ret
	}
	return *o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLevelSummaryDTO) GetModifiedOk() (*SailPointTime, bool) {
	if o == nil || IsNil(o.Modified) {
		return nil, false
	}
	return o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *UserLevelSummaryDTO) HasModified() bool {
	if o != nil && !IsNil(o.Modified) {
		return true
	}

	return false
}

// SetModified gets a reference to the given SailPointTime and assigns it to the Modified field.
func (o *UserLevelSummaryDTO) SetModified(v SailPointTime) {
	o.Modified = &v
}

// GetAssociatedIdentitiesCount returns the AssociatedIdentitiesCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserLevelSummaryDTO) GetAssociatedIdentitiesCount() int32 {
	if o == nil || IsNil(o.AssociatedIdentitiesCount.Get()) {
		var ret int32
		return ret
	}
	return *o.AssociatedIdentitiesCount.Get()
}

// GetAssociatedIdentitiesCountOk returns a tuple with the AssociatedIdentitiesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserLevelSummaryDTO) GetAssociatedIdentitiesCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AssociatedIdentitiesCount.Get(), o.AssociatedIdentitiesCount.IsSet()
}

// HasAssociatedIdentitiesCount returns a boolean if a field has been set.
func (o *UserLevelSummaryDTO) HasAssociatedIdentitiesCount() bool {
	if o != nil && o.AssociatedIdentitiesCount.IsSet() {
		return true
	}

	return false
}

// SetAssociatedIdentitiesCount gets a reference to the given NullableInt32 and assigns it to the AssociatedIdentitiesCount field.
func (o *UserLevelSummaryDTO) SetAssociatedIdentitiesCount(v int32) {
	o.AssociatedIdentitiesCount.Set(&v)
}
// SetAssociatedIdentitiesCountNil sets the value for AssociatedIdentitiesCount to be an explicit nil
func (o *UserLevelSummaryDTO) SetAssociatedIdentitiesCountNil() {
	o.AssociatedIdentitiesCount.Set(nil)
}

// UnsetAssociatedIdentitiesCount ensures that no value is present for AssociatedIdentitiesCount, not even an explicit nil
func (o *UserLevelSummaryDTO) UnsetAssociatedIdentitiesCount() {
	o.AssociatedIdentitiesCount.Unset()
}

func (o UserLevelSummaryDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserLevelSummaryDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.LegacyGroup.IsSet() {
		toSerialize["legacyGroup"] = o.LegacyGroup.Get()
	}
	if !IsNil(o.RightSets) {
		toSerialize["rightSets"] = o.RightSets
	}
	if !IsNil(o.Custom) {
		toSerialize["custom"] = o.Custom
	}
	if !IsNil(o.AdminAssignable) {
		toSerialize["adminAssignable"] = o.AdminAssignable
	}
	if o.TranslatedName.IsSet() {
		toSerialize["translatedName"] = o.TranslatedName.Get()
	}
	if o.TranslatedGrant.IsSet() {
		toSerialize["translatedGrant"] = o.TranslatedGrant.Get()
	}
	if o.TranslatedRemove.IsSet() {
		toSerialize["translatedRemove"] = o.TranslatedRemove.Get()
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Modified) {
		toSerialize["modified"] = o.Modified
	}
	if o.AssociatedIdentitiesCount.IsSet() {
		toSerialize["associatedIdentitiesCount"] = o.AssociatedIdentitiesCount.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UserLevelSummaryDTO) UnmarshalJSON(data []byte) (err error) {
	varUserLevelSummaryDTO := _UserLevelSummaryDTO{}

	err = json.Unmarshal(data, &varUserLevelSummaryDTO)

	if err != nil {
		return err
	}

	*o = UserLevelSummaryDTO(varUserLevelSummaryDTO)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "legacyGroup")
		delete(additionalProperties, "rightSets")
		delete(additionalProperties, "custom")
		delete(additionalProperties, "adminAssignable")
		delete(additionalProperties, "translatedName")
		delete(additionalProperties, "translatedGrant")
		delete(additionalProperties, "translatedRemove")
		delete(additionalProperties, "owner")
		delete(additionalProperties, "status")
		delete(additionalProperties, "created")
		delete(additionalProperties, "modified")
		delete(additionalProperties, "associatedIdentitiesCount")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserLevelSummaryDTO struct {
	value *UserLevelSummaryDTO
	isSet bool
}

func (v NullableUserLevelSummaryDTO) Get() *UserLevelSummaryDTO {
	return v.value
}

func (v *NullableUserLevelSummaryDTO) Set(val *UserLevelSummaryDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableUserLevelSummaryDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableUserLevelSummaryDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserLevelSummaryDTO(val *UserLevelSummaryDTO) *NullableUserLevelSummaryDTO {
	return &NullableUserLevelSummaryDTO{value: val, isSet: true}
}

func (v NullableUserLevelSummaryDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserLevelSummaryDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


