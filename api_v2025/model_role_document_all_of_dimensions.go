/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
)

// checks if the RoleDocumentAllOfDimensions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoleDocumentAllOfDimensions{}

// RoleDocumentAllOfDimensions struct for RoleDocumentAllOfDimensions
type RoleDocumentAllOfDimensions struct {
	// Unique ID of the dimension.
	Id *string `json:"id,omitempty"`
	// Name of the dimension.
	Name *string `json:"name,omitempty"`
	// Description of the dimension.
	Description NullableString `json:"description,omitempty"`
	// Entitlements included with the role.
	Entitlements []RoleDocumentAllOfEntitlements1 `json:"entitlements,omitempty"`
	// Access profiles included in the dimension.
	AccessProfiles []BaseAccessProfile `json:"accessProfiles,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RoleDocumentAllOfDimensions RoleDocumentAllOfDimensions

// NewRoleDocumentAllOfDimensions instantiates a new RoleDocumentAllOfDimensions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleDocumentAllOfDimensions() *RoleDocumentAllOfDimensions {
	this := RoleDocumentAllOfDimensions{}
	return &this
}

// NewRoleDocumentAllOfDimensionsWithDefaults instantiates a new RoleDocumentAllOfDimensions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleDocumentAllOfDimensionsWithDefaults() *RoleDocumentAllOfDimensions {
	this := RoleDocumentAllOfDimensions{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RoleDocumentAllOfDimensions) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleDocumentAllOfDimensions) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RoleDocumentAllOfDimensions) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RoleDocumentAllOfDimensions) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RoleDocumentAllOfDimensions) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleDocumentAllOfDimensions) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RoleDocumentAllOfDimensions) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RoleDocumentAllOfDimensions) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RoleDocumentAllOfDimensions) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RoleDocumentAllOfDimensions) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *RoleDocumentAllOfDimensions) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *RoleDocumentAllOfDimensions) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *RoleDocumentAllOfDimensions) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *RoleDocumentAllOfDimensions) UnsetDescription() {
	o.Description.Unset()
}

// GetEntitlements returns the Entitlements field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RoleDocumentAllOfDimensions) GetEntitlements() []RoleDocumentAllOfEntitlements1 {
	if o == nil {
		var ret []RoleDocumentAllOfEntitlements1
		return ret
	}
	return o.Entitlements
}

// GetEntitlementsOk returns a tuple with the Entitlements field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RoleDocumentAllOfDimensions) GetEntitlementsOk() ([]RoleDocumentAllOfEntitlements1, bool) {
	if o == nil || IsNil(o.Entitlements) {
		return nil, false
	}
	return o.Entitlements, true
}

// HasEntitlements returns a boolean if a field has been set.
func (o *RoleDocumentAllOfDimensions) HasEntitlements() bool {
	if o != nil && !IsNil(o.Entitlements) {
		return true
	}

	return false
}

// SetEntitlements gets a reference to the given []RoleDocumentAllOfEntitlements1 and assigns it to the Entitlements field.
func (o *RoleDocumentAllOfDimensions) SetEntitlements(v []RoleDocumentAllOfEntitlements1) {
	o.Entitlements = v
}

// GetAccessProfiles returns the AccessProfiles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RoleDocumentAllOfDimensions) GetAccessProfiles() []BaseAccessProfile {
	if o == nil {
		var ret []BaseAccessProfile
		return ret
	}
	return o.AccessProfiles
}

// GetAccessProfilesOk returns a tuple with the AccessProfiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RoleDocumentAllOfDimensions) GetAccessProfilesOk() ([]BaseAccessProfile, bool) {
	if o == nil || IsNil(o.AccessProfiles) {
		return nil, false
	}
	return o.AccessProfiles, true
}

// HasAccessProfiles returns a boolean if a field has been set.
func (o *RoleDocumentAllOfDimensions) HasAccessProfiles() bool {
	if o != nil && !IsNil(o.AccessProfiles) {
		return true
	}

	return false
}

// SetAccessProfiles gets a reference to the given []BaseAccessProfile and assigns it to the AccessProfiles field.
func (o *RoleDocumentAllOfDimensions) SetAccessProfiles(v []BaseAccessProfile) {
	o.AccessProfiles = v
}

func (o RoleDocumentAllOfDimensions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoleDocumentAllOfDimensions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Entitlements != nil {
		toSerialize["entitlements"] = o.Entitlements
	}
	if o.AccessProfiles != nil {
		toSerialize["accessProfiles"] = o.AccessProfiles
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RoleDocumentAllOfDimensions) UnmarshalJSON(data []byte) (err error) {
	varRoleDocumentAllOfDimensions := _RoleDocumentAllOfDimensions{}

	err = json.Unmarshal(data, &varRoleDocumentAllOfDimensions)

	if err != nil {
		return err
	}

	*o = RoleDocumentAllOfDimensions(varRoleDocumentAllOfDimensions)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "entitlements")
		delete(additionalProperties, "accessProfiles")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRoleDocumentAllOfDimensions struct {
	value *RoleDocumentAllOfDimensions
	isSet bool
}

func (v NullableRoleDocumentAllOfDimensions) Get() *RoleDocumentAllOfDimensions {
	return v.value
}

func (v *NullableRoleDocumentAllOfDimensions) Set(val *RoleDocumentAllOfDimensions) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleDocumentAllOfDimensions) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleDocumentAllOfDimensions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleDocumentAllOfDimensions(val *RoleDocumentAllOfDimensions) *NullableRoleDocumentAllOfDimensions {
	return &NullableRoleDocumentAllOfDimensions{value: val, isSet: true}
}

func (v NullableRoleDocumentAllOfDimensions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleDocumentAllOfDimensions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


