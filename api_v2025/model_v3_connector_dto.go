/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
)

// checks if the V3ConnectorDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V3ConnectorDto{}

// V3ConnectorDto struct for V3ConnectorDto
type V3ConnectorDto struct {
	// The connector name
	Name *string `json:"name,omitempty"`
	// The connector type
	Type *string `json:"type,omitempty"`
	// The connector script name
	ScriptName *string `json:"scriptName,omitempty"`
	// The connector class name.
	ClassName NullableString `json:"className,omitempty"`
	// The list of features supported by the connector
	Features []string `json:"features,omitempty"`
	// true if the source is a direct connect source
	DirectConnect *bool `json:"directConnect,omitempty"`
	// A map containing metadata pertinent to the connector
	ConnectorMetadata map[string]interface{} `json:"connectorMetadata,omitempty"`
	// The connector status
	Status *string `json:"status,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _V3ConnectorDto V3ConnectorDto

// NewV3ConnectorDto instantiates a new V3ConnectorDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV3ConnectorDto() *V3ConnectorDto {
	this := V3ConnectorDto{}
	var directConnect bool = false
	this.DirectConnect = &directConnect
	return &this
}

// NewV3ConnectorDtoWithDefaults instantiates a new V3ConnectorDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV3ConnectorDtoWithDefaults() *V3ConnectorDto {
	this := V3ConnectorDto{}
	var directConnect bool = false
	this.DirectConnect = &directConnect
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V3ConnectorDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V3ConnectorDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V3ConnectorDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V3ConnectorDto) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *V3ConnectorDto) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V3ConnectorDto) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *V3ConnectorDto) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *V3ConnectorDto) SetType(v string) {
	o.Type = &v
}

// GetScriptName returns the ScriptName field value if set, zero value otherwise.
func (o *V3ConnectorDto) GetScriptName() string {
	if o == nil || IsNil(o.ScriptName) {
		var ret string
		return ret
	}
	return *o.ScriptName
}

// GetScriptNameOk returns a tuple with the ScriptName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V3ConnectorDto) GetScriptNameOk() (*string, bool) {
	if o == nil || IsNil(o.ScriptName) {
		return nil, false
	}
	return o.ScriptName, true
}

// HasScriptName returns a boolean if a field has been set.
func (o *V3ConnectorDto) HasScriptName() bool {
	if o != nil && !IsNil(o.ScriptName) {
		return true
	}

	return false
}

// SetScriptName gets a reference to the given string and assigns it to the ScriptName field.
func (o *V3ConnectorDto) SetScriptName(v string) {
	o.ScriptName = &v
}

// GetClassName returns the ClassName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *V3ConnectorDto) GetClassName() string {
	if o == nil || IsNil(o.ClassName.Get()) {
		var ret string
		return ret
	}
	return *o.ClassName.Get()
}

// GetClassNameOk returns a tuple with the ClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *V3ConnectorDto) GetClassNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClassName.Get(), o.ClassName.IsSet()
}

// HasClassName returns a boolean if a field has been set.
func (o *V3ConnectorDto) HasClassName() bool {
	if o != nil && o.ClassName.IsSet() {
		return true
	}

	return false
}

// SetClassName gets a reference to the given NullableString and assigns it to the ClassName field.
func (o *V3ConnectorDto) SetClassName(v string) {
	o.ClassName.Set(&v)
}
// SetClassNameNil sets the value for ClassName to be an explicit nil
func (o *V3ConnectorDto) SetClassNameNil() {
	o.ClassName.Set(nil)
}

// UnsetClassName ensures that no value is present for ClassName, not even an explicit nil
func (o *V3ConnectorDto) UnsetClassName() {
	o.ClassName.Unset()
}

// GetFeatures returns the Features field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *V3ConnectorDto) GetFeatures() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Features
}

// GetFeaturesOk returns a tuple with the Features field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *V3ConnectorDto) GetFeaturesOk() ([]string, bool) {
	if o == nil || IsNil(o.Features) {
		return nil, false
	}
	return o.Features, true
}

// HasFeatures returns a boolean if a field has been set.
func (o *V3ConnectorDto) HasFeatures() bool {
	if o != nil && !IsNil(o.Features) {
		return true
	}

	return false
}

// SetFeatures gets a reference to the given []string and assigns it to the Features field.
func (o *V3ConnectorDto) SetFeatures(v []string) {
	o.Features = v
}

// GetDirectConnect returns the DirectConnect field value if set, zero value otherwise.
func (o *V3ConnectorDto) GetDirectConnect() bool {
	if o == nil || IsNil(o.DirectConnect) {
		var ret bool
		return ret
	}
	return *o.DirectConnect
}

// GetDirectConnectOk returns a tuple with the DirectConnect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V3ConnectorDto) GetDirectConnectOk() (*bool, bool) {
	if o == nil || IsNil(o.DirectConnect) {
		return nil, false
	}
	return o.DirectConnect, true
}

// HasDirectConnect returns a boolean if a field has been set.
func (o *V3ConnectorDto) HasDirectConnect() bool {
	if o != nil && !IsNil(o.DirectConnect) {
		return true
	}

	return false
}

// SetDirectConnect gets a reference to the given bool and assigns it to the DirectConnect field.
func (o *V3ConnectorDto) SetDirectConnect(v bool) {
	o.DirectConnect = &v
}

// GetConnectorMetadata returns the ConnectorMetadata field value if set, zero value otherwise.
func (o *V3ConnectorDto) GetConnectorMetadata() map[string]interface{} {
	if o == nil || IsNil(o.ConnectorMetadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.ConnectorMetadata
}

// GetConnectorMetadataOk returns a tuple with the ConnectorMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V3ConnectorDto) GetConnectorMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ConnectorMetadata) {
		return map[string]interface{}{}, false
	}
	return o.ConnectorMetadata, true
}

// HasConnectorMetadata returns a boolean if a field has been set.
func (o *V3ConnectorDto) HasConnectorMetadata() bool {
	if o != nil && !IsNil(o.ConnectorMetadata) {
		return true
	}

	return false
}

// SetConnectorMetadata gets a reference to the given map[string]interface{} and assigns it to the ConnectorMetadata field.
func (o *V3ConnectorDto) SetConnectorMetadata(v map[string]interface{}) {
	o.ConnectorMetadata = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *V3ConnectorDto) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V3ConnectorDto) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *V3ConnectorDto) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *V3ConnectorDto) SetStatus(v string) {
	o.Status = &v
}

func (o V3ConnectorDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V3ConnectorDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.ScriptName) {
		toSerialize["scriptName"] = o.ScriptName
	}
	if o.ClassName.IsSet() {
		toSerialize["className"] = o.ClassName.Get()
	}
	if o.Features != nil {
		toSerialize["features"] = o.Features
	}
	if !IsNil(o.DirectConnect) {
		toSerialize["directConnect"] = o.DirectConnect
	}
	if !IsNil(o.ConnectorMetadata) {
		toSerialize["connectorMetadata"] = o.ConnectorMetadata
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *V3ConnectorDto) UnmarshalJSON(data []byte) (err error) {
	varV3ConnectorDto := _V3ConnectorDto{}

	err = json.Unmarshal(data, &varV3ConnectorDto)

	if err != nil {
		return err
	}

	*o = V3ConnectorDto(varV3ConnectorDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "type")
		delete(additionalProperties, "scriptName")
		delete(additionalProperties, "className")
		delete(additionalProperties, "features")
		delete(additionalProperties, "directConnect")
		delete(additionalProperties, "connectorMetadata")
		delete(additionalProperties, "status")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableV3ConnectorDto struct {
	value *V3ConnectorDto
	isSet bool
}

func (v NullableV3ConnectorDto) Get() *V3ConnectorDto {
	return v.value
}

func (v *NullableV3ConnectorDto) Set(val *V3ConnectorDto) {
	v.value = val
	v.isSet = true
}

func (v NullableV3ConnectorDto) IsSet() bool {
	return v.isSet
}

func (v *NullableV3ConnectorDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV3ConnectorDto(val *V3ConnectorDto) *NullableV3ConnectorDto {
	return &NullableV3ConnectorDto{value: val, isSet: true}
}

func (v NullableV3ConnectorDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV3ConnectorDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


