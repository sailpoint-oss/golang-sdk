/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
	"fmt"
)

// checks if the LauncherOwner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LauncherOwner{}

// LauncherOwner Owner of the Launcher
type LauncherOwner struct {
	// Owner type
	Type string `json:"type"`
	// Owner ID
	Id string `json:"id"`
	AdditionalProperties map[string]interface{}
}

type _LauncherOwner LauncherOwner

// NewLauncherOwner instantiates a new LauncherOwner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLauncherOwner(type_ string, id string) *LauncherOwner {
	this := LauncherOwner{}
	this.Type = type_
	this.Id = id
	return &this
}

// NewLauncherOwnerWithDefaults instantiates a new LauncherOwner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLauncherOwnerWithDefaults() *LauncherOwner {
	this := LauncherOwner{}
	return &this
}

// GetType returns the Type field value
func (o *LauncherOwner) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *LauncherOwner) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *LauncherOwner) SetType(v string) {
	o.Type = v
}

// GetId returns the Id field value
func (o *LauncherOwner) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *LauncherOwner) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *LauncherOwner) SetId(v string) {
	o.Id = v
}

func (o LauncherOwner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LauncherOwner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["id"] = o.Id

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LauncherOwner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLauncherOwner := _LauncherOwner{}

	err = json.Unmarshal(data, &varLauncherOwner)

	if err != nil {
		return err
	}

	*o = LauncherOwner(varLauncherOwner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLauncherOwner struct {
	value *LauncherOwner
	isSet bool
}

func (v NullableLauncherOwner) Get() *LauncherOwner {
	return v.value
}

func (v *NullableLauncherOwner) Set(val *LauncherOwner) {
	v.value = val
	v.isSet = true
}

func (v NullableLauncherOwner) IsSet() bool {
	return v.isSet
}

func (v *NullableLauncherOwner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLauncherOwner(val *LauncherOwner) *NullableLauncherOwner {
	return &NullableLauncherOwner{value: val, isSet: true}
}

func (v NullableLauncherOwner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLauncherOwner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


