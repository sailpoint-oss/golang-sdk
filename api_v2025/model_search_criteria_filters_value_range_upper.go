/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
)

// checks if the SearchCriteriaFiltersValueRangeUpper type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchCriteriaFiltersValueRangeUpper{}

// SearchCriteriaFiltersValueRangeUpper struct for SearchCriteriaFiltersValueRangeUpper
type SearchCriteriaFiltersValueRangeUpper struct {
	// The upper bound value.
	Value *string `json:"value,omitempty"`
	// Whether the upper bound is inclusive.
	Inclusive *bool `json:"inclusive,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SearchCriteriaFiltersValueRangeUpper SearchCriteriaFiltersValueRangeUpper

// NewSearchCriteriaFiltersValueRangeUpper instantiates a new SearchCriteriaFiltersValueRangeUpper object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchCriteriaFiltersValueRangeUpper() *SearchCriteriaFiltersValueRangeUpper {
	this := SearchCriteriaFiltersValueRangeUpper{}
	var inclusive bool = false
	this.Inclusive = &inclusive
	return &this
}

// NewSearchCriteriaFiltersValueRangeUpperWithDefaults instantiates a new SearchCriteriaFiltersValueRangeUpper object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchCriteriaFiltersValueRangeUpperWithDefaults() *SearchCriteriaFiltersValueRangeUpper {
	this := SearchCriteriaFiltersValueRangeUpper{}
	var inclusive bool = false
	this.Inclusive = &inclusive
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *SearchCriteriaFiltersValueRangeUpper) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCriteriaFiltersValueRangeUpper) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *SearchCriteriaFiltersValueRangeUpper) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *SearchCriteriaFiltersValueRangeUpper) SetValue(v string) {
	o.Value = &v
}

// GetInclusive returns the Inclusive field value if set, zero value otherwise.
func (o *SearchCriteriaFiltersValueRangeUpper) GetInclusive() bool {
	if o == nil || IsNil(o.Inclusive) {
		var ret bool
		return ret
	}
	return *o.Inclusive
}

// GetInclusiveOk returns a tuple with the Inclusive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCriteriaFiltersValueRangeUpper) GetInclusiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Inclusive) {
		return nil, false
	}
	return o.Inclusive, true
}

// HasInclusive returns a boolean if a field has been set.
func (o *SearchCriteriaFiltersValueRangeUpper) HasInclusive() bool {
	if o != nil && !IsNil(o.Inclusive) {
		return true
	}

	return false
}

// SetInclusive gets a reference to the given bool and assigns it to the Inclusive field.
func (o *SearchCriteriaFiltersValueRangeUpper) SetInclusive(v bool) {
	o.Inclusive = &v
}

func (o SearchCriteriaFiltersValueRangeUpper) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchCriteriaFiltersValueRangeUpper) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Inclusive) {
		toSerialize["inclusive"] = o.Inclusive
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SearchCriteriaFiltersValueRangeUpper) UnmarshalJSON(data []byte) (err error) {
	varSearchCriteriaFiltersValueRangeUpper := _SearchCriteriaFiltersValueRangeUpper{}

	err = json.Unmarshal(data, &varSearchCriteriaFiltersValueRangeUpper)

	if err != nil {
		return err
	}

	*o = SearchCriteriaFiltersValueRangeUpper(varSearchCriteriaFiltersValueRangeUpper)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "value")
		delete(additionalProperties, "inclusive")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSearchCriteriaFiltersValueRangeUpper struct {
	value *SearchCriteriaFiltersValueRangeUpper
	isSet bool
}

func (v NullableSearchCriteriaFiltersValueRangeUpper) Get() *SearchCriteriaFiltersValueRangeUpper {
	return v.value
}

func (v *NullableSearchCriteriaFiltersValueRangeUpper) Set(val *SearchCriteriaFiltersValueRangeUpper) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchCriteriaFiltersValueRangeUpper) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchCriteriaFiltersValueRangeUpper) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchCriteriaFiltersValueRangeUpper(val *SearchCriteriaFiltersValueRangeUpper) *NullableSearchCriteriaFiltersValueRangeUpper {
	return &NullableSearchCriteriaFiltersValueRangeUpper{value: val, isSet: true}
}

func (v NullableSearchCriteriaFiltersValueRangeUpper) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchCriteriaFiltersValueRangeUpper) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


