/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
)

// checks if the LoadUncorrelatedAccountsTask type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LoadUncorrelatedAccountsTask{}

// LoadUncorrelatedAccountsTask struct for LoadUncorrelatedAccountsTask
type LoadUncorrelatedAccountsTask struct {
	// The status of the result
	Success *bool `json:"success,omitempty"`
	Task *LoadUncorrelatedAccountsTaskTask `json:"task,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LoadUncorrelatedAccountsTask LoadUncorrelatedAccountsTask

// NewLoadUncorrelatedAccountsTask instantiates a new LoadUncorrelatedAccountsTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoadUncorrelatedAccountsTask() *LoadUncorrelatedAccountsTask {
	this := LoadUncorrelatedAccountsTask{}
	var success bool = true
	this.Success = &success
	return &this
}

// NewLoadUncorrelatedAccountsTaskWithDefaults instantiates a new LoadUncorrelatedAccountsTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoadUncorrelatedAccountsTaskWithDefaults() *LoadUncorrelatedAccountsTask {
	this := LoadUncorrelatedAccountsTask{}
	var success bool = true
	this.Success = &success
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *LoadUncorrelatedAccountsTask) GetSuccess() bool {
	if o == nil || IsNil(o.Success) {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadUncorrelatedAccountsTask) GetSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *LoadUncorrelatedAccountsTask) HasSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *LoadUncorrelatedAccountsTask) SetSuccess(v bool) {
	o.Success = &v
}

// GetTask returns the Task field value if set, zero value otherwise.
func (o *LoadUncorrelatedAccountsTask) GetTask() LoadUncorrelatedAccountsTaskTask {
	if o == nil || IsNil(o.Task) {
		var ret LoadUncorrelatedAccountsTaskTask
		return ret
	}
	return *o.Task
}

// GetTaskOk returns a tuple with the Task field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadUncorrelatedAccountsTask) GetTaskOk() (*LoadUncorrelatedAccountsTaskTask, bool) {
	if o == nil || IsNil(o.Task) {
		return nil, false
	}
	return o.Task, true
}

// HasTask returns a boolean if a field has been set.
func (o *LoadUncorrelatedAccountsTask) HasTask() bool {
	if o != nil && !IsNil(o.Task) {
		return true
	}

	return false
}

// SetTask gets a reference to the given LoadUncorrelatedAccountsTaskTask and assigns it to the Task field.
func (o *LoadUncorrelatedAccountsTask) SetTask(v LoadUncorrelatedAccountsTaskTask) {
	o.Task = &v
}

func (o LoadUncorrelatedAccountsTask) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LoadUncorrelatedAccountsTask) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	if !IsNil(o.Task) {
		toSerialize["task"] = o.Task
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LoadUncorrelatedAccountsTask) UnmarshalJSON(data []byte) (err error) {
	varLoadUncorrelatedAccountsTask := _LoadUncorrelatedAccountsTask{}

	err = json.Unmarshal(data, &varLoadUncorrelatedAccountsTask)

	if err != nil {
		return err
	}

	*o = LoadUncorrelatedAccountsTask(varLoadUncorrelatedAccountsTask)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "success")
		delete(additionalProperties, "task")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLoadUncorrelatedAccountsTask struct {
	value *LoadUncorrelatedAccountsTask
	isSet bool
}

func (v NullableLoadUncorrelatedAccountsTask) Get() *LoadUncorrelatedAccountsTask {
	return v.value
}

func (v *NullableLoadUncorrelatedAccountsTask) Set(val *LoadUncorrelatedAccountsTask) {
	v.value = val
	v.isSet = true
}

func (v NullableLoadUncorrelatedAccountsTask) IsSet() bool {
	return v.isSet
}

func (v *NullableLoadUncorrelatedAccountsTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoadUncorrelatedAccountsTask(val *LoadUncorrelatedAccountsTask) *NullableLoadUncorrelatedAccountsTask {
	return &NullableLoadUncorrelatedAccountsTask{value: val, isSet: true}
}

func (v NullableLoadUncorrelatedAccountsTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoadUncorrelatedAccountsTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


