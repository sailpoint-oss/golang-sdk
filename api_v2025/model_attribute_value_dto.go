/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
)

// checks if the AttributeValueDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AttributeValueDTO{}

// AttributeValueDTO struct for AttributeValueDTO
type AttributeValueDTO struct {
	// Technical name of the Attribute value. This is unique and cannot be changed after creation.
	Value *string `json:"value,omitempty"`
	// The display name of the Attribute value.
	Name *string `json:"name,omitempty"`
	// The status of the Attribute value.
	Status *string `json:"status,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AttributeValueDTO AttributeValueDTO

// NewAttributeValueDTO instantiates a new AttributeValueDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttributeValueDTO() *AttributeValueDTO {
	this := AttributeValueDTO{}
	return &this
}

// NewAttributeValueDTOWithDefaults instantiates a new AttributeValueDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttributeValueDTOWithDefaults() *AttributeValueDTO {
	this := AttributeValueDTO{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *AttributeValueDTO) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeValueDTO) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *AttributeValueDTO) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *AttributeValueDTO) SetValue(v string) {
	o.Value = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AttributeValueDTO) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeValueDTO) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AttributeValueDTO) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AttributeValueDTO) SetName(v string) {
	o.Name = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *AttributeValueDTO) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeValueDTO) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *AttributeValueDTO) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *AttributeValueDTO) SetStatus(v string) {
	o.Status = &v
}

func (o AttributeValueDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AttributeValueDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AttributeValueDTO) UnmarshalJSON(data []byte) (err error) {
	varAttributeValueDTO := _AttributeValueDTO{}

	err = json.Unmarshal(data, &varAttributeValueDTO)

	if err != nil {
		return err
	}

	*o = AttributeValueDTO(varAttributeValueDTO)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "value")
		delete(additionalProperties, "name")
		delete(additionalProperties, "status")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAttributeValueDTO struct {
	value *AttributeValueDTO
	isSet bool
}

func (v NullableAttributeValueDTO) Get() *AttributeValueDTO {
	return v.value
}

func (v *NullableAttributeValueDTO) Set(val *AttributeValueDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableAttributeValueDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableAttributeValueDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttributeValueDTO(val *AttributeValueDTO) *NullableAttributeValueDTO {
	return &NullableAttributeValueDTO{value: val, isSet: true}
}

func (v NullableAttributeValueDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttributeValueDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


