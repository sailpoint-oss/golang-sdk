/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
	"fmt"
)

// checks if the ManagedClusterType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManagedClusterType{}

// ManagedClusterType Managed Cluster Type for Cluster upgrade configuration information
type ManagedClusterType struct {
	// ManagedClusterType ID
	Id *string `json:"id,omitempty"`
	// ManagedClusterType type name
	Type string `json:"type"`
	// ManagedClusterType pod
	Pod string `json:"pod"`
	// ManagedClusterType org
	Org string `json:"org"`
	// List of processes for the cluster type
	ManagedProcessIds []string `json:"managedProcessIds,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ManagedClusterType ManagedClusterType

// NewManagedClusterType instantiates a new ManagedClusterType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagedClusterType(type_ string, pod string, org string) *ManagedClusterType {
	this := ManagedClusterType{}
	this.Type = type_
	this.Pod = pod
	this.Org = org
	return &this
}

// NewManagedClusterTypeWithDefaults instantiates a new ManagedClusterType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagedClusterTypeWithDefaults() *ManagedClusterType {
	this := ManagedClusterType{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ManagedClusterType) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedClusterType) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ManagedClusterType) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ManagedClusterType) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value
func (o *ManagedClusterType) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ManagedClusterType) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ManagedClusterType) SetType(v string) {
	o.Type = v
}

// GetPod returns the Pod field value
func (o *ManagedClusterType) GetPod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Pod
}

// GetPodOk returns a tuple with the Pod field value
// and a boolean to check if the value has been set.
func (o *ManagedClusterType) GetPodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pod, true
}

// SetPod sets field value
func (o *ManagedClusterType) SetPod(v string) {
	o.Pod = v
}

// GetOrg returns the Org field value
func (o *ManagedClusterType) GetOrg() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Org
}

// GetOrgOk returns a tuple with the Org field value
// and a boolean to check if the value has been set.
func (o *ManagedClusterType) GetOrgOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Org, true
}

// SetOrg sets field value
func (o *ManagedClusterType) SetOrg(v string) {
	o.Org = v
}

// GetManagedProcessIds returns the ManagedProcessIds field value if set, zero value otherwise.
func (o *ManagedClusterType) GetManagedProcessIds() []string {
	if o == nil || IsNil(o.ManagedProcessIds) {
		var ret []string
		return ret
	}
	return o.ManagedProcessIds
}

// GetManagedProcessIdsOk returns a tuple with the ManagedProcessIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedClusterType) GetManagedProcessIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ManagedProcessIds) {
		return nil, false
	}
	return o.ManagedProcessIds, true
}

// HasManagedProcessIds returns a boolean if a field has been set.
func (o *ManagedClusterType) HasManagedProcessIds() bool {
	if o != nil && !IsNil(o.ManagedProcessIds) {
		return true
	}

	return false
}

// SetManagedProcessIds gets a reference to the given []string and assigns it to the ManagedProcessIds field.
func (o *ManagedClusterType) SetManagedProcessIds(v []string) {
	o.ManagedProcessIds = v
}

func (o ManagedClusterType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManagedClusterType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["type"] = o.Type
	toSerialize["pod"] = o.Pod
	toSerialize["org"] = o.Org
	if !IsNil(o.ManagedProcessIds) {
		toSerialize["managedProcessIds"] = o.ManagedProcessIds
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ManagedClusterType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"pod",
		"org",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varManagedClusterType := _ManagedClusterType{}

	err = json.Unmarshal(data, &varManagedClusterType)

	if err != nil {
		return err
	}

	*o = ManagedClusterType(varManagedClusterType)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "type")
		delete(additionalProperties, "pod")
		delete(additionalProperties, "org")
		delete(additionalProperties, "managedProcessIds")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableManagedClusterType struct {
	value *ManagedClusterType
	isSet bool
}

func (v NullableManagedClusterType) Get() *ManagedClusterType {
	return v.value
}

func (v *NullableManagedClusterType) Set(val *ManagedClusterType) {
	v.value = val
	v.isSet = true
}

func (v NullableManagedClusterType) IsSet() bool {
	return v.isSet
}

func (v *NullableManagedClusterType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagedClusterType(val *ManagedClusterType) *NullableManagedClusterType {
	return &NullableManagedClusterType{value: val, isSet: true}
}

func (v NullableManagedClusterType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagedClusterType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


