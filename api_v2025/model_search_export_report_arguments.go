/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
	"fmt"
)

// checks if the SearchExportReportArguments type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchExportReportArguments{}

// SearchExportReportArguments Arguments for Search Export report (SEARCH_EXPORT)  The report file generated will be a zip file containing csv files of the search results. 
type SearchExportReportArguments struct {
	// The names of the Elasticsearch indices in which to search. If none are provided, then all indices will be searched.
	Indices []Index `json:"indices,omitempty"`
	// The query using the Elasticsearch [Query String Query](https://www.elastic.co/guide/en/elasticsearch/reference/5.2/query-dsl-query-string-query.html#query-string) syntax from the Query DSL extended by SailPoint to support Nested queries.
	Query string `json:"query"`
	// Comma separated string consisting of technical attribute names of fields to include in report.  Use `access.spread`, `apps.spread`, `accounts.spread` to include respective identity access details.  Use `accessProfiles.spread` to unclude access profile details.  Use `entitlements.spread` to include entitlement details. 
	Columns *string `json:"columns,omitempty"`
	// The fields to be used to sort the search results. Use + or - to specify the sort direction.
	Sort []string `json:"sort,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SearchExportReportArguments SearchExportReportArguments

// NewSearchExportReportArguments instantiates a new SearchExportReportArguments object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchExportReportArguments(query string) *SearchExportReportArguments {
	this := SearchExportReportArguments{}
	this.Query = query
	return &this
}

// NewSearchExportReportArgumentsWithDefaults instantiates a new SearchExportReportArguments object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchExportReportArgumentsWithDefaults() *SearchExportReportArguments {
	this := SearchExportReportArguments{}
	return &this
}

// GetIndices returns the Indices field value if set, zero value otherwise.
func (o *SearchExportReportArguments) GetIndices() []Index {
	if o == nil || IsNil(o.Indices) {
		var ret []Index
		return ret
	}
	return o.Indices
}

// GetIndicesOk returns a tuple with the Indices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchExportReportArguments) GetIndicesOk() ([]Index, bool) {
	if o == nil || IsNil(o.Indices) {
		return nil, false
	}
	return o.Indices, true
}

// HasIndices returns a boolean if a field has been set.
func (o *SearchExportReportArguments) HasIndices() bool {
	if o != nil && !IsNil(o.Indices) {
		return true
	}

	return false
}

// SetIndices gets a reference to the given []Index and assigns it to the Indices field.
func (o *SearchExportReportArguments) SetIndices(v []Index) {
	o.Indices = v
}

// GetQuery returns the Query field value
func (o *SearchExportReportArguments) GetQuery() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Query
}

// GetQueryOk returns a tuple with the Query field value
// and a boolean to check if the value has been set.
func (o *SearchExportReportArguments) GetQueryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Query, true
}

// SetQuery sets field value
func (o *SearchExportReportArguments) SetQuery(v string) {
	o.Query = v
}

// GetColumns returns the Columns field value if set, zero value otherwise.
func (o *SearchExportReportArguments) GetColumns() string {
	if o == nil || IsNil(o.Columns) {
		var ret string
		return ret
	}
	return *o.Columns
}

// GetColumnsOk returns a tuple with the Columns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchExportReportArguments) GetColumnsOk() (*string, bool) {
	if o == nil || IsNil(o.Columns) {
		return nil, false
	}
	return o.Columns, true
}

// HasColumns returns a boolean if a field has been set.
func (o *SearchExportReportArguments) HasColumns() bool {
	if o != nil && !IsNil(o.Columns) {
		return true
	}

	return false
}

// SetColumns gets a reference to the given string and assigns it to the Columns field.
func (o *SearchExportReportArguments) SetColumns(v string) {
	o.Columns = &v
}

// GetSort returns the Sort field value if set, zero value otherwise.
func (o *SearchExportReportArguments) GetSort() []string {
	if o == nil || IsNil(o.Sort) {
		var ret []string
		return ret
	}
	return o.Sort
}

// GetSortOk returns a tuple with the Sort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchExportReportArguments) GetSortOk() ([]string, bool) {
	if o == nil || IsNil(o.Sort) {
		return nil, false
	}
	return o.Sort, true
}

// HasSort returns a boolean if a field has been set.
func (o *SearchExportReportArguments) HasSort() bool {
	if o != nil && !IsNil(o.Sort) {
		return true
	}

	return false
}

// SetSort gets a reference to the given []string and assigns it to the Sort field.
func (o *SearchExportReportArguments) SetSort(v []string) {
	o.Sort = v
}

func (o SearchExportReportArguments) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchExportReportArguments) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Indices) {
		toSerialize["indices"] = o.Indices
	}
	toSerialize["query"] = o.Query
	if !IsNil(o.Columns) {
		toSerialize["columns"] = o.Columns
	}
	if !IsNil(o.Sort) {
		toSerialize["sort"] = o.Sort
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SearchExportReportArguments) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"query",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSearchExportReportArguments := _SearchExportReportArguments{}

	err = json.Unmarshal(data, &varSearchExportReportArguments)

	if err != nil {
		return err
	}

	*o = SearchExportReportArguments(varSearchExportReportArguments)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "indices")
		delete(additionalProperties, "query")
		delete(additionalProperties, "columns")
		delete(additionalProperties, "sort")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSearchExportReportArguments struct {
	value *SearchExportReportArguments
	isSet bool
}

func (v NullableSearchExportReportArguments) Get() *SearchExportReportArguments {
	return v.value
}

func (v *NullableSearchExportReportArguments) Set(val *SearchExportReportArguments) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchExportReportArguments) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchExportReportArguments) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchExportReportArguments(val *SearchExportReportArguments) *NullableSearchExportReportArguments {
	return &NullableSearchExportReportArguments{value: val, isSet: true}
}

func (v NullableSearchExportReportArguments) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchExportReportArguments) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


