/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
)

// checks if the ApprovalConfigTimeoutConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApprovalConfigTimeoutConfig{}

// ApprovalConfigTimeoutConfig TimeoutConfig contains configurations around when the approval request should expire.
type ApprovalConfigTimeoutConfig struct {
	// Indicates if timeout is enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// Number of days until approval request times out. Max value is 90.
	DaysUntilTimeout *int64 `json:"daysUntilTimeout,omitempty"`
	// Result of timeout.
	TimeoutResult *string `json:"timeoutResult,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ApprovalConfigTimeoutConfig ApprovalConfigTimeoutConfig

// NewApprovalConfigTimeoutConfig instantiates a new ApprovalConfigTimeoutConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApprovalConfigTimeoutConfig() *ApprovalConfigTimeoutConfig {
	this := ApprovalConfigTimeoutConfig{}
	var enabled bool = false
	this.Enabled = &enabled
	return &this
}

// NewApprovalConfigTimeoutConfigWithDefaults instantiates a new ApprovalConfigTimeoutConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApprovalConfigTimeoutConfigWithDefaults() *ApprovalConfigTimeoutConfig {
	this := ApprovalConfigTimeoutConfig{}
	var enabled bool = false
	this.Enabled = &enabled
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ApprovalConfigTimeoutConfig) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalConfigTimeoutConfig) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ApprovalConfigTimeoutConfig) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ApprovalConfigTimeoutConfig) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetDaysUntilTimeout returns the DaysUntilTimeout field value if set, zero value otherwise.
func (o *ApprovalConfigTimeoutConfig) GetDaysUntilTimeout() int64 {
	if o == nil || IsNil(o.DaysUntilTimeout) {
		var ret int64
		return ret
	}
	return *o.DaysUntilTimeout
}

// GetDaysUntilTimeoutOk returns a tuple with the DaysUntilTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalConfigTimeoutConfig) GetDaysUntilTimeoutOk() (*int64, bool) {
	if o == nil || IsNil(o.DaysUntilTimeout) {
		return nil, false
	}
	return o.DaysUntilTimeout, true
}

// HasDaysUntilTimeout returns a boolean if a field has been set.
func (o *ApprovalConfigTimeoutConfig) HasDaysUntilTimeout() bool {
	if o != nil && !IsNil(o.DaysUntilTimeout) {
		return true
	}

	return false
}

// SetDaysUntilTimeout gets a reference to the given int64 and assigns it to the DaysUntilTimeout field.
func (o *ApprovalConfigTimeoutConfig) SetDaysUntilTimeout(v int64) {
	o.DaysUntilTimeout = &v
}

// GetTimeoutResult returns the TimeoutResult field value if set, zero value otherwise.
func (o *ApprovalConfigTimeoutConfig) GetTimeoutResult() string {
	if o == nil || IsNil(o.TimeoutResult) {
		var ret string
		return ret
	}
	return *o.TimeoutResult
}

// GetTimeoutResultOk returns a tuple with the TimeoutResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalConfigTimeoutConfig) GetTimeoutResultOk() (*string, bool) {
	if o == nil || IsNil(o.TimeoutResult) {
		return nil, false
	}
	return o.TimeoutResult, true
}

// HasTimeoutResult returns a boolean if a field has been set.
func (o *ApprovalConfigTimeoutConfig) HasTimeoutResult() bool {
	if o != nil && !IsNil(o.TimeoutResult) {
		return true
	}

	return false
}

// SetTimeoutResult gets a reference to the given string and assigns it to the TimeoutResult field.
func (o *ApprovalConfigTimeoutConfig) SetTimeoutResult(v string) {
	o.TimeoutResult = &v
}

func (o ApprovalConfigTimeoutConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApprovalConfigTimeoutConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.DaysUntilTimeout) {
		toSerialize["daysUntilTimeout"] = o.DaysUntilTimeout
	}
	if !IsNil(o.TimeoutResult) {
		toSerialize["timeoutResult"] = o.TimeoutResult
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ApprovalConfigTimeoutConfig) UnmarshalJSON(data []byte) (err error) {
	varApprovalConfigTimeoutConfig := _ApprovalConfigTimeoutConfig{}

	err = json.Unmarshal(data, &varApprovalConfigTimeoutConfig)

	if err != nil {
		return err
	}

	*o = ApprovalConfigTimeoutConfig(varApprovalConfigTimeoutConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "daysUntilTimeout")
		delete(additionalProperties, "timeoutResult")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApprovalConfigTimeoutConfig struct {
	value *ApprovalConfigTimeoutConfig
	isSet bool
}

func (v NullableApprovalConfigTimeoutConfig) Get() *ApprovalConfigTimeoutConfig {
	return v.value
}

func (v *NullableApprovalConfigTimeoutConfig) Set(val *ApprovalConfigTimeoutConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableApprovalConfigTimeoutConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableApprovalConfigTimeoutConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApprovalConfigTimeoutConfig(val *ApprovalConfigTimeoutConfig) *NullableApprovalConfigTimeoutConfig {
	return &NullableApprovalConfigTimeoutConfig{value: val, isSet: true}
}

func (v NullableApprovalConfigTimeoutConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApprovalConfigTimeoutConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


