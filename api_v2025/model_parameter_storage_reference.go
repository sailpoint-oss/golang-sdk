/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
	"fmt"
)

// checks if the ParameterStorageReference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParameterStorageReference{}

// ParameterStorageReference Reference information returned in response to a request.
type ParameterStorageReference struct {
	// The ID of the reference
	Id string `json:"id"`
	// The ID of the consumer holding the reference
	ConsumerId string `json:"consumerId"`
	// The ID of the parameter that the reference is pointing to.
	ParameterId string `json:"parameterId"`
	// The human-readable name of the reference
	Name string `json:"name"`
	// The hint string used to validate the reference
	UsageHint *string `json:"usageHint,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ParameterStorageReference ParameterStorageReference

// NewParameterStorageReference instantiates a new ParameterStorageReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParameterStorageReference(id string, consumerId string, parameterId string, name string) *ParameterStorageReference {
	this := ParameterStorageReference{}
	this.Id = id
	this.ConsumerId = consumerId
	this.ParameterId = parameterId
	this.Name = name
	return &this
}

// NewParameterStorageReferenceWithDefaults instantiates a new ParameterStorageReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParameterStorageReferenceWithDefaults() *ParameterStorageReference {
	this := ParameterStorageReference{}
	return &this
}

// GetId returns the Id field value
func (o *ParameterStorageReference) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ParameterStorageReference) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ParameterStorageReference) SetId(v string) {
	o.Id = v
}

// GetConsumerId returns the ConsumerId field value
func (o *ParameterStorageReference) GetConsumerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConsumerId
}

// GetConsumerIdOk returns a tuple with the ConsumerId field value
// and a boolean to check if the value has been set.
func (o *ParameterStorageReference) GetConsumerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConsumerId, true
}

// SetConsumerId sets field value
func (o *ParameterStorageReference) SetConsumerId(v string) {
	o.ConsumerId = v
}

// GetParameterId returns the ParameterId field value
func (o *ParameterStorageReference) GetParameterId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ParameterId
}

// GetParameterIdOk returns a tuple with the ParameterId field value
// and a boolean to check if the value has been set.
func (o *ParameterStorageReference) GetParameterIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParameterId, true
}

// SetParameterId sets field value
func (o *ParameterStorageReference) SetParameterId(v string) {
	o.ParameterId = v
}

// GetName returns the Name field value
func (o *ParameterStorageReference) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ParameterStorageReference) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ParameterStorageReference) SetName(v string) {
	o.Name = v
}

// GetUsageHint returns the UsageHint field value if set, zero value otherwise.
func (o *ParameterStorageReference) GetUsageHint() string {
	if o == nil || IsNil(o.UsageHint) {
		var ret string
		return ret
	}
	return *o.UsageHint
}

// GetUsageHintOk returns a tuple with the UsageHint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParameterStorageReference) GetUsageHintOk() (*string, bool) {
	if o == nil || IsNil(o.UsageHint) {
		return nil, false
	}
	return o.UsageHint, true
}

// HasUsageHint returns a boolean if a field has been set.
func (o *ParameterStorageReference) HasUsageHint() bool {
	if o != nil && !IsNil(o.UsageHint) {
		return true
	}

	return false
}

// SetUsageHint gets a reference to the given string and assigns it to the UsageHint field.
func (o *ParameterStorageReference) SetUsageHint(v string) {
	o.UsageHint = &v
}

func (o ParameterStorageReference) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParameterStorageReference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["consumerId"] = o.ConsumerId
	toSerialize["parameterId"] = o.ParameterId
	toSerialize["name"] = o.Name
	if !IsNil(o.UsageHint) {
		toSerialize["usageHint"] = o.UsageHint
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ParameterStorageReference) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"consumerId",
		"parameterId",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varParameterStorageReference := _ParameterStorageReference{}

	err = json.Unmarshal(data, &varParameterStorageReference)

	if err != nil {
		return err
	}

	*o = ParameterStorageReference(varParameterStorageReference)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "consumerId")
		delete(additionalProperties, "parameterId")
		delete(additionalProperties, "name")
		delete(additionalProperties, "usageHint")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableParameterStorageReference struct {
	value *ParameterStorageReference
	isSet bool
}

func (v NullableParameterStorageReference) Get() *ParameterStorageReference {
	return v.value
}

func (v *NullableParameterStorageReference) Set(val *ParameterStorageReference) {
	v.value = val
	v.isSet = true
}

func (v NullableParameterStorageReference) IsSet() bool {
	return v.isSet
}

func (v *NullableParameterStorageReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParameterStorageReference(val *ParameterStorageReference) *NullableParameterStorageReference {
	return &NullableParameterStorageReference{value: val, isSet: true}
}

func (v NullableParameterStorageReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParameterStorageReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


