/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
	
)

// checks if the Approval type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Approval{}

// Approval Approval Object
type Approval struct {
	// The Approval ID
	Id *string `json:"id,omitempty"`
	// The Tenant ID of the Approval
	TenantId *string `json:"tenantId,omitempty"`
	// The type of the approval, such as ENTITLEMENT_DESCRIPTIONS, CUSTOM_ACCESS_REQUEST_APPROVAL, GENERIC_APPROVAL
	Type *string `json:"type,omitempty"`
	// Object representation of an approver of an approval
	Approvers []ApprovalIdentity `json:"approvers,omitempty"`
	// Date the approval was created
	CreatedDate *string `json:"createdDate,omitempty"`
	// Date the approval is due
	DueDate *string `json:"dueDate,omitempty"`
	// Step in the escalation process. If set to 0, the approval is not escalated. If set to 1, the approval is escalated to the first approver in the escalation chain.
	EscalationStep *string `json:"escalationStep,omitempty"`
	// The serial step of the approval in the approval chain. For example, serialStep 1 is the first approval to action in an approval request chain. Parallel approvals are set to 0.
	SerialStep *int64 `json:"serialStep,omitempty"`
	// Whether or not the approval has been escalated. Will reset to false when the approval is actioned on.
	IsEscalated *bool `json:"isEscalated,omitempty"`
	// The name of the approval for a given locale
	Name []ApprovalName `json:"name,omitempty"`
	// The name of the approval for a given locale
	BatchRequest ApprovalBatch `json:"batchRequest,omitempty"`
	// The configuration of the approval, such as the approval criteria and whether it is a parallel or serial approval
	ApprovalConfig ApprovalConfig `json:"approvalConfig,omitempty"`
	// The description of the approval for a given locale
	Description []ApprovalDescription `json:"description,omitempty"`
	// Signifies what medium to use when sending notifications (currently only email is utilized)
	Medium *string `json:"medium,omitempty"`
	// The priority of the approval
	Priority *string `json:"priority,omitempty"`
	// Object representation of the requester of the approval
	Requester ApprovalIdentity `json:"requester,omitempty"`
	// Object representation of the requestee of the approval
	Requestee ApprovalIdentity `json:"requestee,omitempty"`
	// Object representation of a comment on the approval
	Comments []ApprovalComment1 `json:"comments,omitempty"`
	// Array of approvers who have approved the approval
	ApprovedBy []ApprovalIdentityRecord `json:"approvedBy,omitempty"`
	// Array of approvers who have rejected the approval
	RejectedBy []ApprovalIdentityRecord `json:"rejectedBy,omitempty"`
	// Array of identities that the approval request is currently assigned to/waiting on. For parallel approvals, this is set to all approvers left to approve.
	AssignedTo []ApprovalIdentity `json:"assignedTo,omitempty"`
	// Date the approval was completed
	CompletedDate *string `json:"completedDate,omitempty"`
	ApprovalCriteria *ApprovalApprovalCriteria `json:"approvalCriteria,omitempty"`
	// Json string representing additional attributes known about the object to be approved.
	AdditionalAttributes *string `json:"additionalAttributes,omitempty"`
	// Reference data related to the approval
	ReferenceData []ApprovalReference `json:"referenceData,omitempty"`
	// History of whom the approval request was assigned to
	ReassignmentHistory []ApprovalReassignmentHistory `json:"reassignmentHistory,omitempty"`
	// Field that can include any static additional info that may be needed by the service that the approval request originated from
	StaticAttributes map[string]map[string]interface{} `json:"staticAttributes,omitempty"`
	// Date/time that the approval request was last updated
	ModifiedDate *SailPointTime `json:"modifiedDate,omitempty"`
	// RequestedTarget used to specify the actual object or target the approval request is for
	RequestedTarget []ApprovalRequestedTarget `json:"requestedTarget,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Approval Approval

// NewApproval instantiates a new Approval object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApproval() *Approval {
	this := Approval{}
	var isEscalated bool = false
	this.IsEscalated = &isEscalated
	return &this
}

// NewApprovalWithDefaults instantiates a new Approval object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApprovalWithDefaults() *Approval {
	this := Approval{}
	var isEscalated bool = false
	this.IsEscalated = &isEscalated
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Approval) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approval) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Approval) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Approval) SetId(v string) {
	o.Id = &v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *Approval) GetTenantId() string {
	if o == nil || IsNil(o.TenantId) {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approval) GetTenantIdOk() (*string, bool) {
	if o == nil || IsNil(o.TenantId) {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *Approval) HasTenantId() bool {
	if o != nil && !IsNil(o.TenantId) {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *Approval) SetTenantId(v string) {
	o.TenantId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Approval) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approval) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Approval) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Approval) SetType(v string) {
	o.Type = &v
}

// GetApprovers returns the Approvers field value if set, zero value otherwise.
func (o *Approval) GetApprovers() []ApprovalIdentity {
	if o == nil || IsNil(o.Approvers) {
		var ret []ApprovalIdentity
		return ret
	}
	return o.Approvers
}

// GetApproversOk returns a tuple with the Approvers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approval) GetApproversOk() ([]ApprovalIdentity, bool) {
	if o == nil || IsNil(o.Approvers) {
		return nil, false
	}
	return o.Approvers, true
}

// HasApprovers returns a boolean if a field has been set.
func (o *Approval) HasApprovers() bool {
	if o != nil && !IsNil(o.Approvers) {
		return true
	}

	return false
}

// SetApprovers gets a reference to the given []ApprovalIdentity and assigns it to the Approvers field.
func (o *Approval) SetApprovers(v []ApprovalIdentity) {
	o.Approvers = v
}

// GetCreatedDate returns the CreatedDate field value if set, zero value otherwise.
func (o *Approval) GetCreatedDate() string {
	if o == nil || IsNil(o.CreatedDate) {
		var ret string
		return ret
	}
	return *o.CreatedDate
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approval) GetCreatedDateOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedDate) {
		return nil, false
	}
	return o.CreatedDate, true
}

// HasCreatedDate returns a boolean if a field has been set.
func (o *Approval) HasCreatedDate() bool {
	if o != nil && !IsNil(o.CreatedDate) {
		return true
	}

	return false
}

// SetCreatedDate gets a reference to the given string and assigns it to the CreatedDate field.
func (o *Approval) SetCreatedDate(v string) {
	o.CreatedDate = &v
}

// GetDueDate returns the DueDate field value if set, zero value otherwise.
func (o *Approval) GetDueDate() string {
	if o == nil || IsNil(o.DueDate) {
		var ret string
		return ret
	}
	return *o.DueDate
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approval) GetDueDateOk() (*string, bool) {
	if o == nil || IsNil(o.DueDate) {
		return nil, false
	}
	return o.DueDate, true
}

// HasDueDate returns a boolean if a field has been set.
func (o *Approval) HasDueDate() bool {
	if o != nil && !IsNil(o.DueDate) {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given string and assigns it to the DueDate field.
func (o *Approval) SetDueDate(v string) {
	o.DueDate = &v
}

// GetEscalationStep returns the EscalationStep field value if set, zero value otherwise.
func (o *Approval) GetEscalationStep() string {
	if o == nil || IsNil(o.EscalationStep) {
		var ret string
		return ret
	}
	return *o.EscalationStep
}

// GetEscalationStepOk returns a tuple with the EscalationStep field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approval) GetEscalationStepOk() (*string, bool) {
	if o == nil || IsNil(o.EscalationStep) {
		return nil, false
	}
	return o.EscalationStep, true
}

// HasEscalationStep returns a boolean if a field has been set.
func (o *Approval) HasEscalationStep() bool {
	if o != nil && !IsNil(o.EscalationStep) {
		return true
	}

	return false
}

// SetEscalationStep gets a reference to the given string and assigns it to the EscalationStep field.
func (o *Approval) SetEscalationStep(v string) {
	o.EscalationStep = &v
}

// GetSerialStep returns the SerialStep field value if set, zero value otherwise.
func (o *Approval) GetSerialStep() int64 {
	if o == nil || IsNil(o.SerialStep) {
		var ret int64
		return ret
	}
	return *o.SerialStep
}

// GetSerialStepOk returns a tuple with the SerialStep field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approval) GetSerialStepOk() (*int64, bool) {
	if o == nil || IsNil(o.SerialStep) {
		return nil, false
	}
	return o.SerialStep, true
}

// HasSerialStep returns a boolean if a field has been set.
func (o *Approval) HasSerialStep() bool {
	if o != nil && !IsNil(o.SerialStep) {
		return true
	}

	return false
}

// SetSerialStep gets a reference to the given int64 and assigns it to the SerialStep field.
func (o *Approval) SetSerialStep(v int64) {
	o.SerialStep = &v
}

// GetIsEscalated returns the IsEscalated field value if set, zero value otherwise.
func (o *Approval) GetIsEscalated() bool {
	if o == nil || IsNil(o.IsEscalated) {
		var ret bool
		return ret
	}
	return *o.IsEscalated
}

// GetIsEscalatedOk returns a tuple with the IsEscalated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approval) GetIsEscalatedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEscalated) {
		return nil, false
	}
	return o.IsEscalated, true
}

// HasIsEscalated returns a boolean if a field has been set.
func (o *Approval) HasIsEscalated() bool {
	if o != nil && !IsNil(o.IsEscalated) {
		return true
	}

	return false
}

// SetIsEscalated gets a reference to the given bool and assigns it to the IsEscalated field.
func (o *Approval) SetIsEscalated(v bool) {
	o.IsEscalated = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Approval) GetName() []ApprovalName {
	if o == nil || IsNil(o.Name) {
		var ret []ApprovalName
		return ret
	}
	return o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approval) GetNameOk() ([]ApprovalName, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Approval) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given []ApprovalName and assigns it to the Name field.
func (o *Approval) SetName(v []ApprovalName) {
	o.Name = v
}

// GetBatchRequest returns the BatchRequest field value if set, zero value otherwise.
func (o *Approval) GetBatchRequest() ApprovalBatch {
	if o == nil || IsNil(o.BatchRequest) {
		var ret ApprovalBatch
		return ret
	}
	return o.BatchRequest
}

// GetBatchRequestOk returns a tuple with the BatchRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approval) GetBatchRequestOk() (ApprovalBatch, bool) {
	if o == nil || IsNil(o.BatchRequest) {
		return ApprovalBatch{}, false
	}
	return o.BatchRequest, true
}

// HasBatchRequest returns a boolean if a field has been set.
func (o *Approval) HasBatchRequest() bool {
	if o != nil && !IsNil(o.BatchRequest) {
		return true
	}

	return false
}

// SetBatchRequest gets a reference to the given ApprovalBatch and assigns it to the BatchRequest field.
func (o *Approval) SetBatchRequest(v ApprovalBatch) {
	o.BatchRequest = v
}

// GetApprovalConfig returns the ApprovalConfig field value if set, zero value otherwise.
func (o *Approval) GetApprovalConfig() ApprovalConfig {
	if o == nil || IsNil(o.ApprovalConfig) {
		var ret ApprovalConfig
		return ret
	}
	return o.ApprovalConfig
}

// GetApprovalConfigOk returns a tuple with the ApprovalConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approval) GetApprovalConfigOk() (ApprovalConfig, bool) {
	if o == nil || IsNil(o.ApprovalConfig) {
		return ApprovalConfig{}, false
	}
	return o.ApprovalConfig, true
}

// HasApprovalConfig returns a boolean if a field has been set.
func (o *Approval) HasApprovalConfig() bool {
	if o != nil && !IsNil(o.ApprovalConfig) {
		return true
	}

	return false
}

// SetApprovalConfig gets a reference to the given ApprovalConfig and assigns it to the ApprovalConfig field.
func (o *Approval) SetApprovalConfig(v ApprovalConfig) {
	o.ApprovalConfig = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Approval) GetDescription() []ApprovalDescription {
	if o == nil || IsNil(o.Description) {
		var ret []ApprovalDescription
		return ret
	}
	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approval) GetDescriptionOk() ([]ApprovalDescription, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Approval) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given []ApprovalDescription and assigns it to the Description field.
func (o *Approval) SetDescription(v []ApprovalDescription) {
	o.Description = v
}

// GetMedium returns the Medium field value if set, zero value otherwise.
func (o *Approval) GetMedium() string {
	if o == nil || IsNil(o.Medium) {
		var ret string
		return ret
	}
	return *o.Medium
}

// GetMediumOk returns a tuple with the Medium field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approval) GetMediumOk() (*string, bool) {
	if o == nil || IsNil(o.Medium) {
		return nil, false
	}
	return o.Medium, true
}

// HasMedium returns a boolean if a field has been set.
func (o *Approval) HasMedium() bool {
	if o != nil && !IsNil(o.Medium) {
		return true
	}

	return false
}

// SetMedium gets a reference to the given string and assigns it to the Medium field.
func (o *Approval) SetMedium(v string) {
	o.Medium = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *Approval) GetPriority() string {
	if o == nil || IsNil(o.Priority) {
		var ret string
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approval) GetPriorityOk() (*string, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *Approval) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given string and assigns it to the Priority field.
func (o *Approval) SetPriority(v string) {
	o.Priority = &v
}

// GetRequester returns the Requester field value if set, zero value otherwise.
func (o *Approval) GetRequester() ApprovalIdentity {
	if o == nil || IsNil(o.Requester) {
		var ret ApprovalIdentity
		return ret
	}
	return o.Requester
}

// GetRequesterOk returns a tuple with the Requester field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approval) GetRequesterOk() (ApprovalIdentity, bool) {
	if o == nil || IsNil(o.Requester) {
		return ApprovalIdentity{}, false
	}
	return o.Requester, true
}

// HasRequester returns a boolean if a field has been set.
func (o *Approval) HasRequester() bool {
	if o != nil && !IsNil(o.Requester) {
		return true
	}

	return false
}

// SetRequester gets a reference to the given ApprovalIdentity and assigns it to the Requester field.
func (o *Approval) SetRequester(v ApprovalIdentity) {
	o.Requester = v
}

// GetRequestee returns the Requestee field value if set, zero value otherwise.
func (o *Approval) GetRequestee() ApprovalIdentity {
	if o == nil || IsNil(o.Requestee) {
		var ret ApprovalIdentity
		return ret
	}
	return o.Requestee
}

// GetRequesteeOk returns a tuple with the Requestee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approval) GetRequesteeOk() (ApprovalIdentity, bool) {
	if o == nil || IsNil(o.Requestee) {
		return ApprovalIdentity{}, false
	}
	return o.Requestee, true
}

// HasRequestee returns a boolean if a field has been set.
func (o *Approval) HasRequestee() bool {
	if o != nil && !IsNil(o.Requestee) {
		return true
	}

	return false
}

// SetRequestee gets a reference to the given ApprovalIdentity and assigns it to the Requestee field.
func (o *Approval) SetRequestee(v ApprovalIdentity) {
	o.Requestee = v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *Approval) GetComments() []ApprovalComment1 {
	if o == nil || IsNil(o.Comments) {
		var ret []ApprovalComment1
		return ret
	}
	return o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approval) GetCommentsOk() ([]ApprovalComment1, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *Approval) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given []ApprovalComment1 and assigns it to the Comments field.
func (o *Approval) SetComments(v []ApprovalComment1) {
	o.Comments = v
}

// GetApprovedBy returns the ApprovedBy field value if set, zero value otherwise.
func (o *Approval) GetApprovedBy() []ApprovalIdentityRecord {
	if o == nil || IsNil(o.ApprovedBy) {
		var ret []ApprovalIdentityRecord
		return ret
	}
	return o.ApprovedBy
}

// GetApprovedByOk returns a tuple with the ApprovedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approval) GetApprovedByOk() ([]ApprovalIdentityRecord, bool) {
	if o == nil || IsNil(o.ApprovedBy) {
		return nil, false
	}
	return o.ApprovedBy, true
}

// HasApprovedBy returns a boolean if a field has been set.
func (o *Approval) HasApprovedBy() bool {
	if o != nil && !IsNil(o.ApprovedBy) {
		return true
	}

	return false
}

// SetApprovedBy gets a reference to the given []ApprovalIdentityRecord and assigns it to the ApprovedBy field.
func (o *Approval) SetApprovedBy(v []ApprovalIdentityRecord) {
	o.ApprovedBy = v
}

// GetRejectedBy returns the RejectedBy field value if set, zero value otherwise.
func (o *Approval) GetRejectedBy() []ApprovalIdentityRecord {
	if o == nil || IsNil(o.RejectedBy) {
		var ret []ApprovalIdentityRecord
		return ret
	}
	return o.RejectedBy
}

// GetRejectedByOk returns a tuple with the RejectedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approval) GetRejectedByOk() ([]ApprovalIdentityRecord, bool) {
	if o == nil || IsNil(o.RejectedBy) {
		return nil, false
	}
	return o.RejectedBy, true
}

// HasRejectedBy returns a boolean if a field has been set.
func (o *Approval) HasRejectedBy() bool {
	if o != nil && !IsNil(o.RejectedBy) {
		return true
	}

	return false
}

// SetRejectedBy gets a reference to the given []ApprovalIdentityRecord and assigns it to the RejectedBy field.
func (o *Approval) SetRejectedBy(v []ApprovalIdentityRecord) {
	o.RejectedBy = v
}

// GetAssignedTo returns the AssignedTo field value if set, zero value otherwise.
func (o *Approval) GetAssignedTo() []ApprovalIdentity {
	if o == nil || IsNil(o.AssignedTo) {
		var ret []ApprovalIdentity
		return ret
	}
	return o.AssignedTo
}

// GetAssignedToOk returns a tuple with the AssignedTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approval) GetAssignedToOk() ([]ApprovalIdentity, bool) {
	if o == nil || IsNil(o.AssignedTo) {
		return nil, false
	}
	return o.AssignedTo, true
}

// HasAssignedTo returns a boolean if a field has been set.
func (o *Approval) HasAssignedTo() bool {
	if o != nil && !IsNil(o.AssignedTo) {
		return true
	}

	return false
}

// SetAssignedTo gets a reference to the given []ApprovalIdentity and assigns it to the AssignedTo field.
func (o *Approval) SetAssignedTo(v []ApprovalIdentity) {
	o.AssignedTo = v
}

// GetCompletedDate returns the CompletedDate field value if set, zero value otherwise.
func (o *Approval) GetCompletedDate() string {
	if o == nil || IsNil(o.CompletedDate) {
		var ret string
		return ret
	}
	return *o.CompletedDate
}

// GetCompletedDateOk returns a tuple with the CompletedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approval) GetCompletedDateOk() (*string, bool) {
	if o == nil || IsNil(o.CompletedDate) {
		return nil, false
	}
	return o.CompletedDate, true
}

// HasCompletedDate returns a boolean if a field has been set.
func (o *Approval) HasCompletedDate() bool {
	if o != nil && !IsNil(o.CompletedDate) {
		return true
	}

	return false
}

// SetCompletedDate gets a reference to the given string and assigns it to the CompletedDate field.
func (o *Approval) SetCompletedDate(v string) {
	o.CompletedDate = &v
}

// GetApprovalCriteria returns the ApprovalCriteria field value if set, zero value otherwise.
func (o *Approval) GetApprovalCriteria() ApprovalApprovalCriteria {
	if o == nil || IsNil(o.ApprovalCriteria) {
		var ret ApprovalApprovalCriteria
		return ret
	}
	return *o.ApprovalCriteria
}

// GetApprovalCriteriaOk returns a tuple with the ApprovalCriteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approval) GetApprovalCriteriaOk() (*ApprovalApprovalCriteria, bool) {
	if o == nil || IsNil(o.ApprovalCriteria) {
		return nil, false
	}
	return o.ApprovalCriteria, true
}

// HasApprovalCriteria returns a boolean if a field has been set.
func (o *Approval) HasApprovalCriteria() bool {
	if o != nil && !IsNil(o.ApprovalCriteria) {
		return true
	}

	return false
}

// SetApprovalCriteria gets a reference to the given ApprovalApprovalCriteria and assigns it to the ApprovalCriteria field.
func (o *Approval) SetApprovalCriteria(v ApprovalApprovalCriteria) {
	o.ApprovalCriteria = &v
}

// GetAdditionalAttributes returns the AdditionalAttributes field value if set, zero value otherwise.
func (o *Approval) GetAdditionalAttributes() string {
	if o == nil || IsNil(o.AdditionalAttributes) {
		var ret string
		return ret
	}
	return *o.AdditionalAttributes
}

// GetAdditionalAttributesOk returns a tuple with the AdditionalAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approval) GetAdditionalAttributesOk() (*string, bool) {
	if o == nil || IsNil(o.AdditionalAttributes) {
		return nil, false
	}
	return o.AdditionalAttributes, true
}

// HasAdditionalAttributes returns a boolean if a field has been set.
func (o *Approval) HasAdditionalAttributes() bool {
	if o != nil && !IsNil(o.AdditionalAttributes) {
		return true
	}

	return false
}

// SetAdditionalAttributes gets a reference to the given string and assigns it to the AdditionalAttributes field.
func (o *Approval) SetAdditionalAttributes(v string) {
	o.AdditionalAttributes = &v
}

// GetReferenceData returns the ReferenceData field value if set, zero value otherwise.
func (o *Approval) GetReferenceData() []ApprovalReference {
	if o == nil || IsNil(o.ReferenceData) {
		var ret []ApprovalReference
		return ret
	}
	return o.ReferenceData
}

// GetReferenceDataOk returns a tuple with the ReferenceData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approval) GetReferenceDataOk() ([]ApprovalReference, bool) {
	if o == nil || IsNil(o.ReferenceData) {
		return nil, false
	}
	return o.ReferenceData, true
}

// HasReferenceData returns a boolean if a field has been set.
func (o *Approval) HasReferenceData() bool {
	if o != nil && !IsNil(o.ReferenceData) {
		return true
	}

	return false
}

// SetReferenceData gets a reference to the given []ApprovalReference and assigns it to the ReferenceData field.
func (o *Approval) SetReferenceData(v []ApprovalReference) {
	o.ReferenceData = v
}

// GetReassignmentHistory returns the ReassignmentHistory field value if set, zero value otherwise.
func (o *Approval) GetReassignmentHistory() []ApprovalReassignmentHistory {
	if o == nil || IsNil(o.ReassignmentHistory) {
		var ret []ApprovalReassignmentHistory
		return ret
	}
	return o.ReassignmentHistory
}

// GetReassignmentHistoryOk returns a tuple with the ReassignmentHistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approval) GetReassignmentHistoryOk() ([]ApprovalReassignmentHistory, bool) {
	if o == nil || IsNil(o.ReassignmentHistory) {
		return nil, false
	}
	return o.ReassignmentHistory, true
}

// HasReassignmentHistory returns a boolean if a field has been set.
func (o *Approval) HasReassignmentHistory() bool {
	if o != nil && !IsNil(o.ReassignmentHistory) {
		return true
	}

	return false
}

// SetReassignmentHistory gets a reference to the given []ApprovalReassignmentHistory and assigns it to the ReassignmentHistory field.
func (o *Approval) SetReassignmentHistory(v []ApprovalReassignmentHistory) {
	o.ReassignmentHistory = v
}

// GetStaticAttributes returns the StaticAttributes field value if set, zero value otherwise.
func (o *Approval) GetStaticAttributes() map[string]map[string]interface{} {
	if o == nil || IsNil(o.StaticAttributes) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.StaticAttributes
}

// GetStaticAttributesOk returns a tuple with the StaticAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approval) GetStaticAttributesOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.StaticAttributes) {
		return map[string]map[string]interface{}{}, false
	}
	return o.StaticAttributes, true
}

// HasStaticAttributes returns a boolean if a field has been set.
func (o *Approval) HasStaticAttributes() bool {
	if o != nil && !IsNil(o.StaticAttributes) {
		return true
	}

	return false
}

// SetStaticAttributes gets a reference to the given map[string]map[string]interface{} and assigns it to the StaticAttributes field.
func (o *Approval) SetStaticAttributes(v map[string]map[string]interface{}) {
	o.StaticAttributes = v
}

// GetModifiedDate returns the ModifiedDate field value if set, zero value otherwise.
func (o *Approval) GetModifiedDate() SailPointTime {
	if o == nil || IsNil(o.ModifiedDate) {
		var ret SailPointTime
		return ret
	}
	return *o.ModifiedDate
}

// GetModifiedDateOk returns a tuple with the ModifiedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approval) GetModifiedDateOk() (*SailPointTime, bool) {
	if o == nil || IsNil(o.ModifiedDate) {
		return nil, false
	}
	return o.ModifiedDate, true
}

// HasModifiedDate returns a boolean if a field has been set.
func (o *Approval) HasModifiedDate() bool {
	if o != nil && !IsNil(o.ModifiedDate) {
		return true
	}

	return false
}

// SetModifiedDate gets a reference to the given SailPointTime and assigns it to the ModifiedDate field.
func (o *Approval) SetModifiedDate(v SailPointTime) {
	o.ModifiedDate = &v
}

// GetRequestedTarget returns the RequestedTarget field value if set, zero value otherwise.
func (o *Approval) GetRequestedTarget() []ApprovalRequestedTarget {
	if o == nil || IsNil(o.RequestedTarget) {
		var ret []ApprovalRequestedTarget
		return ret
	}
	return o.RequestedTarget
}

// GetRequestedTargetOk returns a tuple with the RequestedTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approval) GetRequestedTargetOk() ([]ApprovalRequestedTarget, bool) {
	if o == nil || IsNil(o.RequestedTarget) {
		return nil, false
	}
	return o.RequestedTarget, true
}

// HasRequestedTarget returns a boolean if a field has been set.
func (o *Approval) HasRequestedTarget() bool {
	if o != nil && !IsNil(o.RequestedTarget) {
		return true
	}

	return false
}

// SetRequestedTarget gets a reference to the given []ApprovalRequestedTarget and assigns it to the RequestedTarget field.
func (o *Approval) SetRequestedTarget(v []ApprovalRequestedTarget) {
	o.RequestedTarget = v
}

func (o Approval) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Approval) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.TenantId) {
		toSerialize["tenantId"] = o.TenantId
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Approvers) {
		toSerialize["approvers"] = o.Approvers
	}
	if !IsNil(o.CreatedDate) {
		toSerialize["createdDate"] = o.CreatedDate
	}
	if !IsNil(o.DueDate) {
		toSerialize["dueDate"] = o.DueDate
	}
	if !IsNil(o.EscalationStep) {
		toSerialize["escalationStep"] = o.EscalationStep
	}
	if !IsNil(o.SerialStep) {
		toSerialize["serialStep"] = o.SerialStep
	}
	if !IsNil(o.IsEscalated) {
		toSerialize["isEscalated"] = o.IsEscalated
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.BatchRequest) {
		toSerialize["batchRequest"] = o.BatchRequest
	}
	if !IsNil(o.ApprovalConfig) {
		toSerialize["approvalConfig"] = o.ApprovalConfig
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Medium) {
		toSerialize["medium"] = o.Medium
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.Requester) {
		toSerialize["requester"] = o.Requester
	}
	if !IsNil(o.Requestee) {
		toSerialize["requestee"] = o.Requestee
	}
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}
	if !IsNil(o.ApprovedBy) {
		toSerialize["approvedBy"] = o.ApprovedBy
	}
	if !IsNil(o.RejectedBy) {
		toSerialize["rejectedBy"] = o.RejectedBy
	}
	if !IsNil(o.AssignedTo) {
		toSerialize["assignedTo"] = o.AssignedTo
	}
	if !IsNil(o.CompletedDate) {
		toSerialize["completedDate"] = o.CompletedDate
	}
	if !IsNil(o.ApprovalCriteria) {
		toSerialize["approvalCriteria"] = o.ApprovalCriteria
	}
	if !IsNil(o.AdditionalAttributes) {
		toSerialize["additionalAttributes"] = o.AdditionalAttributes
	}
	if !IsNil(o.ReferenceData) {
		toSerialize["referenceData"] = o.ReferenceData
	}
	if !IsNil(o.ReassignmentHistory) {
		toSerialize["reassignmentHistory"] = o.ReassignmentHistory
	}
	if !IsNil(o.StaticAttributes) {
		toSerialize["staticAttributes"] = o.StaticAttributes
	}
	if !IsNil(o.ModifiedDate) {
		toSerialize["modifiedDate"] = o.ModifiedDate
	}
	if !IsNil(o.RequestedTarget) {
		toSerialize["requestedTarget"] = o.RequestedTarget
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Approval) UnmarshalJSON(data []byte) (err error) {
	varApproval := _Approval{}

	err = json.Unmarshal(data, &varApproval)

	if err != nil {
		return err
	}

	*o = Approval(varApproval)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "tenantId")
		delete(additionalProperties, "type")
		delete(additionalProperties, "approvers")
		delete(additionalProperties, "createdDate")
		delete(additionalProperties, "dueDate")
		delete(additionalProperties, "escalationStep")
		delete(additionalProperties, "serialStep")
		delete(additionalProperties, "isEscalated")
		delete(additionalProperties, "name")
		delete(additionalProperties, "batchRequest")
		delete(additionalProperties, "approvalConfig")
		delete(additionalProperties, "description")
		delete(additionalProperties, "medium")
		delete(additionalProperties, "priority")
		delete(additionalProperties, "requester")
		delete(additionalProperties, "requestee")
		delete(additionalProperties, "comments")
		delete(additionalProperties, "approvedBy")
		delete(additionalProperties, "rejectedBy")
		delete(additionalProperties, "assignedTo")
		delete(additionalProperties, "completedDate")
		delete(additionalProperties, "approvalCriteria")
		delete(additionalProperties, "additionalAttributes")
		delete(additionalProperties, "referenceData")
		delete(additionalProperties, "reassignmentHistory")
		delete(additionalProperties, "staticAttributes")
		delete(additionalProperties, "modifiedDate")
		delete(additionalProperties, "requestedTarget")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApproval struct {
	value *Approval
	isSet bool
}

func (v NullableApproval) Get() *Approval {
	return v.value
}

func (v *NullableApproval) Set(val *Approval) {
	v.value = val
	v.isSet = true
}

func (v NullableApproval) IsSet() bool {
	return v.isSet
}

func (v *NullableApproval) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApproval(val *Approval) *NullableApproval {
	return &NullableApproval{value: val, isSet: true}
}

func (v NullableApproval) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApproval) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


