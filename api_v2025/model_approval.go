/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
)

// checks if the Approval type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Approval{}

// Approval Approval Object
type Approval struct {
	// The Approval ID
	ApprovalId *string `json:"approvalId,omitempty"`
	// Object representation of an approver of an approval
	Approvers []ApprovalIdentity `json:"approvers,omitempty"`
	// Date the approval was created
	CreatedDate *string `json:"createdDate,omitempty"`
	// Type of approval
	Type *string `json:"type,omitempty"`
	// The name of the approval for a given locale
	Name []ApprovalName `json:"name,omitempty"`
	// The name of the approval for a given locale
	BatchRequest ApprovalBatch `json:"batchRequest,omitempty"`
	// The description of the approval for a given locale
	Description []ApprovalDescription `json:"description,omitempty"`
	// The priority of the approval
	Priority *string `json:"priority,omitempty"`
	// Object representation of the requester of the approval
	Requester ApprovalIdentity `json:"requester,omitempty"`
	// Object representation of a comment on the approval
	Comments []ApprovalComment1 `json:"comments,omitempty"`
	// Array of approvers who have approved the approval
	ApprovedBy []ApprovalIdentity `json:"approvedBy,omitempty"`
	// Array of approvers who have rejected the approval
	RejectedBy []ApprovalIdentity `json:"rejectedBy,omitempty"`
	// Date the approval was completed
	CompletedDate *string `json:"completedDate,omitempty"`
	// Criteria that needs to be met for an approval to be marked as approved
	ApprovalCriteria *string `json:"approvalCriteria,omitempty"`
	// The current status of the approval
	Status *string `json:"status,omitempty"`
	// Json string representing additional attributes known about the object to be approved.
	AdditionalAttributes *string `json:"additionalAttributes,omitempty"`
	// Reference data related to the approval
	ReferenceData []ApprovalReference `json:"referenceData,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Approval Approval

// NewApproval instantiates a new Approval object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApproval() *Approval {
	this := Approval{}
	return &this
}

// NewApprovalWithDefaults instantiates a new Approval object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApprovalWithDefaults() *Approval {
	this := Approval{}
	return &this
}

// GetApprovalId returns the ApprovalId field value if set, zero value otherwise.
func (o *Approval) GetApprovalId() string {
	if o == nil || IsNil(o.ApprovalId) {
		var ret string
		return ret
	}
	return *o.ApprovalId
}

// GetApprovalIdOk returns a tuple with the ApprovalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approval) GetApprovalIdOk() (*string, bool) {
	if o == nil || IsNil(o.ApprovalId) {
		return nil, false
	}
	return o.ApprovalId, true
}

// HasApprovalId returns a boolean if a field has been set.
func (o *Approval) HasApprovalId() bool {
	if o != nil && !IsNil(o.ApprovalId) {
		return true
	}

	return false
}

// SetApprovalId gets a reference to the given string and assigns it to the ApprovalId field.
func (o *Approval) SetApprovalId(v string) {
	o.ApprovalId = &v
}

// GetApprovers returns the Approvers field value if set, zero value otherwise.
func (o *Approval) GetApprovers() []ApprovalIdentity {
	if o == nil || IsNil(o.Approvers) {
		var ret []ApprovalIdentity
		return ret
	}
	return o.Approvers
}

// GetApproversOk returns a tuple with the Approvers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approval) GetApproversOk() ([]ApprovalIdentity, bool) {
	if o == nil || IsNil(o.Approvers) {
		return nil, false
	}
	return o.Approvers, true
}

// HasApprovers returns a boolean if a field has been set.
func (o *Approval) HasApprovers() bool {
	if o != nil && !IsNil(o.Approvers) {
		return true
	}

	return false
}

// SetApprovers gets a reference to the given []ApprovalIdentity and assigns it to the Approvers field.
func (o *Approval) SetApprovers(v []ApprovalIdentity) {
	o.Approvers = v
}

// GetCreatedDate returns the CreatedDate field value if set, zero value otherwise.
func (o *Approval) GetCreatedDate() string {
	if o == nil || IsNil(o.CreatedDate) {
		var ret string
		return ret
	}
	return *o.CreatedDate
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approval) GetCreatedDateOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedDate) {
		return nil, false
	}
	return o.CreatedDate, true
}

// HasCreatedDate returns a boolean if a field has been set.
func (o *Approval) HasCreatedDate() bool {
	if o != nil && !IsNil(o.CreatedDate) {
		return true
	}

	return false
}

// SetCreatedDate gets a reference to the given string and assigns it to the CreatedDate field.
func (o *Approval) SetCreatedDate(v string) {
	o.CreatedDate = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Approval) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approval) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Approval) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Approval) SetType(v string) {
	o.Type = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Approval) GetName() []ApprovalName {
	if o == nil || IsNil(o.Name) {
		var ret []ApprovalName
		return ret
	}
	return o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approval) GetNameOk() ([]ApprovalName, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Approval) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given []ApprovalName and assigns it to the Name field.
func (o *Approval) SetName(v []ApprovalName) {
	o.Name = v
}

// GetBatchRequest returns the BatchRequest field value if set, zero value otherwise.
func (o *Approval) GetBatchRequest() ApprovalBatch {
	if o == nil || IsNil(o.BatchRequest) {
		var ret ApprovalBatch
		return ret
	}
	return o.BatchRequest
}

// GetBatchRequestOk returns a tuple with the BatchRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approval) GetBatchRequestOk() (ApprovalBatch, bool) {
	if o == nil || IsNil(o.BatchRequest) {
		return ApprovalBatch{}, false
	}
	return o.BatchRequest, true
}

// HasBatchRequest returns a boolean if a field has been set.
func (o *Approval) HasBatchRequest() bool {
	if o != nil && !IsNil(o.BatchRequest) {
		return true
	}

	return false
}

// SetBatchRequest gets a reference to the given ApprovalBatch and assigns it to the BatchRequest field.
func (o *Approval) SetBatchRequest(v ApprovalBatch) {
	o.BatchRequest = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Approval) GetDescription() []ApprovalDescription {
	if o == nil || IsNil(o.Description) {
		var ret []ApprovalDescription
		return ret
	}
	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approval) GetDescriptionOk() ([]ApprovalDescription, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Approval) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given []ApprovalDescription and assigns it to the Description field.
func (o *Approval) SetDescription(v []ApprovalDescription) {
	o.Description = v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *Approval) GetPriority() string {
	if o == nil || IsNil(o.Priority) {
		var ret string
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approval) GetPriorityOk() (*string, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *Approval) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given string and assigns it to the Priority field.
func (o *Approval) SetPriority(v string) {
	o.Priority = &v
}

// GetRequester returns the Requester field value if set, zero value otherwise.
func (o *Approval) GetRequester() ApprovalIdentity {
	if o == nil || IsNil(o.Requester) {
		var ret ApprovalIdentity
		return ret
	}
	return o.Requester
}

// GetRequesterOk returns a tuple with the Requester field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approval) GetRequesterOk() (ApprovalIdentity, bool) {
	if o == nil || IsNil(o.Requester) {
		return ApprovalIdentity{}, false
	}
	return o.Requester, true
}

// HasRequester returns a boolean if a field has been set.
func (o *Approval) HasRequester() bool {
	if o != nil && !IsNil(o.Requester) {
		return true
	}

	return false
}

// SetRequester gets a reference to the given ApprovalIdentity and assigns it to the Requester field.
func (o *Approval) SetRequester(v ApprovalIdentity) {
	o.Requester = v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *Approval) GetComments() []ApprovalComment1 {
	if o == nil || IsNil(o.Comments) {
		var ret []ApprovalComment1
		return ret
	}
	return o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approval) GetCommentsOk() ([]ApprovalComment1, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *Approval) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given []ApprovalComment1 and assigns it to the Comments field.
func (o *Approval) SetComments(v []ApprovalComment1) {
	o.Comments = v
}

// GetApprovedBy returns the ApprovedBy field value if set, zero value otherwise.
func (o *Approval) GetApprovedBy() []ApprovalIdentity {
	if o == nil || IsNil(o.ApprovedBy) {
		var ret []ApprovalIdentity
		return ret
	}
	return o.ApprovedBy
}

// GetApprovedByOk returns a tuple with the ApprovedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approval) GetApprovedByOk() ([]ApprovalIdentity, bool) {
	if o == nil || IsNil(o.ApprovedBy) {
		return nil, false
	}
	return o.ApprovedBy, true
}

// HasApprovedBy returns a boolean if a field has been set.
func (o *Approval) HasApprovedBy() bool {
	if o != nil && !IsNil(o.ApprovedBy) {
		return true
	}

	return false
}

// SetApprovedBy gets a reference to the given []ApprovalIdentity and assigns it to the ApprovedBy field.
func (o *Approval) SetApprovedBy(v []ApprovalIdentity) {
	o.ApprovedBy = v
}

// GetRejectedBy returns the RejectedBy field value if set, zero value otherwise.
func (o *Approval) GetRejectedBy() []ApprovalIdentity {
	if o == nil || IsNil(o.RejectedBy) {
		var ret []ApprovalIdentity
		return ret
	}
	return o.RejectedBy
}

// GetRejectedByOk returns a tuple with the RejectedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approval) GetRejectedByOk() ([]ApprovalIdentity, bool) {
	if o == nil || IsNil(o.RejectedBy) {
		return nil, false
	}
	return o.RejectedBy, true
}

// HasRejectedBy returns a boolean if a field has been set.
func (o *Approval) HasRejectedBy() bool {
	if o != nil && !IsNil(o.RejectedBy) {
		return true
	}

	return false
}

// SetRejectedBy gets a reference to the given []ApprovalIdentity and assigns it to the RejectedBy field.
func (o *Approval) SetRejectedBy(v []ApprovalIdentity) {
	o.RejectedBy = v
}

// GetCompletedDate returns the CompletedDate field value if set, zero value otherwise.
func (o *Approval) GetCompletedDate() string {
	if o == nil || IsNil(o.CompletedDate) {
		var ret string
		return ret
	}
	return *o.CompletedDate
}

// GetCompletedDateOk returns a tuple with the CompletedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approval) GetCompletedDateOk() (*string, bool) {
	if o == nil || IsNil(o.CompletedDate) {
		return nil, false
	}
	return o.CompletedDate, true
}

// HasCompletedDate returns a boolean if a field has been set.
func (o *Approval) HasCompletedDate() bool {
	if o != nil && !IsNil(o.CompletedDate) {
		return true
	}

	return false
}

// SetCompletedDate gets a reference to the given string and assigns it to the CompletedDate field.
func (o *Approval) SetCompletedDate(v string) {
	o.CompletedDate = &v
}

// GetApprovalCriteria returns the ApprovalCriteria field value if set, zero value otherwise.
func (o *Approval) GetApprovalCriteria() string {
	if o == nil || IsNil(o.ApprovalCriteria) {
		var ret string
		return ret
	}
	return *o.ApprovalCriteria
}

// GetApprovalCriteriaOk returns a tuple with the ApprovalCriteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approval) GetApprovalCriteriaOk() (*string, bool) {
	if o == nil || IsNil(o.ApprovalCriteria) {
		return nil, false
	}
	return o.ApprovalCriteria, true
}

// HasApprovalCriteria returns a boolean if a field has been set.
func (o *Approval) HasApprovalCriteria() bool {
	if o != nil && !IsNil(o.ApprovalCriteria) {
		return true
	}

	return false
}

// SetApprovalCriteria gets a reference to the given string and assigns it to the ApprovalCriteria field.
func (o *Approval) SetApprovalCriteria(v string) {
	o.ApprovalCriteria = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Approval) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approval) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Approval) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Approval) SetStatus(v string) {
	o.Status = &v
}

// GetAdditionalAttributes returns the AdditionalAttributes field value if set, zero value otherwise.
func (o *Approval) GetAdditionalAttributes() string {
	if o == nil || IsNil(o.AdditionalAttributes) {
		var ret string
		return ret
	}
	return *o.AdditionalAttributes
}

// GetAdditionalAttributesOk returns a tuple with the AdditionalAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approval) GetAdditionalAttributesOk() (*string, bool) {
	if o == nil || IsNil(o.AdditionalAttributes) {
		return nil, false
	}
	return o.AdditionalAttributes, true
}

// HasAdditionalAttributes returns a boolean if a field has been set.
func (o *Approval) HasAdditionalAttributes() bool {
	if o != nil && !IsNil(o.AdditionalAttributes) {
		return true
	}

	return false
}

// SetAdditionalAttributes gets a reference to the given string and assigns it to the AdditionalAttributes field.
func (o *Approval) SetAdditionalAttributes(v string) {
	o.AdditionalAttributes = &v
}

// GetReferenceData returns the ReferenceData field value if set, zero value otherwise.
func (o *Approval) GetReferenceData() []ApprovalReference {
	if o == nil || IsNil(o.ReferenceData) {
		var ret []ApprovalReference
		return ret
	}
	return o.ReferenceData
}

// GetReferenceDataOk returns a tuple with the ReferenceData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Approval) GetReferenceDataOk() ([]ApprovalReference, bool) {
	if o == nil || IsNil(o.ReferenceData) {
		return nil, false
	}
	return o.ReferenceData, true
}

// HasReferenceData returns a boolean if a field has been set.
func (o *Approval) HasReferenceData() bool {
	if o != nil && !IsNil(o.ReferenceData) {
		return true
	}

	return false
}

// SetReferenceData gets a reference to the given []ApprovalReference and assigns it to the ReferenceData field.
func (o *Approval) SetReferenceData(v []ApprovalReference) {
	o.ReferenceData = v
}

func (o Approval) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Approval) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApprovalId) {
		toSerialize["approvalId"] = o.ApprovalId
	}
	if !IsNil(o.Approvers) {
		toSerialize["approvers"] = o.Approvers
	}
	if !IsNil(o.CreatedDate) {
		toSerialize["createdDate"] = o.CreatedDate
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.BatchRequest) {
		toSerialize["batchRequest"] = o.BatchRequest
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.Requester) {
		toSerialize["requester"] = o.Requester
	}
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}
	if !IsNil(o.ApprovedBy) {
		toSerialize["approvedBy"] = o.ApprovedBy
	}
	if !IsNil(o.RejectedBy) {
		toSerialize["rejectedBy"] = o.RejectedBy
	}
	if !IsNil(o.CompletedDate) {
		toSerialize["completedDate"] = o.CompletedDate
	}
	if !IsNil(o.ApprovalCriteria) {
		toSerialize["approvalCriteria"] = o.ApprovalCriteria
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.AdditionalAttributes) {
		toSerialize["additionalAttributes"] = o.AdditionalAttributes
	}
	if !IsNil(o.ReferenceData) {
		toSerialize["referenceData"] = o.ReferenceData
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Approval) UnmarshalJSON(data []byte) (err error) {
	varApproval := _Approval{}

	err = json.Unmarshal(data, &varApproval)

	if err != nil {
		return err
	}

	*o = Approval(varApproval)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "approvalId")
		delete(additionalProperties, "approvers")
		delete(additionalProperties, "createdDate")
		delete(additionalProperties, "type")
		delete(additionalProperties, "name")
		delete(additionalProperties, "batchRequest")
		delete(additionalProperties, "description")
		delete(additionalProperties, "priority")
		delete(additionalProperties, "requester")
		delete(additionalProperties, "comments")
		delete(additionalProperties, "approvedBy")
		delete(additionalProperties, "rejectedBy")
		delete(additionalProperties, "completedDate")
		delete(additionalProperties, "approvalCriteria")
		delete(additionalProperties, "status")
		delete(additionalProperties, "additionalAttributes")
		delete(additionalProperties, "referenceData")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApproval struct {
	value *Approval
	isSet bool
}

func (v NullableApproval) Get() *Approval {
	return v.value
}

func (v *NullableApproval) Set(val *Approval) {
	v.value = val
	v.isSet = true
}

func (v NullableApproval) IsSet() bool {
	return v.isSet
}

func (v *NullableApproval) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApproval(val *Approval) *NullableApproval {
	return &NullableApproval{value: val, isSet: true}
}

func (v NullableApproval) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApproval) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


