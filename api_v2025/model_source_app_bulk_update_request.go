/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
	"fmt"
)

// checks if the SourceAppBulkUpdateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SourceAppBulkUpdateRequest{}

// SourceAppBulkUpdateRequest struct for SourceAppBulkUpdateRequest
type SourceAppBulkUpdateRequest struct {
	// List of source app ids to update
	AppIds []string `json:"appIds"`
	// The JSONPatch payload used to update the source app.
	JsonPatch []JsonPatchOperation `json:"jsonPatch"`
	AdditionalProperties map[string]interface{}
}

type _SourceAppBulkUpdateRequest SourceAppBulkUpdateRequest

// NewSourceAppBulkUpdateRequest instantiates a new SourceAppBulkUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceAppBulkUpdateRequest(appIds []string, jsonPatch []JsonPatchOperation) *SourceAppBulkUpdateRequest {
	this := SourceAppBulkUpdateRequest{}
	this.AppIds = appIds
	this.JsonPatch = jsonPatch
	return &this
}

// NewSourceAppBulkUpdateRequestWithDefaults instantiates a new SourceAppBulkUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceAppBulkUpdateRequestWithDefaults() *SourceAppBulkUpdateRequest {
	this := SourceAppBulkUpdateRequest{}
	return &this
}

// GetAppIds returns the AppIds field value
func (o *SourceAppBulkUpdateRequest) GetAppIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AppIds
}

// GetAppIdsOk returns a tuple with the AppIds field value
// and a boolean to check if the value has been set.
func (o *SourceAppBulkUpdateRequest) GetAppIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AppIds, true
}

// SetAppIds sets field value
func (o *SourceAppBulkUpdateRequest) SetAppIds(v []string) {
	o.AppIds = v
}

// GetJsonPatch returns the JsonPatch field value
func (o *SourceAppBulkUpdateRequest) GetJsonPatch() []JsonPatchOperation {
	if o == nil {
		var ret []JsonPatchOperation
		return ret
	}

	return o.JsonPatch
}

// GetJsonPatchOk returns a tuple with the JsonPatch field value
// and a boolean to check if the value has been set.
func (o *SourceAppBulkUpdateRequest) GetJsonPatchOk() ([]JsonPatchOperation, bool) {
	if o == nil {
		return nil, false
	}
	return o.JsonPatch, true
}

// SetJsonPatch sets field value
func (o *SourceAppBulkUpdateRequest) SetJsonPatch(v []JsonPatchOperation) {
	o.JsonPatch = v
}

func (o SourceAppBulkUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SourceAppBulkUpdateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["appIds"] = o.AppIds
	toSerialize["jsonPatch"] = o.JsonPatch

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SourceAppBulkUpdateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"appIds",
		"jsonPatch",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSourceAppBulkUpdateRequest := _SourceAppBulkUpdateRequest{}

	err = json.Unmarshal(data, &varSourceAppBulkUpdateRequest)

	if err != nil {
		return err
	}

	*o = SourceAppBulkUpdateRequest(varSourceAppBulkUpdateRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "appIds")
		delete(additionalProperties, "jsonPatch")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSourceAppBulkUpdateRequest struct {
	value *SourceAppBulkUpdateRequest
	isSet bool
}

func (v NullableSourceAppBulkUpdateRequest) Get() *SourceAppBulkUpdateRequest {
	return v.value
}

func (v *NullableSourceAppBulkUpdateRequest) Set(val *SourceAppBulkUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceAppBulkUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceAppBulkUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceAppBulkUpdateRequest(val *SourceAppBulkUpdateRequest) *NullableSourceAppBulkUpdateRequest {
	return &NullableSourceAppBulkUpdateRequest{value: val, isSet: true}
}

func (v NullableSourceAppBulkUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceAppBulkUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


