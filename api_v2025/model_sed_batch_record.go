/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
	
)

// checks if the SedBatchRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SedBatchRecord{}

// SedBatchRecord Sed Batch Record
type SedBatchRecord struct {
	// The tenant ID associated with the batch.
	TenantId *string `json:"tenantId,omitempty"`
	// The unique ID of the batch.
	BatchId *string `json:"batchId,omitempty"`
	// The name of the batch.
	Name NullableString `json:"name,omitempty"`
	// The current state of the batch (e.g., submitted, materialized, completed).
	ProcessedState NullableString `json:"processedState,omitempty"`
	// The ID of the user who requested the batch.
	RequestedBy *string `json:"requestedBy,omitempty"`
	// The number of items materialized in the batch.
	MaterializedCount *int32 `json:"materializedCount,omitempty"`
	// The number of items processed in the batch.
	ProcessedCount *int32 `json:"processedCount,omitempty"`
	// The timestamp when the batch was created.
	CreatedAt *SailPointTime `json:"createdAt,omitempty"`
	// The timestamp when the batch was last updated.
	UpdatedAt NullableTime `json:"updatedAt,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SedBatchRecord SedBatchRecord

// NewSedBatchRecord instantiates a new SedBatchRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSedBatchRecord() *SedBatchRecord {
	this := SedBatchRecord{}
	return &this
}

// NewSedBatchRecordWithDefaults instantiates a new SedBatchRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSedBatchRecordWithDefaults() *SedBatchRecord {
	this := SedBatchRecord{}
	return &this
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *SedBatchRecord) GetTenantId() string {
	if o == nil || IsNil(o.TenantId) {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SedBatchRecord) GetTenantIdOk() (*string, bool) {
	if o == nil || IsNil(o.TenantId) {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *SedBatchRecord) HasTenantId() bool {
	if o != nil && !IsNil(o.TenantId) {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *SedBatchRecord) SetTenantId(v string) {
	o.TenantId = &v
}

// GetBatchId returns the BatchId field value if set, zero value otherwise.
func (o *SedBatchRecord) GetBatchId() string {
	if o == nil || IsNil(o.BatchId) {
		var ret string
		return ret
	}
	return *o.BatchId
}

// GetBatchIdOk returns a tuple with the BatchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SedBatchRecord) GetBatchIdOk() (*string, bool) {
	if o == nil || IsNil(o.BatchId) {
		return nil, false
	}
	return o.BatchId, true
}

// HasBatchId returns a boolean if a field has been set.
func (o *SedBatchRecord) HasBatchId() bool {
	if o != nil && !IsNil(o.BatchId) {
		return true
	}

	return false
}

// SetBatchId gets a reference to the given string and assigns it to the BatchId field.
func (o *SedBatchRecord) SetBatchId(v string) {
	o.BatchId = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SedBatchRecord) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SedBatchRecord) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *SedBatchRecord) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *SedBatchRecord) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *SedBatchRecord) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *SedBatchRecord) UnsetName() {
	o.Name.Unset()
}

// GetProcessedState returns the ProcessedState field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SedBatchRecord) GetProcessedState() string {
	if o == nil || IsNil(o.ProcessedState.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessedState.Get()
}

// GetProcessedStateOk returns a tuple with the ProcessedState field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SedBatchRecord) GetProcessedStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessedState.Get(), o.ProcessedState.IsSet()
}

// HasProcessedState returns a boolean if a field has been set.
func (o *SedBatchRecord) HasProcessedState() bool {
	if o != nil && o.ProcessedState.IsSet() {
		return true
	}

	return false
}

// SetProcessedState gets a reference to the given NullableString and assigns it to the ProcessedState field.
func (o *SedBatchRecord) SetProcessedState(v string) {
	o.ProcessedState.Set(&v)
}
// SetProcessedStateNil sets the value for ProcessedState to be an explicit nil
func (o *SedBatchRecord) SetProcessedStateNil() {
	o.ProcessedState.Set(nil)
}

// UnsetProcessedState ensures that no value is present for ProcessedState, not even an explicit nil
func (o *SedBatchRecord) UnsetProcessedState() {
	o.ProcessedState.Unset()
}

// GetRequestedBy returns the RequestedBy field value if set, zero value otherwise.
func (o *SedBatchRecord) GetRequestedBy() string {
	if o == nil || IsNil(o.RequestedBy) {
		var ret string
		return ret
	}
	return *o.RequestedBy
}

// GetRequestedByOk returns a tuple with the RequestedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SedBatchRecord) GetRequestedByOk() (*string, bool) {
	if o == nil || IsNil(o.RequestedBy) {
		return nil, false
	}
	return o.RequestedBy, true
}

// HasRequestedBy returns a boolean if a field has been set.
func (o *SedBatchRecord) HasRequestedBy() bool {
	if o != nil && !IsNil(o.RequestedBy) {
		return true
	}

	return false
}

// SetRequestedBy gets a reference to the given string and assigns it to the RequestedBy field.
func (o *SedBatchRecord) SetRequestedBy(v string) {
	o.RequestedBy = &v
}

// GetMaterializedCount returns the MaterializedCount field value if set, zero value otherwise.
func (o *SedBatchRecord) GetMaterializedCount() int32 {
	if o == nil || IsNil(o.MaterializedCount) {
		var ret int32
		return ret
	}
	return *o.MaterializedCount
}

// GetMaterializedCountOk returns a tuple with the MaterializedCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SedBatchRecord) GetMaterializedCountOk() (*int32, bool) {
	if o == nil || IsNil(o.MaterializedCount) {
		return nil, false
	}
	return o.MaterializedCount, true
}

// HasMaterializedCount returns a boolean if a field has been set.
func (o *SedBatchRecord) HasMaterializedCount() bool {
	if o != nil && !IsNil(o.MaterializedCount) {
		return true
	}

	return false
}

// SetMaterializedCount gets a reference to the given int32 and assigns it to the MaterializedCount field.
func (o *SedBatchRecord) SetMaterializedCount(v int32) {
	o.MaterializedCount = &v
}

// GetProcessedCount returns the ProcessedCount field value if set, zero value otherwise.
func (o *SedBatchRecord) GetProcessedCount() int32 {
	if o == nil || IsNil(o.ProcessedCount) {
		var ret int32
		return ret
	}
	return *o.ProcessedCount
}

// GetProcessedCountOk returns a tuple with the ProcessedCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SedBatchRecord) GetProcessedCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ProcessedCount) {
		return nil, false
	}
	return o.ProcessedCount, true
}

// HasProcessedCount returns a boolean if a field has been set.
func (o *SedBatchRecord) HasProcessedCount() bool {
	if o != nil && !IsNil(o.ProcessedCount) {
		return true
	}

	return false
}

// SetProcessedCount gets a reference to the given int32 and assigns it to the ProcessedCount field.
func (o *SedBatchRecord) SetProcessedCount(v int32) {
	o.ProcessedCount = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *SedBatchRecord) GetCreatedAt() SailPointTime {
	if o == nil || IsNil(o.CreatedAt) {
		var ret SailPointTime
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SedBatchRecord) GetCreatedAtOk() (*SailPointTime, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *SedBatchRecord) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given SailPointTime and assigns it to the CreatedAt field.
func (o *SedBatchRecord) SetCreatedAt(v SailPointTime) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SedBatchRecord) GetUpdatedAt() SailPointTime {
	if o == nil || IsNil(o.UpdatedAt.Get()) {
		var ret SailPointTime
		return ret
	}
	return *o.UpdatedAt.Get()
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SedBatchRecord) GetUpdatedAtOk() (*SailPointTime, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdatedAt.Get(), o.UpdatedAt.IsSet()
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *SedBatchRecord) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt.IsSet() {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given NullableTime and assigns it to the UpdatedAt field.
func (o *SedBatchRecord) SetUpdatedAt(v SailPointTime) {
	o.UpdatedAt.Set(&v)
}
// SetUpdatedAtNil sets the value for UpdatedAt to be an explicit nil
func (o *SedBatchRecord) SetUpdatedAtNil() {
	o.UpdatedAt.Set(nil)
}

// UnsetUpdatedAt ensures that no value is present for UpdatedAt, not even an explicit nil
func (o *SedBatchRecord) UnsetUpdatedAt() {
	o.UpdatedAt.Unset()
}

func (o SedBatchRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SedBatchRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TenantId) {
		toSerialize["tenantId"] = o.TenantId
	}
	if !IsNil(o.BatchId) {
		toSerialize["batchId"] = o.BatchId
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.ProcessedState.IsSet() {
		toSerialize["processedState"] = o.ProcessedState.Get()
	}
	if !IsNil(o.RequestedBy) {
		toSerialize["requestedBy"] = o.RequestedBy
	}
	if !IsNil(o.MaterializedCount) {
		toSerialize["materializedCount"] = o.MaterializedCount
	}
	if !IsNil(o.ProcessedCount) {
		toSerialize["processedCount"] = o.ProcessedCount
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.UpdatedAt.IsSet() {
		toSerialize["updatedAt"] = o.UpdatedAt.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SedBatchRecord) UnmarshalJSON(data []byte) (err error) {
	varSedBatchRecord := _SedBatchRecord{}

	err = json.Unmarshal(data, &varSedBatchRecord)

	if err != nil {
		return err
	}

	*o = SedBatchRecord(varSedBatchRecord)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "tenantId")
		delete(additionalProperties, "batchId")
		delete(additionalProperties, "name")
		delete(additionalProperties, "processedState")
		delete(additionalProperties, "requestedBy")
		delete(additionalProperties, "materializedCount")
		delete(additionalProperties, "processedCount")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "updatedAt")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSedBatchRecord struct {
	value *SedBatchRecord
	isSet bool
}

func (v NullableSedBatchRecord) Get() *SedBatchRecord {
	return v.value
}

func (v *NullableSedBatchRecord) Set(val *SedBatchRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableSedBatchRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableSedBatchRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSedBatchRecord(val *SedBatchRecord) *NullableSedBatchRecord {
	return &NullableSedBatchRecord{value: val, isSet: true}
}

func (v NullableSedBatchRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSedBatchRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


