/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
	"fmt"
)

// checks if the ManagedClusterRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManagedClusterRequest{}

// ManagedClusterRequest Request to create Managed Cluster
type ManagedClusterRequest struct {
	// ManagedCluster name
	Name string `json:"name"`
	Type *ManagedClusterTypes `json:"type,omitempty"`
	// ManagedProcess configuration map
	Configuration *map[string]string `json:"configuration,omitempty"`
	// ManagedCluster description
	Description NullableString `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ManagedClusterRequest ManagedClusterRequest

// NewManagedClusterRequest instantiates a new ManagedClusterRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagedClusterRequest(name string) *ManagedClusterRequest {
	this := ManagedClusterRequest{}
	this.Name = name
	return &this
}

// NewManagedClusterRequestWithDefaults instantiates a new ManagedClusterRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagedClusterRequestWithDefaults() *ManagedClusterRequest {
	this := ManagedClusterRequest{}
	return &this
}

// GetName returns the Name field value
func (o *ManagedClusterRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ManagedClusterRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ManagedClusterRequest) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ManagedClusterRequest) GetType() ManagedClusterTypes {
	if o == nil || IsNil(o.Type) {
		var ret ManagedClusterTypes
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedClusterRequest) GetTypeOk() (*ManagedClusterTypes, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ManagedClusterRequest) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ManagedClusterTypes and assigns it to the Type field.
func (o *ManagedClusterRequest) SetType(v ManagedClusterTypes) {
	o.Type = &v
}

// GetConfiguration returns the Configuration field value if set, zero value otherwise.
func (o *ManagedClusterRequest) GetConfiguration() map[string]string {
	if o == nil || IsNil(o.Configuration) {
		var ret map[string]string
		return ret
	}
	return *o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedClusterRequest) GetConfigurationOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Configuration) {
		return nil, false
	}
	return o.Configuration, true
}

// HasConfiguration returns a boolean if a field has been set.
func (o *ManagedClusterRequest) HasConfiguration() bool {
	if o != nil && !IsNil(o.Configuration) {
		return true
	}

	return false
}

// SetConfiguration gets a reference to the given map[string]string and assigns it to the Configuration field.
func (o *ManagedClusterRequest) SetConfiguration(v map[string]string) {
	o.Configuration = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManagedClusterRequest) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagedClusterRequest) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *ManagedClusterRequest) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *ManagedClusterRequest) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *ManagedClusterRequest) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *ManagedClusterRequest) UnsetDescription() {
	o.Description.Unset()
}

func (o ManagedClusterRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManagedClusterRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Configuration) {
		toSerialize["configuration"] = o.Configuration
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ManagedClusterRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varManagedClusterRequest := _ManagedClusterRequest{}

	err = json.Unmarshal(data, &varManagedClusterRequest)

	if err != nil {
		return err
	}

	*o = ManagedClusterRequest(varManagedClusterRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "type")
		delete(additionalProperties, "configuration")
		delete(additionalProperties, "description")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableManagedClusterRequest struct {
	value *ManagedClusterRequest
	isSet bool
}

func (v NullableManagedClusterRequest) Get() *ManagedClusterRequest {
	return v.value
}

func (v *NullableManagedClusterRequest) Set(val *ManagedClusterRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableManagedClusterRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableManagedClusterRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagedClusterRequest(val *ManagedClusterRequest) *NullableManagedClusterRequest {
	return &NullableManagedClusterRequest{value: val, isSet: true}
}

func (v NullableManagedClusterRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagedClusterRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


