/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
	"fmt"
)

// checks if the SourceSchedule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SourceSchedule{}

// SourceSchedule struct for SourceSchedule
type SourceSchedule struct {
	// The type of the Schedule.
	Type string `json:"type"`
	// The cron expression of the schedule.
	CronExpression string `json:"cronExpression"`
	AdditionalProperties map[string]interface{}
}

type _SourceSchedule SourceSchedule

// NewSourceSchedule instantiates a new SourceSchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceSchedule(type_ string, cronExpression string) *SourceSchedule {
	this := SourceSchedule{}
	this.Type = type_
	this.CronExpression = cronExpression
	return &this
}

// NewSourceScheduleWithDefaults instantiates a new SourceSchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceScheduleWithDefaults() *SourceSchedule {
	this := SourceSchedule{}
	return &this
}

// GetType returns the Type field value
func (o *SourceSchedule) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SourceSchedule) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SourceSchedule) SetType(v string) {
	o.Type = v
}

// GetCronExpression returns the CronExpression field value
func (o *SourceSchedule) GetCronExpression() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CronExpression
}

// GetCronExpressionOk returns a tuple with the CronExpression field value
// and a boolean to check if the value has been set.
func (o *SourceSchedule) GetCronExpressionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CronExpression, true
}

// SetCronExpression sets field value
func (o *SourceSchedule) SetCronExpression(v string) {
	o.CronExpression = v
}

func (o SourceSchedule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SourceSchedule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["cronExpression"] = o.CronExpression

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SourceSchedule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"cronExpression",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSourceSchedule := _SourceSchedule{}

	err = json.Unmarshal(data, &varSourceSchedule)

	if err != nil {
		return err
	}

	*o = SourceSchedule(varSourceSchedule)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "cronExpression")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSourceSchedule struct {
	value *SourceSchedule
	isSet bool
}

func (v NullableSourceSchedule) Get() *SourceSchedule {
	return v.value
}

func (v *NullableSourceSchedule) Set(val *SourceSchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceSchedule(val *SourceSchedule) *NullableSourceSchedule {
	return &NullableSourceSchedule{value: val, isSet: true}
}

func (v NullableSourceSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


