/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
)

// checks if the MatchTerm type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchTerm{}

// MatchTerm struct for MatchTerm
type MatchTerm struct {
	// The attribute name
	Name *string `json:"name,omitempty"`
	// The attribute value
	Value *string `json:"value,omitempty"`
	// The operator between name and value
	Op *string `json:"op,omitempty"`
	// If it is a container or a real match term
	Container *bool `json:"container,omitempty"`
	// If it is AND logical operator for the children match terms
	And *bool `json:"and,omitempty"`
	// The children under this match term
	Children []map[string]interface{} `json:"children,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MatchTerm MatchTerm

// NewMatchTerm instantiates a new MatchTerm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchTerm() *MatchTerm {
	this := MatchTerm{}
	var container bool = false
	this.Container = &container
	var and bool = false
	this.And = &and
	return &this
}

// NewMatchTermWithDefaults instantiates a new MatchTerm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchTermWithDefaults() *MatchTerm {
	this := MatchTerm{}
	var container bool = false
	this.Container = &container
	var and bool = false
	this.And = &and
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MatchTerm) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchTerm) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MatchTerm) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MatchTerm) SetName(v string) {
	o.Name = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *MatchTerm) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchTerm) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *MatchTerm) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *MatchTerm) SetValue(v string) {
	o.Value = &v
}

// GetOp returns the Op field value if set, zero value otherwise.
func (o *MatchTerm) GetOp() string {
	if o == nil || IsNil(o.Op) {
		var ret string
		return ret
	}
	return *o.Op
}

// GetOpOk returns a tuple with the Op field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchTerm) GetOpOk() (*string, bool) {
	if o == nil || IsNil(o.Op) {
		return nil, false
	}
	return o.Op, true
}

// HasOp returns a boolean if a field has been set.
func (o *MatchTerm) HasOp() bool {
	if o != nil && !IsNil(o.Op) {
		return true
	}

	return false
}

// SetOp gets a reference to the given string and assigns it to the Op field.
func (o *MatchTerm) SetOp(v string) {
	o.Op = &v
}

// GetContainer returns the Container field value if set, zero value otherwise.
func (o *MatchTerm) GetContainer() bool {
	if o == nil || IsNil(o.Container) {
		var ret bool
		return ret
	}
	return *o.Container
}

// GetContainerOk returns a tuple with the Container field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchTerm) GetContainerOk() (*bool, bool) {
	if o == nil || IsNil(o.Container) {
		return nil, false
	}
	return o.Container, true
}

// HasContainer returns a boolean if a field has been set.
func (o *MatchTerm) HasContainer() bool {
	if o != nil && !IsNil(o.Container) {
		return true
	}

	return false
}

// SetContainer gets a reference to the given bool and assigns it to the Container field.
func (o *MatchTerm) SetContainer(v bool) {
	o.Container = &v
}

// GetAnd returns the And field value if set, zero value otherwise.
func (o *MatchTerm) GetAnd() bool {
	if o == nil || IsNil(o.And) {
		var ret bool
		return ret
	}
	return *o.And
}

// GetAndOk returns a tuple with the And field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchTerm) GetAndOk() (*bool, bool) {
	if o == nil || IsNil(o.And) {
		return nil, false
	}
	return o.And, true
}

// HasAnd returns a boolean if a field has been set.
func (o *MatchTerm) HasAnd() bool {
	if o != nil && !IsNil(o.And) {
		return true
	}

	return false
}

// SetAnd gets a reference to the given bool and assigns it to the And field.
func (o *MatchTerm) SetAnd(v bool) {
	o.And = &v
}

// GetChildren returns the Children field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchTerm) GetChildren() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}
	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchTerm) GetChildrenOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Children) {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *MatchTerm) HasChildren() bool {
	if o != nil && !IsNil(o.Children) {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []map[string]interface{} and assigns it to the Children field.
func (o *MatchTerm) SetChildren(v []map[string]interface{}) {
	o.Children = v
}

func (o MatchTerm) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchTerm) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Op) {
		toSerialize["op"] = o.Op
	}
	if !IsNil(o.Container) {
		toSerialize["container"] = o.Container
	}
	if !IsNil(o.And) {
		toSerialize["and"] = o.And
	}
	if o.Children != nil {
		toSerialize["children"] = o.Children
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MatchTerm) UnmarshalJSON(data []byte) (err error) {
	varMatchTerm := _MatchTerm{}

	err = json.Unmarshal(data, &varMatchTerm)

	if err != nil {
		return err
	}

	*o = MatchTerm(varMatchTerm)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "value")
		delete(additionalProperties, "op")
		delete(additionalProperties, "container")
		delete(additionalProperties, "and")
		delete(additionalProperties, "children")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMatchTerm struct {
	value *MatchTerm
	isSet bool
}

func (v NullableMatchTerm) Get() *MatchTerm {
	return v.value
}

func (v *NullableMatchTerm) Set(val *MatchTerm) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchTerm) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchTerm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchTerm(val *MatchTerm) *NullableMatchTerm {
	return &NullableMatchTerm{value: val, isSet: true}
}

func (v NullableMatchTerm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchTerm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


