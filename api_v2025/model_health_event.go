/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
	
)

// checks if the HealthEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HealthEvent{}

// HealthEvent Individual error or warning event
type HealthEvent struct {
	// Description of the issue
	DetailedMessage *string `json:"detailedMessage,omitempty"`
	// Unique identifier for the health event
	Uuid *string `json:"uuid,omitempty"`
	// Optional URL associated with the issue
	Url NullableString `json:"url,omitempty"`
	// Time when the event occurred
	Timestamp *SailPointTime `json:"timestamp,omitempty"`
	// Last time notification was sent for this issue
	LastNotifiedTimeStamp *SailPointTime `json:"lastNotifiedTimeStamp,omitempty"`
	// CPU usage percentage
	CpuUtilizationPercentage NullableFloat32 `json:"cpuUtilizationPercentage,omitempty"`
	// Free memory percentage
	FreeSpacePercentage NullableFloat32 `json:"freeSpacePercentage,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HealthEvent HealthEvent

// NewHealthEvent instantiates a new HealthEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHealthEvent() *HealthEvent {
	this := HealthEvent{}
	return &this
}

// NewHealthEventWithDefaults instantiates a new HealthEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHealthEventWithDefaults() *HealthEvent {
	this := HealthEvent{}
	return &this
}

// GetDetailedMessage returns the DetailedMessage field value if set, zero value otherwise.
func (o *HealthEvent) GetDetailedMessage() string {
	if o == nil || IsNil(o.DetailedMessage) {
		var ret string
		return ret
	}
	return *o.DetailedMessage
}

// GetDetailedMessageOk returns a tuple with the DetailedMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthEvent) GetDetailedMessageOk() (*string, bool) {
	if o == nil || IsNil(o.DetailedMessage) {
		return nil, false
	}
	return o.DetailedMessage, true
}

// HasDetailedMessage returns a boolean if a field has been set.
func (o *HealthEvent) HasDetailedMessage() bool {
	if o != nil && !IsNil(o.DetailedMessage) {
		return true
	}

	return false
}

// SetDetailedMessage gets a reference to the given string and assigns it to the DetailedMessage field.
func (o *HealthEvent) SetDetailedMessage(v string) {
	o.DetailedMessage = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *HealthEvent) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthEvent) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *HealthEvent) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *HealthEvent) SetUuid(v string) {
	o.Uuid = &v
}

// GetUrl returns the Url field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HealthEvent) GetUrl() string {
	if o == nil || IsNil(o.Url.Get()) {
		var ret string
		return ret
	}
	return *o.Url.Get()
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HealthEvent) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Url.Get(), o.Url.IsSet()
}

// HasUrl returns a boolean if a field has been set.
func (o *HealthEvent) HasUrl() bool {
	if o != nil && o.Url.IsSet() {
		return true
	}

	return false
}

// SetUrl gets a reference to the given NullableString and assigns it to the Url field.
func (o *HealthEvent) SetUrl(v string) {
	o.Url.Set(&v)
}
// SetUrlNil sets the value for Url to be an explicit nil
func (o *HealthEvent) SetUrlNil() {
	o.Url.Set(nil)
}

// UnsetUrl ensures that no value is present for Url, not even an explicit nil
func (o *HealthEvent) UnsetUrl() {
	o.Url.Unset()
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *HealthEvent) GetTimestamp() SailPointTime {
	if o == nil || IsNil(o.Timestamp) {
		var ret SailPointTime
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthEvent) GetTimestampOk() (*SailPointTime, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *HealthEvent) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given SailPointTime and assigns it to the Timestamp field.
func (o *HealthEvent) SetTimestamp(v SailPointTime) {
	o.Timestamp = &v
}

// GetLastNotifiedTimeStamp returns the LastNotifiedTimeStamp field value if set, zero value otherwise.
func (o *HealthEvent) GetLastNotifiedTimeStamp() SailPointTime {
	if o == nil || IsNil(o.LastNotifiedTimeStamp) {
		var ret SailPointTime
		return ret
	}
	return *o.LastNotifiedTimeStamp
}

// GetLastNotifiedTimeStampOk returns a tuple with the LastNotifiedTimeStamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthEvent) GetLastNotifiedTimeStampOk() (*SailPointTime, bool) {
	if o == nil || IsNil(o.LastNotifiedTimeStamp) {
		return nil, false
	}
	return o.LastNotifiedTimeStamp, true
}

// HasLastNotifiedTimeStamp returns a boolean if a field has been set.
func (o *HealthEvent) HasLastNotifiedTimeStamp() bool {
	if o != nil && !IsNil(o.LastNotifiedTimeStamp) {
		return true
	}

	return false
}

// SetLastNotifiedTimeStamp gets a reference to the given SailPointTime and assigns it to the LastNotifiedTimeStamp field.
func (o *HealthEvent) SetLastNotifiedTimeStamp(v SailPointTime) {
	o.LastNotifiedTimeStamp = &v
}

// GetCpuUtilizationPercentage returns the CpuUtilizationPercentage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HealthEvent) GetCpuUtilizationPercentage() float32 {
	if o == nil || IsNil(o.CpuUtilizationPercentage.Get()) {
		var ret float32
		return ret
	}
	return *o.CpuUtilizationPercentage.Get()
}

// GetCpuUtilizationPercentageOk returns a tuple with the CpuUtilizationPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HealthEvent) GetCpuUtilizationPercentageOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.CpuUtilizationPercentage.Get(), o.CpuUtilizationPercentage.IsSet()
}

// HasCpuUtilizationPercentage returns a boolean if a field has been set.
func (o *HealthEvent) HasCpuUtilizationPercentage() bool {
	if o != nil && o.CpuUtilizationPercentage.IsSet() {
		return true
	}

	return false
}

// SetCpuUtilizationPercentage gets a reference to the given NullableFloat32 and assigns it to the CpuUtilizationPercentage field.
func (o *HealthEvent) SetCpuUtilizationPercentage(v float32) {
	o.CpuUtilizationPercentage.Set(&v)
}
// SetCpuUtilizationPercentageNil sets the value for CpuUtilizationPercentage to be an explicit nil
func (o *HealthEvent) SetCpuUtilizationPercentageNil() {
	o.CpuUtilizationPercentage.Set(nil)
}

// UnsetCpuUtilizationPercentage ensures that no value is present for CpuUtilizationPercentage, not even an explicit nil
func (o *HealthEvent) UnsetCpuUtilizationPercentage() {
	o.CpuUtilizationPercentage.Unset()
}

// GetFreeSpacePercentage returns the FreeSpacePercentage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HealthEvent) GetFreeSpacePercentage() float32 {
	if o == nil || IsNil(o.FreeSpacePercentage.Get()) {
		var ret float32
		return ret
	}
	return *o.FreeSpacePercentage.Get()
}

// GetFreeSpacePercentageOk returns a tuple with the FreeSpacePercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HealthEvent) GetFreeSpacePercentageOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.FreeSpacePercentage.Get(), o.FreeSpacePercentage.IsSet()
}

// HasFreeSpacePercentage returns a boolean if a field has been set.
func (o *HealthEvent) HasFreeSpacePercentage() bool {
	if o != nil && o.FreeSpacePercentage.IsSet() {
		return true
	}

	return false
}

// SetFreeSpacePercentage gets a reference to the given NullableFloat32 and assigns it to the FreeSpacePercentage field.
func (o *HealthEvent) SetFreeSpacePercentage(v float32) {
	o.FreeSpacePercentage.Set(&v)
}
// SetFreeSpacePercentageNil sets the value for FreeSpacePercentage to be an explicit nil
func (o *HealthEvent) SetFreeSpacePercentageNil() {
	o.FreeSpacePercentage.Set(nil)
}

// UnsetFreeSpacePercentage ensures that no value is present for FreeSpacePercentage, not even an explicit nil
func (o *HealthEvent) UnsetFreeSpacePercentage() {
	o.FreeSpacePercentage.Unset()
}

func (o HealthEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HealthEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DetailedMessage) {
		toSerialize["detailedMessage"] = o.DetailedMessage
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if o.Url.IsSet() {
		toSerialize["url"] = o.Url.Get()
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.LastNotifiedTimeStamp) {
		toSerialize["lastNotifiedTimeStamp"] = o.LastNotifiedTimeStamp
	}
	if o.CpuUtilizationPercentage.IsSet() {
		toSerialize["cpuUtilizationPercentage"] = o.CpuUtilizationPercentage.Get()
	}
	if o.FreeSpacePercentage.IsSet() {
		toSerialize["freeSpacePercentage"] = o.FreeSpacePercentage.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HealthEvent) UnmarshalJSON(data []byte) (err error) {
	varHealthEvent := _HealthEvent{}

	err = json.Unmarshal(data, &varHealthEvent)

	if err != nil {
		return err
	}

	*o = HealthEvent(varHealthEvent)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "detailedMessage")
		delete(additionalProperties, "uuid")
		delete(additionalProperties, "url")
		delete(additionalProperties, "timestamp")
		delete(additionalProperties, "lastNotifiedTimeStamp")
		delete(additionalProperties, "cpuUtilizationPercentage")
		delete(additionalProperties, "freeSpacePercentage")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHealthEvent struct {
	value *HealthEvent
	isSet bool
}

func (v NullableHealthEvent) Get() *HealthEvent {
	return v.value
}

func (v *NullableHealthEvent) Set(val *HealthEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableHealthEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableHealthEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHealthEvent(val *HealthEvent) *NullableHealthEvent {
	return &NullableHealthEvent{value: val, isSet: true}
}

func (v NullableHealthEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHealthEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


