/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
)

// checks if the ApprovalReassignRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApprovalReassignRequest{}

// ApprovalReassignRequest Request body for reassigning an approval request to another identity. This results in that identity being added as an authorized approver.
type ApprovalReassignRequest struct {
	// Comment associated with the reassign request.
	Comment *string `json:"comment,omitempty"`
	// Identity from which the approval is being reassigned. If left blank, and the approval is currently assigned to the user calling this endpoint, it will use the calling user's identity. If left blank, and the approval is not currently assigned to the user calling this endpoint, you need to be an admin, which would add the reassignTo as a new approver.
	ReassignFrom *string `json:"reassignFrom,omitempty"`
	// Identity to which the approval is being reassigned.
	ReassignTo *string `json:"reassignTo,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ApprovalReassignRequest ApprovalReassignRequest

// NewApprovalReassignRequest instantiates a new ApprovalReassignRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApprovalReassignRequest() *ApprovalReassignRequest {
	this := ApprovalReassignRequest{}
	return &this
}

// NewApprovalReassignRequestWithDefaults instantiates a new ApprovalReassignRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApprovalReassignRequestWithDefaults() *ApprovalReassignRequest {
	this := ApprovalReassignRequest{}
	return &this
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *ApprovalReassignRequest) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalReassignRequest) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *ApprovalReassignRequest) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *ApprovalReassignRequest) SetComment(v string) {
	o.Comment = &v
}

// GetReassignFrom returns the ReassignFrom field value if set, zero value otherwise.
func (o *ApprovalReassignRequest) GetReassignFrom() string {
	if o == nil || IsNil(o.ReassignFrom) {
		var ret string
		return ret
	}
	return *o.ReassignFrom
}

// GetReassignFromOk returns a tuple with the ReassignFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalReassignRequest) GetReassignFromOk() (*string, bool) {
	if o == nil || IsNil(o.ReassignFrom) {
		return nil, false
	}
	return o.ReassignFrom, true
}

// HasReassignFrom returns a boolean if a field has been set.
func (o *ApprovalReassignRequest) HasReassignFrom() bool {
	if o != nil && !IsNil(o.ReassignFrom) {
		return true
	}

	return false
}

// SetReassignFrom gets a reference to the given string and assigns it to the ReassignFrom field.
func (o *ApprovalReassignRequest) SetReassignFrom(v string) {
	o.ReassignFrom = &v
}

// GetReassignTo returns the ReassignTo field value if set, zero value otherwise.
func (o *ApprovalReassignRequest) GetReassignTo() string {
	if o == nil || IsNil(o.ReassignTo) {
		var ret string
		return ret
	}
	return *o.ReassignTo
}

// GetReassignToOk returns a tuple with the ReassignTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalReassignRequest) GetReassignToOk() (*string, bool) {
	if o == nil || IsNil(o.ReassignTo) {
		return nil, false
	}
	return o.ReassignTo, true
}

// HasReassignTo returns a boolean if a field has been set.
func (o *ApprovalReassignRequest) HasReassignTo() bool {
	if o != nil && !IsNil(o.ReassignTo) {
		return true
	}

	return false
}

// SetReassignTo gets a reference to the given string and assigns it to the ReassignTo field.
func (o *ApprovalReassignRequest) SetReassignTo(v string) {
	o.ReassignTo = &v
}

func (o ApprovalReassignRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApprovalReassignRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.ReassignFrom) {
		toSerialize["reassignFrom"] = o.ReassignFrom
	}
	if !IsNil(o.ReassignTo) {
		toSerialize["reassignTo"] = o.ReassignTo
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ApprovalReassignRequest) UnmarshalJSON(data []byte) (err error) {
	varApprovalReassignRequest := _ApprovalReassignRequest{}

	err = json.Unmarshal(data, &varApprovalReassignRequest)

	if err != nil {
		return err
	}

	*o = ApprovalReassignRequest(varApprovalReassignRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "comment")
		delete(additionalProperties, "reassignFrom")
		delete(additionalProperties, "reassignTo")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApprovalReassignRequest struct {
	value *ApprovalReassignRequest
	isSet bool
}

func (v NullableApprovalReassignRequest) Get() *ApprovalReassignRequest {
	return v.value
}

func (v *NullableApprovalReassignRequest) Set(val *ApprovalReassignRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableApprovalReassignRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableApprovalReassignRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApprovalReassignRequest(val *ApprovalReassignRequest) *NullableApprovalReassignRequest {
	return &NullableApprovalReassignRequest{value: val, isSet: true}
}

func (v NullableApprovalReassignRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApprovalReassignRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


