/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
	
)

// checks if the ApprovalIdentityRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApprovalIdentityRecord{}

// ApprovalIdentityRecord Identity Record Object
type ApprovalIdentityRecord struct {
	// Identity ID.
	IdentityID *string `json:"identityID,omitempty"`
	// Type of identity.
	Type *string `json:"type,omitempty"`
	// Name of the identity.
	Name *string `json:"name,omitempty"`
	// List of references representing actions taken by the identity.
	ActionedAs []ApprovalReference `json:"actionedAs,omitempty"`
	// List of references representing members of the identity.
	Members []ApprovalReference `json:"members,omitempty"`
	// Date when the decision was made.
	DecisionDate *SailPointTime `json:"decisionDate,omitempty"`
	// Email associated with the identity.
	Email *string `json:"email,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ApprovalIdentityRecord ApprovalIdentityRecord

// NewApprovalIdentityRecord instantiates a new ApprovalIdentityRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApprovalIdentityRecord() *ApprovalIdentityRecord {
	this := ApprovalIdentityRecord{}
	return &this
}

// NewApprovalIdentityRecordWithDefaults instantiates a new ApprovalIdentityRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApprovalIdentityRecordWithDefaults() *ApprovalIdentityRecord {
	this := ApprovalIdentityRecord{}
	return &this
}

// GetIdentityID returns the IdentityID field value if set, zero value otherwise.
func (o *ApprovalIdentityRecord) GetIdentityID() string {
	if o == nil || IsNil(o.IdentityID) {
		var ret string
		return ret
	}
	return *o.IdentityID
}

// GetIdentityIDOk returns a tuple with the IdentityID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalIdentityRecord) GetIdentityIDOk() (*string, bool) {
	if o == nil || IsNil(o.IdentityID) {
		return nil, false
	}
	return o.IdentityID, true
}

// HasIdentityID returns a boolean if a field has been set.
func (o *ApprovalIdentityRecord) HasIdentityID() bool {
	if o != nil && !IsNil(o.IdentityID) {
		return true
	}

	return false
}

// SetIdentityID gets a reference to the given string and assigns it to the IdentityID field.
func (o *ApprovalIdentityRecord) SetIdentityID(v string) {
	o.IdentityID = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ApprovalIdentityRecord) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalIdentityRecord) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ApprovalIdentityRecord) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ApprovalIdentityRecord) SetType(v string) {
	o.Type = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ApprovalIdentityRecord) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalIdentityRecord) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ApprovalIdentityRecord) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ApprovalIdentityRecord) SetName(v string) {
	o.Name = &v
}

// GetActionedAs returns the ActionedAs field value if set, zero value otherwise.
func (o *ApprovalIdentityRecord) GetActionedAs() []ApprovalReference {
	if o == nil || IsNil(o.ActionedAs) {
		var ret []ApprovalReference
		return ret
	}
	return o.ActionedAs
}

// GetActionedAsOk returns a tuple with the ActionedAs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalIdentityRecord) GetActionedAsOk() ([]ApprovalReference, bool) {
	if o == nil || IsNil(o.ActionedAs) {
		return nil, false
	}
	return o.ActionedAs, true
}

// HasActionedAs returns a boolean if a field has been set.
func (o *ApprovalIdentityRecord) HasActionedAs() bool {
	if o != nil && !IsNil(o.ActionedAs) {
		return true
	}

	return false
}

// SetActionedAs gets a reference to the given []ApprovalReference and assigns it to the ActionedAs field.
func (o *ApprovalIdentityRecord) SetActionedAs(v []ApprovalReference) {
	o.ActionedAs = v
}

// GetMembers returns the Members field value if set, zero value otherwise.
func (o *ApprovalIdentityRecord) GetMembers() []ApprovalReference {
	if o == nil || IsNil(o.Members) {
		var ret []ApprovalReference
		return ret
	}
	return o.Members
}

// GetMembersOk returns a tuple with the Members field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalIdentityRecord) GetMembersOk() ([]ApprovalReference, bool) {
	if o == nil || IsNil(o.Members) {
		return nil, false
	}
	return o.Members, true
}

// HasMembers returns a boolean if a field has been set.
func (o *ApprovalIdentityRecord) HasMembers() bool {
	if o != nil && !IsNil(o.Members) {
		return true
	}

	return false
}

// SetMembers gets a reference to the given []ApprovalReference and assigns it to the Members field.
func (o *ApprovalIdentityRecord) SetMembers(v []ApprovalReference) {
	o.Members = v
}

// GetDecisionDate returns the DecisionDate field value if set, zero value otherwise.
func (o *ApprovalIdentityRecord) GetDecisionDate() SailPointTime {
	if o == nil || IsNil(o.DecisionDate) {
		var ret SailPointTime
		return ret
	}
	return *o.DecisionDate
}

// GetDecisionDateOk returns a tuple with the DecisionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalIdentityRecord) GetDecisionDateOk() (*SailPointTime, bool) {
	if o == nil || IsNil(o.DecisionDate) {
		return nil, false
	}
	return o.DecisionDate, true
}

// HasDecisionDate returns a boolean if a field has been set.
func (o *ApprovalIdentityRecord) HasDecisionDate() bool {
	if o != nil && !IsNil(o.DecisionDate) {
		return true
	}

	return false
}

// SetDecisionDate gets a reference to the given SailPointTime and assigns it to the DecisionDate field.
func (o *ApprovalIdentityRecord) SetDecisionDate(v SailPointTime) {
	o.DecisionDate = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *ApprovalIdentityRecord) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalIdentityRecord) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *ApprovalIdentityRecord) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *ApprovalIdentityRecord) SetEmail(v string) {
	o.Email = &v
}

func (o ApprovalIdentityRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApprovalIdentityRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IdentityID) {
		toSerialize["identityID"] = o.IdentityID
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ActionedAs) {
		toSerialize["actionedAs"] = o.ActionedAs
	}
	if !IsNil(o.Members) {
		toSerialize["members"] = o.Members
	}
	if !IsNil(o.DecisionDate) {
		toSerialize["decisionDate"] = o.DecisionDate
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ApprovalIdentityRecord) UnmarshalJSON(data []byte) (err error) {
	varApprovalIdentityRecord := _ApprovalIdentityRecord{}

	err = json.Unmarshal(data, &varApprovalIdentityRecord)

	if err != nil {
		return err
	}

	*o = ApprovalIdentityRecord(varApprovalIdentityRecord)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "identityID")
		delete(additionalProperties, "type")
		delete(additionalProperties, "name")
		delete(additionalProperties, "actionedAs")
		delete(additionalProperties, "members")
		delete(additionalProperties, "decisionDate")
		delete(additionalProperties, "email")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApprovalIdentityRecord struct {
	value *ApprovalIdentityRecord
	isSet bool
}

func (v NullableApprovalIdentityRecord) Get() *ApprovalIdentityRecord {
	return v.value
}

func (v *NullableApprovalIdentityRecord) Set(val *ApprovalIdentityRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableApprovalIdentityRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableApprovalIdentityRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApprovalIdentityRecord(val *ApprovalIdentityRecord) *NullableApprovalIdentityRecord {
	return &NullableApprovalIdentityRecord{value: val, isSet: true}
}

func (v NullableApprovalIdentityRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApprovalIdentityRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


