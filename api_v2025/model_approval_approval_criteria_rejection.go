/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
)

// checks if the ApprovalApprovalCriteriaRejection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApprovalApprovalCriteriaRejection{}

// ApprovalApprovalCriteriaRejection Criteria for rejection
type ApprovalApprovalCriteriaRejection struct {
	// This defines what the field \"value\" will be used as, either a count or percentage of the total approvers that need to reject
	CalculationType *string `json:"calculationType,omitempty"`
	// The value that needs to be met for the rejection criteria
	Value *int64 `json:"value,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ApprovalApprovalCriteriaRejection ApprovalApprovalCriteriaRejection

// NewApprovalApprovalCriteriaRejection instantiates a new ApprovalApprovalCriteriaRejection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApprovalApprovalCriteriaRejection() *ApprovalApprovalCriteriaRejection {
	this := ApprovalApprovalCriteriaRejection{}
	return &this
}

// NewApprovalApprovalCriteriaRejectionWithDefaults instantiates a new ApprovalApprovalCriteriaRejection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApprovalApprovalCriteriaRejectionWithDefaults() *ApprovalApprovalCriteriaRejection {
	this := ApprovalApprovalCriteriaRejection{}
	return &this
}

// GetCalculationType returns the CalculationType field value if set, zero value otherwise.
func (o *ApprovalApprovalCriteriaRejection) GetCalculationType() string {
	if o == nil || IsNil(o.CalculationType) {
		var ret string
		return ret
	}
	return *o.CalculationType
}

// GetCalculationTypeOk returns a tuple with the CalculationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalApprovalCriteriaRejection) GetCalculationTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CalculationType) {
		return nil, false
	}
	return o.CalculationType, true
}

// HasCalculationType returns a boolean if a field has been set.
func (o *ApprovalApprovalCriteriaRejection) HasCalculationType() bool {
	if o != nil && !IsNil(o.CalculationType) {
		return true
	}

	return false
}

// SetCalculationType gets a reference to the given string and assigns it to the CalculationType field.
func (o *ApprovalApprovalCriteriaRejection) SetCalculationType(v string) {
	o.CalculationType = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ApprovalApprovalCriteriaRejection) GetValue() int64 {
	if o == nil || IsNil(o.Value) {
		var ret int64
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalApprovalCriteriaRejection) GetValueOk() (*int64, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ApprovalApprovalCriteriaRejection) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given int64 and assigns it to the Value field.
func (o *ApprovalApprovalCriteriaRejection) SetValue(v int64) {
	o.Value = &v
}

func (o ApprovalApprovalCriteriaRejection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApprovalApprovalCriteriaRejection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CalculationType) {
		toSerialize["calculationType"] = o.CalculationType
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ApprovalApprovalCriteriaRejection) UnmarshalJSON(data []byte) (err error) {
	varApprovalApprovalCriteriaRejection := _ApprovalApprovalCriteriaRejection{}

	err = json.Unmarshal(data, &varApprovalApprovalCriteriaRejection)

	if err != nil {
		return err
	}

	*o = ApprovalApprovalCriteriaRejection(varApprovalApprovalCriteriaRejection)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "calculationType")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApprovalApprovalCriteriaRejection struct {
	value *ApprovalApprovalCriteriaRejection
	isSet bool
}

func (v NullableApprovalApprovalCriteriaRejection) Get() *ApprovalApprovalCriteriaRejection {
	return v.value
}

func (v *NullableApprovalApprovalCriteriaRejection) Set(val *ApprovalApprovalCriteriaRejection) {
	v.value = val
	v.isSet = true
}

func (v NullableApprovalApprovalCriteriaRejection) IsSet() bool {
	return v.isSet
}

func (v *NullableApprovalApprovalCriteriaRejection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApprovalApprovalCriteriaRejection(val *ApprovalApprovalCriteriaRejection) *NullableApprovalApprovalCriteriaRejection {
	return &NullableApprovalApprovalCriteriaRejection{value: val, isSet: true}
}

func (v NullableApprovalApprovalCriteriaRejection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApprovalApprovalCriteriaRejection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


