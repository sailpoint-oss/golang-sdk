/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
	
)

// checks if the ApprovalRequestedTarget type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApprovalRequestedTarget{}

// ApprovalRequestedTarget Represents a requested target in an approval process, including details such as ID, name, reauthentication requirements, and removal date.
type ApprovalRequestedTarget struct {
	// Signature required for forced authentication.
	ForcedAuthSignature *string `json:"forcedAuthSignature,omitempty"`
	// ID of the requested target.
	Id *string `json:"id,omitempty"`
	// Name of the requested target.
	Name *string `json:"name,omitempty"`
	// Indicates if reauthentication is required.
	ReauthRequired *bool `json:"reauthRequired,omitempty"`
	// Date when the target will be removed.
	RemovalDate *SailPointTime `json:"removalDate,omitempty"`
	// Type of the request.
	RequestType *string `json:"requestType,omitempty"`
	// Type of the target.
	TargetType *string `json:"targetType,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ApprovalRequestedTarget ApprovalRequestedTarget

// NewApprovalRequestedTarget instantiates a new ApprovalRequestedTarget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApprovalRequestedTarget() *ApprovalRequestedTarget {
	this := ApprovalRequestedTarget{}
	var reauthRequired bool = false
	this.ReauthRequired = &reauthRequired
	return &this
}

// NewApprovalRequestedTargetWithDefaults instantiates a new ApprovalRequestedTarget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApprovalRequestedTargetWithDefaults() *ApprovalRequestedTarget {
	this := ApprovalRequestedTarget{}
	var reauthRequired bool = false
	this.ReauthRequired = &reauthRequired
	return &this
}

// GetForcedAuthSignature returns the ForcedAuthSignature field value if set, zero value otherwise.
func (o *ApprovalRequestedTarget) GetForcedAuthSignature() string {
	if o == nil || IsNil(o.ForcedAuthSignature) {
		var ret string
		return ret
	}
	return *o.ForcedAuthSignature
}

// GetForcedAuthSignatureOk returns a tuple with the ForcedAuthSignature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalRequestedTarget) GetForcedAuthSignatureOk() (*string, bool) {
	if o == nil || IsNil(o.ForcedAuthSignature) {
		return nil, false
	}
	return o.ForcedAuthSignature, true
}

// HasForcedAuthSignature returns a boolean if a field has been set.
func (o *ApprovalRequestedTarget) HasForcedAuthSignature() bool {
	if o != nil && !IsNil(o.ForcedAuthSignature) {
		return true
	}

	return false
}

// SetForcedAuthSignature gets a reference to the given string and assigns it to the ForcedAuthSignature field.
func (o *ApprovalRequestedTarget) SetForcedAuthSignature(v string) {
	o.ForcedAuthSignature = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ApprovalRequestedTarget) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalRequestedTarget) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ApprovalRequestedTarget) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ApprovalRequestedTarget) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ApprovalRequestedTarget) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalRequestedTarget) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ApprovalRequestedTarget) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ApprovalRequestedTarget) SetName(v string) {
	o.Name = &v
}

// GetReauthRequired returns the ReauthRequired field value if set, zero value otherwise.
func (o *ApprovalRequestedTarget) GetReauthRequired() bool {
	if o == nil || IsNil(o.ReauthRequired) {
		var ret bool
		return ret
	}
	return *o.ReauthRequired
}

// GetReauthRequiredOk returns a tuple with the ReauthRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalRequestedTarget) GetReauthRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.ReauthRequired) {
		return nil, false
	}
	return o.ReauthRequired, true
}

// HasReauthRequired returns a boolean if a field has been set.
func (o *ApprovalRequestedTarget) HasReauthRequired() bool {
	if o != nil && !IsNil(o.ReauthRequired) {
		return true
	}

	return false
}

// SetReauthRequired gets a reference to the given bool and assigns it to the ReauthRequired field.
func (o *ApprovalRequestedTarget) SetReauthRequired(v bool) {
	o.ReauthRequired = &v
}

// GetRemovalDate returns the RemovalDate field value if set, zero value otherwise.
func (o *ApprovalRequestedTarget) GetRemovalDate() SailPointTime {
	if o == nil || IsNil(o.RemovalDate) {
		var ret SailPointTime
		return ret
	}
	return *o.RemovalDate
}

// GetRemovalDateOk returns a tuple with the RemovalDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalRequestedTarget) GetRemovalDateOk() (*SailPointTime, bool) {
	if o == nil || IsNil(o.RemovalDate) {
		return nil, false
	}
	return o.RemovalDate, true
}

// HasRemovalDate returns a boolean if a field has been set.
func (o *ApprovalRequestedTarget) HasRemovalDate() bool {
	if o != nil && !IsNil(o.RemovalDate) {
		return true
	}

	return false
}

// SetRemovalDate gets a reference to the given SailPointTime and assigns it to the RemovalDate field.
func (o *ApprovalRequestedTarget) SetRemovalDate(v SailPointTime) {
	o.RemovalDate = &v
}

// GetRequestType returns the RequestType field value if set, zero value otherwise.
func (o *ApprovalRequestedTarget) GetRequestType() string {
	if o == nil || IsNil(o.RequestType) {
		var ret string
		return ret
	}
	return *o.RequestType
}

// GetRequestTypeOk returns a tuple with the RequestType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalRequestedTarget) GetRequestTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RequestType) {
		return nil, false
	}
	return o.RequestType, true
}

// HasRequestType returns a boolean if a field has been set.
func (o *ApprovalRequestedTarget) HasRequestType() bool {
	if o != nil && !IsNil(o.RequestType) {
		return true
	}

	return false
}

// SetRequestType gets a reference to the given string and assigns it to the RequestType field.
func (o *ApprovalRequestedTarget) SetRequestType(v string) {
	o.RequestType = &v
}

// GetTargetType returns the TargetType field value if set, zero value otherwise.
func (o *ApprovalRequestedTarget) GetTargetType() string {
	if o == nil || IsNil(o.TargetType) {
		var ret string
		return ret
	}
	return *o.TargetType
}

// GetTargetTypeOk returns a tuple with the TargetType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalRequestedTarget) GetTargetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TargetType) {
		return nil, false
	}
	return o.TargetType, true
}

// HasTargetType returns a boolean if a field has been set.
func (o *ApprovalRequestedTarget) HasTargetType() bool {
	if o != nil && !IsNil(o.TargetType) {
		return true
	}

	return false
}

// SetTargetType gets a reference to the given string and assigns it to the TargetType field.
func (o *ApprovalRequestedTarget) SetTargetType(v string) {
	o.TargetType = &v
}

func (o ApprovalRequestedTarget) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApprovalRequestedTarget) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ForcedAuthSignature) {
		toSerialize["forcedAuthSignature"] = o.ForcedAuthSignature
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ReauthRequired) {
		toSerialize["reauthRequired"] = o.ReauthRequired
	}
	if !IsNil(o.RemovalDate) {
		toSerialize["removalDate"] = o.RemovalDate
	}
	if !IsNil(o.RequestType) {
		toSerialize["requestType"] = o.RequestType
	}
	if !IsNil(o.TargetType) {
		toSerialize["targetType"] = o.TargetType
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ApprovalRequestedTarget) UnmarshalJSON(data []byte) (err error) {
	varApprovalRequestedTarget := _ApprovalRequestedTarget{}

	err = json.Unmarshal(data, &varApprovalRequestedTarget)

	if err != nil {
		return err
	}

	*o = ApprovalRequestedTarget(varApprovalRequestedTarget)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "forcedAuthSignature")
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "reauthRequired")
		delete(additionalProperties, "removalDate")
		delete(additionalProperties, "requestType")
		delete(additionalProperties, "targetType")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApprovalRequestedTarget struct {
	value *ApprovalRequestedTarget
	isSet bool
}

func (v NullableApprovalRequestedTarget) Get() *ApprovalRequestedTarget {
	return v.value
}

func (v *NullableApprovalRequestedTarget) Set(val *ApprovalRequestedTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableApprovalRequestedTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableApprovalRequestedTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApprovalRequestedTarget(val *ApprovalRequestedTarget) *NullableApprovalRequestedTarget {
	return &NullableApprovalRequestedTarget{value: val, isSet: true}
}

func (v NullableApprovalRequestedTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApprovalRequestedTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


