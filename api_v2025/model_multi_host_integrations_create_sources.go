/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
	"fmt"
)

// checks if the MultiHostIntegrationsCreateSources type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MultiHostIntegrationsCreateSources{}

// MultiHostIntegrationsCreateSources This represents sources to be created of same type.
type MultiHostIntegrationsCreateSources struct {
	// Source's human-readable name.
	Name string `json:"name"`
	// Source's human-readable description.
	Description *string `json:"description,omitempty"`
	// Connector specific configuration. This configuration will differ from type to type.
	ConnectorAttributes map[string]interface{} `json:"connectorAttributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MultiHostIntegrationsCreateSources MultiHostIntegrationsCreateSources

// NewMultiHostIntegrationsCreateSources instantiates a new MultiHostIntegrationsCreateSources object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultiHostIntegrationsCreateSources(name string) *MultiHostIntegrationsCreateSources {
	this := MultiHostIntegrationsCreateSources{}
	this.Name = name
	return &this
}

// NewMultiHostIntegrationsCreateSourcesWithDefaults instantiates a new MultiHostIntegrationsCreateSources object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultiHostIntegrationsCreateSourcesWithDefaults() *MultiHostIntegrationsCreateSources {
	this := MultiHostIntegrationsCreateSources{}
	return &this
}

// GetName returns the Name field value
func (o *MultiHostIntegrationsCreateSources) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrationsCreateSources) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MultiHostIntegrationsCreateSources) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *MultiHostIntegrationsCreateSources) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrationsCreateSources) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *MultiHostIntegrationsCreateSources) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *MultiHostIntegrationsCreateSources) SetDescription(v string) {
	o.Description = &v
}

// GetConnectorAttributes returns the ConnectorAttributes field value if set, zero value otherwise.
func (o *MultiHostIntegrationsCreateSources) GetConnectorAttributes() map[string]interface{} {
	if o == nil || IsNil(o.ConnectorAttributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.ConnectorAttributes
}

// GetConnectorAttributesOk returns a tuple with the ConnectorAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrationsCreateSources) GetConnectorAttributesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ConnectorAttributes) {
		return map[string]interface{}{}, false
	}
	return o.ConnectorAttributes, true
}

// HasConnectorAttributes returns a boolean if a field has been set.
func (o *MultiHostIntegrationsCreateSources) HasConnectorAttributes() bool {
	if o != nil && !IsNil(o.ConnectorAttributes) {
		return true
	}

	return false
}

// SetConnectorAttributes gets a reference to the given map[string]interface{} and assigns it to the ConnectorAttributes field.
func (o *MultiHostIntegrationsCreateSources) SetConnectorAttributes(v map[string]interface{}) {
	o.ConnectorAttributes = v
}

func (o MultiHostIntegrationsCreateSources) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MultiHostIntegrationsCreateSources) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ConnectorAttributes) {
		toSerialize["connectorAttributes"] = o.ConnectorAttributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MultiHostIntegrationsCreateSources) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMultiHostIntegrationsCreateSources := _MultiHostIntegrationsCreateSources{}

	err = json.Unmarshal(data, &varMultiHostIntegrationsCreateSources)

	if err != nil {
		return err
	}

	*o = MultiHostIntegrationsCreateSources(varMultiHostIntegrationsCreateSources)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "connectorAttributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMultiHostIntegrationsCreateSources struct {
	value *MultiHostIntegrationsCreateSources
	isSet bool
}

func (v NullableMultiHostIntegrationsCreateSources) Get() *MultiHostIntegrationsCreateSources {
	return v.value
}

func (v *NullableMultiHostIntegrationsCreateSources) Set(val *MultiHostIntegrationsCreateSources) {
	v.value = val
	v.isSet = true
}

func (v NullableMultiHostIntegrationsCreateSources) IsSet() bool {
	return v.isSet
}

func (v *NullableMultiHostIntegrationsCreateSources) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultiHostIntegrationsCreateSources(val *MultiHostIntegrationsCreateSources) *NullableMultiHostIntegrationsCreateSources {
	return &NullableMultiHostIntegrationsCreateSources{value: val, isSet: true}
}

func (v NullableMultiHostIntegrationsCreateSources) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultiHostIntegrationsCreateSources) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


