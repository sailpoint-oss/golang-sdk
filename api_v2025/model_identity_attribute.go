/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
	"fmt"
)

// checks if the IdentityAttribute type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdentityAttribute{}

// IdentityAttribute struct for IdentityAttribute
type IdentityAttribute struct {
	// Identity attribute's technical name.
	Name string `json:"name"`
	// Identity attribute's business-friendly name.
	DisplayName *string `json:"displayName,omitempty"`
	// Indicates whether the attribute is 'standard' or 'default'.
	Standard *bool `json:"standard,omitempty"`
	// Identity attribute's type.
	Type NullableString `json:"type,omitempty"`
	// Indicates whether the identity attribute is multi-valued.
	Multi *bool `json:"multi,omitempty"`
	// Indicates whether the identity attribute is searchable.
	Searchable *bool `json:"searchable,omitempty"`
	// Indicates whether the identity attribute is 'system', meaning that it doesn't have a source and isn't configurable.
	System *bool `json:"system,omitempty"`
	// Identity attribute's list of sources - this specifies how the rule's value is derived.
	Sources []Source1 `json:"sources,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IdentityAttribute IdentityAttribute

// NewIdentityAttribute instantiates a new IdentityAttribute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityAttribute(name string) *IdentityAttribute {
	this := IdentityAttribute{}
	this.Name = name
	var standard bool = false
	this.Standard = &standard
	var multi bool = false
	this.Multi = &multi
	var searchable bool = false
	this.Searchable = &searchable
	var system bool = false
	this.System = &system
	return &this
}

// NewIdentityAttributeWithDefaults instantiates a new IdentityAttribute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityAttributeWithDefaults() *IdentityAttribute {
	this := IdentityAttribute{}
	var standard bool = false
	this.Standard = &standard
	var multi bool = false
	this.Multi = &multi
	var searchable bool = false
	this.Searchable = &searchable
	var system bool = false
	this.System = &system
	return &this
}

// GetName returns the Name field value
func (o *IdentityAttribute) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *IdentityAttribute) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *IdentityAttribute) SetName(v string) {
	o.Name = v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *IdentityAttribute) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityAttribute) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *IdentityAttribute) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *IdentityAttribute) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetStandard returns the Standard field value if set, zero value otherwise.
func (o *IdentityAttribute) GetStandard() bool {
	if o == nil || IsNil(o.Standard) {
		var ret bool
		return ret
	}
	return *o.Standard
}

// GetStandardOk returns a tuple with the Standard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityAttribute) GetStandardOk() (*bool, bool) {
	if o == nil || IsNil(o.Standard) {
		return nil, false
	}
	return o.Standard, true
}

// HasStandard returns a boolean if a field has been set.
func (o *IdentityAttribute) HasStandard() bool {
	if o != nil && !IsNil(o.Standard) {
		return true
	}

	return false
}

// SetStandard gets a reference to the given bool and assigns it to the Standard field.
func (o *IdentityAttribute) SetStandard(v bool) {
	o.Standard = &v
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityAttribute) GetType() string {
	if o == nil || IsNil(o.Type.Get()) {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityAttribute) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *IdentityAttribute) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *IdentityAttribute) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *IdentityAttribute) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *IdentityAttribute) UnsetType() {
	o.Type.Unset()
}

// GetMulti returns the Multi field value if set, zero value otherwise.
func (o *IdentityAttribute) GetMulti() bool {
	if o == nil || IsNil(o.Multi) {
		var ret bool
		return ret
	}
	return *o.Multi
}

// GetMultiOk returns a tuple with the Multi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityAttribute) GetMultiOk() (*bool, bool) {
	if o == nil || IsNil(o.Multi) {
		return nil, false
	}
	return o.Multi, true
}

// HasMulti returns a boolean if a field has been set.
func (o *IdentityAttribute) HasMulti() bool {
	if o != nil && !IsNil(o.Multi) {
		return true
	}

	return false
}

// SetMulti gets a reference to the given bool and assigns it to the Multi field.
func (o *IdentityAttribute) SetMulti(v bool) {
	o.Multi = &v
}

// GetSearchable returns the Searchable field value if set, zero value otherwise.
func (o *IdentityAttribute) GetSearchable() bool {
	if o == nil || IsNil(o.Searchable) {
		var ret bool
		return ret
	}
	return *o.Searchable
}

// GetSearchableOk returns a tuple with the Searchable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityAttribute) GetSearchableOk() (*bool, bool) {
	if o == nil || IsNil(o.Searchable) {
		return nil, false
	}
	return o.Searchable, true
}

// HasSearchable returns a boolean if a field has been set.
func (o *IdentityAttribute) HasSearchable() bool {
	if o != nil && !IsNil(o.Searchable) {
		return true
	}

	return false
}

// SetSearchable gets a reference to the given bool and assigns it to the Searchable field.
func (o *IdentityAttribute) SetSearchable(v bool) {
	o.Searchable = &v
}

// GetSystem returns the System field value if set, zero value otherwise.
func (o *IdentityAttribute) GetSystem() bool {
	if o == nil || IsNil(o.System) {
		var ret bool
		return ret
	}
	return *o.System
}

// GetSystemOk returns a tuple with the System field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityAttribute) GetSystemOk() (*bool, bool) {
	if o == nil || IsNil(o.System) {
		return nil, false
	}
	return o.System, true
}

// HasSystem returns a boolean if a field has been set.
func (o *IdentityAttribute) HasSystem() bool {
	if o != nil && !IsNil(o.System) {
		return true
	}

	return false
}

// SetSystem gets a reference to the given bool and assigns it to the System field.
func (o *IdentityAttribute) SetSystem(v bool) {
	o.System = &v
}

// GetSources returns the Sources field value if set, zero value otherwise.
func (o *IdentityAttribute) GetSources() []Source1 {
	if o == nil || IsNil(o.Sources) {
		var ret []Source1
		return ret
	}
	return o.Sources
}

// GetSourcesOk returns a tuple with the Sources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityAttribute) GetSourcesOk() ([]Source1, bool) {
	if o == nil || IsNil(o.Sources) {
		return nil, false
	}
	return o.Sources, true
}

// HasSources returns a boolean if a field has been set.
func (o *IdentityAttribute) HasSources() bool {
	if o != nil && !IsNil(o.Sources) {
		return true
	}

	return false
}

// SetSources gets a reference to the given []Source1 and assigns it to the Sources field.
func (o *IdentityAttribute) SetSources(v []Source1) {
	o.Sources = v
}

func (o IdentityAttribute) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdentityAttribute) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Standard) {
		toSerialize["standard"] = o.Standard
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if !IsNil(o.Multi) {
		toSerialize["multi"] = o.Multi
	}
	if !IsNil(o.Searchable) {
		toSerialize["searchable"] = o.Searchable
	}
	if !IsNil(o.System) {
		toSerialize["system"] = o.System
	}
	if !IsNil(o.Sources) {
		toSerialize["sources"] = o.Sources
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IdentityAttribute) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIdentityAttribute := _IdentityAttribute{}

	err = json.Unmarshal(data, &varIdentityAttribute)

	if err != nil {
		return err
	}

	*o = IdentityAttribute(varIdentityAttribute)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "displayName")
		delete(additionalProperties, "standard")
		delete(additionalProperties, "type")
		delete(additionalProperties, "multi")
		delete(additionalProperties, "searchable")
		delete(additionalProperties, "system")
		delete(additionalProperties, "sources")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIdentityAttribute struct {
	value *IdentityAttribute
	isSet bool
}

func (v NullableIdentityAttribute) Get() *IdentityAttribute {
	return v.value
}

func (v *NullableIdentityAttribute) Set(val *IdentityAttribute) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityAttribute) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityAttribute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityAttribute(val *IdentityAttribute) *NullableIdentityAttribute {
	return &NullableIdentityAttribute{value: val, isSet: true}
}

func (v NullableIdentityAttribute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityAttribute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


