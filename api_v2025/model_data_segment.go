/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
	
)

// checks if the DataSegment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataSegment{}

// DataSegment struct for DataSegment
type DataSegment struct {
	// The segment's ID.
	Id *string `json:"id,omitempty"`
	// The segment's business name.
	Name *string `json:"name,omitempty"`
	// The time when the segment is created.
	Created *SailPointTime `json:"created,omitempty"`
	// The time when the segment is modified.
	Modified *SailPointTime `json:"modified,omitempty"`
	// The segment's optional description.
	Description *string `json:"description,omitempty"`
	// List of Scopes that are assigned to the segment
	Scopes []Scope `json:"scopes,omitempty"`
	// List of Identities that are assigned to the segment
	MemberSelection []Ref `json:"memberSelection,omitempty"`
	MemberFilter *VisibilityCriteria `json:"memberFilter,omitempty"`
	Membership *MembershipType `json:"membership,omitempty"`
	// This boolean indicates whether the segment is currently active. Inactive segments have no effect.
	Enabled *bool `json:"enabled,omitempty"`
	// This boolean indicates whether the segment is being applied to the accounts. If unpublished its being actively modified to until published
	Published *bool `json:"published,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DataSegment DataSegment

// NewDataSegment instantiates a new DataSegment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataSegment() *DataSegment {
	this := DataSegment{}
	var enabled bool = false
	this.Enabled = &enabled
	var published bool = false
	this.Published = &published
	return &this
}

// NewDataSegmentWithDefaults instantiates a new DataSegment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataSegmentWithDefaults() *DataSegment {
	this := DataSegment{}
	var enabled bool = false
	this.Enabled = &enabled
	var published bool = false
	this.Published = &published
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DataSegment) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSegment) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DataSegment) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DataSegment) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DataSegment) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSegment) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DataSegment) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DataSegment) SetName(v string) {
	o.Name = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *DataSegment) GetCreated() SailPointTime {
	if o == nil || IsNil(o.Created) {
		var ret SailPointTime
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSegment) GetCreatedOk() (*SailPointTime, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *DataSegment) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given SailPointTime and assigns it to the Created field.
func (o *DataSegment) SetCreated(v SailPointTime) {
	o.Created = &v
}

// GetModified returns the Modified field value if set, zero value otherwise.
func (o *DataSegment) GetModified() SailPointTime {
	if o == nil || IsNil(o.Modified) {
		var ret SailPointTime
		return ret
	}
	return *o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSegment) GetModifiedOk() (*SailPointTime, bool) {
	if o == nil || IsNil(o.Modified) {
		return nil, false
	}
	return o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *DataSegment) HasModified() bool {
	if o != nil && !IsNil(o.Modified) {
		return true
	}

	return false
}

// SetModified gets a reference to the given SailPointTime and assigns it to the Modified field.
func (o *DataSegment) SetModified(v SailPointTime) {
	o.Modified = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DataSegment) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSegment) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DataSegment) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DataSegment) SetDescription(v string) {
	o.Description = &v
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *DataSegment) GetScopes() []Scope {
	if o == nil || IsNil(o.Scopes) {
		var ret []Scope
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSegment) GetScopesOk() ([]Scope, bool) {
	if o == nil || IsNil(o.Scopes) {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *DataSegment) HasScopes() bool {
	if o != nil && !IsNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given []Scope and assigns it to the Scopes field.
func (o *DataSegment) SetScopes(v []Scope) {
	o.Scopes = v
}

// GetMemberSelection returns the MemberSelection field value if set, zero value otherwise.
func (o *DataSegment) GetMemberSelection() []Ref {
	if o == nil || IsNil(o.MemberSelection) {
		var ret []Ref
		return ret
	}
	return o.MemberSelection
}

// GetMemberSelectionOk returns a tuple with the MemberSelection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSegment) GetMemberSelectionOk() ([]Ref, bool) {
	if o == nil || IsNil(o.MemberSelection) {
		return nil, false
	}
	return o.MemberSelection, true
}

// HasMemberSelection returns a boolean if a field has been set.
func (o *DataSegment) HasMemberSelection() bool {
	if o != nil && !IsNil(o.MemberSelection) {
		return true
	}

	return false
}

// SetMemberSelection gets a reference to the given []Ref and assigns it to the MemberSelection field.
func (o *DataSegment) SetMemberSelection(v []Ref) {
	o.MemberSelection = v
}

// GetMemberFilter returns the MemberFilter field value if set, zero value otherwise.
func (o *DataSegment) GetMemberFilter() VisibilityCriteria {
	if o == nil || IsNil(o.MemberFilter) {
		var ret VisibilityCriteria
		return ret
	}
	return *o.MemberFilter
}

// GetMemberFilterOk returns a tuple with the MemberFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSegment) GetMemberFilterOk() (*VisibilityCriteria, bool) {
	if o == nil || IsNil(o.MemberFilter) {
		return nil, false
	}
	return o.MemberFilter, true
}

// HasMemberFilter returns a boolean if a field has been set.
func (o *DataSegment) HasMemberFilter() bool {
	if o != nil && !IsNil(o.MemberFilter) {
		return true
	}

	return false
}

// SetMemberFilter gets a reference to the given VisibilityCriteria and assigns it to the MemberFilter field.
func (o *DataSegment) SetMemberFilter(v VisibilityCriteria) {
	o.MemberFilter = &v
}

// GetMembership returns the Membership field value if set, zero value otherwise.
func (o *DataSegment) GetMembership() MembershipType {
	if o == nil || IsNil(o.Membership) {
		var ret MembershipType
		return ret
	}
	return *o.Membership
}

// GetMembershipOk returns a tuple with the Membership field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSegment) GetMembershipOk() (*MembershipType, bool) {
	if o == nil || IsNil(o.Membership) {
		return nil, false
	}
	return o.Membership, true
}

// HasMembership returns a boolean if a field has been set.
func (o *DataSegment) HasMembership() bool {
	if o != nil && !IsNil(o.Membership) {
		return true
	}

	return false
}

// SetMembership gets a reference to the given MembershipType and assigns it to the Membership field.
func (o *DataSegment) SetMembership(v MembershipType) {
	o.Membership = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *DataSegment) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSegment) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *DataSegment) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *DataSegment) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetPublished returns the Published field value if set, zero value otherwise.
func (o *DataSegment) GetPublished() bool {
	if o == nil || IsNil(o.Published) {
		var ret bool
		return ret
	}
	return *o.Published
}

// GetPublishedOk returns a tuple with the Published field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSegment) GetPublishedOk() (*bool, bool) {
	if o == nil || IsNil(o.Published) {
		return nil, false
	}
	return o.Published, true
}

// HasPublished returns a boolean if a field has been set.
func (o *DataSegment) HasPublished() bool {
	if o != nil && !IsNil(o.Published) {
		return true
	}

	return false
}

// SetPublished gets a reference to the given bool and assigns it to the Published field.
func (o *DataSegment) SetPublished(v bool) {
	o.Published = &v
}

func (o DataSegment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataSegment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Modified) {
		toSerialize["modified"] = o.Modified
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Scopes) {
		toSerialize["scopes"] = o.Scopes
	}
	if !IsNil(o.MemberSelection) {
		toSerialize["memberSelection"] = o.MemberSelection
	}
	if !IsNil(o.MemberFilter) {
		toSerialize["memberFilter"] = o.MemberFilter
	}
	if !IsNil(o.Membership) {
		toSerialize["membership"] = o.Membership
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Published) {
		toSerialize["published"] = o.Published
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DataSegment) UnmarshalJSON(data []byte) (err error) {
	varDataSegment := _DataSegment{}

	err = json.Unmarshal(data, &varDataSegment)

	if err != nil {
		return err
	}

	*o = DataSegment(varDataSegment)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "created")
		delete(additionalProperties, "modified")
		delete(additionalProperties, "description")
		delete(additionalProperties, "scopes")
		delete(additionalProperties, "memberSelection")
		delete(additionalProperties, "memberFilter")
		delete(additionalProperties, "membership")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "published")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDataSegment struct {
	value *DataSegment
	isSet bool
}

func (v NullableDataSegment) Get() *DataSegment {
	return v.value
}

func (v *NullableDataSegment) Set(val *DataSegment) {
	v.value = val
	v.isSet = true
}

func (v NullableDataSegment) IsSet() bool {
	return v.isSet
}

func (v *NullableDataSegment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataSegment(val *DataSegment) *NullableDataSegment {
	return &NullableDataSegment{value: val, isSet: true}
}

func (v NullableDataSegment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataSegment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


