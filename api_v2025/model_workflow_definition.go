/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
)

// checks if the WorkflowDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkflowDefinition{}

// WorkflowDefinition The map of steps that the workflow will execute.
type WorkflowDefinition struct {
	// The name of the starting step.
	Start *string `json:"start,omitempty"`
	// One or more step objects that comprise this workflow.  Please see the Workflow documentation to see the JSON schema for each step type.
	Steps map[string]interface{} `json:"steps,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _WorkflowDefinition WorkflowDefinition

// NewWorkflowDefinition instantiates a new WorkflowDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkflowDefinition() *WorkflowDefinition {
	this := WorkflowDefinition{}
	return &this
}

// NewWorkflowDefinitionWithDefaults instantiates a new WorkflowDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkflowDefinitionWithDefaults() *WorkflowDefinition {
	this := WorkflowDefinition{}
	return &this
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *WorkflowDefinition) GetStart() string {
	if o == nil || IsNil(o.Start) {
		var ret string
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowDefinition) GetStartOk() (*string, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *WorkflowDefinition) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given string and assigns it to the Start field.
func (o *WorkflowDefinition) SetStart(v string) {
	o.Start = &v
}

// GetSteps returns the Steps field value if set, zero value otherwise.
func (o *WorkflowDefinition) GetSteps() map[string]interface{} {
	if o == nil || IsNil(o.Steps) {
		var ret map[string]interface{}
		return ret
	}
	return o.Steps
}

// GetStepsOk returns a tuple with the Steps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowDefinition) GetStepsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Steps) {
		return map[string]interface{}{}, false
	}
	return o.Steps, true
}

// HasSteps returns a boolean if a field has been set.
func (o *WorkflowDefinition) HasSteps() bool {
	if o != nil && !IsNil(o.Steps) {
		return true
	}

	return false
}

// SetSteps gets a reference to the given map[string]interface{} and assigns it to the Steps field.
func (o *WorkflowDefinition) SetSteps(v map[string]interface{}) {
	o.Steps = v
}

func (o WorkflowDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkflowDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !IsNil(o.Steps) {
		toSerialize["steps"] = o.Steps
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WorkflowDefinition) UnmarshalJSON(data []byte) (err error) {
	varWorkflowDefinition := _WorkflowDefinition{}

	err = json.Unmarshal(data, &varWorkflowDefinition)

	if err != nil {
		return err
	}

	*o = WorkflowDefinition(varWorkflowDefinition)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "start")
		delete(additionalProperties, "steps")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWorkflowDefinition struct {
	value *WorkflowDefinition
	isSet bool
}

func (v NullableWorkflowDefinition) Get() *WorkflowDefinition {
	return v.value
}

func (v *NullableWorkflowDefinition) Set(val *WorkflowDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowDefinition(val *WorkflowDefinition) *NullableWorkflowDefinition {
	return &NullableWorkflowDefinition{value: val, isSet: true}
}

func (v NullableWorkflowDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


