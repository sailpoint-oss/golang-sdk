/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
)

// checks if the LockoutConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LockoutConfiguration{}

// LockoutConfiguration struct for LockoutConfiguration
type LockoutConfiguration struct {
	// The maximum attempts allowed before lockout occurs.
	MaximumAttempts *int32 `json:"maximumAttempts,omitempty"`
	// The total time in minutes a user will be locked out.
	LockoutDuration *int32 `json:"lockoutDuration,omitempty"`
	// A rolling window where authentication attempts in a series count towards the maximum before lockout occurs.
	LockoutWindow *int32 `json:"lockoutWindow,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LockoutConfiguration LockoutConfiguration

// NewLockoutConfiguration instantiates a new LockoutConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLockoutConfiguration() *LockoutConfiguration {
	this := LockoutConfiguration{}
	return &this
}

// NewLockoutConfigurationWithDefaults instantiates a new LockoutConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLockoutConfigurationWithDefaults() *LockoutConfiguration {
	this := LockoutConfiguration{}
	return &this
}

// GetMaximumAttempts returns the MaximumAttempts field value if set, zero value otherwise.
func (o *LockoutConfiguration) GetMaximumAttempts() int32 {
	if o == nil || IsNil(o.MaximumAttempts) {
		var ret int32
		return ret
	}
	return *o.MaximumAttempts
}

// GetMaximumAttemptsOk returns a tuple with the MaximumAttempts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LockoutConfiguration) GetMaximumAttemptsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaximumAttempts) {
		return nil, false
	}
	return o.MaximumAttempts, true
}

// HasMaximumAttempts returns a boolean if a field has been set.
func (o *LockoutConfiguration) HasMaximumAttempts() bool {
	if o != nil && !IsNil(o.MaximumAttempts) {
		return true
	}

	return false
}

// SetMaximumAttempts gets a reference to the given int32 and assigns it to the MaximumAttempts field.
func (o *LockoutConfiguration) SetMaximumAttempts(v int32) {
	o.MaximumAttempts = &v
}

// GetLockoutDuration returns the LockoutDuration field value if set, zero value otherwise.
func (o *LockoutConfiguration) GetLockoutDuration() int32 {
	if o == nil || IsNil(o.LockoutDuration) {
		var ret int32
		return ret
	}
	return *o.LockoutDuration
}

// GetLockoutDurationOk returns a tuple with the LockoutDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LockoutConfiguration) GetLockoutDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.LockoutDuration) {
		return nil, false
	}
	return o.LockoutDuration, true
}

// HasLockoutDuration returns a boolean if a field has been set.
func (o *LockoutConfiguration) HasLockoutDuration() bool {
	if o != nil && !IsNil(o.LockoutDuration) {
		return true
	}

	return false
}

// SetLockoutDuration gets a reference to the given int32 and assigns it to the LockoutDuration field.
func (o *LockoutConfiguration) SetLockoutDuration(v int32) {
	o.LockoutDuration = &v
}

// GetLockoutWindow returns the LockoutWindow field value if set, zero value otherwise.
func (o *LockoutConfiguration) GetLockoutWindow() int32 {
	if o == nil || IsNil(o.LockoutWindow) {
		var ret int32
		return ret
	}
	return *o.LockoutWindow
}

// GetLockoutWindowOk returns a tuple with the LockoutWindow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LockoutConfiguration) GetLockoutWindowOk() (*int32, bool) {
	if o == nil || IsNil(o.LockoutWindow) {
		return nil, false
	}
	return o.LockoutWindow, true
}

// HasLockoutWindow returns a boolean if a field has been set.
func (o *LockoutConfiguration) HasLockoutWindow() bool {
	if o != nil && !IsNil(o.LockoutWindow) {
		return true
	}

	return false
}

// SetLockoutWindow gets a reference to the given int32 and assigns it to the LockoutWindow field.
func (o *LockoutConfiguration) SetLockoutWindow(v int32) {
	o.LockoutWindow = &v
}

func (o LockoutConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LockoutConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MaximumAttempts) {
		toSerialize["maximumAttempts"] = o.MaximumAttempts
	}
	if !IsNil(o.LockoutDuration) {
		toSerialize["lockoutDuration"] = o.LockoutDuration
	}
	if !IsNil(o.LockoutWindow) {
		toSerialize["lockoutWindow"] = o.LockoutWindow
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LockoutConfiguration) UnmarshalJSON(data []byte) (err error) {
	varLockoutConfiguration := _LockoutConfiguration{}

	err = json.Unmarshal(data, &varLockoutConfiguration)

	if err != nil {
		return err
	}

	*o = LockoutConfiguration(varLockoutConfiguration)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "maximumAttempts")
		delete(additionalProperties, "lockoutDuration")
		delete(additionalProperties, "lockoutWindow")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLockoutConfiguration struct {
	value *LockoutConfiguration
	isSet bool
}

func (v NullableLockoutConfiguration) Get() *LockoutConfiguration {
	return v.value
}

func (v *NullableLockoutConfiguration) Set(val *LockoutConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableLockoutConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableLockoutConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLockoutConfiguration(val *LockoutConfiguration) *NullableLockoutConfiguration {
	return &NullableLockoutConfiguration{value: val, isSet: true}
}

func (v NullableLockoutConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLockoutConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


