/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
)

// checks if the RightSetDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RightSetDTO{}

// RightSetDTO A RightSetDTO represents a collection of rights that assigned to capability or scope, enabling them to possess specific rights to access corresponding APIs.
type RightSetDTO struct {
	// The unique identifier of the RightSet.
	Id *string `json:"id,omitempty"`
	// The human-readable name of the RightSet.
	Name *string `json:"name,omitempty"`
	// A human-readable description of the RightSet.
	Description *string `json:"description,omitempty"`
	// The category of the RightSet.
	Category *string `json:"category,omitempty"`
	// Right is the most granular unit that determines specific API permissions, this is a list of rights associated with the RightSet.
	Rights []string `json:"rights,omitempty"`
	// List of unique identifiers for related RightSets, current RightSet contains rights from these RightSets.
	RightSetIds []string `json:"rightSetIds,omitempty"`
	// List of unique identifiers for UI-assignable child RightSets, used to build UI components.
	UiAssignableChildRightSetIds []string `json:"uiAssignableChildRightSetIds,omitempty"`
	// Indicates whether the RightSet is UI-assignable.
	UiAssignable *bool `json:"uiAssignable,omitempty"`
	// The translated name of the RightSet.
	TranslatedName *string `json:"translatedName,omitempty"`
	// The translated description of the RightSet.
	TranslatedDescription NullableString `json:"translatedDescription,omitempty"`
	// The unique identifier of the parent RightSet for UI Assignable RightSet.
	ParentId NullableString `json:"parentId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RightSetDTO RightSetDTO

// NewRightSetDTO instantiates a new RightSetDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRightSetDTO() *RightSetDTO {
	this := RightSetDTO{}
	var uiAssignable bool = false
	this.UiAssignable = &uiAssignable
	return &this
}

// NewRightSetDTOWithDefaults instantiates a new RightSetDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRightSetDTOWithDefaults() *RightSetDTO {
	this := RightSetDTO{}
	var uiAssignable bool = false
	this.UiAssignable = &uiAssignable
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RightSetDTO) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightSetDTO) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RightSetDTO) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RightSetDTO) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RightSetDTO) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightSetDTO) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RightSetDTO) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RightSetDTO) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RightSetDTO) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightSetDTO) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RightSetDTO) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RightSetDTO) SetDescription(v string) {
	o.Description = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *RightSetDTO) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightSetDTO) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *RightSetDTO) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *RightSetDTO) SetCategory(v string) {
	o.Category = &v
}

// GetRights returns the Rights field value if set, zero value otherwise.
func (o *RightSetDTO) GetRights() []string {
	if o == nil || IsNil(o.Rights) {
		var ret []string
		return ret
	}
	return o.Rights
}

// GetRightsOk returns a tuple with the Rights field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightSetDTO) GetRightsOk() ([]string, bool) {
	if o == nil || IsNil(o.Rights) {
		return nil, false
	}
	return o.Rights, true
}

// HasRights returns a boolean if a field has been set.
func (o *RightSetDTO) HasRights() bool {
	if o != nil && !IsNil(o.Rights) {
		return true
	}

	return false
}

// SetRights gets a reference to the given []string and assigns it to the Rights field.
func (o *RightSetDTO) SetRights(v []string) {
	o.Rights = v
}

// GetRightSetIds returns the RightSetIds field value if set, zero value otherwise.
func (o *RightSetDTO) GetRightSetIds() []string {
	if o == nil || IsNil(o.RightSetIds) {
		var ret []string
		return ret
	}
	return o.RightSetIds
}

// GetRightSetIdsOk returns a tuple with the RightSetIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightSetDTO) GetRightSetIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.RightSetIds) {
		return nil, false
	}
	return o.RightSetIds, true
}

// HasRightSetIds returns a boolean if a field has been set.
func (o *RightSetDTO) HasRightSetIds() bool {
	if o != nil && !IsNil(o.RightSetIds) {
		return true
	}

	return false
}

// SetRightSetIds gets a reference to the given []string and assigns it to the RightSetIds field.
func (o *RightSetDTO) SetRightSetIds(v []string) {
	o.RightSetIds = v
}

// GetUiAssignableChildRightSetIds returns the UiAssignableChildRightSetIds field value if set, zero value otherwise.
func (o *RightSetDTO) GetUiAssignableChildRightSetIds() []string {
	if o == nil || IsNil(o.UiAssignableChildRightSetIds) {
		var ret []string
		return ret
	}
	return o.UiAssignableChildRightSetIds
}

// GetUiAssignableChildRightSetIdsOk returns a tuple with the UiAssignableChildRightSetIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightSetDTO) GetUiAssignableChildRightSetIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.UiAssignableChildRightSetIds) {
		return nil, false
	}
	return o.UiAssignableChildRightSetIds, true
}

// HasUiAssignableChildRightSetIds returns a boolean if a field has been set.
func (o *RightSetDTO) HasUiAssignableChildRightSetIds() bool {
	if o != nil && !IsNil(o.UiAssignableChildRightSetIds) {
		return true
	}

	return false
}

// SetUiAssignableChildRightSetIds gets a reference to the given []string and assigns it to the UiAssignableChildRightSetIds field.
func (o *RightSetDTO) SetUiAssignableChildRightSetIds(v []string) {
	o.UiAssignableChildRightSetIds = v
}

// GetUiAssignable returns the UiAssignable field value if set, zero value otherwise.
func (o *RightSetDTO) GetUiAssignable() bool {
	if o == nil || IsNil(o.UiAssignable) {
		var ret bool
		return ret
	}
	return *o.UiAssignable
}

// GetUiAssignableOk returns a tuple with the UiAssignable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightSetDTO) GetUiAssignableOk() (*bool, bool) {
	if o == nil || IsNil(o.UiAssignable) {
		return nil, false
	}
	return o.UiAssignable, true
}

// HasUiAssignable returns a boolean if a field has been set.
func (o *RightSetDTO) HasUiAssignable() bool {
	if o != nil && !IsNil(o.UiAssignable) {
		return true
	}

	return false
}

// SetUiAssignable gets a reference to the given bool and assigns it to the UiAssignable field.
func (o *RightSetDTO) SetUiAssignable(v bool) {
	o.UiAssignable = &v
}

// GetTranslatedName returns the TranslatedName field value if set, zero value otherwise.
func (o *RightSetDTO) GetTranslatedName() string {
	if o == nil || IsNil(o.TranslatedName) {
		var ret string
		return ret
	}
	return *o.TranslatedName
}

// GetTranslatedNameOk returns a tuple with the TranslatedName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightSetDTO) GetTranslatedNameOk() (*string, bool) {
	if o == nil || IsNil(o.TranslatedName) {
		return nil, false
	}
	return o.TranslatedName, true
}

// HasTranslatedName returns a boolean if a field has been set.
func (o *RightSetDTO) HasTranslatedName() bool {
	if o != nil && !IsNil(o.TranslatedName) {
		return true
	}

	return false
}

// SetTranslatedName gets a reference to the given string and assigns it to the TranslatedName field.
func (o *RightSetDTO) SetTranslatedName(v string) {
	o.TranslatedName = &v
}

// GetTranslatedDescription returns the TranslatedDescription field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RightSetDTO) GetTranslatedDescription() string {
	if o == nil || IsNil(o.TranslatedDescription.Get()) {
		var ret string
		return ret
	}
	return *o.TranslatedDescription.Get()
}

// GetTranslatedDescriptionOk returns a tuple with the TranslatedDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RightSetDTO) GetTranslatedDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TranslatedDescription.Get(), o.TranslatedDescription.IsSet()
}

// HasTranslatedDescription returns a boolean if a field has been set.
func (o *RightSetDTO) HasTranslatedDescription() bool {
	if o != nil && o.TranslatedDescription.IsSet() {
		return true
	}

	return false
}

// SetTranslatedDescription gets a reference to the given NullableString and assigns it to the TranslatedDescription field.
func (o *RightSetDTO) SetTranslatedDescription(v string) {
	o.TranslatedDescription.Set(&v)
}
// SetTranslatedDescriptionNil sets the value for TranslatedDescription to be an explicit nil
func (o *RightSetDTO) SetTranslatedDescriptionNil() {
	o.TranslatedDescription.Set(nil)
}

// UnsetTranslatedDescription ensures that no value is present for TranslatedDescription, not even an explicit nil
func (o *RightSetDTO) UnsetTranslatedDescription() {
	o.TranslatedDescription.Unset()
}

// GetParentId returns the ParentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RightSetDTO) GetParentId() string {
	if o == nil || IsNil(o.ParentId.Get()) {
		var ret string
		return ret
	}
	return *o.ParentId.Get()
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RightSetDTO) GetParentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentId.Get(), o.ParentId.IsSet()
}

// HasParentId returns a boolean if a field has been set.
func (o *RightSetDTO) HasParentId() bool {
	if o != nil && o.ParentId.IsSet() {
		return true
	}

	return false
}

// SetParentId gets a reference to the given NullableString and assigns it to the ParentId field.
func (o *RightSetDTO) SetParentId(v string) {
	o.ParentId.Set(&v)
}
// SetParentIdNil sets the value for ParentId to be an explicit nil
func (o *RightSetDTO) SetParentIdNil() {
	o.ParentId.Set(nil)
}

// UnsetParentId ensures that no value is present for ParentId, not even an explicit nil
func (o *RightSetDTO) UnsetParentId() {
	o.ParentId.Unset()
}

func (o RightSetDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RightSetDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.Rights) {
		toSerialize["rights"] = o.Rights
	}
	if !IsNil(o.RightSetIds) {
		toSerialize["rightSetIds"] = o.RightSetIds
	}
	if !IsNil(o.UiAssignableChildRightSetIds) {
		toSerialize["uiAssignableChildRightSetIds"] = o.UiAssignableChildRightSetIds
	}
	if !IsNil(o.UiAssignable) {
		toSerialize["uiAssignable"] = o.UiAssignable
	}
	if !IsNil(o.TranslatedName) {
		toSerialize["translatedName"] = o.TranslatedName
	}
	if o.TranslatedDescription.IsSet() {
		toSerialize["translatedDescription"] = o.TranslatedDescription.Get()
	}
	if o.ParentId.IsSet() {
		toSerialize["parentId"] = o.ParentId.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RightSetDTO) UnmarshalJSON(data []byte) (err error) {
	varRightSetDTO := _RightSetDTO{}

	err = json.Unmarshal(data, &varRightSetDTO)

	if err != nil {
		return err
	}

	*o = RightSetDTO(varRightSetDTO)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "category")
		delete(additionalProperties, "rights")
		delete(additionalProperties, "rightSetIds")
		delete(additionalProperties, "uiAssignableChildRightSetIds")
		delete(additionalProperties, "uiAssignable")
		delete(additionalProperties, "translatedName")
		delete(additionalProperties, "translatedDescription")
		delete(additionalProperties, "parentId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRightSetDTO struct {
	value *RightSetDTO
	isSet bool
}

func (v NullableRightSetDTO) Get() *RightSetDTO {
	return v.value
}

func (v *NullableRightSetDTO) Set(val *RightSetDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableRightSetDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableRightSetDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRightSetDTO(val *RightSetDTO) *NullableRightSetDTO {
	return &NullableRightSetDTO{value: val, isSet: true}
}

func (v NullableRightSetDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRightSetDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


