/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
	"fmt"
)

// MembershipType An enumeration of the types of membership choices
type MembershipType string

// List of MembershipType
const (
	MEMBERSHIPTYPE_ALL MembershipType = "ALL"
	MEMBERSHIPTYPE_FILTER MembershipType = "FILTER"
	MEMBERSHIPTYPE_SELECTION MembershipType = "SELECTION"
)

// All allowed values of MembershipType enum
var AllowedMembershipTypeEnumValues = []MembershipType{
	"ALL",
	"FILTER",
	"SELECTION",
}

func (v *MembershipType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MembershipType(value)
	for _, existing := range AllowedMembershipTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MembershipType", value)
}

// NewMembershipTypeFromValue returns a pointer to a valid MembershipType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMembershipTypeFromValue(v string) (*MembershipType, error) {
	ev := MembershipType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MembershipType: valid values are %v", v, AllowedMembershipTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MembershipType) IsValid() bool {
	for _, existing := range AllowedMembershipTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MembershipType value
func (v MembershipType) Ptr() *MembershipType {
	return &v
}

type NullableMembershipType struct {
	value *MembershipType
	isSet bool
}

func (v NullableMembershipType) Get() *MembershipType {
	return v.value
}

func (v *NullableMembershipType) Set(val *MembershipType) {
	v.value = val
	v.isSet = true
}

func (v NullableMembershipType) IsSet() bool {
	return v.isSet
}

func (v *NullableMembershipType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMembershipType(val *MembershipType) *NullableMembershipType {
	return &NullableMembershipType{value: val, isSet: true}
}

func (v NullableMembershipType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMembershipType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

