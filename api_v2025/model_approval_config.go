/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
)

// checks if the ApprovalConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApprovalConfig{}

// ApprovalConfig Approval config Object
type ApprovalConfig struct {
	// Tenant ID of the approval configuration.
	TenantId *string `json:"tenantId,omitempty"`
	// ID of the approval configuration.
	Id *string `json:"id,omitempty"`
	// The type/scope of the configuration. Ie APPROVAL_REQUEST, DOMAIN_OBJECT, APPROVAL_TYPE, TENANT
	Scope *string `json:"scope,omitempty"`
	ReminderConfig *ApprovalConfigReminderConfig `json:"reminderConfig,omitempty"`
	EscalationConfig *ApprovalConfigEscalationConfig `json:"escalationConfig,omitempty"`
	TimeoutConfig *ApprovalConfigTimeoutConfig `json:"timeoutConfig,omitempty"`
	CronTimezone *ApprovalConfigCronTimezone `json:"cronTimezone,omitempty"`
	// If the approval request has an approvalCriteria of SERIAL this chain will be used to determine the assignment order.
	SerialChain []ApprovalConfigSerialChainInner `json:"serialChain,omitempty"`
	// Determines whether a comment is required when approving or rejecting the approval request.
	RequiresComment *string `json:"requiresComment,omitempty"`
	// Configuration for fallback approver. Used if the user cannot be found for whatever reason and escalation config does not exist.
	FallbackApprover ApprovalIdentity `json:"fallbackApprover,omitempty"`
	// OFF will prevent the approval request from being assigned to the requester or requestee by assigning it to their manager instead. DIRECT will cause approval requests to be auto-approved when assigned directly and only to the requester. INDIRECT will auto-approve when the requester appears anywhere in the list of approvers, including in a governance group. This field will only be effective if requestedTarget.reauthRequired is set to false, otherwise the approval will have to be manually approved.
	AutoApprove *string `json:"autoApprove,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ApprovalConfig ApprovalConfig

// NewApprovalConfig instantiates a new ApprovalConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApprovalConfig() *ApprovalConfig {
	this := ApprovalConfig{}
	return &this
}

// NewApprovalConfigWithDefaults instantiates a new ApprovalConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApprovalConfigWithDefaults() *ApprovalConfig {
	this := ApprovalConfig{}
	return &this
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *ApprovalConfig) GetTenantId() string {
	if o == nil || IsNil(o.TenantId) {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalConfig) GetTenantIdOk() (*string, bool) {
	if o == nil || IsNil(o.TenantId) {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *ApprovalConfig) HasTenantId() bool {
	if o != nil && !IsNil(o.TenantId) {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *ApprovalConfig) SetTenantId(v string) {
	o.TenantId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ApprovalConfig) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalConfig) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ApprovalConfig) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ApprovalConfig) SetId(v string) {
	o.Id = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *ApprovalConfig) GetScope() string {
	if o == nil || IsNil(o.Scope) {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalConfig) GetScopeOk() (*string, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *ApprovalConfig) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *ApprovalConfig) SetScope(v string) {
	o.Scope = &v
}

// GetReminderConfig returns the ReminderConfig field value if set, zero value otherwise.
func (o *ApprovalConfig) GetReminderConfig() ApprovalConfigReminderConfig {
	if o == nil || IsNil(o.ReminderConfig) {
		var ret ApprovalConfigReminderConfig
		return ret
	}
	return *o.ReminderConfig
}

// GetReminderConfigOk returns a tuple with the ReminderConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalConfig) GetReminderConfigOk() (*ApprovalConfigReminderConfig, bool) {
	if o == nil || IsNil(o.ReminderConfig) {
		return nil, false
	}
	return o.ReminderConfig, true
}

// HasReminderConfig returns a boolean if a field has been set.
func (o *ApprovalConfig) HasReminderConfig() bool {
	if o != nil && !IsNil(o.ReminderConfig) {
		return true
	}

	return false
}

// SetReminderConfig gets a reference to the given ApprovalConfigReminderConfig and assigns it to the ReminderConfig field.
func (o *ApprovalConfig) SetReminderConfig(v ApprovalConfigReminderConfig) {
	o.ReminderConfig = &v
}

// GetEscalationConfig returns the EscalationConfig field value if set, zero value otherwise.
func (o *ApprovalConfig) GetEscalationConfig() ApprovalConfigEscalationConfig {
	if o == nil || IsNil(o.EscalationConfig) {
		var ret ApprovalConfigEscalationConfig
		return ret
	}
	return *o.EscalationConfig
}

// GetEscalationConfigOk returns a tuple with the EscalationConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalConfig) GetEscalationConfigOk() (*ApprovalConfigEscalationConfig, bool) {
	if o == nil || IsNil(o.EscalationConfig) {
		return nil, false
	}
	return o.EscalationConfig, true
}

// HasEscalationConfig returns a boolean if a field has been set.
func (o *ApprovalConfig) HasEscalationConfig() bool {
	if o != nil && !IsNil(o.EscalationConfig) {
		return true
	}

	return false
}

// SetEscalationConfig gets a reference to the given ApprovalConfigEscalationConfig and assigns it to the EscalationConfig field.
func (o *ApprovalConfig) SetEscalationConfig(v ApprovalConfigEscalationConfig) {
	o.EscalationConfig = &v
}

// GetTimeoutConfig returns the TimeoutConfig field value if set, zero value otherwise.
func (o *ApprovalConfig) GetTimeoutConfig() ApprovalConfigTimeoutConfig {
	if o == nil || IsNil(o.TimeoutConfig) {
		var ret ApprovalConfigTimeoutConfig
		return ret
	}
	return *o.TimeoutConfig
}

// GetTimeoutConfigOk returns a tuple with the TimeoutConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalConfig) GetTimeoutConfigOk() (*ApprovalConfigTimeoutConfig, bool) {
	if o == nil || IsNil(o.TimeoutConfig) {
		return nil, false
	}
	return o.TimeoutConfig, true
}

// HasTimeoutConfig returns a boolean if a field has been set.
func (o *ApprovalConfig) HasTimeoutConfig() bool {
	if o != nil && !IsNil(o.TimeoutConfig) {
		return true
	}

	return false
}

// SetTimeoutConfig gets a reference to the given ApprovalConfigTimeoutConfig and assigns it to the TimeoutConfig field.
func (o *ApprovalConfig) SetTimeoutConfig(v ApprovalConfigTimeoutConfig) {
	o.TimeoutConfig = &v
}

// GetCronTimezone returns the CronTimezone field value if set, zero value otherwise.
func (o *ApprovalConfig) GetCronTimezone() ApprovalConfigCronTimezone {
	if o == nil || IsNil(o.CronTimezone) {
		var ret ApprovalConfigCronTimezone
		return ret
	}
	return *o.CronTimezone
}

// GetCronTimezoneOk returns a tuple with the CronTimezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalConfig) GetCronTimezoneOk() (*ApprovalConfigCronTimezone, bool) {
	if o == nil || IsNil(o.CronTimezone) {
		return nil, false
	}
	return o.CronTimezone, true
}

// HasCronTimezone returns a boolean if a field has been set.
func (o *ApprovalConfig) HasCronTimezone() bool {
	if o != nil && !IsNil(o.CronTimezone) {
		return true
	}

	return false
}

// SetCronTimezone gets a reference to the given ApprovalConfigCronTimezone and assigns it to the CronTimezone field.
func (o *ApprovalConfig) SetCronTimezone(v ApprovalConfigCronTimezone) {
	o.CronTimezone = &v
}

// GetSerialChain returns the SerialChain field value if set, zero value otherwise.
func (o *ApprovalConfig) GetSerialChain() []ApprovalConfigSerialChainInner {
	if o == nil || IsNil(o.SerialChain) {
		var ret []ApprovalConfigSerialChainInner
		return ret
	}
	return o.SerialChain
}

// GetSerialChainOk returns a tuple with the SerialChain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalConfig) GetSerialChainOk() ([]ApprovalConfigSerialChainInner, bool) {
	if o == nil || IsNil(o.SerialChain) {
		return nil, false
	}
	return o.SerialChain, true
}

// HasSerialChain returns a boolean if a field has been set.
func (o *ApprovalConfig) HasSerialChain() bool {
	if o != nil && !IsNil(o.SerialChain) {
		return true
	}

	return false
}

// SetSerialChain gets a reference to the given []ApprovalConfigSerialChainInner and assigns it to the SerialChain field.
func (o *ApprovalConfig) SetSerialChain(v []ApprovalConfigSerialChainInner) {
	o.SerialChain = v
}

// GetRequiresComment returns the RequiresComment field value if set, zero value otherwise.
func (o *ApprovalConfig) GetRequiresComment() string {
	if o == nil || IsNil(o.RequiresComment) {
		var ret string
		return ret
	}
	return *o.RequiresComment
}

// GetRequiresCommentOk returns a tuple with the RequiresComment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalConfig) GetRequiresCommentOk() (*string, bool) {
	if o == nil || IsNil(o.RequiresComment) {
		return nil, false
	}
	return o.RequiresComment, true
}

// HasRequiresComment returns a boolean if a field has been set.
func (o *ApprovalConfig) HasRequiresComment() bool {
	if o != nil && !IsNil(o.RequiresComment) {
		return true
	}

	return false
}

// SetRequiresComment gets a reference to the given string and assigns it to the RequiresComment field.
func (o *ApprovalConfig) SetRequiresComment(v string) {
	o.RequiresComment = &v
}

// GetFallbackApprover returns the FallbackApprover field value if set, zero value otherwise.
func (o *ApprovalConfig) GetFallbackApprover() ApprovalIdentity {
	if o == nil || IsNil(o.FallbackApprover) {
		var ret ApprovalIdentity
		return ret
	}
	return o.FallbackApprover
}

// GetFallbackApproverOk returns a tuple with the FallbackApprover field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalConfig) GetFallbackApproverOk() (ApprovalIdentity, bool) {
	if o == nil || IsNil(o.FallbackApprover) {
		return ApprovalIdentity{}, false
	}
	return o.FallbackApprover, true
}

// HasFallbackApprover returns a boolean if a field has been set.
func (o *ApprovalConfig) HasFallbackApprover() bool {
	if o != nil && !IsNil(o.FallbackApprover) {
		return true
	}

	return false
}

// SetFallbackApprover gets a reference to the given ApprovalIdentity and assigns it to the FallbackApprover field.
func (o *ApprovalConfig) SetFallbackApprover(v ApprovalIdentity) {
	o.FallbackApprover = v
}

// GetAutoApprove returns the AutoApprove field value if set, zero value otherwise.
func (o *ApprovalConfig) GetAutoApprove() string {
	if o == nil || IsNil(o.AutoApprove) {
		var ret string
		return ret
	}
	return *o.AutoApprove
}

// GetAutoApproveOk returns a tuple with the AutoApprove field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalConfig) GetAutoApproveOk() (*string, bool) {
	if o == nil || IsNil(o.AutoApprove) {
		return nil, false
	}
	return o.AutoApprove, true
}

// HasAutoApprove returns a boolean if a field has been set.
func (o *ApprovalConfig) HasAutoApprove() bool {
	if o != nil && !IsNil(o.AutoApprove) {
		return true
	}

	return false
}

// SetAutoApprove gets a reference to the given string and assigns it to the AutoApprove field.
func (o *ApprovalConfig) SetAutoApprove(v string) {
	o.AutoApprove = &v
}

func (o ApprovalConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApprovalConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TenantId) {
		toSerialize["tenantId"] = o.TenantId
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	if !IsNil(o.ReminderConfig) {
		toSerialize["reminderConfig"] = o.ReminderConfig
	}
	if !IsNil(o.EscalationConfig) {
		toSerialize["escalationConfig"] = o.EscalationConfig
	}
	if !IsNil(o.TimeoutConfig) {
		toSerialize["timeoutConfig"] = o.TimeoutConfig
	}
	if !IsNil(o.CronTimezone) {
		toSerialize["cronTimezone"] = o.CronTimezone
	}
	if !IsNil(o.SerialChain) {
		toSerialize["serialChain"] = o.SerialChain
	}
	if !IsNil(o.RequiresComment) {
		toSerialize["requiresComment"] = o.RequiresComment
	}
	if !IsNil(o.FallbackApprover) {
		toSerialize["fallbackApprover"] = o.FallbackApprover
	}
	if !IsNil(o.AutoApprove) {
		toSerialize["autoApprove"] = o.AutoApprove
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ApprovalConfig) UnmarshalJSON(data []byte) (err error) {
	varApprovalConfig := _ApprovalConfig{}

	err = json.Unmarshal(data, &varApprovalConfig)

	if err != nil {
		return err
	}

	*o = ApprovalConfig(varApprovalConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "tenantId")
		delete(additionalProperties, "id")
		delete(additionalProperties, "scope")
		delete(additionalProperties, "reminderConfig")
		delete(additionalProperties, "escalationConfig")
		delete(additionalProperties, "timeoutConfig")
		delete(additionalProperties, "cronTimezone")
		delete(additionalProperties, "serialChain")
		delete(additionalProperties, "requiresComment")
		delete(additionalProperties, "fallbackApprover")
		delete(additionalProperties, "autoApprove")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApprovalConfig struct {
	value *ApprovalConfig
	isSet bool
}

func (v NullableApprovalConfig) Get() *ApprovalConfig {
	return v.value
}

func (v *NullableApprovalConfig) Set(val *ApprovalConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableApprovalConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableApprovalConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApprovalConfig(val *ApprovalConfig) *NullableApprovalConfig {
	return &NullableApprovalConfig{value: val, isSet: true}
}

func (v NullableApprovalConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApprovalConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


