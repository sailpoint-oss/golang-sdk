/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
)

// checks if the HealthIndicatorCategory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HealthIndicatorCategory{}

// HealthIndicatorCategory Health indicator category data with errors and warnings
type HealthIndicatorCategory struct {
	// List of error events for this category
	Errors []HealthEvent `json:"errors,omitempty"`
	// List of warning events for this category
	Warnings []HealthEvent `json:"warnings,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HealthIndicatorCategory HealthIndicatorCategory

// NewHealthIndicatorCategory instantiates a new HealthIndicatorCategory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHealthIndicatorCategory() *HealthIndicatorCategory {
	this := HealthIndicatorCategory{}
	return &this
}

// NewHealthIndicatorCategoryWithDefaults instantiates a new HealthIndicatorCategory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHealthIndicatorCategoryWithDefaults() *HealthIndicatorCategory {
	this := HealthIndicatorCategory{}
	return &this
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *HealthIndicatorCategory) GetErrors() []HealthEvent {
	if o == nil || IsNil(o.Errors) {
		var ret []HealthEvent
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthIndicatorCategory) GetErrorsOk() ([]HealthEvent, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *HealthIndicatorCategory) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []HealthEvent and assigns it to the Errors field.
func (o *HealthIndicatorCategory) SetErrors(v []HealthEvent) {
	o.Errors = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *HealthIndicatorCategory) GetWarnings() []HealthEvent {
	if o == nil || IsNil(o.Warnings) {
		var ret []HealthEvent
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthIndicatorCategory) GetWarningsOk() ([]HealthEvent, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *HealthIndicatorCategory) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []HealthEvent and assigns it to the Warnings field.
func (o *HealthIndicatorCategory) SetWarnings(v []HealthEvent) {
	o.Warnings = v
}

func (o HealthIndicatorCategory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HealthIndicatorCategory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HealthIndicatorCategory) UnmarshalJSON(data []byte) (err error) {
	varHealthIndicatorCategory := _HealthIndicatorCategory{}

	err = json.Unmarshal(data, &varHealthIndicatorCategory)

	if err != nil {
		return err
	}

	*o = HealthIndicatorCategory(varHealthIndicatorCategory)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "errors")
		delete(additionalProperties, "warnings")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHealthIndicatorCategory struct {
	value *HealthIndicatorCategory
	isSet bool
}

func (v NullableHealthIndicatorCategory) Get() *HealthIndicatorCategory {
	return v.value
}

func (v *NullableHealthIndicatorCategory) Set(val *HealthIndicatorCategory) {
	v.value = val
	v.isSet = true
}

func (v NullableHealthIndicatorCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableHealthIndicatorCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHealthIndicatorCategory(val *HealthIndicatorCategory) *NullableHealthIndicatorCategory {
	return &NullableHealthIndicatorCategory{value: val, isSet: true}
}

func (v NullableHealthIndicatorCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHealthIndicatorCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


