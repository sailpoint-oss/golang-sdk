/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
)

// checks if the SpConfigRules type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpConfigRules{}

// SpConfigRules Rules to be applied to the config object during draft process
type SpConfigRules struct {
	TakeFromTargetRules []SpConfigRule `json:"takeFromTargetRules,omitempty"`
	DefaultRules []SpConfigRule `json:"defaultRules,omitempty"`
	// Whether this object can be edited
	Editable *bool `json:"editable,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SpConfigRules SpConfigRules

// NewSpConfigRules instantiates a new SpConfigRules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpConfigRules() *SpConfigRules {
	this := SpConfigRules{}
	var editable bool = false
	this.Editable = &editable
	return &this
}

// NewSpConfigRulesWithDefaults instantiates a new SpConfigRules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpConfigRulesWithDefaults() *SpConfigRules {
	this := SpConfigRules{}
	var editable bool = false
	this.Editable = &editable
	return &this
}

// GetTakeFromTargetRules returns the TakeFromTargetRules field value if set, zero value otherwise.
func (o *SpConfigRules) GetTakeFromTargetRules() []SpConfigRule {
	if o == nil || IsNil(o.TakeFromTargetRules) {
		var ret []SpConfigRule
		return ret
	}
	return o.TakeFromTargetRules
}

// GetTakeFromTargetRulesOk returns a tuple with the TakeFromTargetRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpConfigRules) GetTakeFromTargetRulesOk() ([]SpConfigRule, bool) {
	if o == nil || IsNil(o.TakeFromTargetRules) {
		return nil, false
	}
	return o.TakeFromTargetRules, true
}

// HasTakeFromTargetRules returns a boolean if a field has been set.
func (o *SpConfigRules) HasTakeFromTargetRules() bool {
	if o != nil && !IsNil(o.TakeFromTargetRules) {
		return true
	}

	return false
}

// SetTakeFromTargetRules gets a reference to the given []SpConfigRule and assigns it to the TakeFromTargetRules field.
func (o *SpConfigRules) SetTakeFromTargetRules(v []SpConfigRule) {
	o.TakeFromTargetRules = v
}

// GetDefaultRules returns the DefaultRules field value if set, zero value otherwise.
func (o *SpConfigRules) GetDefaultRules() []SpConfigRule {
	if o == nil || IsNil(o.DefaultRules) {
		var ret []SpConfigRule
		return ret
	}
	return o.DefaultRules
}

// GetDefaultRulesOk returns a tuple with the DefaultRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpConfigRules) GetDefaultRulesOk() ([]SpConfigRule, bool) {
	if o == nil || IsNil(o.DefaultRules) {
		return nil, false
	}
	return o.DefaultRules, true
}

// HasDefaultRules returns a boolean if a field has been set.
func (o *SpConfigRules) HasDefaultRules() bool {
	if o != nil && !IsNil(o.DefaultRules) {
		return true
	}

	return false
}

// SetDefaultRules gets a reference to the given []SpConfigRule and assigns it to the DefaultRules field.
func (o *SpConfigRules) SetDefaultRules(v []SpConfigRule) {
	o.DefaultRules = v
}

// GetEditable returns the Editable field value if set, zero value otherwise.
func (o *SpConfigRules) GetEditable() bool {
	if o == nil || IsNil(o.Editable) {
		var ret bool
		return ret
	}
	return *o.Editable
}

// GetEditableOk returns a tuple with the Editable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpConfigRules) GetEditableOk() (*bool, bool) {
	if o == nil || IsNil(o.Editable) {
		return nil, false
	}
	return o.Editable, true
}

// HasEditable returns a boolean if a field has been set.
func (o *SpConfigRules) HasEditable() bool {
	if o != nil && !IsNil(o.Editable) {
		return true
	}

	return false
}

// SetEditable gets a reference to the given bool and assigns it to the Editable field.
func (o *SpConfigRules) SetEditable(v bool) {
	o.Editable = &v
}

func (o SpConfigRules) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpConfigRules) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TakeFromTargetRules) {
		toSerialize["takeFromTargetRules"] = o.TakeFromTargetRules
	}
	if !IsNil(o.DefaultRules) {
		toSerialize["defaultRules"] = o.DefaultRules
	}
	if !IsNil(o.Editable) {
		toSerialize["editable"] = o.Editable
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SpConfigRules) UnmarshalJSON(data []byte) (err error) {
	varSpConfigRules := _SpConfigRules{}

	err = json.Unmarshal(data, &varSpConfigRules)

	if err != nil {
		return err
	}

	*o = SpConfigRules(varSpConfigRules)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "takeFromTargetRules")
		delete(additionalProperties, "defaultRules")
		delete(additionalProperties, "editable")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSpConfigRules struct {
	value *SpConfigRules
	isSet bool
}

func (v NullableSpConfigRules) Get() *SpConfigRules {
	return v.value
}

func (v *NullableSpConfigRules) Set(val *SpConfigRules) {
	v.value = val
	v.isSet = true
}

func (v NullableSpConfigRules) IsSet() bool {
	return v.isSet
}

func (v *NullableSpConfigRules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpConfigRules(val *SpConfigRules) *NullableSpConfigRules {
	return &NullableSpConfigRules{value: val, isSet: true}
}

func (v NullableSpConfigRules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpConfigRules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


