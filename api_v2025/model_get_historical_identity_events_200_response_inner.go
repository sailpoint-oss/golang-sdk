/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
	"fmt"
)


// GetHistoricalIdentityEvents200ResponseInner struct for GetHistoricalIdentityEvents200ResponseInner
type GetHistoricalIdentityEvents200ResponseInner struct {
	AccessItemAssociated *AccessItemAssociated
	AccessItemRemoved *AccessItemRemoved
	AccessRequested *AccessRequested
	AccountStatusChanged *AccountStatusChanged
	AttributesChanged *AttributesChanged
	IdentityCertified *IdentityCertified
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *GetHistoricalIdentityEvents200ResponseInner) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into AccessItemAssociated
	err = json.Unmarshal(data, &dst.AccessItemAssociated);
	if err == nil {
		jsonAccessItemAssociated, _ := json.Marshal(dst.AccessItemAssociated)
		if string(jsonAccessItemAssociated) == "{}" { // empty struct
			dst.AccessItemAssociated = nil
		} else {
			return nil // data stored in dst.AccessItemAssociated, return on the first match
		}
	} else {
		dst.AccessItemAssociated = nil
	}

	// try to unmarshal JSON data into AccessItemRemoved
	err = json.Unmarshal(data, &dst.AccessItemRemoved);
	if err == nil {
		jsonAccessItemRemoved, _ := json.Marshal(dst.AccessItemRemoved)
		if string(jsonAccessItemRemoved) == "{}" { // empty struct
			dst.AccessItemRemoved = nil
		} else {
			return nil // data stored in dst.AccessItemRemoved, return on the first match
		}
	} else {
		dst.AccessItemRemoved = nil
	}

	// try to unmarshal JSON data into AccessRequested
	err = json.Unmarshal(data, &dst.AccessRequested);
	if err == nil {
		jsonAccessRequested, _ := json.Marshal(dst.AccessRequested)
		if string(jsonAccessRequested) == "{}" { // empty struct
			dst.AccessRequested = nil
		} else {
			return nil // data stored in dst.AccessRequested, return on the first match
		}
	} else {
		dst.AccessRequested = nil
	}

	// try to unmarshal JSON data into AccountStatusChanged
	err = json.Unmarshal(data, &dst.AccountStatusChanged);
	if err == nil {
		jsonAccountStatusChanged, _ := json.Marshal(dst.AccountStatusChanged)
		if string(jsonAccountStatusChanged) == "{}" { // empty struct
			dst.AccountStatusChanged = nil
		} else {
			return nil // data stored in dst.AccountStatusChanged, return on the first match
		}
	} else {
		dst.AccountStatusChanged = nil
	}

	// try to unmarshal JSON data into AttributesChanged
	err = json.Unmarshal(data, &dst.AttributesChanged);
	if err == nil {
		jsonAttributesChanged, _ := json.Marshal(dst.AttributesChanged)
		if string(jsonAttributesChanged) == "{}" { // empty struct
			dst.AttributesChanged = nil
		} else {
			return nil // data stored in dst.AttributesChanged, return on the first match
		}
	} else {
		dst.AttributesChanged = nil
	}

	// try to unmarshal JSON data into IdentityCertified
	err = json.Unmarshal(data, &dst.IdentityCertified);
	if err == nil {
		jsonIdentityCertified, _ := json.Marshal(dst.IdentityCertified)
		if string(jsonIdentityCertified) == "{}" { // empty struct
			dst.IdentityCertified = nil
		} else {
			return nil // data stored in dst.IdentityCertified, return on the first match
		}
	} else {
		dst.IdentityCertified = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(GetHistoricalIdentityEvents200ResponseInner)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *GetHistoricalIdentityEvents200ResponseInner) MarshalJSON() ([]byte, error) {
	if src.AccessItemAssociated != nil {
		return json.Marshal(&src.AccessItemAssociated)
	}

	if src.AccessItemRemoved != nil {
		return json.Marshal(&src.AccessItemRemoved)
	}

	if src.AccessRequested != nil {
		return json.Marshal(&src.AccessRequested)
	}

	if src.AccountStatusChanged != nil {
		return json.Marshal(&src.AccountStatusChanged)
	}

	if src.AttributesChanged != nil {
		return json.Marshal(&src.AttributesChanged)
	}

	if src.IdentityCertified != nil {
		return json.Marshal(&src.IdentityCertified)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableGetHistoricalIdentityEvents200ResponseInner struct {
	value *GetHistoricalIdentityEvents200ResponseInner
	isSet bool
}

func (v NullableGetHistoricalIdentityEvents200ResponseInner) Get() *GetHistoricalIdentityEvents200ResponseInner {
	return v.value
}

func (v *NullableGetHistoricalIdentityEvents200ResponseInner) Set(val *GetHistoricalIdentityEvents200ResponseInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGetHistoricalIdentityEvents200ResponseInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGetHistoricalIdentityEvents200ResponseInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetHistoricalIdentityEvents200ResponseInner(val *GetHistoricalIdentityEvents200ResponseInner) *NullableGetHistoricalIdentityEvents200ResponseInner {
	return &NullableGetHistoricalIdentityEvents200ResponseInner{value: val, isSet: true}
}

func (v NullableGetHistoricalIdentityEvents200ResponseInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetHistoricalIdentityEvents200ResponseInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


