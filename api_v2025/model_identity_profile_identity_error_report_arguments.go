/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
	"fmt"
)

// checks if the IdentityProfileIdentityErrorReportArguments type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdentityProfileIdentityErrorReportArguments{}

// IdentityProfileIdentityErrorReportArguments Arguments for Identity Profile Identity Error report (IDENTITY_PROFILE_IDENTITY_ERROR)
type IdentityProfileIdentityErrorReportArguments struct {
	// Source ID.
	AuthoritativeSource string `json:"authoritativeSource"`
	AdditionalProperties map[string]interface{}
}

type _IdentityProfileIdentityErrorReportArguments IdentityProfileIdentityErrorReportArguments

// NewIdentityProfileIdentityErrorReportArguments instantiates a new IdentityProfileIdentityErrorReportArguments object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityProfileIdentityErrorReportArguments(authoritativeSource string) *IdentityProfileIdentityErrorReportArguments {
	this := IdentityProfileIdentityErrorReportArguments{}
	this.AuthoritativeSource = authoritativeSource
	return &this
}

// NewIdentityProfileIdentityErrorReportArgumentsWithDefaults instantiates a new IdentityProfileIdentityErrorReportArguments object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityProfileIdentityErrorReportArgumentsWithDefaults() *IdentityProfileIdentityErrorReportArguments {
	this := IdentityProfileIdentityErrorReportArguments{}
	return &this
}

// GetAuthoritativeSource returns the AuthoritativeSource field value
func (o *IdentityProfileIdentityErrorReportArguments) GetAuthoritativeSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuthoritativeSource
}

// GetAuthoritativeSourceOk returns a tuple with the AuthoritativeSource field value
// and a boolean to check if the value has been set.
func (o *IdentityProfileIdentityErrorReportArguments) GetAuthoritativeSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthoritativeSource, true
}

// SetAuthoritativeSource sets field value
func (o *IdentityProfileIdentityErrorReportArguments) SetAuthoritativeSource(v string) {
	o.AuthoritativeSource = v
}

func (o IdentityProfileIdentityErrorReportArguments) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdentityProfileIdentityErrorReportArguments) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["authoritativeSource"] = o.AuthoritativeSource

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IdentityProfileIdentityErrorReportArguments) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"authoritativeSource",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIdentityProfileIdentityErrorReportArguments := _IdentityProfileIdentityErrorReportArguments{}

	err = json.Unmarshal(data, &varIdentityProfileIdentityErrorReportArguments)

	if err != nil {
		return err
	}

	*o = IdentityProfileIdentityErrorReportArguments(varIdentityProfileIdentityErrorReportArguments)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "authoritativeSource")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIdentityProfileIdentityErrorReportArguments struct {
	value *IdentityProfileIdentityErrorReportArguments
	isSet bool
}

func (v NullableIdentityProfileIdentityErrorReportArguments) Get() *IdentityProfileIdentityErrorReportArguments {
	return v.value
}

func (v *NullableIdentityProfileIdentityErrorReportArguments) Set(val *IdentityProfileIdentityErrorReportArguments) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityProfileIdentityErrorReportArguments) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityProfileIdentityErrorReportArguments) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityProfileIdentityErrorReportArguments(val *IdentityProfileIdentityErrorReportArguments) *NullableIdentityProfileIdentityErrorReportArguments {
	return &NullableIdentityProfileIdentityErrorReportArguments{value: val, isSet: true}
}

func (v NullableIdentityProfileIdentityErrorReportArguments) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityProfileIdentityErrorReportArguments) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


