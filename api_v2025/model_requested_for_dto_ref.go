/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
	"fmt"
)

// checks if the RequestedForDtoRef type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RequestedForDtoRef{}

// RequestedForDtoRef struct for RequestedForDtoRef
type RequestedForDtoRef struct {
	// The identity id for which the access is requested
	IdentityId string `json:"identityId"`
	// the details for the access items that are requested for the identity
	RequestedItems []RequestedItemDtoRef `json:"requestedItems"`
	AdditionalProperties map[string]interface{}
}

type _RequestedForDtoRef RequestedForDtoRef

// NewRequestedForDtoRef instantiates a new RequestedForDtoRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequestedForDtoRef(identityId string, requestedItems []RequestedItemDtoRef) *RequestedForDtoRef {
	this := RequestedForDtoRef{}
	this.IdentityId = identityId
	this.RequestedItems = requestedItems
	return &this
}

// NewRequestedForDtoRefWithDefaults instantiates a new RequestedForDtoRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequestedForDtoRefWithDefaults() *RequestedForDtoRef {
	this := RequestedForDtoRef{}
	return &this
}

// GetIdentityId returns the IdentityId field value
func (o *RequestedForDtoRef) GetIdentityId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IdentityId
}

// GetIdentityIdOk returns a tuple with the IdentityId field value
// and a boolean to check if the value has been set.
func (o *RequestedForDtoRef) GetIdentityIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IdentityId, true
}

// SetIdentityId sets field value
func (o *RequestedForDtoRef) SetIdentityId(v string) {
	o.IdentityId = v
}

// GetRequestedItems returns the RequestedItems field value
func (o *RequestedForDtoRef) GetRequestedItems() []RequestedItemDtoRef {
	if o == nil {
		var ret []RequestedItemDtoRef
		return ret
	}

	return o.RequestedItems
}

// GetRequestedItemsOk returns a tuple with the RequestedItems field value
// and a boolean to check if the value has been set.
func (o *RequestedForDtoRef) GetRequestedItemsOk() ([]RequestedItemDtoRef, bool) {
	if o == nil {
		return nil, false
	}
	return o.RequestedItems, true
}

// SetRequestedItems sets field value
func (o *RequestedForDtoRef) SetRequestedItems(v []RequestedItemDtoRef) {
	o.RequestedItems = v
}

func (o RequestedForDtoRef) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RequestedForDtoRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["identityId"] = o.IdentityId
	toSerialize["requestedItems"] = o.RequestedItems

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RequestedForDtoRef) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"identityId",
		"requestedItems",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRequestedForDtoRef := _RequestedForDtoRef{}

	err = json.Unmarshal(data, &varRequestedForDtoRef)

	if err != nil {
		return err
	}

	*o = RequestedForDtoRef(varRequestedForDtoRef)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "identityId")
		delete(additionalProperties, "requestedItems")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRequestedForDtoRef struct {
	value *RequestedForDtoRef
	isSet bool
}

func (v NullableRequestedForDtoRef) Get() *RequestedForDtoRef {
	return v.value
}

func (v *NullableRequestedForDtoRef) Set(val *RequestedForDtoRef) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestedForDtoRef) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestedForDtoRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestedForDtoRef(val *RequestedForDtoRef) *NullableRequestedForDtoRef {
	return &NullableRequestedForDtoRef{value: val, isSet: true}
}

func (v NullableRequestedForDtoRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestedForDtoRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


