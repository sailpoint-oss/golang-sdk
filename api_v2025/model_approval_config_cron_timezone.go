/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
)

// checks if the ApprovalConfigCronTimezone type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApprovalConfigCronTimezone{}

// ApprovalConfigCronTimezone Timezone configuration for cron schedules.
type ApprovalConfigCronTimezone struct {
	// Timezone location for cron schedules.
	Location *string `json:"location,omitempty"`
	// Timezone offset for cron schedules.
	Offset *string `json:"offset,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ApprovalConfigCronTimezone ApprovalConfigCronTimezone

// NewApprovalConfigCronTimezone instantiates a new ApprovalConfigCronTimezone object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApprovalConfigCronTimezone() *ApprovalConfigCronTimezone {
	this := ApprovalConfigCronTimezone{}
	return &this
}

// NewApprovalConfigCronTimezoneWithDefaults instantiates a new ApprovalConfigCronTimezone object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApprovalConfigCronTimezoneWithDefaults() *ApprovalConfigCronTimezone {
	this := ApprovalConfigCronTimezone{}
	return &this
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *ApprovalConfigCronTimezone) GetLocation() string {
	if o == nil || IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalConfigCronTimezone) GetLocationOk() (*string, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *ApprovalConfigCronTimezone) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *ApprovalConfigCronTimezone) SetLocation(v string) {
	o.Location = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *ApprovalConfigCronTimezone) GetOffset() string {
	if o == nil || IsNil(o.Offset) {
		var ret string
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalConfigCronTimezone) GetOffsetOk() (*string, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *ApprovalConfigCronTimezone) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given string and assigns it to the Offset field.
func (o *ApprovalConfigCronTimezone) SetOffset(v string) {
	o.Offset = &v
}

func (o ApprovalConfigCronTimezone) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApprovalConfigCronTimezone) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ApprovalConfigCronTimezone) UnmarshalJSON(data []byte) (err error) {
	varApprovalConfigCronTimezone := _ApprovalConfigCronTimezone{}

	err = json.Unmarshal(data, &varApprovalConfigCronTimezone)

	if err != nil {
		return err
	}

	*o = ApprovalConfigCronTimezone(varApprovalConfigCronTimezone)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "location")
		delete(additionalProperties, "offset")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApprovalConfigCronTimezone struct {
	value *ApprovalConfigCronTimezone
	isSet bool
}

func (v NullableApprovalConfigCronTimezone) Get() *ApprovalConfigCronTimezone {
	return v.value
}

func (v *NullableApprovalConfigCronTimezone) Set(val *ApprovalConfigCronTimezone) {
	v.value = val
	v.isSet = true
}

func (v NullableApprovalConfigCronTimezone) IsSet() bool {
	return v.isSet
}

func (v *NullableApprovalConfigCronTimezone) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApprovalConfigCronTimezone(val *ApprovalConfigCronTimezone) *NullableApprovalConfigCronTimezone {
	return &NullableApprovalConfigCronTimezone{value: val, isSet: true}
}

func (v NullableApprovalConfigCronTimezone) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApprovalConfigCronTimezone) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


