/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
)

// checks if the ApprovalConfigSerialChainInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApprovalConfigSerialChainInner{}

// ApprovalConfigSerialChainInner struct for ApprovalConfigSerialChainInner
type ApprovalConfigSerialChainInner struct {
	// ID of the serial chain.
	ChainId *string `json:"chainId,omitempty"`
	// Starting at 1 defines the order in which the identities will get assigned
	Tier *int64 `json:"tier,omitempty"`
	// Identity ID in the serial chain.
	IdentityId *string `json:"identityId,omitempty"`
	// Type of identity in the serial chain.
	IdentityType *string `json:"identityType,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ApprovalConfigSerialChainInner ApprovalConfigSerialChainInner

// NewApprovalConfigSerialChainInner instantiates a new ApprovalConfigSerialChainInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApprovalConfigSerialChainInner() *ApprovalConfigSerialChainInner {
	this := ApprovalConfigSerialChainInner{}
	return &this
}

// NewApprovalConfigSerialChainInnerWithDefaults instantiates a new ApprovalConfigSerialChainInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApprovalConfigSerialChainInnerWithDefaults() *ApprovalConfigSerialChainInner {
	this := ApprovalConfigSerialChainInner{}
	return &this
}

// GetChainId returns the ChainId field value if set, zero value otherwise.
func (o *ApprovalConfigSerialChainInner) GetChainId() string {
	if o == nil || IsNil(o.ChainId) {
		var ret string
		return ret
	}
	return *o.ChainId
}

// GetChainIdOk returns a tuple with the ChainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalConfigSerialChainInner) GetChainIdOk() (*string, bool) {
	if o == nil || IsNil(o.ChainId) {
		return nil, false
	}
	return o.ChainId, true
}

// HasChainId returns a boolean if a field has been set.
func (o *ApprovalConfigSerialChainInner) HasChainId() bool {
	if o != nil && !IsNil(o.ChainId) {
		return true
	}

	return false
}

// SetChainId gets a reference to the given string and assigns it to the ChainId field.
func (o *ApprovalConfigSerialChainInner) SetChainId(v string) {
	o.ChainId = &v
}

// GetTier returns the Tier field value if set, zero value otherwise.
func (o *ApprovalConfigSerialChainInner) GetTier() int64 {
	if o == nil || IsNil(o.Tier) {
		var ret int64
		return ret
	}
	return *o.Tier
}

// GetTierOk returns a tuple with the Tier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalConfigSerialChainInner) GetTierOk() (*int64, bool) {
	if o == nil || IsNil(o.Tier) {
		return nil, false
	}
	return o.Tier, true
}

// HasTier returns a boolean if a field has been set.
func (o *ApprovalConfigSerialChainInner) HasTier() bool {
	if o != nil && !IsNil(o.Tier) {
		return true
	}

	return false
}

// SetTier gets a reference to the given int64 and assigns it to the Tier field.
func (o *ApprovalConfigSerialChainInner) SetTier(v int64) {
	o.Tier = &v
}

// GetIdentityId returns the IdentityId field value if set, zero value otherwise.
func (o *ApprovalConfigSerialChainInner) GetIdentityId() string {
	if o == nil || IsNil(o.IdentityId) {
		var ret string
		return ret
	}
	return *o.IdentityId
}

// GetIdentityIdOk returns a tuple with the IdentityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalConfigSerialChainInner) GetIdentityIdOk() (*string, bool) {
	if o == nil || IsNil(o.IdentityId) {
		return nil, false
	}
	return o.IdentityId, true
}

// HasIdentityId returns a boolean if a field has been set.
func (o *ApprovalConfigSerialChainInner) HasIdentityId() bool {
	if o != nil && !IsNil(o.IdentityId) {
		return true
	}

	return false
}

// SetIdentityId gets a reference to the given string and assigns it to the IdentityId field.
func (o *ApprovalConfigSerialChainInner) SetIdentityId(v string) {
	o.IdentityId = &v
}

// GetIdentityType returns the IdentityType field value if set, zero value otherwise.
func (o *ApprovalConfigSerialChainInner) GetIdentityType() string {
	if o == nil || IsNil(o.IdentityType) {
		var ret string
		return ret
	}
	return *o.IdentityType
}

// GetIdentityTypeOk returns a tuple with the IdentityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalConfigSerialChainInner) GetIdentityTypeOk() (*string, bool) {
	if o == nil || IsNil(o.IdentityType) {
		return nil, false
	}
	return o.IdentityType, true
}

// HasIdentityType returns a boolean if a field has been set.
func (o *ApprovalConfigSerialChainInner) HasIdentityType() bool {
	if o != nil && !IsNil(o.IdentityType) {
		return true
	}

	return false
}

// SetIdentityType gets a reference to the given string and assigns it to the IdentityType field.
func (o *ApprovalConfigSerialChainInner) SetIdentityType(v string) {
	o.IdentityType = &v
}

func (o ApprovalConfigSerialChainInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApprovalConfigSerialChainInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChainId) {
		toSerialize["chainId"] = o.ChainId
	}
	if !IsNil(o.Tier) {
		toSerialize["tier"] = o.Tier
	}
	if !IsNil(o.IdentityId) {
		toSerialize["identityId"] = o.IdentityId
	}
	if !IsNil(o.IdentityType) {
		toSerialize["identityType"] = o.IdentityType
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ApprovalConfigSerialChainInner) UnmarshalJSON(data []byte) (err error) {
	varApprovalConfigSerialChainInner := _ApprovalConfigSerialChainInner{}

	err = json.Unmarshal(data, &varApprovalConfigSerialChainInner)

	if err != nil {
		return err
	}

	*o = ApprovalConfigSerialChainInner(varApprovalConfigSerialChainInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "chainId")
		delete(additionalProperties, "tier")
		delete(additionalProperties, "identityId")
		delete(additionalProperties, "identityType")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApprovalConfigSerialChainInner struct {
	value *ApprovalConfigSerialChainInner
	isSet bool
}

func (v NullableApprovalConfigSerialChainInner) Get() *ApprovalConfigSerialChainInner {
	return v.value
}

func (v *NullableApprovalConfigSerialChainInner) Set(val *ApprovalConfigSerialChainInner) {
	v.value = val
	v.isSet = true
}

func (v NullableApprovalConfigSerialChainInner) IsSet() bool {
	return v.isSet
}

func (v *NullableApprovalConfigSerialChainInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApprovalConfigSerialChainInner(val *ApprovalConfigSerialChainInner) *NullableApprovalConfigSerialChainInner {
	return &NullableApprovalConfigSerialChainInner{value: val, isSet: true}
}

func (v NullableApprovalConfigSerialChainInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApprovalConfigSerialChainInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


