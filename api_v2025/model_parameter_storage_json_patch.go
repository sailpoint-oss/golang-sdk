/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
	"fmt"
)

// checks if the ParameterStorageJsonPatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParameterStorageJsonPatch{}

// ParameterStorageJsonPatch RFC 6902 JSON Patch operation
type ParameterStorageJsonPatch struct {
	// The operation to perform (add, remove, replace, move, copy, test)
	Op string `json:"op"`
	// A JSON-Pointer describing the target location
	Path string `json:"path"`
	// The value to be used within the operations. Required for add/replace/test.
	Value map[string]interface{} `json:"value,omitempty"`
	// A JSON-Pointer describing the source location for move/copy.
	From *string `json:"from,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ParameterStorageJsonPatch ParameterStorageJsonPatch

// NewParameterStorageJsonPatch instantiates a new ParameterStorageJsonPatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParameterStorageJsonPatch(op string, path string) *ParameterStorageJsonPatch {
	this := ParameterStorageJsonPatch{}
	this.Op = op
	this.Path = path
	return &this
}

// NewParameterStorageJsonPatchWithDefaults instantiates a new ParameterStorageJsonPatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParameterStorageJsonPatchWithDefaults() *ParameterStorageJsonPatch {
	this := ParameterStorageJsonPatch{}
	return &this
}

// GetOp returns the Op field value
func (o *ParameterStorageJsonPatch) GetOp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Op
}

// GetOpOk returns a tuple with the Op field value
// and a boolean to check if the value has been set.
func (o *ParameterStorageJsonPatch) GetOpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Op, true
}

// SetOp sets field value
func (o *ParameterStorageJsonPatch) SetOp(v string) {
	o.Op = v
}

// GetPath returns the Path field value
func (o *ParameterStorageJsonPatch) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *ParameterStorageJsonPatch) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *ParameterStorageJsonPatch) SetPath(v string) {
	o.Path = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ParameterStorageJsonPatch) GetValue() map[string]interface{} {
	if o == nil || IsNil(o.Value) {
		var ret map[string]interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParameterStorageJsonPatch) GetValueOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return map[string]interface{}{}, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ParameterStorageJsonPatch) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given map[string]interface{} and assigns it to the Value field.
func (o *ParameterStorageJsonPatch) SetValue(v map[string]interface{}) {
	o.Value = v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *ParameterStorageJsonPatch) GetFrom() string {
	if o == nil || IsNil(o.From) {
		var ret string
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParameterStorageJsonPatch) GetFromOk() (*string, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *ParameterStorageJsonPatch) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given string and assigns it to the From field.
func (o *ParameterStorageJsonPatch) SetFrom(v string) {
	o.From = &v
}

func (o ParameterStorageJsonPatch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParameterStorageJsonPatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["op"] = o.Op
	toSerialize["path"] = o.Path
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ParameterStorageJsonPatch) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"op",
		"path",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varParameterStorageJsonPatch := _ParameterStorageJsonPatch{}

	err = json.Unmarshal(data, &varParameterStorageJsonPatch)

	if err != nil {
		return err
	}

	*o = ParameterStorageJsonPatch(varParameterStorageJsonPatch)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "op")
		delete(additionalProperties, "path")
		delete(additionalProperties, "value")
		delete(additionalProperties, "from")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableParameterStorageJsonPatch struct {
	value *ParameterStorageJsonPatch
	isSet bool
}

func (v NullableParameterStorageJsonPatch) Get() *ParameterStorageJsonPatch {
	return v.value
}

func (v *NullableParameterStorageJsonPatch) Set(val *ParameterStorageJsonPatch) {
	v.value = val
	v.isSet = true
}

func (v NullableParameterStorageJsonPatch) IsSet() bool {
	return v.isSet
}

func (v *NullableParameterStorageJsonPatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParameterStorageJsonPatch(val *ParameterStorageJsonPatch) *NullableParameterStorageJsonPatch {
	return &NullableParameterStorageJsonPatch{value: val, isSet: true}
}

func (v NullableParameterStorageJsonPatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParameterStorageJsonPatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


