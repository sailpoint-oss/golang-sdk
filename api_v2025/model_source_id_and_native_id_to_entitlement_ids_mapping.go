/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
	"fmt"
)

// checks if the SourceIdAndNativeIdToEntitlementIdsMapping type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SourceIdAndNativeIdToEntitlementIdsMapping{}

// SourceIdAndNativeIdToEntitlementIdsMapping Source ID and Native ID to Entitlement IDs mapping.
type SourceIdAndNativeIdToEntitlementIdsMapping struct {
	// The ID of the source system.
	SourceId string `json:"sourceId"`
	// The native ID and entitlement IDs mapping in the source system.
	NativeIdToEntitlementIdsMappings []NativeIdToEntitlementIdsMapping `json:"nativeIdToEntitlementIdsMappings"`
	AdditionalProperties map[string]interface{}
}

type _SourceIdAndNativeIdToEntitlementIdsMapping SourceIdAndNativeIdToEntitlementIdsMapping

// NewSourceIdAndNativeIdToEntitlementIdsMapping instantiates a new SourceIdAndNativeIdToEntitlementIdsMapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceIdAndNativeIdToEntitlementIdsMapping(sourceId string, nativeIdToEntitlementIdsMappings []NativeIdToEntitlementIdsMapping) *SourceIdAndNativeIdToEntitlementIdsMapping {
	this := SourceIdAndNativeIdToEntitlementIdsMapping{}
	this.SourceId = sourceId
	this.NativeIdToEntitlementIdsMappings = nativeIdToEntitlementIdsMappings
	return &this
}

// NewSourceIdAndNativeIdToEntitlementIdsMappingWithDefaults instantiates a new SourceIdAndNativeIdToEntitlementIdsMapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceIdAndNativeIdToEntitlementIdsMappingWithDefaults() *SourceIdAndNativeIdToEntitlementIdsMapping {
	this := SourceIdAndNativeIdToEntitlementIdsMapping{}
	return &this
}

// GetSourceId returns the SourceId field value
func (o *SourceIdAndNativeIdToEntitlementIdsMapping) GetSourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value
// and a boolean to check if the value has been set.
func (o *SourceIdAndNativeIdToEntitlementIdsMapping) GetSourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceId, true
}

// SetSourceId sets field value
func (o *SourceIdAndNativeIdToEntitlementIdsMapping) SetSourceId(v string) {
	o.SourceId = v
}

// GetNativeIdToEntitlementIdsMappings returns the NativeIdToEntitlementIdsMappings field value
func (o *SourceIdAndNativeIdToEntitlementIdsMapping) GetNativeIdToEntitlementIdsMappings() []NativeIdToEntitlementIdsMapping {
	if o == nil {
		var ret []NativeIdToEntitlementIdsMapping
		return ret
	}

	return o.NativeIdToEntitlementIdsMappings
}

// GetNativeIdToEntitlementIdsMappingsOk returns a tuple with the NativeIdToEntitlementIdsMappings field value
// and a boolean to check if the value has been set.
func (o *SourceIdAndNativeIdToEntitlementIdsMapping) GetNativeIdToEntitlementIdsMappingsOk() ([]NativeIdToEntitlementIdsMapping, bool) {
	if o == nil {
		return nil, false
	}
	return o.NativeIdToEntitlementIdsMappings, true
}

// SetNativeIdToEntitlementIdsMappings sets field value
func (o *SourceIdAndNativeIdToEntitlementIdsMapping) SetNativeIdToEntitlementIdsMappings(v []NativeIdToEntitlementIdsMapping) {
	o.NativeIdToEntitlementIdsMappings = v
}

func (o SourceIdAndNativeIdToEntitlementIdsMapping) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SourceIdAndNativeIdToEntitlementIdsMapping) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sourceId"] = o.SourceId
	toSerialize["nativeIdToEntitlementIdsMappings"] = o.NativeIdToEntitlementIdsMappings

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SourceIdAndNativeIdToEntitlementIdsMapping) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sourceId",
		"nativeIdToEntitlementIdsMappings",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSourceIdAndNativeIdToEntitlementIdsMapping := _SourceIdAndNativeIdToEntitlementIdsMapping{}

	err = json.Unmarshal(data, &varSourceIdAndNativeIdToEntitlementIdsMapping)

	if err != nil {
		return err
	}

	*o = SourceIdAndNativeIdToEntitlementIdsMapping(varSourceIdAndNativeIdToEntitlementIdsMapping)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "sourceId")
		delete(additionalProperties, "nativeIdToEntitlementIdsMappings")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSourceIdAndNativeIdToEntitlementIdsMapping struct {
	value *SourceIdAndNativeIdToEntitlementIdsMapping
	isSet bool
}

func (v NullableSourceIdAndNativeIdToEntitlementIdsMapping) Get() *SourceIdAndNativeIdToEntitlementIdsMapping {
	return v.value
}

func (v *NullableSourceIdAndNativeIdToEntitlementIdsMapping) Set(val *SourceIdAndNativeIdToEntitlementIdsMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceIdAndNativeIdToEntitlementIdsMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceIdAndNativeIdToEntitlementIdsMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceIdAndNativeIdToEntitlementIdsMapping(val *SourceIdAndNativeIdToEntitlementIdsMapping) *NullableSourceIdAndNativeIdToEntitlementIdsMapping {
	return &NullableSourceIdAndNativeIdToEntitlementIdsMapping{value: val, isSet: true}
}

func (v NullableSourceIdAndNativeIdToEntitlementIdsMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceIdAndNativeIdToEntitlementIdsMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


