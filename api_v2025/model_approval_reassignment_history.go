/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
	
)

// checks if the ApprovalReassignmentHistory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApprovalReassignmentHistory{}

// ApprovalReassignmentHistory ReassignmentHistoryRecord holds a history record of reassignment and escalation actions for an approval request
type ApprovalReassignmentHistory struct {
	// Unique identifier for the comment associated with the reassignment.
	CommentID *string `json:"commentID,omitempty"`
	ReassignedFrom *ApprovalIdentity `json:"reassignedFrom,omitempty"`
	ReassignedTo *ApprovalIdentity `json:"reassignedTo,omitempty"`
	Reassigner *ApprovalIdentity `json:"reassigner,omitempty"`
	// Date and time when the reassignment occurred.
	ReassignmentDate *SailPointTime `json:"reassignmentDate,omitempty"`
	// Type of reassignment, such as escalation or manual reassignment.
	ReassignmentType *string `json:"reassignmentType,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ApprovalReassignmentHistory ApprovalReassignmentHistory

// NewApprovalReassignmentHistory instantiates a new ApprovalReassignmentHistory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApprovalReassignmentHistory() *ApprovalReassignmentHistory {
	this := ApprovalReassignmentHistory{}
	return &this
}

// NewApprovalReassignmentHistoryWithDefaults instantiates a new ApprovalReassignmentHistory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApprovalReassignmentHistoryWithDefaults() *ApprovalReassignmentHistory {
	this := ApprovalReassignmentHistory{}
	return &this
}

// GetCommentID returns the CommentID field value if set, zero value otherwise.
func (o *ApprovalReassignmentHistory) GetCommentID() string {
	if o == nil || IsNil(o.CommentID) {
		var ret string
		return ret
	}
	return *o.CommentID
}

// GetCommentIDOk returns a tuple with the CommentID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalReassignmentHistory) GetCommentIDOk() (*string, bool) {
	if o == nil || IsNil(o.CommentID) {
		return nil, false
	}
	return o.CommentID, true
}

// HasCommentID returns a boolean if a field has been set.
func (o *ApprovalReassignmentHistory) HasCommentID() bool {
	if o != nil && !IsNil(o.CommentID) {
		return true
	}

	return false
}

// SetCommentID gets a reference to the given string and assigns it to the CommentID field.
func (o *ApprovalReassignmentHistory) SetCommentID(v string) {
	o.CommentID = &v
}

// GetReassignedFrom returns the ReassignedFrom field value if set, zero value otherwise.
func (o *ApprovalReassignmentHistory) GetReassignedFrom() ApprovalIdentity {
	if o == nil || IsNil(o.ReassignedFrom) {
		var ret ApprovalIdentity
		return ret
	}
	return *o.ReassignedFrom
}

// GetReassignedFromOk returns a tuple with the ReassignedFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalReassignmentHistory) GetReassignedFromOk() (*ApprovalIdentity, bool) {
	if o == nil || IsNil(o.ReassignedFrom) {
		return nil, false
	}
	return o.ReassignedFrom, true
}

// HasReassignedFrom returns a boolean if a field has been set.
func (o *ApprovalReassignmentHistory) HasReassignedFrom() bool {
	if o != nil && !IsNil(o.ReassignedFrom) {
		return true
	}

	return false
}

// SetReassignedFrom gets a reference to the given ApprovalIdentity and assigns it to the ReassignedFrom field.
func (o *ApprovalReassignmentHistory) SetReassignedFrom(v ApprovalIdentity) {
	o.ReassignedFrom = &v
}

// GetReassignedTo returns the ReassignedTo field value if set, zero value otherwise.
func (o *ApprovalReassignmentHistory) GetReassignedTo() ApprovalIdentity {
	if o == nil || IsNil(o.ReassignedTo) {
		var ret ApprovalIdentity
		return ret
	}
	return *o.ReassignedTo
}

// GetReassignedToOk returns a tuple with the ReassignedTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalReassignmentHistory) GetReassignedToOk() (*ApprovalIdentity, bool) {
	if o == nil || IsNil(o.ReassignedTo) {
		return nil, false
	}
	return o.ReassignedTo, true
}

// HasReassignedTo returns a boolean if a field has been set.
func (o *ApprovalReassignmentHistory) HasReassignedTo() bool {
	if o != nil && !IsNil(o.ReassignedTo) {
		return true
	}

	return false
}

// SetReassignedTo gets a reference to the given ApprovalIdentity and assigns it to the ReassignedTo field.
func (o *ApprovalReassignmentHistory) SetReassignedTo(v ApprovalIdentity) {
	o.ReassignedTo = &v
}

// GetReassigner returns the Reassigner field value if set, zero value otherwise.
func (o *ApprovalReassignmentHistory) GetReassigner() ApprovalIdentity {
	if o == nil || IsNil(o.Reassigner) {
		var ret ApprovalIdentity
		return ret
	}
	return *o.Reassigner
}

// GetReassignerOk returns a tuple with the Reassigner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalReassignmentHistory) GetReassignerOk() (*ApprovalIdentity, bool) {
	if o == nil || IsNil(o.Reassigner) {
		return nil, false
	}
	return o.Reassigner, true
}

// HasReassigner returns a boolean if a field has been set.
func (o *ApprovalReassignmentHistory) HasReassigner() bool {
	if o != nil && !IsNil(o.Reassigner) {
		return true
	}

	return false
}

// SetReassigner gets a reference to the given ApprovalIdentity and assigns it to the Reassigner field.
func (o *ApprovalReassignmentHistory) SetReassigner(v ApprovalIdentity) {
	o.Reassigner = &v
}

// GetReassignmentDate returns the ReassignmentDate field value if set, zero value otherwise.
func (o *ApprovalReassignmentHistory) GetReassignmentDate() SailPointTime {
	if o == nil || IsNil(o.ReassignmentDate) {
		var ret SailPointTime
		return ret
	}
	return *o.ReassignmentDate
}

// GetReassignmentDateOk returns a tuple with the ReassignmentDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalReassignmentHistory) GetReassignmentDateOk() (*SailPointTime, bool) {
	if o == nil || IsNil(o.ReassignmentDate) {
		return nil, false
	}
	return o.ReassignmentDate, true
}

// HasReassignmentDate returns a boolean if a field has been set.
func (o *ApprovalReassignmentHistory) HasReassignmentDate() bool {
	if o != nil && !IsNil(o.ReassignmentDate) {
		return true
	}

	return false
}

// SetReassignmentDate gets a reference to the given SailPointTime and assigns it to the ReassignmentDate field.
func (o *ApprovalReassignmentHistory) SetReassignmentDate(v SailPointTime) {
	o.ReassignmentDate = &v
}

// GetReassignmentType returns the ReassignmentType field value if set, zero value otherwise.
func (o *ApprovalReassignmentHistory) GetReassignmentType() string {
	if o == nil || IsNil(o.ReassignmentType) {
		var ret string
		return ret
	}
	return *o.ReassignmentType
}

// GetReassignmentTypeOk returns a tuple with the ReassignmentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalReassignmentHistory) GetReassignmentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ReassignmentType) {
		return nil, false
	}
	return o.ReassignmentType, true
}

// HasReassignmentType returns a boolean if a field has been set.
func (o *ApprovalReassignmentHistory) HasReassignmentType() bool {
	if o != nil && !IsNil(o.ReassignmentType) {
		return true
	}

	return false
}

// SetReassignmentType gets a reference to the given string and assigns it to the ReassignmentType field.
func (o *ApprovalReassignmentHistory) SetReassignmentType(v string) {
	o.ReassignmentType = &v
}

func (o ApprovalReassignmentHistory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApprovalReassignmentHistory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CommentID) {
		toSerialize["commentID"] = o.CommentID
	}
	if !IsNil(o.ReassignedFrom) {
		toSerialize["reassignedFrom"] = o.ReassignedFrom
	}
	if !IsNil(o.ReassignedTo) {
		toSerialize["reassignedTo"] = o.ReassignedTo
	}
	if !IsNil(o.Reassigner) {
		toSerialize["reassigner"] = o.Reassigner
	}
	if !IsNil(o.ReassignmentDate) {
		toSerialize["reassignmentDate"] = o.ReassignmentDate
	}
	if !IsNil(o.ReassignmentType) {
		toSerialize["reassignmentType"] = o.ReassignmentType
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ApprovalReassignmentHistory) UnmarshalJSON(data []byte) (err error) {
	varApprovalReassignmentHistory := _ApprovalReassignmentHistory{}

	err = json.Unmarshal(data, &varApprovalReassignmentHistory)

	if err != nil {
		return err
	}

	*o = ApprovalReassignmentHistory(varApprovalReassignmentHistory)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "commentID")
		delete(additionalProperties, "reassignedFrom")
		delete(additionalProperties, "reassignedTo")
		delete(additionalProperties, "reassigner")
		delete(additionalProperties, "reassignmentDate")
		delete(additionalProperties, "reassignmentType")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApprovalReassignmentHistory struct {
	value *ApprovalReassignmentHistory
	isSet bool
}

func (v NullableApprovalReassignmentHistory) Get() *ApprovalReassignmentHistory {
	return v.value
}

func (v *NullableApprovalReassignmentHistory) Set(val *ApprovalReassignmentHistory) {
	v.value = val
	v.isSet = true
}

func (v NullableApprovalReassignmentHistory) IsSet() bool {
	return v.isSet
}

func (v *NullableApprovalReassignmentHistory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApprovalReassignmentHistory(val *ApprovalReassignmentHistory) *NullableApprovalReassignmentHistory {
	return &NullableApprovalReassignmentHistory{value: val, isSet: true}
}

func (v NullableApprovalReassignmentHistory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApprovalReassignmentHistory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


