/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
)

// checks if the SedBatchResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SedBatchResponse{}

// SedBatchResponse Sed Batch Response
type SedBatchResponse struct {
	// BatchId that groups all the ids together
	BatchId *string `json:"batchId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SedBatchResponse SedBatchResponse

// NewSedBatchResponse instantiates a new SedBatchResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSedBatchResponse() *SedBatchResponse {
	this := SedBatchResponse{}
	return &this
}

// NewSedBatchResponseWithDefaults instantiates a new SedBatchResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSedBatchResponseWithDefaults() *SedBatchResponse {
	this := SedBatchResponse{}
	return &this
}

// GetBatchId returns the BatchId field value if set, zero value otherwise.
func (o *SedBatchResponse) GetBatchId() string {
	if o == nil || IsNil(o.BatchId) {
		var ret string
		return ret
	}
	return *o.BatchId
}

// GetBatchIdOk returns a tuple with the BatchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SedBatchResponse) GetBatchIdOk() (*string, bool) {
	if o == nil || IsNil(o.BatchId) {
		return nil, false
	}
	return o.BatchId, true
}

// HasBatchId returns a boolean if a field has been set.
func (o *SedBatchResponse) HasBatchId() bool {
	if o != nil && !IsNil(o.BatchId) {
		return true
	}

	return false
}

// SetBatchId gets a reference to the given string and assigns it to the BatchId field.
func (o *SedBatchResponse) SetBatchId(v string) {
	o.BatchId = &v
}

func (o SedBatchResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SedBatchResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BatchId) {
		toSerialize["batchId"] = o.BatchId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SedBatchResponse) UnmarshalJSON(data []byte) (err error) {
	varSedBatchResponse := _SedBatchResponse{}

	err = json.Unmarshal(data, &varSedBatchResponse)

	if err != nil {
		return err
	}

	*o = SedBatchResponse(varSedBatchResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "batchId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSedBatchResponse struct {
	value *SedBatchResponse
	isSet bool
}

func (v NullableSedBatchResponse) Get() *SedBatchResponse {
	return v.value
}

func (v *NullableSedBatchResponse) Set(val *SedBatchResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSedBatchResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSedBatchResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSedBatchResponse(val *SedBatchResponse) *NullableSedBatchResponse {
	return &NullableSedBatchResponse{value: val, isSet: true}
}

func (v NullableSedBatchResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSedBatchResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


