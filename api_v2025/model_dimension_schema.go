/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
)

// checks if the DimensionSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DimensionSchema{}

// DimensionSchema Contains a list of dimension attributes. Required only for Dynamic Roles
type DimensionSchema struct {
	DimensionAttributes []DimensionAttribute `json:"dimensionAttributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DimensionSchema DimensionSchema

// NewDimensionSchema instantiates a new DimensionSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDimensionSchema() *DimensionSchema {
	this := DimensionSchema{}
	return &this
}

// NewDimensionSchemaWithDefaults instantiates a new DimensionSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDimensionSchemaWithDefaults() *DimensionSchema {
	this := DimensionSchema{}
	return &this
}

// GetDimensionAttributes returns the DimensionAttributes field value if set, zero value otherwise.
func (o *DimensionSchema) GetDimensionAttributes() []DimensionAttribute {
	if o == nil || IsNil(o.DimensionAttributes) {
		var ret []DimensionAttribute
		return ret
	}
	return o.DimensionAttributes
}

// GetDimensionAttributesOk returns a tuple with the DimensionAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DimensionSchema) GetDimensionAttributesOk() ([]DimensionAttribute, bool) {
	if o == nil || IsNil(o.DimensionAttributes) {
		return nil, false
	}
	return o.DimensionAttributes, true
}

// HasDimensionAttributes returns a boolean if a field has been set.
func (o *DimensionSchema) HasDimensionAttributes() bool {
	if o != nil && !IsNil(o.DimensionAttributes) {
		return true
	}

	return false
}

// SetDimensionAttributes gets a reference to the given []DimensionAttribute and assigns it to the DimensionAttributes field.
func (o *DimensionSchema) SetDimensionAttributes(v []DimensionAttribute) {
	o.DimensionAttributes = v
}

func (o DimensionSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DimensionSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DimensionAttributes) {
		toSerialize["dimensionAttributes"] = o.DimensionAttributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DimensionSchema) UnmarshalJSON(data []byte) (err error) {
	varDimensionSchema := _DimensionSchema{}

	err = json.Unmarshal(data, &varDimensionSchema)

	if err != nil {
		return err
	}

	*o = DimensionSchema(varDimensionSchema)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "dimensionAttributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDimensionSchema struct {
	value *DimensionSchema
	isSet bool
}

func (v NullableDimensionSchema) Get() *DimensionSchema {
	return v.value
}

func (v *NullableDimensionSchema) Set(val *DimensionSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableDimensionSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableDimensionSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDimensionSchema(val *DimensionSchema) *NullableDimensionSchema {
	return &NullableDimensionSchema{value: val, isSet: true}
}

func (v NullableDimensionSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDimensionSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


