/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
)

// checks if the HierarchicalRightSet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HierarchicalRightSet{}

// HierarchicalRightSet A HierarchicalRightSet
type HierarchicalRightSet struct {
	// The unique identifier of the RightSet.
	Id *string `json:"id,omitempty"`
	// The human-readable name of the RightSet.
	Name *string `json:"name,omitempty"`
	// A human-readable description of the RightSet.
	Description NullableString `json:"description,omitempty"`
	// The category of the RightSet.
	Category *string `json:"category,omitempty"`
	NestedConfig *NestedConfig `json:"nestedConfig,omitempty"`
	// List of child HierarchicalRightSets.
	Children []HierarchicalRightSet `json:"children,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HierarchicalRightSet HierarchicalRightSet

// NewHierarchicalRightSet instantiates a new HierarchicalRightSet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHierarchicalRightSet() *HierarchicalRightSet {
	this := HierarchicalRightSet{}
	return &this
}

// NewHierarchicalRightSetWithDefaults instantiates a new HierarchicalRightSet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHierarchicalRightSetWithDefaults() *HierarchicalRightSet {
	this := HierarchicalRightSet{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *HierarchicalRightSet) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HierarchicalRightSet) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *HierarchicalRightSet) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *HierarchicalRightSet) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *HierarchicalRightSet) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HierarchicalRightSet) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *HierarchicalRightSet) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *HierarchicalRightSet) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HierarchicalRightSet) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HierarchicalRightSet) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *HierarchicalRightSet) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *HierarchicalRightSet) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *HierarchicalRightSet) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *HierarchicalRightSet) UnsetDescription() {
	o.Description.Unset()
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *HierarchicalRightSet) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HierarchicalRightSet) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *HierarchicalRightSet) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *HierarchicalRightSet) SetCategory(v string) {
	o.Category = &v
}

// GetNestedConfig returns the NestedConfig field value if set, zero value otherwise.
func (o *HierarchicalRightSet) GetNestedConfig() NestedConfig {
	if o == nil || IsNil(o.NestedConfig) {
		var ret NestedConfig
		return ret
	}
	return *o.NestedConfig
}

// GetNestedConfigOk returns a tuple with the NestedConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HierarchicalRightSet) GetNestedConfigOk() (*NestedConfig, bool) {
	if o == nil || IsNil(o.NestedConfig) {
		return nil, false
	}
	return o.NestedConfig, true
}

// HasNestedConfig returns a boolean if a field has been set.
func (o *HierarchicalRightSet) HasNestedConfig() bool {
	if o != nil && !IsNil(o.NestedConfig) {
		return true
	}

	return false
}

// SetNestedConfig gets a reference to the given NestedConfig and assigns it to the NestedConfig field.
func (o *HierarchicalRightSet) SetNestedConfig(v NestedConfig) {
	o.NestedConfig = &v
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *HierarchicalRightSet) GetChildren() []HierarchicalRightSet {
	if o == nil || IsNil(o.Children) {
		var ret []HierarchicalRightSet
		return ret
	}
	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HierarchicalRightSet) GetChildrenOk() ([]HierarchicalRightSet, bool) {
	if o == nil || IsNil(o.Children) {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *HierarchicalRightSet) HasChildren() bool {
	if o != nil && !IsNil(o.Children) {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []HierarchicalRightSet and assigns it to the Children field.
func (o *HierarchicalRightSet) SetChildren(v []HierarchicalRightSet) {
	o.Children = v
}

func (o HierarchicalRightSet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HierarchicalRightSet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.NestedConfig) {
		toSerialize["nestedConfig"] = o.NestedConfig
	}
	if !IsNil(o.Children) {
		toSerialize["children"] = o.Children
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HierarchicalRightSet) UnmarshalJSON(data []byte) (err error) {
	varHierarchicalRightSet := _HierarchicalRightSet{}

	err = json.Unmarshal(data, &varHierarchicalRightSet)

	if err != nil {
		return err
	}

	*o = HierarchicalRightSet(varHierarchicalRightSet)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "category")
		delete(additionalProperties, "nestedConfig")
		delete(additionalProperties, "children")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHierarchicalRightSet struct {
	value *HierarchicalRightSet
	isSet bool
}

func (v NullableHierarchicalRightSet) Get() *HierarchicalRightSet {
	return v.value
}

func (v *NullableHierarchicalRightSet) Set(val *HierarchicalRightSet) {
	v.value = val
	v.isSet = true
}

func (v NullableHierarchicalRightSet) IsSet() bool {
	return v.isSet
}

func (v *NullableHierarchicalRightSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHierarchicalRightSet(val *HierarchicalRightSet) *NullableHierarchicalRightSet {
	return &NullableHierarchicalRightSet{value: val, isSet: true}
}

func (v NullableHierarchicalRightSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHierarchicalRightSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


