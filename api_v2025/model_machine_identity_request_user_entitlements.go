/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
	"fmt"
)

// checks if the MachineIdentityRequestUserEntitlements type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MachineIdentityRequestUserEntitlements{}

// MachineIdentityRequestUserEntitlements struct for MachineIdentityRequestUserEntitlements
type MachineIdentityRequestUserEntitlements struct {
	// The ID of the entitlement
	EntitlementId string `json:"entitlementId"`
	// The source ID of the entitlement
	SourceId string `json:"sourceId"`
	AdditionalProperties map[string]interface{}
}

type _MachineIdentityRequestUserEntitlements MachineIdentityRequestUserEntitlements

// NewMachineIdentityRequestUserEntitlements instantiates a new MachineIdentityRequestUserEntitlements object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMachineIdentityRequestUserEntitlements(entitlementId string, sourceId string) *MachineIdentityRequestUserEntitlements {
	this := MachineIdentityRequestUserEntitlements{}
	this.EntitlementId = entitlementId
	this.SourceId = sourceId
	return &this
}

// NewMachineIdentityRequestUserEntitlementsWithDefaults instantiates a new MachineIdentityRequestUserEntitlements object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMachineIdentityRequestUserEntitlementsWithDefaults() *MachineIdentityRequestUserEntitlements {
	this := MachineIdentityRequestUserEntitlements{}
	return &this
}

// GetEntitlementId returns the EntitlementId field value
func (o *MachineIdentityRequestUserEntitlements) GetEntitlementId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntitlementId
}

// GetEntitlementIdOk returns a tuple with the EntitlementId field value
// and a boolean to check if the value has been set.
func (o *MachineIdentityRequestUserEntitlements) GetEntitlementIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntitlementId, true
}

// SetEntitlementId sets field value
func (o *MachineIdentityRequestUserEntitlements) SetEntitlementId(v string) {
	o.EntitlementId = v
}

// GetSourceId returns the SourceId field value
func (o *MachineIdentityRequestUserEntitlements) GetSourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value
// and a boolean to check if the value has been set.
func (o *MachineIdentityRequestUserEntitlements) GetSourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceId, true
}

// SetSourceId sets field value
func (o *MachineIdentityRequestUserEntitlements) SetSourceId(v string) {
	o.SourceId = v
}

func (o MachineIdentityRequestUserEntitlements) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MachineIdentityRequestUserEntitlements) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["entitlementId"] = o.EntitlementId
	toSerialize["sourceId"] = o.SourceId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MachineIdentityRequestUserEntitlements) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"entitlementId",
		"sourceId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMachineIdentityRequestUserEntitlements := _MachineIdentityRequestUserEntitlements{}

	err = json.Unmarshal(data, &varMachineIdentityRequestUserEntitlements)

	if err != nil {
		return err
	}

	*o = MachineIdentityRequestUserEntitlements(varMachineIdentityRequestUserEntitlements)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "entitlementId")
		delete(additionalProperties, "sourceId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMachineIdentityRequestUserEntitlements struct {
	value *MachineIdentityRequestUserEntitlements
	isSet bool
}

func (v NullableMachineIdentityRequestUserEntitlements) Get() *MachineIdentityRequestUserEntitlements {
	return v.value
}

func (v *NullableMachineIdentityRequestUserEntitlements) Set(val *MachineIdentityRequestUserEntitlements) {
	v.value = val
	v.isSet = true
}

func (v NullableMachineIdentityRequestUserEntitlements) IsSet() bool {
	return v.isSet
}

func (v *NullableMachineIdentityRequestUserEntitlements) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMachineIdentityRequestUserEntitlements(val *MachineIdentityRequestUserEntitlements) *NullableMachineIdentityRequestUserEntitlements {
	return &NullableMachineIdentityRequestUserEntitlements{value: val, isSet: true}
}

func (v NullableMachineIdentityRequestUserEntitlements) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMachineIdentityRequestUserEntitlements) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


