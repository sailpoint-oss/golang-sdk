/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
	"fmt"
)

// checks if the MultiHostIntegrationTemplateType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MultiHostIntegrationTemplateType{}

// MultiHostIntegrationTemplateType This represents a Multi-Host Integration template type.
type MultiHostIntegrationTemplateType struct {
	// This is the name of the type.
	Name *string `json:"name,omitempty"`
	// This is the type value for the type.
	Type string `json:"type"`
	// This is the scriptName attribute value for the type.
	ScriptName string `json:"scriptName"`
	AdditionalProperties map[string]interface{}
}

type _MultiHostIntegrationTemplateType MultiHostIntegrationTemplateType

// NewMultiHostIntegrationTemplateType instantiates a new MultiHostIntegrationTemplateType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultiHostIntegrationTemplateType(type_ string, scriptName string) *MultiHostIntegrationTemplateType {
	this := MultiHostIntegrationTemplateType{}
	this.Type = type_
	this.ScriptName = scriptName
	return &this
}

// NewMultiHostIntegrationTemplateTypeWithDefaults instantiates a new MultiHostIntegrationTemplateType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultiHostIntegrationTemplateTypeWithDefaults() *MultiHostIntegrationTemplateType {
	this := MultiHostIntegrationTemplateType{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MultiHostIntegrationTemplateType) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrationTemplateType) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MultiHostIntegrationTemplateType) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MultiHostIntegrationTemplateType) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value
func (o *MultiHostIntegrationTemplateType) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrationTemplateType) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MultiHostIntegrationTemplateType) SetType(v string) {
	o.Type = v
}

// GetScriptName returns the ScriptName field value
func (o *MultiHostIntegrationTemplateType) GetScriptName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ScriptName
}

// GetScriptNameOk returns a tuple with the ScriptName field value
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrationTemplateType) GetScriptNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScriptName, true
}

// SetScriptName sets field value
func (o *MultiHostIntegrationTemplateType) SetScriptName(v string) {
	o.ScriptName = v
}

func (o MultiHostIntegrationTemplateType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MultiHostIntegrationTemplateType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["type"] = o.Type
	toSerialize["scriptName"] = o.ScriptName

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MultiHostIntegrationTemplateType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"scriptName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMultiHostIntegrationTemplateType := _MultiHostIntegrationTemplateType{}

	err = json.Unmarshal(data, &varMultiHostIntegrationTemplateType)

	if err != nil {
		return err
	}

	*o = MultiHostIntegrationTemplateType(varMultiHostIntegrationTemplateType)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "type")
		delete(additionalProperties, "scriptName")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMultiHostIntegrationTemplateType struct {
	value *MultiHostIntegrationTemplateType
	isSet bool
}

func (v NullableMultiHostIntegrationTemplateType) Get() *MultiHostIntegrationTemplateType {
	return v.value
}

func (v *NullableMultiHostIntegrationTemplateType) Set(val *MultiHostIntegrationTemplateType) {
	v.value = val
	v.isSet = true
}

func (v NullableMultiHostIntegrationTemplateType) IsSet() bool {
	return v.isSet
}

func (v *NullableMultiHostIntegrationTemplateType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultiHostIntegrationTemplateType(val *MultiHostIntegrationTemplateType) *NullableMultiHostIntegrationTemplateType {
	return &NullableMultiHostIntegrationTemplateType{value: val, isSet: true}
}

func (v NullableMultiHostIntegrationTemplateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultiHostIntegrationTemplateType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


