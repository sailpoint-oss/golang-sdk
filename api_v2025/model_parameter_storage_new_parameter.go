/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
	"fmt"
)

// checks if the ParameterStorageNewParameter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParameterStorageNewParameter{}

// ParameterStorageNewParameter A parameter to add to parameter storage. The public and private fields must match the type specification.
type ParameterStorageNewParameter struct {
	// The UUID of the parameter owner.
	OwnerId string `json:"ownerId"`
	// The human-readable name for the parameter.
	Name string `json:"name"`
	// The type of the parameter. This cannot be changed after being set. Please see the types document for more information.
	Type string `json:"type"`
	// The content must be a JSON object containing the public fields that can be stored with this parameter.
	PublicFields map[string]interface{} `json:"publicFields,omitempty"`
	// Must be a JWE AES256 encrypted blob. The content of the blob must be a JSON object containing the private fields that can be stored with this parameter. 
	PrivateFields *string `json:"privateFields,omitempty"`
	// Describe the parameter
	Description *string `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ParameterStorageNewParameter ParameterStorageNewParameter

// NewParameterStorageNewParameter instantiates a new ParameterStorageNewParameter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParameterStorageNewParameter(ownerId string, name string, type_ string) *ParameterStorageNewParameter {
	this := ParameterStorageNewParameter{}
	this.OwnerId = ownerId
	this.Name = name
	this.Type = type_
	return &this
}

// NewParameterStorageNewParameterWithDefaults instantiates a new ParameterStorageNewParameter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParameterStorageNewParameterWithDefaults() *ParameterStorageNewParameter {
	this := ParameterStorageNewParameter{}
	return &this
}

// GetOwnerId returns the OwnerId field value
func (o *ParameterStorageNewParameter) GetOwnerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OwnerId
}

// GetOwnerIdOk returns a tuple with the OwnerId field value
// and a boolean to check if the value has been set.
func (o *ParameterStorageNewParameter) GetOwnerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OwnerId, true
}

// SetOwnerId sets field value
func (o *ParameterStorageNewParameter) SetOwnerId(v string) {
	o.OwnerId = v
}

// GetName returns the Name field value
func (o *ParameterStorageNewParameter) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ParameterStorageNewParameter) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ParameterStorageNewParameter) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *ParameterStorageNewParameter) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ParameterStorageNewParameter) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ParameterStorageNewParameter) SetType(v string) {
	o.Type = v
}

// GetPublicFields returns the PublicFields field value if set, zero value otherwise.
func (o *ParameterStorageNewParameter) GetPublicFields() map[string]interface{} {
	if o == nil || IsNil(o.PublicFields) {
		var ret map[string]interface{}
		return ret
	}
	return o.PublicFields
}

// GetPublicFieldsOk returns a tuple with the PublicFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParameterStorageNewParameter) GetPublicFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.PublicFields) {
		return map[string]interface{}{}, false
	}
	return o.PublicFields, true
}

// HasPublicFields returns a boolean if a field has been set.
func (o *ParameterStorageNewParameter) HasPublicFields() bool {
	if o != nil && !IsNil(o.PublicFields) {
		return true
	}

	return false
}

// SetPublicFields gets a reference to the given map[string]interface{} and assigns it to the PublicFields field.
func (o *ParameterStorageNewParameter) SetPublicFields(v map[string]interface{}) {
	o.PublicFields = v
}

// GetPrivateFields returns the PrivateFields field value if set, zero value otherwise.
func (o *ParameterStorageNewParameter) GetPrivateFields() string {
	if o == nil || IsNil(o.PrivateFields) {
		var ret string
		return ret
	}
	return *o.PrivateFields
}

// GetPrivateFieldsOk returns a tuple with the PrivateFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParameterStorageNewParameter) GetPrivateFieldsOk() (*string, bool) {
	if o == nil || IsNil(o.PrivateFields) {
		return nil, false
	}
	return o.PrivateFields, true
}

// HasPrivateFields returns a boolean if a field has been set.
func (o *ParameterStorageNewParameter) HasPrivateFields() bool {
	if o != nil && !IsNil(o.PrivateFields) {
		return true
	}

	return false
}

// SetPrivateFields gets a reference to the given string and assigns it to the PrivateFields field.
func (o *ParameterStorageNewParameter) SetPrivateFields(v string) {
	o.PrivateFields = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ParameterStorageNewParameter) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParameterStorageNewParameter) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ParameterStorageNewParameter) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ParameterStorageNewParameter) SetDescription(v string) {
	o.Description = &v
}

func (o ParameterStorageNewParameter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParameterStorageNewParameter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ownerId"] = o.OwnerId
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	if !IsNil(o.PublicFields) {
		toSerialize["publicFields"] = o.PublicFields
	}
	if !IsNil(o.PrivateFields) {
		toSerialize["privateFields"] = o.PrivateFields
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ParameterStorageNewParameter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ownerId",
		"name",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varParameterStorageNewParameter := _ParameterStorageNewParameter{}

	err = json.Unmarshal(data, &varParameterStorageNewParameter)

	if err != nil {
		return err
	}

	*o = ParameterStorageNewParameter(varParameterStorageNewParameter)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ownerId")
		delete(additionalProperties, "name")
		delete(additionalProperties, "type")
		delete(additionalProperties, "publicFields")
		delete(additionalProperties, "privateFields")
		delete(additionalProperties, "description")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableParameterStorageNewParameter struct {
	value *ParameterStorageNewParameter
	isSet bool
}

func (v NullableParameterStorageNewParameter) Get() *ParameterStorageNewParameter {
	return v.value
}

func (v *NullableParameterStorageNewParameter) Set(val *ParameterStorageNewParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableParameterStorageNewParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableParameterStorageNewParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParameterStorageNewParameter(val *ParameterStorageNewParameter) *NullableParameterStorageNewParameter {
	return &NullableParameterStorageNewParameter{value: val, isSet: true}
}

func (v NullableParameterStorageNewParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParameterStorageNewParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


