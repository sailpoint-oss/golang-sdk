/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
)

// checks if the CommonAccessItemAccess type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonAccessItemAccess{}

// CommonAccessItemAccess struct for CommonAccessItemAccess
type CommonAccessItemAccess struct {
	// Common access ID
	Id *string `json:"id,omitempty"`
	Type *CommonAccessType `json:"type,omitempty"`
	// Common access name
	Name *string `json:"name,omitempty"`
	// Common access description
	Description NullableString `json:"description,omitempty"`
	// Common access owner name
	OwnerName *string `json:"ownerName,omitempty"`
	// Common access owner ID
	OwnerId *string `json:"ownerId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CommonAccessItemAccess CommonAccessItemAccess

// NewCommonAccessItemAccess instantiates a new CommonAccessItemAccess object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonAccessItemAccess() *CommonAccessItemAccess {
	this := CommonAccessItemAccess{}
	return &this
}

// NewCommonAccessItemAccessWithDefaults instantiates a new CommonAccessItemAccess object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonAccessItemAccessWithDefaults() *CommonAccessItemAccess {
	this := CommonAccessItemAccess{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CommonAccessItemAccess) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonAccessItemAccess) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CommonAccessItemAccess) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CommonAccessItemAccess) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CommonAccessItemAccess) GetType() CommonAccessType {
	if o == nil || IsNil(o.Type) {
		var ret CommonAccessType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonAccessItemAccess) GetTypeOk() (*CommonAccessType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CommonAccessItemAccess) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given CommonAccessType and assigns it to the Type field.
func (o *CommonAccessItemAccess) SetType(v CommonAccessType) {
	o.Type = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CommonAccessItemAccess) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonAccessItemAccess) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CommonAccessItemAccess) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CommonAccessItemAccess) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonAccessItemAccess) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonAccessItemAccess) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *CommonAccessItemAccess) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *CommonAccessItemAccess) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *CommonAccessItemAccess) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *CommonAccessItemAccess) UnsetDescription() {
	o.Description.Unset()
}

// GetOwnerName returns the OwnerName field value if set, zero value otherwise.
func (o *CommonAccessItemAccess) GetOwnerName() string {
	if o == nil || IsNil(o.OwnerName) {
		var ret string
		return ret
	}
	return *o.OwnerName
}

// GetOwnerNameOk returns a tuple with the OwnerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonAccessItemAccess) GetOwnerNameOk() (*string, bool) {
	if o == nil || IsNil(o.OwnerName) {
		return nil, false
	}
	return o.OwnerName, true
}

// HasOwnerName returns a boolean if a field has been set.
func (o *CommonAccessItemAccess) HasOwnerName() bool {
	if o != nil && !IsNil(o.OwnerName) {
		return true
	}

	return false
}

// SetOwnerName gets a reference to the given string and assigns it to the OwnerName field.
func (o *CommonAccessItemAccess) SetOwnerName(v string) {
	o.OwnerName = &v
}

// GetOwnerId returns the OwnerId field value if set, zero value otherwise.
func (o *CommonAccessItemAccess) GetOwnerId() string {
	if o == nil || IsNil(o.OwnerId) {
		var ret string
		return ret
	}
	return *o.OwnerId
}

// GetOwnerIdOk returns a tuple with the OwnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonAccessItemAccess) GetOwnerIdOk() (*string, bool) {
	if o == nil || IsNil(o.OwnerId) {
		return nil, false
	}
	return o.OwnerId, true
}

// HasOwnerId returns a boolean if a field has been set.
func (o *CommonAccessItemAccess) HasOwnerId() bool {
	if o != nil && !IsNil(o.OwnerId) {
		return true
	}

	return false
}

// SetOwnerId gets a reference to the given string and assigns it to the OwnerId field.
func (o *CommonAccessItemAccess) SetOwnerId(v string) {
	o.OwnerId = &v
}

func (o CommonAccessItemAccess) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonAccessItemAccess) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !IsNil(o.OwnerName) {
		toSerialize["ownerName"] = o.OwnerName
	}
	if !IsNil(o.OwnerId) {
		toSerialize["ownerId"] = o.OwnerId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CommonAccessItemAccess) UnmarshalJSON(data []byte) (err error) {
	varCommonAccessItemAccess := _CommonAccessItemAccess{}

	err = json.Unmarshal(data, &varCommonAccessItemAccess)

	if err != nil {
		return err
	}

	*o = CommonAccessItemAccess(varCommonAccessItemAccess)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "type")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "ownerName")
		delete(additionalProperties, "ownerId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCommonAccessItemAccess struct {
	value *CommonAccessItemAccess
	isSet bool
}

func (v NullableCommonAccessItemAccess) Get() *CommonAccessItemAccess {
	return v.value
}

func (v *NullableCommonAccessItemAccess) Set(val *CommonAccessItemAccess) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonAccessItemAccess) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonAccessItemAccess) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonAccessItemAccess(val *CommonAccessItemAccess) *NullableCommonAccessItemAccess {
	return &NullableCommonAccessItemAccess{value: val, isSet: true}
}

func (v NullableCommonAccessItemAccess) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonAccessItemAccess) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


