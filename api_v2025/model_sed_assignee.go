/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
	"fmt"
)

// checks if the SedAssignee type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SedAssignee{}

// SedAssignee Sed Assignee
type SedAssignee struct {
	// Type of assignment When value is PERSONA, the value MUST be SOURCE_OWNER or ENTITLEMENT_OWNER IDENTITY SED_ASSIGNEE_IDENTITY_TYPE GROUP SED_ASSIGNEE_GROUP_TYPE SOURCE_OWNER SED_ASSIGNEE_SOURCE_OWNER_TYPE ENTITLEMENT_OWNER SED_ASSIGNEE_ENTITLEMENT_OWNER_TYPE
	Type string `json:"type"`
	// Identity or Group identifier Empty when using source/entitlement owner personas
	Value *string `json:"value,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SedAssignee SedAssignee

// NewSedAssignee instantiates a new SedAssignee object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSedAssignee(type_ string) *SedAssignee {
	this := SedAssignee{}
	this.Type = type_
	return &this
}

// NewSedAssigneeWithDefaults instantiates a new SedAssignee object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSedAssigneeWithDefaults() *SedAssignee {
	this := SedAssignee{}
	return &this
}

// GetType returns the Type field value
func (o *SedAssignee) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SedAssignee) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SedAssignee) SetType(v string) {
	o.Type = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *SedAssignee) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SedAssignee) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *SedAssignee) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *SedAssignee) SetValue(v string) {
	o.Value = &v
}

func (o SedAssignee) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SedAssignee) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SedAssignee) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSedAssignee := _SedAssignee{}

	err = json.Unmarshal(data, &varSedAssignee)

	if err != nil {
		return err
	}

	*o = SedAssignee(varSedAssignee)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSedAssignee struct {
	value *SedAssignee
	isSet bool
}

func (v NullableSedAssignee) Get() *SedAssignee {
	return v.value
}

func (v *NullableSedAssignee) Set(val *SedAssignee) {
	v.value = val
	v.isSet = true
}

func (v NullableSedAssignee) IsSet() bool {
	return v.isSet
}

func (v *NullableSedAssignee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSedAssignee(val *SedAssignee) *NullableSedAssignee {
	return &NullableSedAssignee{value: val, isSet: true}
}

func (v NullableSedAssignee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSedAssignee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


