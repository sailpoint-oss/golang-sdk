/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
	"fmt"
)

// checks if the UserLevelRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserLevelRequest{}

// UserLevelRequest Payload containing details for creating a custom user level.
type UserLevelRequest struct {
	// The name of the user level.
	Name string `json:"name"`
	// A brief description of the user level.
	Description string `json:"description"`
	Owner BaseReferenceDto `json:"owner"`
	// A list of rights associated with the user level.
	RightSets []string `json:"rightSets,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UserLevelRequest UserLevelRequest

// NewUserLevelRequest instantiates a new UserLevelRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserLevelRequest(name string, description string, owner BaseReferenceDto) *UserLevelRequest {
	this := UserLevelRequest{}
	this.Name = name
	this.Description = description
	this.Owner = owner
	return &this
}

// NewUserLevelRequestWithDefaults instantiates a new UserLevelRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserLevelRequestWithDefaults() *UserLevelRequest {
	this := UserLevelRequest{}
	return &this
}

// GetName returns the Name field value
func (o *UserLevelRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UserLevelRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UserLevelRequest) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *UserLevelRequest) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *UserLevelRequest) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *UserLevelRequest) SetDescription(v string) {
	o.Description = v
}

// GetOwner returns the Owner field value
func (o *UserLevelRequest) GetOwner() BaseReferenceDto {
	if o == nil {
		var ret BaseReferenceDto
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *UserLevelRequest) GetOwnerOk() (*BaseReferenceDto, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *UserLevelRequest) SetOwner(v BaseReferenceDto) {
	o.Owner = v
}

// GetRightSets returns the RightSets field value if set, zero value otherwise.
func (o *UserLevelRequest) GetRightSets() []string {
	if o == nil || IsNil(o.RightSets) {
		var ret []string
		return ret
	}
	return o.RightSets
}

// GetRightSetsOk returns a tuple with the RightSets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLevelRequest) GetRightSetsOk() ([]string, bool) {
	if o == nil || IsNil(o.RightSets) {
		return nil, false
	}
	return o.RightSets, true
}

// HasRightSets returns a boolean if a field has been set.
func (o *UserLevelRequest) HasRightSets() bool {
	if o != nil && !IsNil(o.RightSets) {
		return true
	}

	return false
}

// SetRightSets gets a reference to the given []string and assigns it to the RightSets field.
func (o *UserLevelRequest) SetRightSets(v []string) {
	o.RightSets = v
}

func (o UserLevelRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserLevelRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	toSerialize["owner"] = o.Owner
	if !IsNil(o.RightSets) {
		toSerialize["rightSets"] = o.RightSets
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UserLevelRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"description",
		"owner",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserLevelRequest := _UserLevelRequest{}

	err = json.Unmarshal(data, &varUserLevelRequest)

	if err != nil {
		return err
	}

	*o = UserLevelRequest(varUserLevelRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "owner")
		delete(additionalProperties, "rightSets")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserLevelRequest struct {
	value *UserLevelRequest
	isSet bool
}

func (v NullableUserLevelRequest) Get() *UserLevelRequest {
	return v.value
}

func (v *NullableUserLevelRequest) Set(val *UserLevelRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUserLevelRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUserLevelRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserLevelRequest(val *UserLevelRequest) *NullableUserLevelRequest {
	return &NullableUserLevelRequest{value: val, isSet: true}
}

func (v NullableUserLevelRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserLevelRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


