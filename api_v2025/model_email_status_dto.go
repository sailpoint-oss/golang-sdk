/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
)

// checks if the EmailStatusDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailStatusDto{}

// EmailStatusDto struct for EmailStatusDto
type EmailStatusDto struct {
	Id NullableString `json:"id,omitempty"`
	Email *string `json:"email,omitempty"`
	IsVerifiedByDomain *bool `json:"isVerifiedByDomain,omitempty"`
	VerificationStatus *string `json:"verificationStatus,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EmailStatusDto EmailStatusDto

// NewEmailStatusDto instantiates a new EmailStatusDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailStatusDto() *EmailStatusDto {
	this := EmailStatusDto{}
	return &this
}

// NewEmailStatusDtoWithDefaults instantiates a new EmailStatusDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailStatusDtoWithDefaults() *EmailStatusDto {
	this := EmailStatusDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailStatusDto) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailStatusDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *EmailStatusDto) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *EmailStatusDto) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *EmailStatusDto) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *EmailStatusDto) UnsetId() {
	o.Id.Unset()
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *EmailStatusDto) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailStatusDto) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *EmailStatusDto) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *EmailStatusDto) SetEmail(v string) {
	o.Email = &v
}

// GetIsVerifiedByDomain returns the IsVerifiedByDomain field value if set, zero value otherwise.
func (o *EmailStatusDto) GetIsVerifiedByDomain() bool {
	if o == nil || IsNil(o.IsVerifiedByDomain) {
		var ret bool
		return ret
	}
	return *o.IsVerifiedByDomain
}

// GetIsVerifiedByDomainOk returns a tuple with the IsVerifiedByDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailStatusDto) GetIsVerifiedByDomainOk() (*bool, bool) {
	if o == nil || IsNil(o.IsVerifiedByDomain) {
		return nil, false
	}
	return o.IsVerifiedByDomain, true
}

// HasIsVerifiedByDomain returns a boolean if a field has been set.
func (o *EmailStatusDto) HasIsVerifiedByDomain() bool {
	if o != nil && !IsNil(o.IsVerifiedByDomain) {
		return true
	}

	return false
}

// SetIsVerifiedByDomain gets a reference to the given bool and assigns it to the IsVerifiedByDomain field.
func (o *EmailStatusDto) SetIsVerifiedByDomain(v bool) {
	o.IsVerifiedByDomain = &v
}

// GetVerificationStatus returns the VerificationStatus field value if set, zero value otherwise.
func (o *EmailStatusDto) GetVerificationStatus() string {
	if o == nil || IsNil(o.VerificationStatus) {
		var ret string
		return ret
	}
	return *o.VerificationStatus
}

// GetVerificationStatusOk returns a tuple with the VerificationStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailStatusDto) GetVerificationStatusOk() (*string, bool) {
	if o == nil || IsNil(o.VerificationStatus) {
		return nil, false
	}
	return o.VerificationStatus, true
}

// HasVerificationStatus returns a boolean if a field has been set.
func (o *EmailStatusDto) HasVerificationStatus() bool {
	if o != nil && !IsNil(o.VerificationStatus) {
		return true
	}

	return false
}

// SetVerificationStatus gets a reference to the given string and assigns it to the VerificationStatus field.
func (o *EmailStatusDto) SetVerificationStatus(v string) {
	o.VerificationStatus = &v
}

func (o EmailStatusDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailStatusDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.IsVerifiedByDomain) {
		toSerialize["isVerifiedByDomain"] = o.IsVerifiedByDomain
	}
	if !IsNil(o.VerificationStatus) {
		toSerialize["verificationStatus"] = o.VerificationStatus
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EmailStatusDto) UnmarshalJSON(data []byte) (err error) {
	varEmailStatusDto := _EmailStatusDto{}

	err = json.Unmarshal(data, &varEmailStatusDto)

	if err != nil {
		return err
	}

	*o = EmailStatusDto(varEmailStatusDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "email")
		delete(additionalProperties, "isVerifiedByDomain")
		delete(additionalProperties, "verificationStatus")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEmailStatusDto struct {
	value *EmailStatusDto
	isSet bool
}

func (v NullableEmailStatusDto) Get() *EmailStatusDto {
	return v.value
}

func (v *NullableEmailStatusDto) Set(val *EmailStatusDto) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailStatusDto) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailStatusDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailStatusDto(val *EmailStatusDto) *NullableEmailStatusDto {
	return &NullableEmailStatusDto{value: val, isSet: true}
}

func (v NullableEmailStatusDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailStatusDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


