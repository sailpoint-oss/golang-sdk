/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
	"fmt"
)

// DimensionMembershipSelectorType This enum characterizes the type of a Dimension's membership selector. Only the STANDARD type supported:  STANDARD: Indicates that Dimension membership is defined in terms of a criteria expression
type DimensionMembershipSelectorType string

// List of DimensionMembershipSelectorType
const (
	DIMENSIONMEMBERSHIPSELECTORTYPE_STANDARD DimensionMembershipSelectorType = "STANDARD"
)

// All allowed values of DimensionMembershipSelectorType enum
var AllowedDimensionMembershipSelectorTypeEnumValues = []DimensionMembershipSelectorType{
	"STANDARD",
}

func (v *DimensionMembershipSelectorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DimensionMembershipSelectorType(value)
	for _, existing := range AllowedDimensionMembershipSelectorTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DimensionMembershipSelectorType", value)
}

// NewDimensionMembershipSelectorTypeFromValue returns a pointer to a valid DimensionMembershipSelectorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDimensionMembershipSelectorTypeFromValue(v string) (*DimensionMembershipSelectorType, error) {
	ev := DimensionMembershipSelectorType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DimensionMembershipSelectorType: valid values are %v", v, AllowedDimensionMembershipSelectorTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DimensionMembershipSelectorType) IsValid() bool {
	for _, existing := range AllowedDimensionMembershipSelectorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DimensionMembershipSelectorType value
func (v DimensionMembershipSelectorType) Ptr() *DimensionMembershipSelectorType {
	return &v
}

type NullableDimensionMembershipSelectorType struct {
	value *DimensionMembershipSelectorType
	isSet bool
}

func (v NullableDimensionMembershipSelectorType) Get() *DimensionMembershipSelectorType {
	return v.value
}

func (v *NullableDimensionMembershipSelectorType) Set(val *DimensionMembershipSelectorType) {
	v.value = val
	v.isSet = true
}

func (v NullableDimensionMembershipSelectorType) IsSet() bool {
	return v.isSet
}

func (v *NullableDimensionMembershipSelectorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDimensionMembershipSelectorType(val *DimensionMembershipSelectorType) *NullableDimensionMembershipSelectorType {
	return &NullableDimensionMembershipSelectorType{value: val, isSet: true}
}

func (v NullableDimensionMembershipSelectorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDimensionMembershipSelectorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

