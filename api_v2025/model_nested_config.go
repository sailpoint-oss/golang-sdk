/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
)

// checks if the NestedConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NestedConfig{}

// NestedConfig A NestedConfig
type NestedConfig struct {
	// The unique identifier of the ancestor RightSet.
	AncestorId *string `json:"ancestorId,omitempty"`
	// The depth level of the configuration.
	Depth *int32 `json:"depth,omitempty"`
	// The unique identifier of the parent RightSet.
	ParentId NullableString `json:"parentId,omitempty"`
	// List of unique identifiers for child configurations.
	ChildrenIds []string `json:"childrenIds,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NestedConfig NestedConfig

// NewNestedConfig instantiates a new NestedConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNestedConfig() *NestedConfig {
	this := NestedConfig{}
	return &this
}

// NewNestedConfigWithDefaults instantiates a new NestedConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNestedConfigWithDefaults() *NestedConfig {
	this := NestedConfig{}
	return &this
}

// GetAncestorId returns the AncestorId field value if set, zero value otherwise.
func (o *NestedConfig) GetAncestorId() string {
	if o == nil || IsNil(o.AncestorId) {
		var ret string
		return ret
	}
	return *o.AncestorId
}

// GetAncestorIdOk returns a tuple with the AncestorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NestedConfig) GetAncestorIdOk() (*string, bool) {
	if o == nil || IsNil(o.AncestorId) {
		return nil, false
	}
	return o.AncestorId, true
}

// HasAncestorId returns a boolean if a field has been set.
func (o *NestedConfig) HasAncestorId() bool {
	if o != nil && !IsNil(o.AncestorId) {
		return true
	}

	return false
}

// SetAncestorId gets a reference to the given string and assigns it to the AncestorId field.
func (o *NestedConfig) SetAncestorId(v string) {
	o.AncestorId = &v
}

// GetDepth returns the Depth field value if set, zero value otherwise.
func (o *NestedConfig) GetDepth() int32 {
	if o == nil || IsNil(o.Depth) {
		var ret int32
		return ret
	}
	return *o.Depth
}

// GetDepthOk returns a tuple with the Depth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NestedConfig) GetDepthOk() (*int32, bool) {
	if o == nil || IsNil(o.Depth) {
		return nil, false
	}
	return o.Depth, true
}

// HasDepth returns a boolean if a field has been set.
func (o *NestedConfig) HasDepth() bool {
	if o != nil && !IsNil(o.Depth) {
		return true
	}

	return false
}

// SetDepth gets a reference to the given int32 and assigns it to the Depth field.
func (o *NestedConfig) SetDepth(v int32) {
	o.Depth = &v
}

// GetParentId returns the ParentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NestedConfig) GetParentId() string {
	if o == nil || IsNil(o.ParentId.Get()) {
		var ret string
		return ret
	}
	return *o.ParentId.Get()
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NestedConfig) GetParentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentId.Get(), o.ParentId.IsSet()
}

// HasParentId returns a boolean if a field has been set.
func (o *NestedConfig) HasParentId() bool {
	if o != nil && o.ParentId.IsSet() {
		return true
	}

	return false
}

// SetParentId gets a reference to the given NullableString and assigns it to the ParentId field.
func (o *NestedConfig) SetParentId(v string) {
	o.ParentId.Set(&v)
}
// SetParentIdNil sets the value for ParentId to be an explicit nil
func (o *NestedConfig) SetParentIdNil() {
	o.ParentId.Set(nil)
}

// UnsetParentId ensures that no value is present for ParentId, not even an explicit nil
func (o *NestedConfig) UnsetParentId() {
	o.ParentId.Unset()
}

// GetChildrenIds returns the ChildrenIds field value if set, zero value otherwise.
func (o *NestedConfig) GetChildrenIds() []string {
	if o == nil || IsNil(o.ChildrenIds) {
		var ret []string
		return ret
	}
	return o.ChildrenIds
}

// GetChildrenIdsOk returns a tuple with the ChildrenIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NestedConfig) GetChildrenIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ChildrenIds) {
		return nil, false
	}
	return o.ChildrenIds, true
}

// HasChildrenIds returns a boolean if a field has been set.
func (o *NestedConfig) HasChildrenIds() bool {
	if o != nil && !IsNil(o.ChildrenIds) {
		return true
	}

	return false
}

// SetChildrenIds gets a reference to the given []string and assigns it to the ChildrenIds field.
func (o *NestedConfig) SetChildrenIds(v []string) {
	o.ChildrenIds = v
}

func (o NestedConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NestedConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AncestorId) {
		toSerialize["ancestorId"] = o.AncestorId
	}
	if !IsNil(o.Depth) {
		toSerialize["depth"] = o.Depth
	}
	if o.ParentId.IsSet() {
		toSerialize["parentId"] = o.ParentId.Get()
	}
	if !IsNil(o.ChildrenIds) {
		toSerialize["childrenIds"] = o.ChildrenIds
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NestedConfig) UnmarshalJSON(data []byte) (err error) {
	varNestedConfig := _NestedConfig{}

	err = json.Unmarshal(data, &varNestedConfig)

	if err != nil {
		return err
	}

	*o = NestedConfig(varNestedConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ancestorId")
		delete(additionalProperties, "depth")
		delete(additionalProperties, "parentId")
		delete(additionalProperties, "childrenIds")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNestedConfig struct {
	value *NestedConfig
	isSet bool
}

func (v NullableNestedConfig) Get() *NestedConfig {
	return v.value
}

func (v *NullableNestedConfig) Set(val *NestedConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableNestedConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableNestedConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNestedConfig(val *NestedConfig) *NullableNestedConfig {
	return &NullableNestedConfig{value: val, isSet: true}
}

func (v NullableNestedConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNestedConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


