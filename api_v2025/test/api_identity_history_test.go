/*
Identity Security Cloud V2025 API

Testing IdentityHistoryAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package api_v2025

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/sailpoint-oss/golang-sdk/v2"
)

func Test_api_v2025_IdentityHistoryAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test IdentityHistoryAPIService CompareIdentitySnapshots", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.IdentityHistoryAPI.CompareIdentitySnapshots(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityHistoryAPIService CompareIdentitySnapshotsAccessType", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var accessType string

		resp, httpRes, err := apiClient.IdentityHistoryAPI.CompareIdentitySnapshotsAccessType(context.Background(), id, accessType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityHistoryAPIService GetHistoricalIdentity", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.IdentityHistoryAPI.GetHistoricalIdentity(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityHistoryAPIService GetHistoricalIdentityEvents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.IdentityHistoryAPI.GetHistoricalIdentityEvents(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityHistoryAPIService GetIdentitySnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var date string

		resp, httpRes, err := apiClient.IdentityHistoryAPI.GetIdentitySnapshot(context.Background(), id, date).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityHistoryAPIService GetIdentitySnapshotSummary", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.IdentityHistoryAPI.GetIdentitySnapshotSummary(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityHistoryAPIService GetIdentityStartDate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.IdentityHistoryAPI.GetIdentityStartDate(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityHistoryAPIService ListHistoricalIdentities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IdentityHistoryAPI.ListHistoricalIdentities(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityHistoryAPIService ListIdentityAccessItems", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.IdentityHistoryAPI.ListIdentityAccessItems(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityHistoryAPIService ListIdentitySnapshotAccessItems", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var date string

		resp, httpRes, err := apiClient.IdentityHistoryAPI.ListIdentitySnapshotAccessItems(context.Background(), id, date).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityHistoryAPIService ListIdentitySnapshots", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.IdentityHistoryAPI.ListIdentitySnapshots(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
