/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
)

// checks if the AccessModelMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccessModelMetadata{}

// AccessModelMetadata Metadata that describes an access item
type AccessModelMetadata struct {
	// Unique identifier for the metadata type
	Key *string `json:"key,omitempty"`
	// Human readable name of the metadata type
	Name *string `json:"name,omitempty"`
	// Allows selecting multiple values
	Multiselect *bool `json:"multiselect,omitempty"`
	// The state of the metadata item
	Status *string `json:"status,omitempty"`
	// The type of the metadata item
	Type *string `json:"type,omitempty"`
	// The types of objects
	ObjectTypes []string `json:"objectTypes,omitempty"`
	// Describes the metadata item
	Description *string `json:"description,omitempty"`
	// The value to assign to the metadata item
	Values []AccessModelMetadataValuesInner `json:"values,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AccessModelMetadata AccessModelMetadata

// NewAccessModelMetadata instantiates a new AccessModelMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessModelMetadata() *AccessModelMetadata {
	this := AccessModelMetadata{}
	var multiselect bool = false
	this.Multiselect = &multiselect
	return &this
}

// NewAccessModelMetadataWithDefaults instantiates a new AccessModelMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessModelMetadataWithDefaults() *AccessModelMetadata {
	this := AccessModelMetadata{}
	var multiselect bool = false
	this.Multiselect = &multiselect
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *AccessModelMetadata) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessModelMetadata) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *AccessModelMetadata) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *AccessModelMetadata) SetKey(v string) {
	o.Key = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AccessModelMetadata) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessModelMetadata) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AccessModelMetadata) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AccessModelMetadata) SetName(v string) {
	o.Name = &v
}

// GetMultiselect returns the Multiselect field value if set, zero value otherwise.
func (o *AccessModelMetadata) GetMultiselect() bool {
	if o == nil || IsNil(o.Multiselect) {
		var ret bool
		return ret
	}
	return *o.Multiselect
}

// GetMultiselectOk returns a tuple with the Multiselect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessModelMetadata) GetMultiselectOk() (*bool, bool) {
	if o == nil || IsNil(o.Multiselect) {
		return nil, false
	}
	return o.Multiselect, true
}

// HasMultiselect returns a boolean if a field has been set.
func (o *AccessModelMetadata) HasMultiselect() bool {
	if o != nil && !IsNil(o.Multiselect) {
		return true
	}

	return false
}

// SetMultiselect gets a reference to the given bool and assigns it to the Multiselect field.
func (o *AccessModelMetadata) SetMultiselect(v bool) {
	o.Multiselect = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *AccessModelMetadata) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessModelMetadata) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *AccessModelMetadata) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *AccessModelMetadata) SetStatus(v string) {
	o.Status = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AccessModelMetadata) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessModelMetadata) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AccessModelMetadata) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AccessModelMetadata) SetType(v string) {
	o.Type = &v
}

// GetObjectTypes returns the ObjectTypes field value if set, zero value otherwise.
func (o *AccessModelMetadata) GetObjectTypes() []string {
	if o == nil || IsNil(o.ObjectTypes) {
		var ret []string
		return ret
	}
	return o.ObjectTypes
}

// GetObjectTypesOk returns a tuple with the ObjectTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessModelMetadata) GetObjectTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.ObjectTypes) {
		return nil, false
	}
	return o.ObjectTypes, true
}

// HasObjectTypes returns a boolean if a field has been set.
func (o *AccessModelMetadata) HasObjectTypes() bool {
	if o != nil && !IsNil(o.ObjectTypes) {
		return true
	}

	return false
}

// SetObjectTypes gets a reference to the given []string and assigns it to the ObjectTypes field.
func (o *AccessModelMetadata) SetObjectTypes(v []string) {
	o.ObjectTypes = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AccessModelMetadata) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessModelMetadata) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AccessModelMetadata) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AccessModelMetadata) SetDescription(v string) {
	o.Description = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *AccessModelMetadata) GetValues() []AccessModelMetadataValuesInner {
	if o == nil || IsNil(o.Values) {
		var ret []AccessModelMetadataValuesInner
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessModelMetadata) GetValuesOk() ([]AccessModelMetadataValuesInner, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *AccessModelMetadata) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []AccessModelMetadataValuesInner and assigns it to the Values field.
func (o *AccessModelMetadata) SetValues(v []AccessModelMetadataValuesInner) {
	o.Values = v
}

func (o AccessModelMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccessModelMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Multiselect) {
		toSerialize["multiselect"] = o.Multiselect
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.ObjectTypes) {
		toSerialize["objectTypes"] = o.ObjectTypes
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AccessModelMetadata) UnmarshalJSON(data []byte) (err error) {
	varAccessModelMetadata := _AccessModelMetadata{}

	err = json.Unmarshal(data, &varAccessModelMetadata)

	if err != nil {
		return err
	}

	*o = AccessModelMetadata(varAccessModelMetadata)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "key")
		delete(additionalProperties, "name")
		delete(additionalProperties, "multiselect")
		delete(additionalProperties, "status")
		delete(additionalProperties, "type")
		delete(additionalProperties, "objectTypes")
		delete(additionalProperties, "description")
		delete(additionalProperties, "values")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAccessModelMetadata struct {
	value *AccessModelMetadata
	isSet bool
}

func (v NullableAccessModelMetadata) Get() *AccessModelMetadata {
	return v.value
}

func (v *NullableAccessModelMetadata) Set(val *AccessModelMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessModelMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessModelMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessModelMetadata(val *AccessModelMetadata) *NullableAccessModelMetadata {
	return &NullableAccessModelMetadata{value: val, isSet: true}
}

func (v NullableAccessModelMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessModelMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


