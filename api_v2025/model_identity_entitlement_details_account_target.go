/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
)

// checks if the IdentityEntitlementDetailsAccountTarget type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdentityEntitlementDetailsAccountTarget{}

// IdentityEntitlementDetailsAccountTarget struct for IdentityEntitlementDetailsAccountTarget
type IdentityEntitlementDetailsAccountTarget struct {
	// The id of account
	AccountId *string `json:"accountId,omitempty"`
	// The name of account
	AccountName *string `json:"accountName,omitempty"`
	// The UUID representation of the account if available
	AccountUUID NullableString `json:"accountUUID,omitempty"`
	// The id of Source
	SourceId *string `json:"sourceId,omitempty"`
	// The name of Source
	SourceName *string `json:"sourceName,omitempty"`
	// The removal date scheduled for the entitlement on the Identity
	RemoveDate NullableString `json:"removeDate,omitempty"`
	// The assignmentId of the entitlement on the Identity
	AssignmentId NullableString `json:"assignmentId,omitempty"`
	// If the entitlement can be revoked
	Revocable *bool `json:"revocable,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IdentityEntitlementDetailsAccountTarget IdentityEntitlementDetailsAccountTarget

// NewIdentityEntitlementDetailsAccountTarget instantiates a new IdentityEntitlementDetailsAccountTarget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityEntitlementDetailsAccountTarget() *IdentityEntitlementDetailsAccountTarget {
	this := IdentityEntitlementDetailsAccountTarget{}
	var revocable bool = false
	this.Revocable = &revocable
	return &this
}

// NewIdentityEntitlementDetailsAccountTargetWithDefaults instantiates a new IdentityEntitlementDetailsAccountTarget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityEntitlementDetailsAccountTargetWithDefaults() *IdentityEntitlementDetailsAccountTarget {
	this := IdentityEntitlementDetailsAccountTarget{}
	var revocable bool = false
	this.Revocable = &revocable
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *IdentityEntitlementDetailsAccountTarget) GetAccountId() string {
	if o == nil || IsNil(o.AccountId) {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityEntitlementDetailsAccountTarget) GetAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *IdentityEntitlementDetailsAccountTarget) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *IdentityEntitlementDetailsAccountTarget) SetAccountId(v string) {
	o.AccountId = &v
}

// GetAccountName returns the AccountName field value if set, zero value otherwise.
func (o *IdentityEntitlementDetailsAccountTarget) GetAccountName() string {
	if o == nil || IsNil(o.AccountName) {
		var ret string
		return ret
	}
	return *o.AccountName
}

// GetAccountNameOk returns a tuple with the AccountName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityEntitlementDetailsAccountTarget) GetAccountNameOk() (*string, bool) {
	if o == nil || IsNil(o.AccountName) {
		return nil, false
	}
	return o.AccountName, true
}

// HasAccountName returns a boolean if a field has been set.
func (o *IdentityEntitlementDetailsAccountTarget) HasAccountName() bool {
	if o != nil && !IsNil(o.AccountName) {
		return true
	}

	return false
}

// SetAccountName gets a reference to the given string and assigns it to the AccountName field.
func (o *IdentityEntitlementDetailsAccountTarget) SetAccountName(v string) {
	o.AccountName = &v
}

// GetAccountUUID returns the AccountUUID field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityEntitlementDetailsAccountTarget) GetAccountUUID() string {
	if o == nil || IsNil(o.AccountUUID.Get()) {
		var ret string
		return ret
	}
	return *o.AccountUUID.Get()
}

// GetAccountUUIDOk returns a tuple with the AccountUUID field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityEntitlementDetailsAccountTarget) GetAccountUUIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccountUUID.Get(), o.AccountUUID.IsSet()
}

// HasAccountUUID returns a boolean if a field has been set.
func (o *IdentityEntitlementDetailsAccountTarget) HasAccountUUID() bool {
	if o != nil && o.AccountUUID.IsSet() {
		return true
	}

	return false
}

// SetAccountUUID gets a reference to the given NullableString and assigns it to the AccountUUID field.
func (o *IdentityEntitlementDetailsAccountTarget) SetAccountUUID(v string) {
	o.AccountUUID.Set(&v)
}
// SetAccountUUIDNil sets the value for AccountUUID to be an explicit nil
func (o *IdentityEntitlementDetailsAccountTarget) SetAccountUUIDNil() {
	o.AccountUUID.Set(nil)
}

// UnsetAccountUUID ensures that no value is present for AccountUUID, not even an explicit nil
func (o *IdentityEntitlementDetailsAccountTarget) UnsetAccountUUID() {
	o.AccountUUID.Unset()
}

// GetSourceId returns the SourceId field value if set, zero value otherwise.
func (o *IdentityEntitlementDetailsAccountTarget) GetSourceId() string {
	if o == nil || IsNil(o.SourceId) {
		var ret string
		return ret
	}
	return *o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityEntitlementDetailsAccountTarget) GetSourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.SourceId) {
		return nil, false
	}
	return o.SourceId, true
}

// HasSourceId returns a boolean if a field has been set.
func (o *IdentityEntitlementDetailsAccountTarget) HasSourceId() bool {
	if o != nil && !IsNil(o.SourceId) {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given string and assigns it to the SourceId field.
func (o *IdentityEntitlementDetailsAccountTarget) SetSourceId(v string) {
	o.SourceId = &v
}

// GetSourceName returns the SourceName field value if set, zero value otherwise.
func (o *IdentityEntitlementDetailsAccountTarget) GetSourceName() string {
	if o == nil || IsNil(o.SourceName) {
		var ret string
		return ret
	}
	return *o.SourceName
}

// GetSourceNameOk returns a tuple with the SourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityEntitlementDetailsAccountTarget) GetSourceNameOk() (*string, bool) {
	if o == nil || IsNil(o.SourceName) {
		return nil, false
	}
	return o.SourceName, true
}

// HasSourceName returns a boolean if a field has been set.
func (o *IdentityEntitlementDetailsAccountTarget) HasSourceName() bool {
	if o != nil && !IsNil(o.SourceName) {
		return true
	}

	return false
}

// SetSourceName gets a reference to the given string and assigns it to the SourceName field.
func (o *IdentityEntitlementDetailsAccountTarget) SetSourceName(v string) {
	o.SourceName = &v
}

// GetRemoveDate returns the RemoveDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityEntitlementDetailsAccountTarget) GetRemoveDate() string {
	if o == nil || IsNil(o.RemoveDate.Get()) {
		var ret string
		return ret
	}
	return *o.RemoveDate.Get()
}

// GetRemoveDateOk returns a tuple with the RemoveDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityEntitlementDetailsAccountTarget) GetRemoveDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemoveDate.Get(), o.RemoveDate.IsSet()
}

// HasRemoveDate returns a boolean if a field has been set.
func (o *IdentityEntitlementDetailsAccountTarget) HasRemoveDate() bool {
	if o != nil && o.RemoveDate.IsSet() {
		return true
	}

	return false
}

// SetRemoveDate gets a reference to the given NullableString and assigns it to the RemoveDate field.
func (o *IdentityEntitlementDetailsAccountTarget) SetRemoveDate(v string) {
	o.RemoveDate.Set(&v)
}
// SetRemoveDateNil sets the value for RemoveDate to be an explicit nil
func (o *IdentityEntitlementDetailsAccountTarget) SetRemoveDateNil() {
	o.RemoveDate.Set(nil)
}

// UnsetRemoveDate ensures that no value is present for RemoveDate, not even an explicit nil
func (o *IdentityEntitlementDetailsAccountTarget) UnsetRemoveDate() {
	o.RemoveDate.Unset()
}

// GetAssignmentId returns the AssignmentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityEntitlementDetailsAccountTarget) GetAssignmentId() string {
	if o == nil || IsNil(o.AssignmentId.Get()) {
		var ret string
		return ret
	}
	return *o.AssignmentId.Get()
}

// GetAssignmentIdOk returns a tuple with the AssignmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityEntitlementDetailsAccountTarget) GetAssignmentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AssignmentId.Get(), o.AssignmentId.IsSet()
}

// HasAssignmentId returns a boolean if a field has been set.
func (o *IdentityEntitlementDetailsAccountTarget) HasAssignmentId() bool {
	if o != nil && o.AssignmentId.IsSet() {
		return true
	}

	return false
}

// SetAssignmentId gets a reference to the given NullableString and assigns it to the AssignmentId field.
func (o *IdentityEntitlementDetailsAccountTarget) SetAssignmentId(v string) {
	o.AssignmentId.Set(&v)
}
// SetAssignmentIdNil sets the value for AssignmentId to be an explicit nil
func (o *IdentityEntitlementDetailsAccountTarget) SetAssignmentIdNil() {
	o.AssignmentId.Set(nil)
}

// UnsetAssignmentId ensures that no value is present for AssignmentId, not even an explicit nil
func (o *IdentityEntitlementDetailsAccountTarget) UnsetAssignmentId() {
	o.AssignmentId.Unset()
}

// GetRevocable returns the Revocable field value if set, zero value otherwise.
func (o *IdentityEntitlementDetailsAccountTarget) GetRevocable() bool {
	if o == nil || IsNil(o.Revocable) {
		var ret bool
		return ret
	}
	return *o.Revocable
}

// GetRevocableOk returns a tuple with the Revocable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityEntitlementDetailsAccountTarget) GetRevocableOk() (*bool, bool) {
	if o == nil || IsNil(o.Revocable) {
		return nil, false
	}
	return o.Revocable, true
}

// HasRevocable returns a boolean if a field has been set.
func (o *IdentityEntitlementDetailsAccountTarget) HasRevocable() bool {
	if o != nil && !IsNil(o.Revocable) {
		return true
	}

	return false
}

// SetRevocable gets a reference to the given bool and assigns it to the Revocable field.
func (o *IdentityEntitlementDetailsAccountTarget) SetRevocable(v bool) {
	o.Revocable = &v
}

func (o IdentityEntitlementDetailsAccountTarget) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdentityEntitlementDetailsAccountTarget) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountId) {
		toSerialize["accountId"] = o.AccountId
	}
	if !IsNil(o.AccountName) {
		toSerialize["accountName"] = o.AccountName
	}
	if o.AccountUUID.IsSet() {
		toSerialize["accountUUID"] = o.AccountUUID.Get()
	}
	if !IsNil(o.SourceId) {
		toSerialize["sourceId"] = o.SourceId
	}
	if !IsNil(o.SourceName) {
		toSerialize["sourceName"] = o.SourceName
	}
	if o.RemoveDate.IsSet() {
		toSerialize["removeDate"] = o.RemoveDate.Get()
	}
	if o.AssignmentId.IsSet() {
		toSerialize["assignmentId"] = o.AssignmentId.Get()
	}
	if !IsNil(o.Revocable) {
		toSerialize["revocable"] = o.Revocable
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IdentityEntitlementDetailsAccountTarget) UnmarshalJSON(data []byte) (err error) {
	varIdentityEntitlementDetailsAccountTarget := _IdentityEntitlementDetailsAccountTarget{}

	err = json.Unmarshal(data, &varIdentityEntitlementDetailsAccountTarget)

	if err != nil {
		return err
	}

	*o = IdentityEntitlementDetailsAccountTarget(varIdentityEntitlementDetailsAccountTarget)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "accountId")
		delete(additionalProperties, "accountName")
		delete(additionalProperties, "accountUUID")
		delete(additionalProperties, "sourceId")
		delete(additionalProperties, "sourceName")
		delete(additionalProperties, "removeDate")
		delete(additionalProperties, "assignmentId")
		delete(additionalProperties, "revocable")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIdentityEntitlementDetailsAccountTarget struct {
	value *IdentityEntitlementDetailsAccountTarget
	isSet bool
}

func (v NullableIdentityEntitlementDetailsAccountTarget) Get() *IdentityEntitlementDetailsAccountTarget {
	return v.value
}

func (v *NullableIdentityEntitlementDetailsAccountTarget) Set(val *IdentityEntitlementDetailsAccountTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityEntitlementDetailsAccountTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityEntitlementDetailsAccountTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityEntitlementDetailsAccountTarget(val *IdentityEntitlementDetailsAccountTarget) *NullableIdentityEntitlementDetailsAccountTarget {
	return &NullableIdentityEntitlementDetailsAccountTarget{value: val, isSet: true}
}

func (v NullableIdentityEntitlementDetailsAccountTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityEntitlementDetailsAccountTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


