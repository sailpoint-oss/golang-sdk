/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
)

// checks if the ParameterStorageUpdateParameter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParameterStorageUpdateParameter{}

// ParameterStorageUpdateParameter An existing parameter that needs to be updated. The type cannot be changed once the parameter is created.
type ParameterStorageUpdateParameter struct {
	// The UUID of the parameter owner.
	OwnerId *string `json:"ownerId,omitempty"`
	// The human-readable name for the parameter.
	Name *string `json:"name,omitempty"`
	// The public fields that can be stored with this parameter.
	PublicFields map[string]interface{} `json:"publicFields,omitempty"`
	// The private fields that can be stored with this parameter.
	PrivateFields *string `json:"privateFields,omitempty"`
	// Describe the parameter
	Description *string `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ParameterStorageUpdateParameter ParameterStorageUpdateParameter

// NewParameterStorageUpdateParameter instantiates a new ParameterStorageUpdateParameter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParameterStorageUpdateParameter() *ParameterStorageUpdateParameter {
	this := ParameterStorageUpdateParameter{}
	return &this
}

// NewParameterStorageUpdateParameterWithDefaults instantiates a new ParameterStorageUpdateParameter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParameterStorageUpdateParameterWithDefaults() *ParameterStorageUpdateParameter {
	this := ParameterStorageUpdateParameter{}
	return &this
}

// GetOwnerId returns the OwnerId field value if set, zero value otherwise.
func (o *ParameterStorageUpdateParameter) GetOwnerId() string {
	if o == nil || IsNil(o.OwnerId) {
		var ret string
		return ret
	}
	return *o.OwnerId
}

// GetOwnerIdOk returns a tuple with the OwnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParameterStorageUpdateParameter) GetOwnerIdOk() (*string, bool) {
	if o == nil || IsNil(o.OwnerId) {
		return nil, false
	}
	return o.OwnerId, true
}

// HasOwnerId returns a boolean if a field has been set.
func (o *ParameterStorageUpdateParameter) HasOwnerId() bool {
	if o != nil && !IsNil(o.OwnerId) {
		return true
	}

	return false
}

// SetOwnerId gets a reference to the given string and assigns it to the OwnerId field.
func (o *ParameterStorageUpdateParameter) SetOwnerId(v string) {
	o.OwnerId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ParameterStorageUpdateParameter) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParameterStorageUpdateParameter) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ParameterStorageUpdateParameter) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ParameterStorageUpdateParameter) SetName(v string) {
	o.Name = &v
}

// GetPublicFields returns the PublicFields field value if set, zero value otherwise.
func (o *ParameterStorageUpdateParameter) GetPublicFields() map[string]interface{} {
	if o == nil || IsNil(o.PublicFields) {
		var ret map[string]interface{}
		return ret
	}
	return o.PublicFields
}

// GetPublicFieldsOk returns a tuple with the PublicFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParameterStorageUpdateParameter) GetPublicFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.PublicFields) {
		return map[string]interface{}{}, false
	}
	return o.PublicFields, true
}

// HasPublicFields returns a boolean if a field has been set.
func (o *ParameterStorageUpdateParameter) HasPublicFields() bool {
	if o != nil && !IsNil(o.PublicFields) {
		return true
	}

	return false
}

// SetPublicFields gets a reference to the given map[string]interface{} and assigns it to the PublicFields field.
func (o *ParameterStorageUpdateParameter) SetPublicFields(v map[string]interface{}) {
	o.PublicFields = v
}

// GetPrivateFields returns the PrivateFields field value if set, zero value otherwise.
func (o *ParameterStorageUpdateParameter) GetPrivateFields() string {
	if o == nil || IsNil(o.PrivateFields) {
		var ret string
		return ret
	}
	return *o.PrivateFields
}

// GetPrivateFieldsOk returns a tuple with the PrivateFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParameterStorageUpdateParameter) GetPrivateFieldsOk() (*string, bool) {
	if o == nil || IsNil(o.PrivateFields) {
		return nil, false
	}
	return o.PrivateFields, true
}

// HasPrivateFields returns a boolean if a field has been set.
func (o *ParameterStorageUpdateParameter) HasPrivateFields() bool {
	if o != nil && !IsNil(o.PrivateFields) {
		return true
	}

	return false
}

// SetPrivateFields gets a reference to the given string and assigns it to the PrivateFields field.
func (o *ParameterStorageUpdateParameter) SetPrivateFields(v string) {
	o.PrivateFields = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ParameterStorageUpdateParameter) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParameterStorageUpdateParameter) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ParameterStorageUpdateParameter) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ParameterStorageUpdateParameter) SetDescription(v string) {
	o.Description = &v
}

func (o ParameterStorageUpdateParameter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParameterStorageUpdateParameter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OwnerId) {
		toSerialize["ownerId"] = o.OwnerId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.PublicFields) {
		toSerialize["publicFields"] = o.PublicFields
	}
	if !IsNil(o.PrivateFields) {
		toSerialize["privateFields"] = o.PrivateFields
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ParameterStorageUpdateParameter) UnmarshalJSON(data []byte) (err error) {
	varParameterStorageUpdateParameter := _ParameterStorageUpdateParameter{}

	err = json.Unmarshal(data, &varParameterStorageUpdateParameter)

	if err != nil {
		return err
	}

	*o = ParameterStorageUpdateParameter(varParameterStorageUpdateParameter)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ownerId")
		delete(additionalProperties, "name")
		delete(additionalProperties, "publicFields")
		delete(additionalProperties, "privateFields")
		delete(additionalProperties, "description")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableParameterStorageUpdateParameter struct {
	value *ParameterStorageUpdateParameter
	isSet bool
}

func (v NullableParameterStorageUpdateParameter) Get() *ParameterStorageUpdateParameter {
	return v.value
}

func (v *NullableParameterStorageUpdateParameter) Set(val *ParameterStorageUpdateParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableParameterStorageUpdateParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableParameterStorageUpdateParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParameterStorageUpdateParameter(val *ParameterStorageUpdateParameter) *NullableParameterStorageUpdateParameter {
	return &NullableParameterStorageUpdateParameter{value: val, isSet: true}
}

func (v NullableParameterStorageUpdateParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParameterStorageUpdateParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


