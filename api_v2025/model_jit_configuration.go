/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
)

// checks if the JITConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JITConfiguration{}

// JITConfiguration struct for JITConfiguration
type JITConfiguration struct {
	// The indicator for just-in-time provisioning enabled
	Enabled *bool `json:"enabled,omitempty"`
	// the sourceId that mapped to just-in-time provisioning configuration
	SourceId *string `json:"sourceId,omitempty"`
	// A mapping of identity profile attribute names to SAML assertion attribute names
	SourceAttributeMappings *map[string]string `json:"sourceAttributeMappings,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _JITConfiguration JITConfiguration

// NewJITConfiguration instantiates a new JITConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJITConfiguration() *JITConfiguration {
	this := JITConfiguration{}
	var enabled bool = false
	this.Enabled = &enabled
	return &this
}

// NewJITConfigurationWithDefaults instantiates a new JITConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJITConfigurationWithDefaults() *JITConfiguration {
	this := JITConfiguration{}
	var enabled bool = false
	this.Enabled = &enabled
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *JITConfiguration) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JITConfiguration) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *JITConfiguration) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *JITConfiguration) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetSourceId returns the SourceId field value if set, zero value otherwise.
func (o *JITConfiguration) GetSourceId() string {
	if o == nil || IsNil(o.SourceId) {
		var ret string
		return ret
	}
	return *o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JITConfiguration) GetSourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.SourceId) {
		return nil, false
	}
	return o.SourceId, true
}

// HasSourceId returns a boolean if a field has been set.
func (o *JITConfiguration) HasSourceId() bool {
	if o != nil && !IsNil(o.SourceId) {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given string and assigns it to the SourceId field.
func (o *JITConfiguration) SetSourceId(v string) {
	o.SourceId = &v
}

// GetSourceAttributeMappings returns the SourceAttributeMappings field value if set, zero value otherwise.
func (o *JITConfiguration) GetSourceAttributeMappings() map[string]string {
	if o == nil || IsNil(o.SourceAttributeMappings) {
		var ret map[string]string
		return ret
	}
	return *o.SourceAttributeMappings
}

// GetSourceAttributeMappingsOk returns a tuple with the SourceAttributeMappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JITConfiguration) GetSourceAttributeMappingsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.SourceAttributeMappings) {
		return nil, false
	}
	return o.SourceAttributeMappings, true
}

// HasSourceAttributeMappings returns a boolean if a field has been set.
func (o *JITConfiguration) HasSourceAttributeMappings() bool {
	if o != nil && !IsNil(o.SourceAttributeMappings) {
		return true
	}

	return false
}

// SetSourceAttributeMappings gets a reference to the given map[string]string and assigns it to the SourceAttributeMappings field.
func (o *JITConfiguration) SetSourceAttributeMappings(v map[string]string) {
	o.SourceAttributeMappings = &v
}

func (o JITConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JITConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.SourceId) {
		toSerialize["sourceId"] = o.SourceId
	}
	if !IsNil(o.SourceAttributeMappings) {
		toSerialize["sourceAttributeMappings"] = o.SourceAttributeMappings
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *JITConfiguration) UnmarshalJSON(data []byte) (err error) {
	varJITConfiguration := _JITConfiguration{}

	err = json.Unmarshal(data, &varJITConfiguration)

	if err != nil {
		return err
	}

	*o = JITConfiguration(varJITConfiguration)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "sourceId")
		delete(additionalProperties, "sourceAttributeMappings")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableJITConfiguration struct {
	value *JITConfiguration
	isSet bool
}

func (v NullableJITConfiguration) Get() *JITConfiguration {
	return v.value
}

func (v *NullableJITConfiguration) Set(val *JITConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableJITConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableJITConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJITConfiguration(val *JITConfiguration) *NullableJITConfiguration {
	return &NullableJITConfiguration{value: val, isSet: true}
}

func (v NullableJITConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJITConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


