/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
	"fmt"
)

// checks if the DimensionCriteriaKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DimensionCriteriaKey{}

// DimensionCriteriaKey Refers to a specific Identity attribute used in Dimension membership criteria.
type DimensionCriteriaKey struct {
	Type DimensionCriteriaKeyType `json:"type"`
	// The name of the identity attribute to which the associated criteria applies.
	Property string `json:"property"`
	AdditionalProperties map[string]interface{}
}

type _DimensionCriteriaKey DimensionCriteriaKey

// NewDimensionCriteriaKey instantiates a new DimensionCriteriaKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDimensionCriteriaKey(type_ DimensionCriteriaKeyType, property string) *DimensionCriteriaKey {
	this := DimensionCriteriaKey{}
	this.Type = type_
	this.Property = property
	return &this
}

// NewDimensionCriteriaKeyWithDefaults instantiates a new DimensionCriteriaKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDimensionCriteriaKeyWithDefaults() *DimensionCriteriaKey {
	this := DimensionCriteriaKey{}
	return &this
}

// GetType returns the Type field value
func (o *DimensionCriteriaKey) GetType() DimensionCriteriaKeyType {
	if o == nil {
		var ret DimensionCriteriaKeyType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DimensionCriteriaKey) GetTypeOk() (*DimensionCriteriaKeyType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DimensionCriteriaKey) SetType(v DimensionCriteriaKeyType) {
	o.Type = v
}

// GetProperty returns the Property field value
func (o *DimensionCriteriaKey) GetProperty() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Property
}

// GetPropertyOk returns a tuple with the Property field value
// and a boolean to check if the value has been set.
func (o *DimensionCriteriaKey) GetPropertyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Property, true
}

// SetProperty sets field value
func (o *DimensionCriteriaKey) SetProperty(v string) {
	o.Property = v
}

func (o DimensionCriteriaKey) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DimensionCriteriaKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["property"] = o.Property

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DimensionCriteriaKey) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"property",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDimensionCriteriaKey := _DimensionCriteriaKey{}

	err = json.Unmarshal(data, &varDimensionCriteriaKey)

	if err != nil {
		return err
	}

	*o = DimensionCriteriaKey(varDimensionCriteriaKey)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "property")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDimensionCriteriaKey struct {
	value *DimensionCriteriaKey
	isSet bool
}

func (v NullableDimensionCriteriaKey) Get() *DimensionCriteriaKey {
	return v.value
}

func (v *NullableDimensionCriteriaKey) Set(val *DimensionCriteriaKey) {
	v.value = val
	v.isSet = true
}

func (v NullableDimensionCriteriaKey) IsSet() bool {
	return v.isSet
}

func (v *NullableDimensionCriteriaKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDimensionCriteriaKey(val *DimensionCriteriaKey) *NullableDimensionCriteriaKey {
	return &NullableDimensionCriteriaKey{value: val, isSet: true}
}

func (v NullableDimensionCriteriaKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDimensionCriteriaKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


