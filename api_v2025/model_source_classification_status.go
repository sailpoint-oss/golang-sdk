/*
Identity Security Cloud V2025 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2025
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2025

import (
	"encoding/json"
	
)

// checks if the SourceClassificationStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SourceClassificationStatus{}

// SourceClassificationStatus struct for SourceClassificationStatus
type SourceClassificationStatus struct {
	// Status of Classification Process
	Status *string `json:"status,omitempty"`
	// Time when the process was started
	Started *SailPointTime `json:"started,omitempty"`
	// Time when the process status was last updated
	Updated NullableTime `json:"updated,omitempty"`
	Counts *SourceClassificationStatusAllOfCounts `json:"counts,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SourceClassificationStatus SourceClassificationStatus

// NewSourceClassificationStatus instantiates a new SourceClassificationStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceClassificationStatus() *SourceClassificationStatus {
	this := SourceClassificationStatus{}
	return &this
}

// NewSourceClassificationStatusWithDefaults instantiates a new SourceClassificationStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceClassificationStatusWithDefaults() *SourceClassificationStatus {
	this := SourceClassificationStatus{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SourceClassificationStatus) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceClassificationStatus) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SourceClassificationStatus) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *SourceClassificationStatus) SetStatus(v string) {
	o.Status = &v
}

// GetStarted returns the Started field value if set, zero value otherwise.
func (o *SourceClassificationStatus) GetStarted() SailPointTime {
	if o == nil || IsNil(o.Started) {
		var ret SailPointTime
		return ret
	}
	return *o.Started
}

// GetStartedOk returns a tuple with the Started field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceClassificationStatus) GetStartedOk() (*SailPointTime, bool) {
	if o == nil || IsNil(o.Started) {
		return nil, false
	}
	return o.Started, true
}

// HasStarted returns a boolean if a field has been set.
func (o *SourceClassificationStatus) HasStarted() bool {
	if o != nil && !IsNil(o.Started) {
		return true
	}

	return false
}

// SetStarted gets a reference to the given SailPointTime and assigns it to the Started field.
func (o *SourceClassificationStatus) SetStarted(v SailPointTime) {
	o.Started = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SourceClassificationStatus) GetUpdated() SailPointTime {
	if o == nil || IsNil(o.Updated.Get()) {
		var ret SailPointTime
		return ret
	}
	return *o.Updated.Get()
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourceClassificationStatus) GetUpdatedOk() (*SailPointTime, bool) {
	if o == nil {
		return nil, false
	}
	return o.Updated.Get(), o.Updated.IsSet()
}

// HasUpdated returns a boolean if a field has been set.
func (o *SourceClassificationStatus) HasUpdated() bool {
	if o != nil && o.Updated.IsSet() {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given NullableTime and assigns it to the Updated field.
func (o *SourceClassificationStatus) SetUpdated(v SailPointTime) {
	o.Updated.Set(&v)
}
// SetUpdatedNil sets the value for Updated to be an explicit nil
func (o *SourceClassificationStatus) SetUpdatedNil() {
	o.Updated.Set(nil)
}

// UnsetUpdated ensures that no value is present for Updated, not even an explicit nil
func (o *SourceClassificationStatus) UnsetUpdated() {
	o.Updated.Unset()
}

// GetCounts returns the Counts field value if set, zero value otherwise.
func (o *SourceClassificationStatus) GetCounts() SourceClassificationStatusAllOfCounts {
	if o == nil || IsNil(o.Counts) {
		var ret SourceClassificationStatusAllOfCounts
		return ret
	}
	return *o.Counts
}

// GetCountsOk returns a tuple with the Counts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceClassificationStatus) GetCountsOk() (*SourceClassificationStatusAllOfCounts, bool) {
	if o == nil || IsNil(o.Counts) {
		return nil, false
	}
	return o.Counts, true
}

// HasCounts returns a boolean if a field has been set.
func (o *SourceClassificationStatus) HasCounts() bool {
	if o != nil && !IsNil(o.Counts) {
		return true
	}

	return false
}

// SetCounts gets a reference to the given SourceClassificationStatusAllOfCounts and assigns it to the Counts field.
func (o *SourceClassificationStatus) SetCounts(v SourceClassificationStatusAllOfCounts) {
	o.Counts = &v
}

func (o SourceClassificationStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SourceClassificationStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Started) {
		toSerialize["started"] = o.Started
	}
	if o.Updated.IsSet() {
		toSerialize["updated"] = o.Updated.Get()
	}
	if !IsNil(o.Counts) {
		toSerialize["counts"] = o.Counts
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SourceClassificationStatus) UnmarshalJSON(data []byte) (err error) {
	varSourceClassificationStatus := _SourceClassificationStatus{}

	err = json.Unmarshal(data, &varSourceClassificationStatus)

	if err != nil {
		return err
	}

	*o = SourceClassificationStatus(varSourceClassificationStatus)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "status")
		delete(additionalProperties, "started")
		delete(additionalProperties, "updated")
		delete(additionalProperties, "counts")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSourceClassificationStatus struct {
	value *SourceClassificationStatus
	isSet bool
}

func (v NullableSourceClassificationStatus) Get() *SourceClassificationStatus {
	return v.value
}

func (v *NullableSourceClassificationStatus) Set(val *SourceClassificationStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceClassificationStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceClassificationStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceClassificationStatus(val *SourceClassificationStatus) *NullableSourceClassificationStatus {
	return &NullableSourceClassificationStatus{value: val, isSet: true}
}

func (v NullableSourceClassificationStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceClassificationStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


