/*
Identity Security Cloud V2024 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2024
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2024

import (
	"encoding/json"
)

// checks if the SectionDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SectionDetails{}

// SectionDetails struct for SectionDetails
type SectionDetails struct {
	// Name of the FormItem
	Name NullableString `json:"name,omitempty"`
	// Label of the section
	Label NullableString `json:"label,omitempty"`
	// List of FormItems. FormItems can be SectionDetails and/or FieldDetails
	FormItems []map[string]interface{} `json:"formItems,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SectionDetails SectionDetails

// NewSectionDetails instantiates a new SectionDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSectionDetails() *SectionDetails {
	this := SectionDetails{}
	return &this
}

// NewSectionDetailsWithDefaults instantiates a new SectionDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSectionDetailsWithDefaults() *SectionDetails {
	this := SectionDetails{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SectionDetails) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SectionDetails) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *SectionDetails) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *SectionDetails) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *SectionDetails) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *SectionDetails) UnsetName() {
	o.Name.Unset()
}

// GetLabel returns the Label field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SectionDetails) GetLabel() string {
	if o == nil || IsNil(o.Label.Get()) {
		var ret string
		return ret
	}
	return *o.Label.Get()
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SectionDetails) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Label.Get(), o.Label.IsSet()
}

// HasLabel returns a boolean if a field has been set.
func (o *SectionDetails) HasLabel() bool {
	if o != nil && o.Label.IsSet() {
		return true
	}

	return false
}

// SetLabel gets a reference to the given NullableString and assigns it to the Label field.
func (o *SectionDetails) SetLabel(v string) {
	o.Label.Set(&v)
}
// SetLabelNil sets the value for Label to be an explicit nil
func (o *SectionDetails) SetLabelNil() {
	o.Label.Set(nil)
}

// UnsetLabel ensures that no value is present for Label, not even an explicit nil
func (o *SectionDetails) UnsetLabel() {
	o.Label.Unset()
}

// GetFormItems returns the FormItems field value if set, zero value otherwise.
func (o *SectionDetails) GetFormItems() []map[string]interface{} {
	if o == nil || IsNil(o.FormItems) {
		var ret []map[string]interface{}
		return ret
	}
	return o.FormItems
}

// GetFormItemsOk returns a tuple with the FormItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SectionDetails) GetFormItemsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.FormItems) {
		return nil, false
	}
	return o.FormItems, true
}

// HasFormItems returns a boolean if a field has been set.
func (o *SectionDetails) HasFormItems() bool {
	if o != nil && !IsNil(o.FormItems) {
		return true
	}

	return false
}

// SetFormItems gets a reference to the given []map[string]interface{} and assigns it to the FormItems field.
func (o *SectionDetails) SetFormItems(v []map[string]interface{}) {
	o.FormItems = v
}

func (o SectionDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SectionDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Label.IsSet() {
		toSerialize["label"] = o.Label.Get()
	}
	if !IsNil(o.FormItems) {
		toSerialize["formItems"] = o.FormItems
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SectionDetails) UnmarshalJSON(data []byte) (err error) {
	varSectionDetails := _SectionDetails{}

	err = json.Unmarshal(data, &varSectionDetails)

	if err != nil {
		return err
	}

	*o = SectionDetails(varSectionDetails)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "label")
		delete(additionalProperties, "formItems")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSectionDetails struct {
	value *SectionDetails
	isSet bool
}

func (v NullableSectionDetails) Get() *SectionDetails {
	return v.value
}

func (v *NullableSectionDetails) Set(val *SectionDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableSectionDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableSectionDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSectionDetails(val *SectionDetails) *NullableSectionDetails {
	return &NullableSectionDetails{value: val, isSet: true}
}

func (v NullableSectionDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSectionDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


