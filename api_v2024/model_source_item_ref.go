/*
Identity Security Cloud V2024 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2024
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2024

import (
	"encoding/json"
)

// checks if the SourceItemRef type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SourceItemRef{}

// SourceItemRef struct for SourceItemRef
type SourceItemRef struct {
	// The id for the source on which account selections are made
	SourceId NullableString `json:"sourceId,omitempty"`
	// A list of account selections on the source. Currently, only one selection per source is supported.
	Accounts []AccountItemRef `json:"accounts,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SourceItemRef SourceItemRef

// NewSourceItemRef instantiates a new SourceItemRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceItemRef() *SourceItemRef {
	this := SourceItemRef{}
	return &this
}

// NewSourceItemRefWithDefaults instantiates a new SourceItemRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceItemRefWithDefaults() *SourceItemRef {
	this := SourceItemRef{}
	return &this
}

// GetSourceId returns the SourceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SourceItemRef) GetSourceId() string {
	if o == nil || IsNil(o.SourceId.Get()) {
		var ret string
		return ret
	}
	return *o.SourceId.Get()
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourceItemRef) GetSourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceId.Get(), o.SourceId.IsSet()
}

// HasSourceId returns a boolean if a field has been set.
func (o *SourceItemRef) HasSourceId() bool {
	if o != nil && o.SourceId.IsSet() {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given NullableString and assigns it to the SourceId field.
func (o *SourceItemRef) SetSourceId(v string) {
	o.SourceId.Set(&v)
}
// SetSourceIdNil sets the value for SourceId to be an explicit nil
func (o *SourceItemRef) SetSourceIdNil() {
	o.SourceId.Set(nil)
}

// UnsetSourceId ensures that no value is present for SourceId, not even an explicit nil
func (o *SourceItemRef) UnsetSourceId() {
	o.SourceId.Unset()
}

// GetAccounts returns the Accounts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SourceItemRef) GetAccounts() []AccountItemRef {
	if o == nil {
		var ret []AccountItemRef
		return ret
	}
	return o.Accounts
}

// GetAccountsOk returns a tuple with the Accounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourceItemRef) GetAccountsOk() ([]AccountItemRef, bool) {
	if o == nil || IsNil(o.Accounts) {
		return nil, false
	}
	return o.Accounts, true
}

// HasAccounts returns a boolean if a field has been set.
func (o *SourceItemRef) HasAccounts() bool {
	if o != nil && !IsNil(o.Accounts) {
		return true
	}

	return false
}

// SetAccounts gets a reference to the given []AccountItemRef and assigns it to the Accounts field.
func (o *SourceItemRef) SetAccounts(v []AccountItemRef) {
	o.Accounts = v
}

func (o SourceItemRef) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SourceItemRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.SourceId.IsSet() {
		toSerialize["sourceId"] = o.SourceId.Get()
	}
	if o.Accounts != nil {
		toSerialize["accounts"] = o.Accounts
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SourceItemRef) UnmarshalJSON(data []byte) (err error) {
	varSourceItemRef := _SourceItemRef{}

	err = json.Unmarshal(data, &varSourceItemRef)

	if err != nil {
		return err
	}

	*o = SourceItemRef(varSourceItemRef)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "sourceId")
		delete(additionalProperties, "accounts")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSourceItemRef struct {
	value *SourceItemRef
	isSet bool
}

func (v NullableSourceItemRef) Get() *SourceItemRef {
	return v.value
}

func (v *NullableSourceItemRef) Set(val *SourceItemRef) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceItemRef) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceItemRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceItemRef(val *SourceItemRef) *NullableSourceItemRef {
	return &NullableSourceItemRef{value: val, isSet: true}
}

func (v NullableSourceItemRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceItemRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


