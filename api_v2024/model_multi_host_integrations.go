/*
Identity Security Cloud V2024 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2024
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2024

import (
	"encoding/json"
	
	"fmt"
)

// checks if the MultiHostIntegrations type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MultiHostIntegrations{}

// MultiHostIntegrations struct for MultiHostIntegrations
type MultiHostIntegrations struct {
	// Multi-Host Integration ID.
	Id string `json:"id"`
	// Multi-Host Integration's human-readable name.
	Name string `json:"name"`
	// Multi-Host Integration's human-readable description.
	Description string `json:"description"`
	Owner SourceOwner `json:"owner"`
	Cluster NullableSourceCluster `json:"cluster,omitempty"`
	AccountCorrelationConfig NullableSourceAccountCorrelationConfig `json:"accountCorrelationConfig,omitempty"`
	AccountCorrelationRule NullableSourceAccountCorrelationRule `json:"accountCorrelationRule,omitempty"`
	ManagerCorrelationMapping *SourceManagerCorrelationMapping `json:"managerCorrelationMapping,omitempty"`
	ManagerCorrelationRule NullableSourceManagerCorrelationRule `json:"managerCorrelationRule,omitempty"`
	BeforeProvisioningRule NullableMultiHostIntegrationsBeforeProvisioningRule `json:"beforeProvisioningRule,omitempty"`
	// List of references to schema objects.
	Schemas []SourceSchemasInner `json:"schemas,omitempty"`
	// List of references to the associated PasswordPolicy objects.
	PasswordPolicies []SourcePasswordPoliciesInner `json:"passwordPolicies,omitempty"`
	// Optional features that can be supported by a source. Modifying the features array may cause source configuration errors that are unsupportable. It is recommended to not modify this array for SailPoint supported connectors. * AUTHENTICATE: The source supports pass-through authentication. * COMPOSITE: The source supports composite source creation. * DIRECT_PERMISSIONS: The source supports returning DirectPermissions. * DISCOVER_SCHEMA: The source supports discovering schemas for users and groups. * ENABLE The source supports reading if an account is enabled or disabled. * MANAGER_LOOKUP: The source supports looking up managers as they are encountered in a feed. This is the opposite of NO_RANDOM_ACCESS. * NO_RANDOM_ACCESS: The source does not support random access and the getObject() methods should not be called and expected to perform. * PROXY: The source can serve as a proxy for another source. When an source has a proxy, all connector calls made with that source are redirected through the connector for the proxy source. * SEARCH * TEMPLATE * UNLOCK: The source supports reading if an account is locked or unlocked. * UNSTRUCTURED_TARGETS: The source supports returning unstructured Targets. * SHAREPOINT_TARGET: The source supports returning unstructured Target data for SharePoint. It will be typically used by AD, LDAP sources. * PROVISIONING: The source can both read and write accounts. Having this feature implies that the provision() method is implemented. It also means that direct and target permissions can also be provisioned if they can be returned by aggregation. * GROUP_PROVISIONING: The source can both read and write groups. Having this feature implies that the provision() method is implemented. * SYNC_PROVISIONING: The source can provision accounts synchronously. * PASSWORD: The source can provision password changes. Since sources can never read passwords, this is should only be used in conjunction with the PROVISIONING feature. * CURRENT_PASSWORD: Some source types support verification of the current password * ACCOUNT_ONLY_REQUEST: The source supports requesting accounts without entitlements. * ADDITIONAL_ACCOUNT_REQUEST: The source supports requesting additional accounts. * NO_AGGREGATION: A source that does not support aggregation. * GROUPS_HAVE_MEMBERS: The source models group memberships with a member attribute on the group object rather than a groups attribute on the account object. This effects the implementation of delta account aggregation. * NO_PERMISSIONS_PROVISIONING: Indicates that the connector cannot provision direct or target permissions for accounts. When DIRECT_PERMISSIONS and PROVISIONING features are present, it is assumed that the connector can also provision direct permissions. This feature disables that assumption and causes permission request to be converted to work items for accounts. * NO_GROUP_PERMISSIONS_PROVISIONING: Indicates that the connector cannot provision direct or target permissions for groups. When DIRECT_PERMISSIONS and PROVISIONING features are present, it is assumed that the connector can also provision direct permissions. This feature disables that assumption and causes permission request to be converted to work items for groups. * NO_UNSTRUCTURED_TARGETS_PROVISIONING: This string will be replaced by NO_GROUP_PERMISSIONS_PROVISIONING and NO_PERMISSIONS_PROVISIONING. * NO_DIRECT_PERMISSIONS_PROVISIONING: This string will be replaced by NO_GROUP_PERMISSIONS_PROVISIONING and NO_PERMISSIONS_PROVISIONING. * USES_UUID: Connectivity 2.0 flag used to indicate that the connector supports a compound naming structure. * PREFER_UUID: Used in ISC Provisioning AND Aggregation to decide if it should prefer account.uuid to account.nativeIdentity when data is read in through aggregation OR pushed out through provisioning. * ARM_SECURITY_EXTRACT: Indicates the application supports Security extracts for ARM * ARM_UTILIZATION_EXTRACT: Indicates the application supports Utilization extracts for ARM * ARM_CHANGELOG_EXTRACT: Indicates the application supports Change-log extracts for ARM
	Features []string `json:"features,omitempty"`
	// Specifies the type of system being managed e.g. Workday, Multi-Host - Microsoft SQL Server, etc.. If you are creating a delimited file source, you must set the `provisionasCsv` query parameter to `true`. 
	Type *string `json:"type,omitempty"`
	// Connector script name.
	Connector string `json:"connector"`
	// Fully qualified name of the Java class that implements the connector interface.
	ConnectorClass *string `json:"connectorClass,omitempty"`
	ConnectorAttributes *MultiHostIntegrationsConnectorAttributes `json:"connectorAttributes,omitempty"`
	// Number from 0 to 100 that specifies when to skip the delete phase.
	DeleteThreshold *int32 `json:"deleteThreshold,omitempty"`
	// When this is true, it indicates that the source is referenced by an identity profile.
	Authoritative *bool `json:"authoritative,omitempty"`
	ManagementWorkgroup NullableSourceManagementWorkgroup `json:"managementWorkgroup,omitempty"`
	// When this is true, it indicates that the source is healthy.
	Healthy *bool `json:"healthy,omitempty"`
	// Status identifier that gives specific information about why a source is or isn't healthy. 
	Status *string `json:"status,omitempty"`
	// Timestamp that shows when a source health check was last performed.
	Since *SailPointTime `json:"since,omitempty"`
	// Connector ID
	ConnectorId *string `json:"connectorId,omitempty"`
	// Name of the connector that was chosen during source creation.
	ConnectorName *string `json:"connectorName,omitempty"`
	// Type of connection (direct or file).
	ConnectionType *string `json:"connectionType,omitempty"`
	// Connector implementation ID.
	ConnectorImplementationId *string `json:"connectorImplementationId,omitempty"`
	// Date-time when the source was created
	Created *SailPointTime `json:"created,omitempty"`
	// Date-time when the source was last modified.
	Modified *SailPointTime `json:"modified,omitempty"`
	// If this is true, it enables a credential provider for the source. If credentialProvider is turned on,  then the source can use credential provider(s) to fetch credentials.
	CredentialProviderEnabled *bool `json:"credentialProviderEnabled,omitempty"`
	// Source category (e.g. null, CredentialProvider).
	Category NullableString `json:"category,omitempty"`
	AccountsFile NullableMultiHostIntegrationsAccountsFile `json:"accountsFile,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MultiHostIntegrations MultiHostIntegrations

// NewMultiHostIntegrations instantiates a new MultiHostIntegrations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultiHostIntegrations(id string, name string, description string, owner SourceOwner, connector string) *MultiHostIntegrations {
	this := MultiHostIntegrations{}
	this.Id = id
	this.Name = name
	this.Description = description
	this.Owner = owner
	this.Connector = connector
	var authoritative bool = false
	this.Authoritative = &authoritative
	var healthy bool = false
	this.Healthy = &healthy
	var credentialProviderEnabled bool = false
	this.CredentialProviderEnabled = &credentialProviderEnabled
	return &this
}

// NewMultiHostIntegrationsWithDefaults instantiates a new MultiHostIntegrations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultiHostIntegrationsWithDefaults() *MultiHostIntegrations {
	this := MultiHostIntegrations{}
	var authoritative bool = false
	this.Authoritative = &authoritative
	var healthy bool = false
	this.Healthy = &healthy
	var credentialProviderEnabled bool = false
	this.CredentialProviderEnabled = &credentialProviderEnabled
	return &this
}

// GetId returns the Id field value
func (o *MultiHostIntegrations) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrations) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *MultiHostIntegrations) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *MultiHostIntegrations) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrations) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MultiHostIntegrations) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *MultiHostIntegrations) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrations) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *MultiHostIntegrations) SetDescription(v string) {
	o.Description = v
}

// GetOwner returns the Owner field value
func (o *MultiHostIntegrations) GetOwner() SourceOwner {
	if o == nil {
		var ret SourceOwner
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrations) GetOwnerOk() (*SourceOwner, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *MultiHostIntegrations) SetOwner(v SourceOwner) {
	o.Owner = v
}

// GetCluster returns the Cluster field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MultiHostIntegrations) GetCluster() SourceCluster {
	if o == nil || IsNil(o.Cluster.Get()) {
		var ret SourceCluster
		return ret
	}
	return *o.Cluster.Get()
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MultiHostIntegrations) GetClusterOk() (*SourceCluster, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cluster.Get(), o.Cluster.IsSet()
}

// HasCluster returns a boolean if a field has been set.
func (o *MultiHostIntegrations) HasCluster() bool {
	if o != nil && o.Cluster.IsSet() {
		return true
	}

	return false
}

// SetCluster gets a reference to the given NullableSourceCluster and assigns it to the Cluster field.
func (o *MultiHostIntegrations) SetCluster(v SourceCluster) {
	o.Cluster.Set(&v)
}
// SetClusterNil sets the value for Cluster to be an explicit nil
func (o *MultiHostIntegrations) SetClusterNil() {
	o.Cluster.Set(nil)
}

// UnsetCluster ensures that no value is present for Cluster, not even an explicit nil
func (o *MultiHostIntegrations) UnsetCluster() {
	o.Cluster.Unset()
}

// GetAccountCorrelationConfig returns the AccountCorrelationConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MultiHostIntegrations) GetAccountCorrelationConfig() SourceAccountCorrelationConfig {
	if o == nil || IsNil(o.AccountCorrelationConfig.Get()) {
		var ret SourceAccountCorrelationConfig
		return ret
	}
	return *o.AccountCorrelationConfig.Get()
}

// GetAccountCorrelationConfigOk returns a tuple with the AccountCorrelationConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MultiHostIntegrations) GetAccountCorrelationConfigOk() (*SourceAccountCorrelationConfig, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccountCorrelationConfig.Get(), o.AccountCorrelationConfig.IsSet()
}

// HasAccountCorrelationConfig returns a boolean if a field has been set.
func (o *MultiHostIntegrations) HasAccountCorrelationConfig() bool {
	if o != nil && o.AccountCorrelationConfig.IsSet() {
		return true
	}

	return false
}

// SetAccountCorrelationConfig gets a reference to the given NullableSourceAccountCorrelationConfig and assigns it to the AccountCorrelationConfig field.
func (o *MultiHostIntegrations) SetAccountCorrelationConfig(v SourceAccountCorrelationConfig) {
	o.AccountCorrelationConfig.Set(&v)
}
// SetAccountCorrelationConfigNil sets the value for AccountCorrelationConfig to be an explicit nil
func (o *MultiHostIntegrations) SetAccountCorrelationConfigNil() {
	o.AccountCorrelationConfig.Set(nil)
}

// UnsetAccountCorrelationConfig ensures that no value is present for AccountCorrelationConfig, not even an explicit nil
func (o *MultiHostIntegrations) UnsetAccountCorrelationConfig() {
	o.AccountCorrelationConfig.Unset()
}

// GetAccountCorrelationRule returns the AccountCorrelationRule field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MultiHostIntegrations) GetAccountCorrelationRule() SourceAccountCorrelationRule {
	if o == nil || IsNil(o.AccountCorrelationRule.Get()) {
		var ret SourceAccountCorrelationRule
		return ret
	}
	return *o.AccountCorrelationRule.Get()
}

// GetAccountCorrelationRuleOk returns a tuple with the AccountCorrelationRule field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MultiHostIntegrations) GetAccountCorrelationRuleOk() (*SourceAccountCorrelationRule, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccountCorrelationRule.Get(), o.AccountCorrelationRule.IsSet()
}

// HasAccountCorrelationRule returns a boolean if a field has been set.
func (o *MultiHostIntegrations) HasAccountCorrelationRule() bool {
	if o != nil && o.AccountCorrelationRule.IsSet() {
		return true
	}

	return false
}

// SetAccountCorrelationRule gets a reference to the given NullableSourceAccountCorrelationRule and assigns it to the AccountCorrelationRule field.
func (o *MultiHostIntegrations) SetAccountCorrelationRule(v SourceAccountCorrelationRule) {
	o.AccountCorrelationRule.Set(&v)
}
// SetAccountCorrelationRuleNil sets the value for AccountCorrelationRule to be an explicit nil
func (o *MultiHostIntegrations) SetAccountCorrelationRuleNil() {
	o.AccountCorrelationRule.Set(nil)
}

// UnsetAccountCorrelationRule ensures that no value is present for AccountCorrelationRule, not even an explicit nil
func (o *MultiHostIntegrations) UnsetAccountCorrelationRule() {
	o.AccountCorrelationRule.Unset()
}

// GetManagerCorrelationMapping returns the ManagerCorrelationMapping field value if set, zero value otherwise.
func (o *MultiHostIntegrations) GetManagerCorrelationMapping() SourceManagerCorrelationMapping {
	if o == nil || IsNil(o.ManagerCorrelationMapping) {
		var ret SourceManagerCorrelationMapping
		return ret
	}
	return *o.ManagerCorrelationMapping
}

// GetManagerCorrelationMappingOk returns a tuple with the ManagerCorrelationMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrations) GetManagerCorrelationMappingOk() (*SourceManagerCorrelationMapping, bool) {
	if o == nil || IsNil(o.ManagerCorrelationMapping) {
		return nil, false
	}
	return o.ManagerCorrelationMapping, true
}

// HasManagerCorrelationMapping returns a boolean if a field has been set.
func (o *MultiHostIntegrations) HasManagerCorrelationMapping() bool {
	if o != nil && !IsNil(o.ManagerCorrelationMapping) {
		return true
	}

	return false
}

// SetManagerCorrelationMapping gets a reference to the given SourceManagerCorrelationMapping and assigns it to the ManagerCorrelationMapping field.
func (o *MultiHostIntegrations) SetManagerCorrelationMapping(v SourceManagerCorrelationMapping) {
	o.ManagerCorrelationMapping = &v
}

// GetManagerCorrelationRule returns the ManagerCorrelationRule field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MultiHostIntegrations) GetManagerCorrelationRule() SourceManagerCorrelationRule {
	if o == nil || IsNil(o.ManagerCorrelationRule.Get()) {
		var ret SourceManagerCorrelationRule
		return ret
	}
	return *o.ManagerCorrelationRule.Get()
}

// GetManagerCorrelationRuleOk returns a tuple with the ManagerCorrelationRule field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MultiHostIntegrations) GetManagerCorrelationRuleOk() (*SourceManagerCorrelationRule, bool) {
	if o == nil {
		return nil, false
	}
	return o.ManagerCorrelationRule.Get(), o.ManagerCorrelationRule.IsSet()
}

// HasManagerCorrelationRule returns a boolean if a field has been set.
func (o *MultiHostIntegrations) HasManagerCorrelationRule() bool {
	if o != nil && o.ManagerCorrelationRule.IsSet() {
		return true
	}

	return false
}

// SetManagerCorrelationRule gets a reference to the given NullableSourceManagerCorrelationRule and assigns it to the ManagerCorrelationRule field.
func (o *MultiHostIntegrations) SetManagerCorrelationRule(v SourceManagerCorrelationRule) {
	o.ManagerCorrelationRule.Set(&v)
}
// SetManagerCorrelationRuleNil sets the value for ManagerCorrelationRule to be an explicit nil
func (o *MultiHostIntegrations) SetManagerCorrelationRuleNil() {
	o.ManagerCorrelationRule.Set(nil)
}

// UnsetManagerCorrelationRule ensures that no value is present for ManagerCorrelationRule, not even an explicit nil
func (o *MultiHostIntegrations) UnsetManagerCorrelationRule() {
	o.ManagerCorrelationRule.Unset()
}

// GetBeforeProvisioningRule returns the BeforeProvisioningRule field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MultiHostIntegrations) GetBeforeProvisioningRule() MultiHostIntegrationsBeforeProvisioningRule {
	if o == nil || IsNil(o.BeforeProvisioningRule.Get()) {
		var ret MultiHostIntegrationsBeforeProvisioningRule
		return ret
	}
	return *o.BeforeProvisioningRule.Get()
}

// GetBeforeProvisioningRuleOk returns a tuple with the BeforeProvisioningRule field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MultiHostIntegrations) GetBeforeProvisioningRuleOk() (*MultiHostIntegrationsBeforeProvisioningRule, bool) {
	if o == nil {
		return nil, false
	}
	return o.BeforeProvisioningRule.Get(), o.BeforeProvisioningRule.IsSet()
}

// HasBeforeProvisioningRule returns a boolean if a field has been set.
func (o *MultiHostIntegrations) HasBeforeProvisioningRule() bool {
	if o != nil && o.BeforeProvisioningRule.IsSet() {
		return true
	}

	return false
}

// SetBeforeProvisioningRule gets a reference to the given NullableMultiHostIntegrationsBeforeProvisioningRule and assigns it to the BeforeProvisioningRule field.
func (o *MultiHostIntegrations) SetBeforeProvisioningRule(v MultiHostIntegrationsBeforeProvisioningRule) {
	o.BeforeProvisioningRule.Set(&v)
}
// SetBeforeProvisioningRuleNil sets the value for BeforeProvisioningRule to be an explicit nil
func (o *MultiHostIntegrations) SetBeforeProvisioningRuleNil() {
	o.BeforeProvisioningRule.Set(nil)
}

// UnsetBeforeProvisioningRule ensures that no value is present for BeforeProvisioningRule, not even an explicit nil
func (o *MultiHostIntegrations) UnsetBeforeProvisioningRule() {
	o.BeforeProvisioningRule.Unset()
}

// GetSchemas returns the Schemas field value if set, zero value otherwise.
func (o *MultiHostIntegrations) GetSchemas() []SourceSchemasInner {
	if o == nil || IsNil(o.Schemas) {
		var ret []SourceSchemasInner
		return ret
	}
	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrations) GetSchemasOk() ([]SourceSchemasInner, bool) {
	if o == nil || IsNil(o.Schemas) {
		return nil, false
	}
	return o.Schemas, true
}

// HasSchemas returns a boolean if a field has been set.
func (o *MultiHostIntegrations) HasSchemas() bool {
	if o != nil && !IsNil(o.Schemas) {
		return true
	}

	return false
}

// SetSchemas gets a reference to the given []SourceSchemasInner and assigns it to the Schemas field.
func (o *MultiHostIntegrations) SetSchemas(v []SourceSchemasInner) {
	o.Schemas = v
}

// GetPasswordPolicies returns the PasswordPolicies field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MultiHostIntegrations) GetPasswordPolicies() []SourcePasswordPoliciesInner {
	if o == nil {
		var ret []SourcePasswordPoliciesInner
		return ret
	}
	return o.PasswordPolicies
}

// GetPasswordPoliciesOk returns a tuple with the PasswordPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MultiHostIntegrations) GetPasswordPoliciesOk() ([]SourcePasswordPoliciesInner, bool) {
	if o == nil || IsNil(o.PasswordPolicies) {
		return nil, false
	}
	return o.PasswordPolicies, true
}

// HasPasswordPolicies returns a boolean if a field has been set.
func (o *MultiHostIntegrations) HasPasswordPolicies() bool {
	if o != nil && !IsNil(o.PasswordPolicies) {
		return true
	}

	return false
}

// SetPasswordPolicies gets a reference to the given []SourcePasswordPoliciesInner and assigns it to the PasswordPolicies field.
func (o *MultiHostIntegrations) SetPasswordPolicies(v []SourcePasswordPoliciesInner) {
	o.PasswordPolicies = v
}

// GetFeatures returns the Features field value if set, zero value otherwise.
func (o *MultiHostIntegrations) GetFeatures() []string {
	if o == nil || IsNil(o.Features) {
		var ret []string
		return ret
	}
	return o.Features
}

// GetFeaturesOk returns a tuple with the Features field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrations) GetFeaturesOk() ([]string, bool) {
	if o == nil || IsNil(o.Features) {
		return nil, false
	}
	return o.Features, true
}

// HasFeatures returns a boolean if a field has been set.
func (o *MultiHostIntegrations) HasFeatures() bool {
	if o != nil && !IsNil(o.Features) {
		return true
	}

	return false
}

// SetFeatures gets a reference to the given []string and assigns it to the Features field.
func (o *MultiHostIntegrations) SetFeatures(v []string) {
	o.Features = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *MultiHostIntegrations) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrations) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *MultiHostIntegrations) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *MultiHostIntegrations) SetType(v string) {
	o.Type = &v
}

// GetConnector returns the Connector field value
func (o *MultiHostIntegrations) GetConnector() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Connector
}

// GetConnectorOk returns a tuple with the Connector field value
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrations) GetConnectorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Connector, true
}

// SetConnector sets field value
func (o *MultiHostIntegrations) SetConnector(v string) {
	o.Connector = v
}

// GetConnectorClass returns the ConnectorClass field value if set, zero value otherwise.
func (o *MultiHostIntegrations) GetConnectorClass() string {
	if o == nil || IsNil(o.ConnectorClass) {
		var ret string
		return ret
	}
	return *o.ConnectorClass
}

// GetConnectorClassOk returns a tuple with the ConnectorClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrations) GetConnectorClassOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectorClass) {
		return nil, false
	}
	return o.ConnectorClass, true
}

// HasConnectorClass returns a boolean if a field has been set.
func (o *MultiHostIntegrations) HasConnectorClass() bool {
	if o != nil && !IsNil(o.ConnectorClass) {
		return true
	}

	return false
}

// SetConnectorClass gets a reference to the given string and assigns it to the ConnectorClass field.
func (o *MultiHostIntegrations) SetConnectorClass(v string) {
	o.ConnectorClass = &v
}

// GetConnectorAttributes returns the ConnectorAttributes field value if set, zero value otherwise.
func (o *MultiHostIntegrations) GetConnectorAttributes() MultiHostIntegrationsConnectorAttributes {
	if o == nil || IsNil(o.ConnectorAttributes) {
		var ret MultiHostIntegrationsConnectorAttributes
		return ret
	}
	return *o.ConnectorAttributes
}

// GetConnectorAttributesOk returns a tuple with the ConnectorAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrations) GetConnectorAttributesOk() (*MultiHostIntegrationsConnectorAttributes, bool) {
	if o == nil || IsNil(o.ConnectorAttributes) {
		return nil, false
	}
	return o.ConnectorAttributes, true
}

// HasConnectorAttributes returns a boolean if a field has been set.
func (o *MultiHostIntegrations) HasConnectorAttributes() bool {
	if o != nil && !IsNil(o.ConnectorAttributes) {
		return true
	}

	return false
}

// SetConnectorAttributes gets a reference to the given MultiHostIntegrationsConnectorAttributes and assigns it to the ConnectorAttributes field.
func (o *MultiHostIntegrations) SetConnectorAttributes(v MultiHostIntegrationsConnectorAttributes) {
	o.ConnectorAttributes = &v
}

// GetDeleteThreshold returns the DeleteThreshold field value if set, zero value otherwise.
func (o *MultiHostIntegrations) GetDeleteThreshold() int32 {
	if o == nil || IsNil(o.DeleteThreshold) {
		var ret int32
		return ret
	}
	return *o.DeleteThreshold
}

// GetDeleteThresholdOk returns a tuple with the DeleteThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrations) GetDeleteThresholdOk() (*int32, bool) {
	if o == nil || IsNil(o.DeleteThreshold) {
		return nil, false
	}
	return o.DeleteThreshold, true
}

// HasDeleteThreshold returns a boolean if a field has been set.
func (o *MultiHostIntegrations) HasDeleteThreshold() bool {
	if o != nil && !IsNil(o.DeleteThreshold) {
		return true
	}

	return false
}

// SetDeleteThreshold gets a reference to the given int32 and assigns it to the DeleteThreshold field.
func (o *MultiHostIntegrations) SetDeleteThreshold(v int32) {
	o.DeleteThreshold = &v
}

// GetAuthoritative returns the Authoritative field value if set, zero value otherwise.
func (o *MultiHostIntegrations) GetAuthoritative() bool {
	if o == nil || IsNil(o.Authoritative) {
		var ret bool
		return ret
	}
	return *o.Authoritative
}

// GetAuthoritativeOk returns a tuple with the Authoritative field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrations) GetAuthoritativeOk() (*bool, bool) {
	if o == nil || IsNil(o.Authoritative) {
		return nil, false
	}
	return o.Authoritative, true
}

// HasAuthoritative returns a boolean if a field has been set.
func (o *MultiHostIntegrations) HasAuthoritative() bool {
	if o != nil && !IsNil(o.Authoritative) {
		return true
	}

	return false
}

// SetAuthoritative gets a reference to the given bool and assigns it to the Authoritative field.
func (o *MultiHostIntegrations) SetAuthoritative(v bool) {
	o.Authoritative = &v
}

// GetManagementWorkgroup returns the ManagementWorkgroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MultiHostIntegrations) GetManagementWorkgroup() SourceManagementWorkgroup {
	if o == nil || IsNil(o.ManagementWorkgroup.Get()) {
		var ret SourceManagementWorkgroup
		return ret
	}
	return *o.ManagementWorkgroup.Get()
}

// GetManagementWorkgroupOk returns a tuple with the ManagementWorkgroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MultiHostIntegrations) GetManagementWorkgroupOk() (*SourceManagementWorkgroup, bool) {
	if o == nil {
		return nil, false
	}
	return o.ManagementWorkgroup.Get(), o.ManagementWorkgroup.IsSet()
}

// HasManagementWorkgroup returns a boolean if a field has been set.
func (o *MultiHostIntegrations) HasManagementWorkgroup() bool {
	if o != nil && o.ManagementWorkgroup.IsSet() {
		return true
	}

	return false
}

// SetManagementWorkgroup gets a reference to the given NullableSourceManagementWorkgroup and assigns it to the ManagementWorkgroup field.
func (o *MultiHostIntegrations) SetManagementWorkgroup(v SourceManagementWorkgroup) {
	o.ManagementWorkgroup.Set(&v)
}
// SetManagementWorkgroupNil sets the value for ManagementWorkgroup to be an explicit nil
func (o *MultiHostIntegrations) SetManagementWorkgroupNil() {
	o.ManagementWorkgroup.Set(nil)
}

// UnsetManagementWorkgroup ensures that no value is present for ManagementWorkgroup, not even an explicit nil
func (o *MultiHostIntegrations) UnsetManagementWorkgroup() {
	o.ManagementWorkgroup.Unset()
}

// GetHealthy returns the Healthy field value if set, zero value otherwise.
func (o *MultiHostIntegrations) GetHealthy() bool {
	if o == nil || IsNil(o.Healthy) {
		var ret bool
		return ret
	}
	return *o.Healthy
}

// GetHealthyOk returns a tuple with the Healthy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrations) GetHealthyOk() (*bool, bool) {
	if o == nil || IsNil(o.Healthy) {
		return nil, false
	}
	return o.Healthy, true
}

// HasHealthy returns a boolean if a field has been set.
func (o *MultiHostIntegrations) HasHealthy() bool {
	if o != nil && !IsNil(o.Healthy) {
		return true
	}

	return false
}

// SetHealthy gets a reference to the given bool and assigns it to the Healthy field.
func (o *MultiHostIntegrations) SetHealthy(v bool) {
	o.Healthy = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *MultiHostIntegrations) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrations) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *MultiHostIntegrations) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *MultiHostIntegrations) SetStatus(v string) {
	o.Status = &v
}

// GetSince returns the Since field value if set, zero value otherwise.
func (o *MultiHostIntegrations) GetSince() SailPointTime {
	if o == nil || IsNil(o.Since) {
		var ret SailPointTime
		return ret
	}
	return *o.Since
}

// GetSinceOk returns a tuple with the Since field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrations) GetSinceOk() (*SailPointTime, bool) {
	if o == nil || IsNil(o.Since) {
		return nil, false
	}
	return o.Since, true
}

// HasSince returns a boolean if a field has been set.
func (o *MultiHostIntegrations) HasSince() bool {
	if o != nil && !IsNil(o.Since) {
		return true
	}

	return false
}

// SetSince gets a reference to the given SailPointTime and assigns it to the Since field.
func (o *MultiHostIntegrations) SetSince(v SailPointTime) {
	o.Since = &v
}

// GetConnectorId returns the ConnectorId field value if set, zero value otherwise.
func (o *MultiHostIntegrations) GetConnectorId() string {
	if o == nil || IsNil(o.ConnectorId) {
		var ret string
		return ret
	}
	return *o.ConnectorId
}

// GetConnectorIdOk returns a tuple with the ConnectorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrations) GetConnectorIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectorId) {
		return nil, false
	}
	return o.ConnectorId, true
}

// HasConnectorId returns a boolean if a field has been set.
func (o *MultiHostIntegrations) HasConnectorId() bool {
	if o != nil && !IsNil(o.ConnectorId) {
		return true
	}

	return false
}

// SetConnectorId gets a reference to the given string and assigns it to the ConnectorId field.
func (o *MultiHostIntegrations) SetConnectorId(v string) {
	o.ConnectorId = &v
}

// GetConnectorName returns the ConnectorName field value if set, zero value otherwise.
func (o *MultiHostIntegrations) GetConnectorName() string {
	if o == nil || IsNil(o.ConnectorName) {
		var ret string
		return ret
	}
	return *o.ConnectorName
}

// GetConnectorNameOk returns a tuple with the ConnectorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrations) GetConnectorNameOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectorName) {
		return nil, false
	}
	return o.ConnectorName, true
}

// HasConnectorName returns a boolean if a field has been set.
func (o *MultiHostIntegrations) HasConnectorName() bool {
	if o != nil && !IsNil(o.ConnectorName) {
		return true
	}

	return false
}

// SetConnectorName gets a reference to the given string and assigns it to the ConnectorName field.
func (o *MultiHostIntegrations) SetConnectorName(v string) {
	o.ConnectorName = &v
}

// GetConnectionType returns the ConnectionType field value if set, zero value otherwise.
func (o *MultiHostIntegrations) GetConnectionType() string {
	if o == nil || IsNil(o.ConnectionType) {
		var ret string
		return ret
	}
	return *o.ConnectionType
}

// GetConnectionTypeOk returns a tuple with the ConnectionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrations) GetConnectionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionType) {
		return nil, false
	}
	return o.ConnectionType, true
}

// HasConnectionType returns a boolean if a field has been set.
func (o *MultiHostIntegrations) HasConnectionType() bool {
	if o != nil && !IsNil(o.ConnectionType) {
		return true
	}

	return false
}

// SetConnectionType gets a reference to the given string and assigns it to the ConnectionType field.
func (o *MultiHostIntegrations) SetConnectionType(v string) {
	o.ConnectionType = &v
}

// GetConnectorImplementationId returns the ConnectorImplementationId field value if set, zero value otherwise.
func (o *MultiHostIntegrations) GetConnectorImplementationId() string {
	if o == nil || IsNil(o.ConnectorImplementationId) {
		var ret string
		return ret
	}
	return *o.ConnectorImplementationId
}

// GetConnectorImplementationIdOk returns a tuple with the ConnectorImplementationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrations) GetConnectorImplementationIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectorImplementationId) {
		return nil, false
	}
	return o.ConnectorImplementationId, true
}

// HasConnectorImplementationId returns a boolean if a field has been set.
func (o *MultiHostIntegrations) HasConnectorImplementationId() bool {
	if o != nil && !IsNil(o.ConnectorImplementationId) {
		return true
	}

	return false
}

// SetConnectorImplementationId gets a reference to the given string and assigns it to the ConnectorImplementationId field.
func (o *MultiHostIntegrations) SetConnectorImplementationId(v string) {
	o.ConnectorImplementationId = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *MultiHostIntegrations) GetCreated() SailPointTime {
	if o == nil || IsNil(o.Created) {
		var ret SailPointTime
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrations) GetCreatedOk() (*SailPointTime, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *MultiHostIntegrations) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given SailPointTime and assigns it to the Created field.
func (o *MultiHostIntegrations) SetCreated(v SailPointTime) {
	o.Created = &v
}

// GetModified returns the Modified field value if set, zero value otherwise.
func (o *MultiHostIntegrations) GetModified() SailPointTime {
	if o == nil || IsNil(o.Modified) {
		var ret SailPointTime
		return ret
	}
	return *o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrations) GetModifiedOk() (*SailPointTime, bool) {
	if o == nil || IsNil(o.Modified) {
		return nil, false
	}
	return o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *MultiHostIntegrations) HasModified() bool {
	if o != nil && !IsNil(o.Modified) {
		return true
	}

	return false
}

// SetModified gets a reference to the given SailPointTime and assigns it to the Modified field.
func (o *MultiHostIntegrations) SetModified(v SailPointTime) {
	o.Modified = &v
}

// GetCredentialProviderEnabled returns the CredentialProviderEnabled field value if set, zero value otherwise.
func (o *MultiHostIntegrations) GetCredentialProviderEnabled() bool {
	if o == nil || IsNil(o.CredentialProviderEnabled) {
		var ret bool
		return ret
	}
	return *o.CredentialProviderEnabled
}

// GetCredentialProviderEnabledOk returns a tuple with the CredentialProviderEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrations) GetCredentialProviderEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.CredentialProviderEnabled) {
		return nil, false
	}
	return o.CredentialProviderEnabled, true
}

// HasCredentialProviderEnabled returns a boolean if a field has been set.
func (o *MultiHostIntegrations) HasCredentialProviderEnabled() bool {
	if o != nil && !IsNil(o.CredentialProviderEnabled) {
		return true
	}

	return false
}

// SetCredentialProviderEnabled gets a reference to the given bool and assigns it to the CredentialProviderEnabled field.
func (o *MultiHostIntegrations) SetCredentialProviderEnabled(v bool) {
	o.CredentialProviderEnabled = &v
}

// GetCategory returns the Category field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MultiHostIntegrations) GetCategory() string {
	if o == nil || IsNil(o.Category.Get()) {
		var ret string
		return ret
	}
	return *o.Category.Get()
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MultiHostIntegrations) GetCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Category.Get(), o.Category.IsSet()
}

// HasCategory returns a boolean if a field has been set.
func (o *MultiHostIntegrations) HasCategory() bool {
	if o != nil && o.Category.IsSet() {
		return true
	}

	return false
}

// SetCategory gets a reference to the given NullableString and assigns it to the Category field.
func (o *MultiHostIntegrations) SetCategory(v string) {
	o.Category.Set(&v)
}
// SetCategoryNil sets the value for Category to be an explicit nil
func (o *MultiHostIntegrations) SetCategoryNil() {
	o.Category.Set(nil)
}

// UnsetCategory ensures that no value is present for Category, not even an explicit nil
func (o *MultiHostIntegrations) UnsetCategory() {
	o.Category.Unset()
}

// GetAccountsFile returns the AccountsFile field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MultiHostIntegrations) GetAccountsFile() MultiHostIntegrationsAccountsFile {
	if o == nil || IsNil(o.AccountsFile.Get()) {
		var ret MultiHostIntegrationsAccountsFile
		return ret
	}
	return *o.AccountsFile.Get()
}

// GetAccountsFileOk returns a tuple with the AccountsFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MultiHostIntegrations) GetAccountsFileOk() (*MultiHostIntegrationsAccountsFile, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccountsFile.Get(), o.AccountsFile.IsSet()
}

// HasAccountsFile returns a boolean if a field has been set.
func (o *MultiHostIntegrations) HasAccountsFile() bool {
	if o != nil && o.AccountsFile.IsSet() {
		return true
	}

	return false
}

// SetAccountsFile gets a reference to the given NullableMultiHostIntegrationsAccountsFile and assigns it to the AccountsFile field.
func (o *MultiHostIntegrations) SetAccountsFile(v MultiHostIntegrationsAccountsFile) {
	o.AccountsFile.Set(&v)
}
// SetAccountsFileNil sets the value for AccountsFile to be an explicit nil
func (o *MultiHostIntegrations) SetAccountsFileNil() {
	o.AccountsFile.Set(nil)
}

// UnsetAccountsFile ensures that no value is present for AccountsFile, not even an explicit nil
func (o *MultiHostIntegrations) UnsetAccountsFile() {
	o.AccountsFile.Unset()
}

func (o MultiHostIntegrations) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MultiHostIntegrations) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	toSerialize["owner"] = o.Owner
	if o.Cluster.IsSet() {
		toSerialize["cluster"] = o.Cluster.Get()
	}
	if o.AccountCorrelationConfig.IsSet() {
		toSerialize["accountCorrelationConfig"] = o.AccountCorrelationConfig.Get()
	}
	if o.AccountCorrelationRule.IsSet() {
		toSerialize["accountCorrelationRule"] = o.AccountCorrelationRule.Get()
	}
	if !IsNil(o.ManagerCorrelationMapping) {
		toSerialize["managerCorrelationMapping"] = o.ManagerCorrelationMapping
	}
	if o.ManagerCorrelationRule.IsSet() {
		toSerialize["managerCorrelationRule"] = o.ManagerCorrelationRule.Get()
	}
	if o.BeforeProvisioningRule.IsSet() {
		toSerialize["beforeProvisioningRule"] = o.BeforeProvisioningRule.Get()
	}
	if !IsNil(o.Schemas) {
		toSerialize["schemas"] = o.Schemas
	}
	if o.PasswordPolicies != nil {
		toSerialize["passwordPolicies"] = o.PasswordPolicies
	}
	if !IsNil(o.Features) {
		toSerialize["features"] = o.Features
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["connector"] = o.Connector
	if !IsNil(o.ConnectorClass) {
		toSerialize["connectorClass"] = o.ConnectorClass
	}
	if !IsNil(o.ConnectorAttributes) {
		toSerialize["connectorAttributes"] = o.ConnectorAttributes
	}
	if !IsNil(o.DeleteThreshold) {
		toSerialize["deleteThreshold"] = o.DeleteThreshold
	}
	if !IsNil(o.Authoritative) {
		toSerialize["authoritative"] = o.Authoritative
	}
	if o.ManagementWorkgroup.IsSet() {
		toSerialize["managementWorkgroup"] = o.ManagementWorkgroup.Get()
	}
	if !IsNil(o.Healthy) {
		toSerialize["healthy"] = o.Healthy
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Since) {
		toSerialize["since"] = o.Since
	}
	if !IsNil(o.ConnectorId) {
		toSerialize["connectorId"] = o.ConnectorId
	}
	if !IsNil(o.ConnectorName) {
		toSerialize["connectorName"] = o.ConnectorName
	}
	if !IsNil(o.ConnectionType) {
		toSerialize["connectionType"] = o.ConnectionType
	}
	if !IsNil(o.ConnectorImplementationId) {
		toSerialize["connectorImplementationId"] = o.ConnectorImplementationId
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Modified) {
		toSerialize["modified"] = o.Modified
	}
	if !IsNil(o.CredentialProviderEnabled) {
		toSerialize["credentialProviderEnabled"] = o.CredentialProviderEnabled
	}
	if o.Category.IsSet() {
		toSerialize["category"] = o.Category.Get()
	}
	if o.AccountsFile.IsSet() {
		toSerialize["accountsFile"] = o.AccountsFile.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MultiHostIntegrations) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"description",
		"owner",
		"connector",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMultiHostIntegrations := _MultiHostIntegrations{}

	err = json.Unmarshal(data, &varMultiHostIntegrations)

	if err != nil {
		return err
	}

	*o = MultiHostIntegrations(varMultiHostIntegrations)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "owner")
		delete(additionalProperties, "cluster")
		delete(additionalProperties, "accountCorrelationConfig")
		delete(additionalProperties, "accountCorrelationRule")
		delete(additionalProperties, "managerCorrelationMapping")
		delete(additionalProperties, "managerCorrelationRule")
		delete(additionalProperties, "beforeProvisioningRule")
		delete(additionalProperties, "schemas")
		delete(additionalProperties, "passwordPolicies")
		delete(additionalProperties, "features")
		delete(additionalProperties, "type")
		delete(additionalProperties, "connector")
		delete(additionalProperties, "connectorClass")
		delete(additionalProperties, "connectorAttributes")
		delete(additionalProperties, "deleteThreshold")
		delete(additionalProperties, "authoritative")
		delete(additionalProperties, "managementWorkgroup")
		delete(additionalProperties, "healthy")
		delete(additionalProperties, "status")
		delete(additionalProperties, "since")
		delete(additionalProperties, "connectorId")
		delete(additionalProperties, "connectorName")
		delete(additionalProperties, "connectionType")
		delete(additionalProperties, "connectorImplementationId")
		delete(additionalProperties, "created")
		delete(additionalProperties, "modified")
		delete(additionalProperties, "credentialProviderEnabled")
		delete(additionalProperties, "category")
		delete(additionalProperties, "accountsFile")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMultiHostIntegrations struct {
	value *MultiHostIntegrations
	isSet bool
}

func (v NullableMultiHostIntegrations) Get() *MultiHostIntegrations {
	return v.value
}

func (v *NullableMultiHostIntegrations) Set(val *MultiHostIntegrations) {
	v.value = val
	v.isSet = true
}

func (v NullableMultiHostIntegrations) IsSet() bool {
	return v.isSet
}

func (v *NullableMultiHostIntegrations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultiHostIntegrations(val *MultiHostIntegrations) *NullableMultiHostIntegrations {
	return &NullableMultiHostIntegrations{value: val, isSet: true}
}

func (v NullableMultiHostIntegrations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultiHostIntegrations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


