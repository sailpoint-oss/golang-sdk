/*
Identity Security Cloud V2024 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2024
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2024

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the VAClusterStatusChangeEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VAClusterStatusChangeEvent{}

// VAClusterStatusChangeEvent struct for VAClusterStatusChangeEvent
type VAClusterStatusChangeEvent struct {
	// The date and time the status change occurred.
	Created time.Time `json:"created"`
	// The type of the object that initiated this event.
	Type map[string]interface{} `json:"type"`
	Application VAClusterStatusChangeEventApplication `json:"application"`
	HealthCheckResult VAClusterStatusChangeEventHealthCheckResult `json:"healthCheckResult"`
	PreviousHealthCheckResult VAClusterStatusChangeEventPreviousHealthCheckResult `json:"previousHealthCheckResult"`
	AdditionalProperties map[string]interface{}
}

type _VAClusterStatusChangeEvent VAClusterStatusChangeEvent

// NewVAClusterStatusChangeEvent instantiates a new VAClusterStatusChangeEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVAClusterStatusChangeEvent(created time.Time, type_ map[string]interface{}, application VAClusterStatusChangeEventApplication, healthCheckResult VAClusterStatusChangeEventHealthCheckResult, previousHealthCheckResult VAClusterStatusChangeEventPreviousHealthCheckResult) *VAClusterStatusChangeEvent {
	this := VAClusterStatusChangeEvent{}
	this.Created = created
	this.Type = type_
	this.Application = application
	this.HealthCheckResult = healthCheckResult
	this.PreviousHealthCheckResult = previousHealthCheckResult
	return &this
}

// NewVAClusterStatusChangeEventWithDefaults instantiates a new VAClusterStatusChangeEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVAClusterStatusChangeEventWithDefaults() *VAClusterStatusChangeEvent {
	this := VAClusterStatusChangeEvent{}
	return &this
}

// GetCreated returns the Created field value
func (o *VAClusterStatusChangeEvent) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *VAClusterStatusChangeEvent) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *VAClusterStatusChangeEvent) SetCreated(v time.Time) {
	o.Created = v
}

// GetType returns the Type field value
func (o *VAClusterStatusChangeEvent) GetType() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *VAClusterStatusChangeEvent) GetTypeOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Type, true
}

// SetType sets field value
func (o *VAClusterStatusChangeEvent) SetType(v map[string]interface{}) {
	o.Type = v
}

// GetApplication returns the Application field value
func (o *VAClusterStatusChangeEvent) GetApplication() VAClusterStatusChangeEventApplication {
	if o == nil {
		var ret VAClusterStatusChangeEventApplication
		return ret
	}

	return o.Application
}

// GetApplicationOk returns a tuple with the Application field value
// and a boolean to check if the value has been set.
func (o *VAClusterStatusChangeEvent) GetApplicationOk() (*VAClusterStatusChangeEventApplication, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Application, true
}

// SetApplication sets field value
func (o *VAClusterStatusChangeEvent) SetApplication(v VAClusterStatusChangeEventApplication) {
	o.Application = v
}

// GetHealthCheckResult returns the HealthCheckResult field value
func (o *VAClusterStatusChangeEvent) GetHealthCheckResult() VAClusterStatusChangeEventHealthCheckResult {
	if o == nil {
		var ret VAClusterStatusChangeEventHealthCheckResult
		return ret
	}

	return o.HealthCheckResult
}

// GetHealthCheckResultOk returns a tuple with the HealthCheckResult field value
// and a boolean to check if the value has been set.
func (o *VAClusterStatusChangeEvent) GetHealthCheckResultOk() (*VAClusterStatusChangeEventHealthCheckResult, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HealthCheckResult, true
}

// SetHealthCheckResult sets field value
func (o *VAClusterStatusChangeEvent) SetHealthCheckResult(v VAClusterStatusChangeEventHealthCheckResult) {
	o.HealthCheckResult = v
}

// GetPreviousHealthCheckResult returns the PreviousHealthCheckResult field value
func (o *VAClusterStatusChangeEvent) GetPreviousHealthCheckResult() VAClusterStatusChangeEventPreviousHealthCheckResult {
	if o == nil {
		var ret VAClusterStatusChangeEventPreviousHealthCheckResult
		return ret
	}

	return o.PreviousHealthCheckResult
}

// GetPreviousHealthCheckResultOk returns a tuple with the PreviousHealthCheckResult field value
// and a boolean to check if the value has been set.
func (o *VAClusterStatusChangeEvent) GetPreviousHealthCheckResultOk() (*VAClusterStatusChangeEventPreviousHealthCheckResult, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PreviousHealthCheckResult, true
}

// SetPreviousHealthCheckResult sets field value
func (o *VAClusterStatusChangeEvent) SetPreviousHealthCheckResult(v VAClusterStatusChangeEventPreviousHealthCheckResult) {
	o.PreviousHealthCheckResult = v
}

func (o VAClusterStatusChangeEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VAClusterStatusChangeEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["created"] = o.Created
	toSerialize["type"] = o.Type
	toSerialize["application"] = o.Application
	toSerialize["healthCheckResult"] = o.HealthCheckResult
	toSerialize["previousHealthCheckResult"] = o.PreviousHealthCheckResult

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VAClusterStatusChangeEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"created",
		"type",
		"application",
		"healthCheckResult",
		"previousHealthCheckResult",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVAClusterStatusChangeEvent := _VAClusterStatusChangeEvent{}

	err = json.Unmarshal(data, &varVAClusterStatusChangeEvent)

	if err != nil {
		return err
	}

	*o = VAClusterStatusChangeEvent(varVAClusterStatusChangeEvent)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "created")
		delete(additionalProperties, "type")
		delete(additionalProperties, "application")
		delete(additionalProperties, "healthCheckResult")
		delete(additionalProperties, "previousHealthCheckResult")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVAClusterStatusChangeEvent struct {
	value *VAClusterStatusChangeEvent
	isSet bool
}

func (v NullableVAClusterStatusChangeEvent) Get() *VAClusterStatusChangeEvent {
	return v.value
}

func (v *NullableVAClusterStatusChangeEvent) Set(val *VAClusterStatusChangeEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableVAClusterStatusChangeEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableVAClusterStatusChangeEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVAClusterStatusChangeEvent(val *VAClusterStatusChangeEvent) *NullableVAClusterStatusChangeEvent {
	return &NullableVAClusterStatusChangeEvent{value: val, isSet: true}
}

func (v NullableVAClusterStatusChangeEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVAClusterStatusChangeEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


