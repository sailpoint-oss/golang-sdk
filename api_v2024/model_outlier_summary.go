/*
Identity Security Cloud V2024 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2024
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2024

import (
	"encoding/json"
	"time"
)

// checks if the OutlierSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OutlierSummary{}

// OutlierSummary struct for OutlierSummary
type OutlierSummary struct {
	// The type of outlier summary
	Type *string `json:"type,omitempty"`
	// The date the bulk outlier detection ran/snapshot was created
	SnapshotDate *time.Time `json:"snapshotDate,omitempty"`
	// Total number of outliers for the customer making the request
	TotalOutliers *int32 `json:"totalOutliers,omitempty"`
	// Total number of identities for the customer making the request
	TotalIdentities *int32 `json:"totalIdentities,omitempty"`
	TotalIgnored *int32 `json:"totalIgnored,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OutlierSummary OutlierSummary

// NewOutlierSummary instantiates a new OutlierSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutlierSummary() *OutlierSummary {
	this := OutlierSummary{}
	var totalIgnored int32 = 0
	this.TotalIgnored = &totalIgnored
	return &this
}

// NewOutlierSummaryWithDefaults instantiates a new OutlierSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutlierSummaryWithDefaults() *OutlierSummary {
	this := OutlierSummary{}
	var totalIgnored int32 = 0
	this.TotalIgnored = &totalIgnored
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *OutlierSummary) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutlierSummary) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *OutlierSummary) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *OutlierSummary) SetType(v string) {
	o.Type = &v
}

// GetSnapshotDate returns the SnapshotDate field value if set, zero value otherwise.
func (o *OutlierSummary) GetSnapshotDate() time.Time {
	if o == nil || IsNil(o.SnapshotDate) {
		var ret time.Time
		return ret
	}
	return *o.SnapshotDate
}

// GetSnapshotDateOk returns a tuple with the SnapshotDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutlierSummary) GetSnapshotDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.SnapshotDate) {
		return nil, false
	}
	return o.SnapshotDate, true
}

// HasSnapshotDate returns a boolean if a field has been set.
func (o *OutlierSummary) HasSnapshotDate() bool {
	if o != nil && !IsNil(o.SnapshotDate) {
		return true
	}

	return false
}

// SetSnapshotDate gets a reference to the given time.Time and assigns it to the SnapshotDate field.
func (o *OutlierSummary) SetSnapshotDate(v time.Time) {
	o.SnapshotDate = &v
}

// GetTotalOutliers returns the TotalOutliers field value if set, zero value otherwise.
func (o *OutlierSummary) GetTotalOutliers() int32 {
	if o == nil || IsNil(o.TotalOutliers) {
		var ret int32
		return ret
	}
	return *o.TotalOutliers
}

// GetTotalOutliersOk returns a tuple with the TotalOutliers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutlierSummary) GetTotalOutliersOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalOutliers) {
		return nil, false
	}
	return o.TotalOutliers, true
}

// HasTotalOutliers returns a boolean if a field has been set.
func (o *OutlierSummary) HasTotalOutliers() bool {
	if o != nil && !IsNil(o.TotalOutliers) {
		return true
	}

	return false
}

// SetTotalOutliers gets a reference to the given int32 and assigns it to the TotalOutliers field.
func (o *OutlierSummary) SetTotalOutliers(v int32) {
	o.TotalOutliers = &v
}

// GetTotalIdentities returns the TotalIdentities field value if set, zero value otherwise.
func (o *OutlierSummary) GetTotalIdentities() int32 {
	if o == nil || IsNil(o.TotalIdentities) {
		var ret int32
		return ret
	}
	return *o.TotalIdentities
}

// GetTotalIdentitiesOk returns a tuple with the TotalIdentities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutlierSummary) GetTotalIdentitiesOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalIdentities) {
		return nil, false
	}
	return o.TotalIdentities, true
}

// HasTotalIdentities returns a boolean if a field has been set.
func (o *OutlierSummary) HasTotalIdentities() bool {
	if o != nil && !IsNil(o.TotalIdentities) {
		return true
	}

	return false
}

// SetTotalIdentities gets a reference to the given int32 and assigns it to the TotalIdentities field.
func (o *OutlierSummary) SetTotalIdentities(v int32) {
	o.TotalIdentities = &v
}

// GetTotalIgnored returns the TotalIgnored field value if set, zero value otherwise.
func (o *OutlierSummary) GetTotalIgnored() int32 {
	if o == nil || IsNil(o.TotalIgnored) {
		var ret int32
		return ret
	}
	return *o.TotalIgnored
}

// GetTotalIgnoredOk returns a tuple with the TotalIgnored field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutlierSummary) GetTotalIgnoredOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalIgnored) {
		return nil, false
	}
	return o.TotalIgnored, true
}

// HasTotalIgnored returns a boolean if a field has been set.
func (o *OutlierSummary) HasTotalIgnored() bool {
	if o != nil && !IsNil(o.TotalIgnored) {
		return true
	}

	return false
}

// SetTotalIgnored gets a reference to the given int32 and assigns it to the TotalIgnored field.
func (o *OutlierSummary) SetTotalIgnored(v int32) {
	o.TotalIgnored = &v
}

func (o OutlierSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OutlierSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.SnapshotDate) {
		toSerialize["snapshotDate"] = o.SnapshotDate
	}
	if !IsNil(o.TotalOutliers) {
		toSerialize["totalOutliers"] = o.TotalOutliers
	}
	if !IsNil(o.TotalIdentities) {
		toSerialize["totalIdentities"] = o.TotalIdentities
	}
	if !IsNil(o.TotalIgnored) {
		toSerialize["totalIgnored"] = o.TotalIgnored
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OutlierSummary) UnmarshalJSON(data []byte) (err error) {
	varOutlierSummary := _OutlierSummary{}

	err = json.Unmarshal(data, &varOutlierSummary)

	if err != nil {
		return err
	}

	*o = OutlierSummary(varOutlierSummary)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "snapshotDate")
		delete(additionalProperties, "totalOutliers")
		delete(additionalProperties, "totalIdentities")
		delete(additionalProperties, "totalIgnored")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOutlierSummary struct {
	value *OutlierSummary
	isSet bool
}

func (v NullableOutlierSummary) Get() *OutlierSummary {
	return v.value
}

func (v *NullableOutlierSummary) Set(val *OutlierSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableOutlierSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableOutlierSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutlierSummary(val *OutlierSummary) *NullableOutlierSummary {
	return &NullableOutlierSummary{value: val, isSet: true}
}

func (v NullableOutlierSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutlierSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


