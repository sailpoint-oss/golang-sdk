/*
Identity Security Cloud V2024 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2024
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2024

import (
	"encoding/json"
	"fmt"
)

// checks if the SpDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpDetails{}

// SpDetails struct for SpDetails
type SpDetails struct {
	// Federation protocol role
	Role *string `json:"role,omitempty"`
	// An entity ID is a globally unique name for a SAML entity, either an Identity Provider (IDP) or a Service Provider (SP).
	EntityId *string `json:"entityId,omitempty"`
	// Unique alias used to identify the selected local service provider based on used URL. Used with SP configurations.
	Alias *string `json:"alias,omitempty"`
	// The allowed callback URL where users will be redirected to after authentication. Used with SP configurations.
	CallbackUrl string `json:"callbackUrl"`
	// The legacy ACS URL used for SAML authentication. Used with SP configurations.
	LegacyAcsUrl *string `json:"legacyAcsUrl,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SpDetails SpDetails

// NewSpDetails instantiates a new SpDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpDetails(callbackUrl string) *SpDetails {
	this := SpDetails{}
	this.CallbackUrl = callbackUrl
	return &this
}

// NewSpDetailsWithDefaults instantiates a new SpDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpDetailsWithDefaults() *SpDetails {
	this := SpDetails{}
	return &this
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *SpDetails) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpDetails) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *SpDetails) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *SpDetails) SetRole(v string) {
	o.Role = &v
}

// GetEntityId returns the EntityId field value if set, zero value otherwise.
func (o *SpDetails) GetEntityId() string {
	if o == nil || IsNil(o.EntityId) {
		var ret string
		return ret
	}
	return *o.EntityId
}

// GetEntityIdOk returns a tuple with the EntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpDetails) GetEntityIdOk() (*string, bool) {
	if o == nil || IsNil(o.EntityId) {
		return nil, false
	}
	return o.EntityId, true
}

// HasEntityId returns a boolean if a field has been set.
func (o *SpDetails) HasEntityId() bool {
	if o != nil && !IsNil(o.EntityId) {
		return true
	}

	return false
}

// SetEntityId gets a reference to the given string and assigns it to the EntityId field.
func (o *SpDetails) SetEntityId(v string) {
	o.EntityId = &v
}

// GetAlias returns the Alias field value if set, zero value otherwise.
func (o *SpDetails) GetAlias() string {
	if o == nil || IsNil(o.Alias) {
		var ret string
		return ret
	}
	return *o.Alias
}

// GetAliasOk returns a tuple with the Alias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpDetails) GetAliasOk() (*string, bool) {
	if o == nil || IsNil(o.Alias) {
		return nil, false
	}
	return o.Alias, true
}

// HasAlias returns a boolean if a field has been set.
func (o *SpDetails) HasAlias() bool {
	if o != nil && !IsNil(o.Alias) {
		return true
	}

	return false
}

// SetAlias gets a reference to the given string and assigns it to the Alias field.
func (o *SpDetails) SetAlias(v string) {
	o.Alias = &v
}

// GetCallbackUrl returns the CallbackUrl field value
func (o *SpDetails) GetCallbackUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CallbackUrl
}

// GetCallbackUrlOk returns a tuple with the CallbackUrl field value
// and a boolean to check if the value has been set.
func (o *SpDetails) GetCallbackUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CallbackUrl, true
}

// SetCallbackUrl sets field value
func (o *SpDetails) SetCallbackUrl(v string) {
	o.CallbackUrl = v
}

// GetLegacyAcsUrl returns the LegacyAcsUrl field value if set, zero value otherwise.
func (o *SpDetails) GetLegacyAcsUrl() string {
	if o == nil || IsNil(o.LegacyAcsUrl) {
		var ret string
		return ret
	}
	return *o.LegacyAcsUrl
}

// GetLegacyAcsUrlOk returns a tuple with the LegacyAcsUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpDetails) GetLegacyAcsUrlOk() (*string, bool) {
	if o == nil || IsNil(o.LegacyAcsUrl) {
		return nil, false
	}
	return o.LegacyAcsUrl, true
}

// HasLegacyAcsUrl returns a boolean if a field has been set.
func (o *SpDetails) HasLegacyAcsUrl() bool {
	if o != nil && !IsNil(o.LegacyAcsUrl) {
		return true
	}

	return false
}

// SetLegacyAcsUrl gets a reference to the given string and assigns it to the LegacyAcsUrl field.
func (o *SpDetails) SetLegacyAcsUrl(v string) {
	o.LegacyAcsUrl = &v
}

func (o SpDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.EntityId) {
		toSerialize["entityId"] = o.EntityId
	}
	if !IsNil(o.Alias) {
		toSerialize["alias"] = o.Alias
	}
	toSerialize["callbackUrl"] = o.CallbackUrl
	if !IsNil(o.LegacyAcsUrl) {
		toSerialize["legacyAcsUrl"] = o.LegacyAcsUrl
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SpDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"callbackUrl",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSpDetails := _SpDetails{}

	err = json.Unmarshal(data, &varSpDetails)

	if err != nil {
		return err
	}

	*o = SpDetails(varSpDetails)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "role")
		delete(additionalProperties, "entityId")
		delete(additionalProperties, "alias")
		delete(additionalProperties, "callbackUrl")
		delete(additionalProperties, "legacyAcsUrl")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSpDetails struct {
	value *SpDetails
	isSet bool
}

func (v NullableSpDetails) Get() *SpDetails {
	return v.value
}

func (v *NullableSpDetails) Set(val *SpDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableSpDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableSpDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpDetails(val *SpDetails) *NullableSpDetails {
	return &NullableSpDetails{value: val, isSet: true}
}

func (v NullableSpDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


