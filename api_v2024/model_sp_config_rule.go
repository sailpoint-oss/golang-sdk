/*
Identity Security Cloud V2024 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2024
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2024

import (
	"encoding/json"
)

// checks if the SpConfigRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpConfigRule{}

// SpConfigRule Format of Config Hub object rules.
type SpConfigRule struct {
	// JSONPath expression denoting the path within the object where a value substitution should be applied.
	Path *string `json:"path,omitempty"`
	Value NullableSpConfigRuleValue `json:"value,omitempty"`
	// Draft modes the rule will apply to.
	Modes []string `json:"modes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SpConfigRule SpConfigRule

// NewSpConfigRule instantiates a new SpConfigRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpConfigRule() *SpConfigRule {
	this := SpConfigRule{}
	return &this
}

// NewSpConfigRuleWithDefaults instantiates a new SpConfigRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpConfigRuleWithDefaults() *SpConfigRule {
	this := SpConfigRule{}
	return &this
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *SpConfigRule) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpConfigRule) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *SpConfigRule) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *SpConfigRule) SetPath(v string) {
	o.Path = &v
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SpConfigRule) GetValue() SpConfigRuleValue {
	if o == nil || IsNil(o.Value.Get()) {
		var ret SpConfigRuleValue
		return ret
	}
	return *o.Value.Get()
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SpConfigRule) GetValueOk() (*SpConfigRuleValue, bool) {
	if o == nil {
		return nil, false
	}
	return o.Value.Get(), o.Value.IsSet()
}

// HasValue returns a boolean if a field has been set.
func (o *SpConfigRule) HasValue() bool {
	if o != nil && o.Value.IsSet() {
		return true
	}

	return false
}

// SetValue gets a reference to the given NullableSpConfigRuleValue and assigns it to the Value field.
func (o *SpConfigRule) SetValue(v SpConfigRuleValue) {
	o.Value.Set(&v)
}
// SetValueNil sets the value for Value to be an explicit nil
func (o *SpConfigRule) SetValueNil() {
	o.Value.Set(nil)
}

// UnsetValue ensures that no value is present for Value, not even an explicit nil
func (o *SpConfigRule) UnsetValue() {
	o.Value.Unset()
}

// GetModes returns the Modes field value if set, zero value otherwise.
func (o *SpConfigRule) GetModes() []string {
	if o == nil || IsNil(o.Modes) {
		var ret []string
		return ret
	}
	return o.Modes
}

// GetModesOk returns a tuple with the Modes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpConfigRule) GetModesOk() ([]string, bool) {
	if o == nil || IsNil(o.Modes) {
		return nil, false
	}
	return o.Modes, true
}

// HasModes returns a boolean if a field has been set.
func (o *SpConfigRule) HasModes() bool {
	if o != nil && !IsNil(o.Modes) {
		return true
	}

	return false
}

// SetModes gets a reference to the given []string and assigns it to the Modes field.
func (o *SpConfigRule) SetModes(v []string) {
	o.Modes = v
}

func (o SpConfigRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpConfigRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if o.Value.IsSet() {
		toSerialize["value"] = o.Value.Get()
	}
	if !IsNil(o.Modes) {
		toSerialize["modes"] = o.Modes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SpConfigRule) UnmarshalJSON(data []byte) (err error) {
	varSpConfigRule := _SpConfigRule{}

	err = json.Unmarshal(data, &varSpConfigRule)

	if err != nil {
		return err
	}

	*o = SpConfigRule(varSpConfigRule)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "path")
		delete(additionalProperties, "value")
		delete(additionalProperties, "modes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSpConfigRule struct {
	value *SpConfigRule
	isSet bool
}

func (v NullableSpConfigRule) Get() *SpConfigRule {
	return v.value
}

func (v *NullableSpConfigRule) Set(val *SpConfigRule) {
	v.value = val
	v.isSet = true
}

func (v NullableSpConfigRule) IsSet() bool {
	return v.isSet
}

func (v *NullableSpConfigRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpConfigRule(val *SpConfigRule) *NullableSpConfigRule {
	return &NullableSpConfigRule{value: val, isSet: true}
}

func (v NullableSpConfigRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpConfigRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


