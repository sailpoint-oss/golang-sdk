/*
Identity Security Cloud V2024 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2024
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2024

import (
	"encoding/json"
)

// checks if the SearchCriteriaTextQuery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchCriteriaTextQuery{}

// SearchCriteriaTextQuery struct for SearchCriteriaTextQuery
type SearchCriteriaTextQuery struct {
	// Terms to search for.
	Terms []string `json:"terms,omitempty"`
	// Fields to search within.
	Fields []string `json:"fields,omitempty"`
	// Whether to match any of the terms.
	MatchAny *bool `json:"matchAny,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SearchCriteriaTextQuery SearchCriteriaTextQuery

// NewSearchCriteriaTextQuery instantiates a new SearchCriteriaTextQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchCriteriaTextQuery() *SearchCriteriaTextQuery {
	this := SearchCriteriaTextQuery{}
	var matchAny bool = false
	this.MatchAny = &matchAny
	return &this
}

// NewSearchCriteriaTextQueryWithDefaults instantiates a new SearchCriteriaTextQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchCriteriaTextQueryWithDefaults() *SearchCriteriaTextQuery {
	this := SearchCriteriaTextQuery{}
	var matchAny bool = false
	this.MatchAny = &matchAny
	return &this
}

// GetTerms returns the Terms field value if set, zero value otherwise.
func (o *SearchCriteriaTextQuery) GetTerms() []string {
	if o == nil || IsNil(o.Terms) {
		var ret []string
		return ret
	}
	return o.Terms
}

// GetTermsOk returns a tuple with the Terms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCriteriaTextQuery) GetTermsOk() ([]string, bool) {
	if o == nil || IsNil(o.Terms) {
		return nil, false
	}
	return o.Terms, true
}

// HasTerms returns a boolean if a field has been set.
func (o *SearchCriteriaTextQuery) HasTerms() bool {
	if o != nil && !IsNil(o.Terms) {
		return true
	}

	return false
}

// SetTerms gets a reference to the given []string and assigns it to the Terms field.
func (o *SearchCriteriaTextQuery) SetTerms(v []string) {
	o.Terms = v
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *SearchCriteriaTextQuery) GetFields() []string {
	if o == nil || IsNil(o.Fields) {
		var ret []string
		return ret
	}
	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCriteriaTextQuery) GetFieldsOk() ([]string, bool) {
	if o == nil || IsNil(o.Fields) {
		return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *SearchCriteriaTextQuery) HasFields() bool {
	if o != nil && !IsNil(o.Fields) {
		return true
	}

	return false
}

// SetFields gets a reference to the given []string and assigns it to the Fields field.
func (o *SearchCriteriaTextQuery) SetFields(v []string) {
	o.Fields = v
}

// GetMatchAny returns the MatchAny field value if set, zero value otherwise.
func (o *SearchCriteriaTextQuery) GetMatchAny() bool {
	if o == nil || IsNil(o.MatchAny) {
		var ret bool
		return ret
	}
	return *o.MatchAny
}

// GetMatchAnyOk returns a tuple with the MatchAny field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCriteriaTextQuery) GetMatchAnyOk() (*bool, bool) {
	if o == nil || IsNil(o.MatchAny) {
		return nil, false
	}
	return o.MatchAny, true
}

// HasMatchAny returns a boolean if a field has been set.
func (o *SearchCriteriaTextQuery) HasMatchAny() bool {
	if o != nil && !IsNil(o.MatchAny) {
		return true
	}

	return false
}

// SetMatchAny gets a reference to the given bool and assigns it to the MatchAny field.
func (o *SearchCriteriaTextQuery) SetMatchAny(v bool) {
	o.MatchAny = &v
}

func (o SearchCriteriaTextQuery) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchCriteriaTextQuery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Terms) {
		toSerialize["terms"] = o.Terms
	}
	if !IsNil(o.Fields) {
		toSerialize["fields"] = o.Fields
	}
	if !IsNil(o.MatchAny) {
		toSerialize["matchAny"] = o.MatchAny
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SearchCriteriaTextQuery) UnmarshalJSON(data []byte) (err error) {
	varSearchCriteriaTextQuery := _SearchCriteriaTextQuery{}

	err = json.Unmarshal(data, &varSearchCriteriaTextQuery)

	if err != nil {
		return err
	}

	*o = SearchCriteriaTextQuery(varSearchCriteriaTextQuery)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "terms")
		delete(additionalProperties, "fields")
		delete(additionalProperties, "matchAny")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSearchCriteriaTextQuery struct {
	value *SearchCriteriaTextQuery
	isSet bool
}

func (v NullableSearchCriteriaTextQuery) Get() *SearchCriteriaTextQuery {
	return v.value
}

func (v *NullableSearchCriteriaTextQuery) Set(val *SearchCriteriaTextQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchCriteriaTextQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchCriteriaTextQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchCriteriaTextQuery(val *SearchCriteriaTextQuery) *NullableSearchCriteriaTextQuery {
	return &NullableSearchCriteriaTextQuery{value: val, isSet: true}
}

func (v NullableSearchCriteriaTextQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchCriteriaTextQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


