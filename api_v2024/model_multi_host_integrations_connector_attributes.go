/*
Identity Security Cloud V2024 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2024
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2024

import (
	"encoding/json"
)

// checks if the MultiHostIntegrationsConnectorAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MultiHostIntegrationsConnectorAttributes{}

// MultiHostIntegrationsConnectorAttributes Connector specific configuration. This configuration will differ for Multi-Host Integration type.
type MultiHostIntegrationsConnectorAttributes struct {
	// Maximum sources allowed count of a Multi-Host Integration
	MaxAllowedSources *int32 `json:"maxAllowedSources,omitempty"`
	// Last upload sources count of a Multi-Host Integration
	LastSourceUploadCount *int32 `json:"lastSourceUploadCount,omitempty"`
	ConnectorFileUploadHistory *MultiHostIntegrationsConnectorAttributesConnectorFileUploadHistory `json:"connectorFileUploadHistory,omitempty"`
	// Multi-Host integration status.
	MultihostStatus *string `json:"multihost_status,omitempty"`
	// Show account schema
	ShowAccountSchema *bool `json:"showAccountSchema,omitempty"`
	// Show entitlement schema
	ShowEntitlementSchema *bool `json:"showEntitlementSchema,omitempty"`
	MultiHostAttributes *MultiHostIntegrationsConnectorAttributesMultiHostAttributes `json:"multiHostAttributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MultiHostIntegrationsConnectorAttributes MultiHostIntegrationsConnectorAttributes

// NewMultiHostIntegrationsConnectorAttributes instantiates a new MultiHostIntegrationsConnectorAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultiHostIntegrationsConnectorAttributes() *MultiHostIntegrationsConnectorAttributes {
	this := MultiHostIntegrationsConnectorAttributes{}
	var showAccountSchema bool = true
	this.ShowAccountSchema = &showAccountSchema
	var showEntitlementSchema bool = true
	this.ShowEntitlementSchema = &showEntitlementSchema
	return &this
}

// NewMultiHostIntegrationsConnectorAttributesWithDefaults instantiates a new MultiHostIntegrationsConnectorAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultiHostIntegrationsConnectorAttributesWithDefaults() *MultiHostIntegrationsConnectorAttributes {
	this := MultiHostIntegrationsConnectorAttributes{}
	var showAccountSchema bool = true
	this.ShowAccountSchema = &showAccountSchema
	var showEntitlementSchema bool = true
	this.ShowEntitlementSchema = &showEntitlementSchema
	return &this
}

// GetMaxAllowedSources returns the MaxAllowedSources field value if set, zero value otherwise.
func (o *MultiHostIntegrationsConnectorAttributes) GetMaxAllowedSources() int32 {
	if o == nil || IsNil(o.MaxAllowedSources) {
		var ret int32
		return ret
	}
	return *o.MaxAllowedSources
}

// GetMaxAllowedSourcesOk returns a tuple with the MaxAllowedSources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrationsConnectorAttributes) GetMaxAllowedSourcesOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxAllowedSources) {
		return nil, false
	}
	return o.MaxAllowedSources, true
}

// HasMaxAllowedSources returns a boolean if a field has been set.
func (o *MultiHostIntegrationsConnectorAttributes) HasMaxAllowedSources() bool {
	if o != nil && !IsNil(o.MaxAllowedSources) {
		return true
	}

	return false
}

// SetMaxAllowedSources gets a reference to the given int32 and assigns it to the MaxAllowedSources field.
func (o *MultiHostIntegrationsConnectorAttributes) SetMaxAllowedSources(v int32) {
	o.MaxAllowedSources = &v
}

// GetLastSourceUploadCount returns the LastSourceUploadCount field value if set, zero value otherwise.
func (o *MultiHostIntegrationsConnectorAttributes) GetLastSourceUploadCount() int32 {
	if o == nil || IsNil(o.LastSourceUploadCount) {
		var ret int32
		return ret
	}
	return *o.LastSourceUploadCount
}

// GetLastSourceUploadCountOk returns a tuple with the LastSourceUploadCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrationsConnectorAttributes) GetLastSourceUploadCountOk() (*int32, bool) {
	if o == nil || IsNil(o.LastSourceUploadCount) {
		return nil, false
	}
	return o.LastSourceUploadCount, true
}

// HasLastSourceUploadCount returns a boolean if a field has been set.
func (o *MultiHostIntegrationsConnectorAttributes) HasLastSourceUploadCount() bool {
	if o != nil && !IsNil(o.LastSourceUploadCount) {
		return true
	}

	return false
}

// SetLastSourceUploadCount gets a reference to the given int32 and assigns it to the LastSourceUploadCount field.
func (o *MultiHostIntegrationsConnectorAttributes) SetLastSourceUploadCount(v int32) {
	o.LastSourceUploadCount = &v
}

// GetConnectorFileUploadHistory returns the ConnectorFileUploadHistory field value if set, zero value otherwise.
func (o *MultiHostIntegrationsConnectorAttributes) GetConnectorFileUploadHistory() MultiHostIntegrationsConnectorAttributesConnectorFileUploadHistory {
	if o == nil || IsNil(o.ConnectorFileUploadHistory) {
		var ret MultiHostIntegrationsConnectorAttributesConnectorFileUploadHistory
		return ret
	}
	return *o.ConnectorFileUploadHistory
}

// GetConnectorFileUploadHistoryOk returns a tuple with the ConnectorFileUploadHistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrationsConnectorAttributes) GetConnectorFileUploadHistoryOk() (*MultiHostIntegrationsConnectorAttributesConnectorFileUploadHistory, bool) {
	if o == nil || IsNil(o.ConnectorFileUploadHistory) {
		return nil, false
	}
	return o.ConnectorFileUploadHistory, true
}

// HasConnectorFileUploadHistory returns a boolean if a field has been set.
func (o *MultiHostIntegrationsConnectorAttributes) HasConnectorFileUploadHistory() bool {
	if o != nil && !IsNil(o.ConnectorFileUploadHistory) {
		return true
	}

	return false
}

// SetConnectorFileUploadHistory gets a reference to the given MultiHostIntegrationsConnectorAttributesConnectorFileUploadHistory and assigns it to the ConnectorFileUploadHistory field.
func (o *MultiHostIntegrationsConnectorAttributes) SetConnectorFileUploadHistory(v MultiHostIntegrationsConnectorAttributesConnectorFileUploadHistory) {
	o.ConnectorFileUploadHistory = &v
}

// GetMultihostStatus returns the MultihostStatus field value if set, zero value otherwise.
func (o *MultiHostIntegrationsConnectorAttributes) GetMultihostStatus() string {
	if o == nil || IsNil(o.MultihostStatus) {
		var ret string
		return ret
	}
	return *o.MultihostStatus
}

// GetMultihostStatusOk returns a tuple with the MultihostStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrationsConnectorAttributes) GetMultihostStatusOk() (*string, bool) {
	if o == nil || IsNil(o.MultihostStatus) {
		return nil, false
	}
	return o.MultihostStatus, true
}

// HasMultihostStatus returns a boolean if a field has been set.
func (o *MultiHostIntegrationsConnectorAttributes) HasMultihostStatus() bool {
	if o != nil && !IsNil(o.MultihostStatus) {
		return true
	}

	return false
}

// SetMultihostStatus gets a reference to the given string and assigns it to the MultihostStatus field.
func (o *MultiHostIntegrationsConnectorAttributes) SetMultihostStatus(v string) {
	o.MultihostStatus = &v
}

// GetShowAccountSchema returns the ShowAccountSchema field value if set, zero value otherwise.
func (o *MultiHostIntegrationsConnectorAttributes) GetShowAccountSchema() bool {
	if o == nil || IsNil(o.ShowAccountSchema) {
		var ret bool
		return ret
	}
	return *o.ShowAccountSchema
}

// GetShowAccountSchemaOk returns a tuple with the ShowAccountSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrationsConnectorAttributes) GetShowAccountSchemaOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowAccountSchema) {
		return nil, false
	}
	return o.ShowAccountSchema, true
}

// HasShowAccountSchema returns a boolean if a field has been set.
func (o *MultiHostIntegrationsConnectorAttributes) HasShowAccountSchema() bool {
	if o != nil && !IsNil(o.ShowAccountSchema) {
		return true
	}

	return false
}

// SetShowAccountSchema gets a reference to the given bool and assigns it to the ShowAccountSchema field.
func (o *MultiHostIntegrationsConnectorAttributes) SetShowAccountSchema(v bool) {
	o.ShowAccountSchema = &v
}

// GetShowEntitlementSchema returns the ShowEntitlementSchema field value if set, zero value otherwise.
func (o *MultiHostIntegrationsConnectorAttributes) GetShowEntitlementSchema() bool {
	if o == nil || IsNil(o.ShowEntitlementSchema) {
		var ret bool
		return ret
	}
	return *o.ShowEntitlementSchema
}

// GetShowEntitlementSchemaOk returns a tuple with the ShowEntitlementSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrationsConnectorAttributes) GetShowEntitlementSchemaOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowEntitlementSchema) {
		return nil, false
	}
	return o.ShowEntitlementSchema, true
}

// HasShowEntitlementSchema returns a boolean if a field has been set.
func (o *MultiHostIntegrationsConnectorAttributes) HasShowEntitlementSchema() bool {
	if o != nil && !IsNil(o.ShowEntitlementSchema) {
		return true
	}

	return false
}

// SetShowEntitlementSchema gets a reference to the given bool and assigns it to the ShowEntitlementSchema field.
func (o *MultiHostIntegrationsConnectorAttributes) SetShowEntitlementSchema(v bool) {
	o.ShowEntitlementSchema = &v
}

// GetMultiHostAttributes returns the MultiHostAttributes field value if set, zero value otherwise.
func (o *MultiHostIntegrationsConnectorAttributes) GetMultiHostAttributes() MultiHostIntegrationsConnectorAttributesMultiHostAttributes {
	if o == nil || IsNil(o.MultiHostAttributes) {
		var ret MultiHostIntegrationsConnectorAttributesMultiHostAttributes
		return ret
	}
	return *o.MultiHostAttributes
}

// GetMultiHostAttributesOk returns a tuple with the MultiHostAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrationsConnectorAttributes) GetMultiHostAttributesOk() (*MultiHostIntegrationsConnectorAttributesMultiHostAttributes, bool) {
	if o == nil || IsNil(o.MultiHostAttributes) {
		return nil, false
	}
	return o.MultiHostAttributes, true
}

// HasMultiHostAttributes returns a boolean if a field has been set.
func (o *MultiHostIntegrationsConnectorAttributes) HasMultiHostAttributes() bool {
	if o != nil && !IsNil(o.MultiHostAttributes) {
		return true
	}

	return false
}

// SetMultiHostAttributes gets a reference to the given MultiHostIntegrationsConnectorAttributesMultiHostAttributes and assigns it to the MultiHostAttributes field.
func (o *MultiHostIntegrationsConnectorAttributes) SetMultiHostAttributes(v MultiHostIntegrationsConnectorAttributesMultiHostAttributes) {
	o.MultiHostAttributes = &v
}

func (o MultiHostIntegrationsConnectorAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MultiHostIntegrationsConnectorAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MaxAllowedSources) {
		toSerialize["maxAllowedSources"] = o.MaxAllowedSources
	}
	if !IsNil(o.LastSourceUploadCount) {
		toSerialize["lastSourceUploadCount"] = o.LastSourceUploadCount
	}
	if !IsNil(o.ConnectorFileUploadHistory) {
		toSerialize["connectorFileUploadHistory"] = o.ConnectorFileUploadHistory
	}
	if !IsNil(o.MultihostStatus) {
		toSerialize["multihost_status"] = o.MultihostStatus
	}
	if !IsNil(o.ShowAccountSchema) {
		toSerialize["showAccountSchema"] = o.ShowAccountSchema
	}
	if !IsNil(o.ShowEntitlementSchema) {
		toSerialize["showEntitlementSchema"] = o.ShowEntitlementSchema
	}
	if !IsNil(o.MultiHostAttributes) {
		toSerialize["multiHostAttributes"] = o.MultiHostAttributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MultiHostIntegrationsConnectorAttributes) UnmarshalJSON(data []byte) (err error) {
	varMultiHostIntegrationsConnectorAttributes := _MultiHostIntegrationsConnectorAttributes{}

	err = json.Unmarshal(data, &varMultiHostIntegrationsConnectorAttributes)

	if err != nil {
		return err
	}

	*o = MultiHostIntegrationsConnectorAttributes(varMultiHostIntegrationsConnectorAttributes)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "maxAllowedSources")
		delete(additionalProperties, "lastSourceUploadCount")
		delete(additionalProperties, "connectorFileUploadHistory")
		delete(additionalProperties, "multihost_status")
		delete(additionalProperties, "showAccountSchema")
		delete(additionalProperties, "showEntitlementSchema")
		delete(additionalProperties, "multiHostAttributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMultiHostIntegrationsConnectorAttributes struct {
	value *MultiHostIntegrationsConnectorAttributes
	isSet bool
}

func (v NullableMultiHostIntegrationsConnectorAttributes) Get() *MultiHostIntegrationsConnectorAttributes {
	return v.value
}

func (v *NullableMultiHostIntegrationsConnectorAttributes) Set(val *MultiHostIntegrationsConnectorAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableMultiHostIntegrationsConnectorAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableMultiHostIntegrationsConnectorAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultiHostIntegrationsConnectorAttributes(val *MultiHostIntegrationsConnectorAttributes) *NullableMultiHostIntegrationsConnectorAttributes {
	return &NullableMultiHostIntegrationsConnectorAttributes{value: val, isSet: true}
}

func (v NullableMultiHostIntegrationsConnectorAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultiHostIntegrationsConnectorAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


