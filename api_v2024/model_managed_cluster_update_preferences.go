/*
Identity Security Cloud V2024 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2024
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2024

import (
	"encoding/json"
)

// checks if the ManagedClusterUpdatePreferences type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManagedClusterUpdatePreferences{}

// ManagedClusterUpdatePreferences The preference for applying updates for the cluster
type ManagedClusterUpdatePreferences struct {
	// The processGroups for updatePreferences
	ProcessGroups NullableString `json:"processGroups,omitempty"`
	// The current updateState for the cluster
	UpdateState NullableString `json:"updateState,omitempty"`
	// The mail id to which new releases will be notified
	NotificationEmail NullableString `json:"notificationEmail,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ManagedClusterUpdatePreferences ManagedClusterUpdatePreferences

// NewManagedClusterUpdatePreferences instantiates a new ManagedClusterUpdatePreferences object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagedClusterUpdatePreferences() *ManagedClusterUpdatePreferences {
	this := ManagedClusterUpdatePreferences{}
	return &this
}

// NewManagedClusterUpdatePreferencesWithDefaults instantiates a new ManagedClusterUpdatePreferences object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagedClusterUpdatePreferencesWithDefaults() *ManagedClusterUpdatePreferences {
	this := ManagedClusterUpdatePreferences{}
	return &this
}

// GetProcessGroups returns the ProcessGroups field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManagedClusterUpdatePreferences) GetProcessGroups() string {
	if o == nil || IsNil(o.ProcessGroups.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessGroups.Get()
}

// GetProcessGroupsOk returns a tuple with the ProcessGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagedClusterUpdatePreferences) GetProcessGroupsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessGroups.Get(), o.ProcessGroups.IsSet()
}

// HasProcessGroups returns a boolean if a field has been set.
func (o *ManagedClusterUpdatePreferences) HasProcessGroups() bool {
	if o != nil && o.ProcessGroups.IsSet() {
		return true
	}

	return false
}

// SetProcessGroups gets a reference to the given NullableString and assigns it to the ProcessGroups field.
func (o *ManagedClusterUpdatePreferences) SetProcessGroups(v string) {
	o.ProcessGroups.Set(&v)
}
// SetProcessGroupsNil sets the value for ProcessGroups to be an explicit nil
func (o *ManagedClusterUpdatePreferences) SetProcessGroupsNil() {
	o.ProcessGroups.Set(nil)
}

// UnsetProcessGroups ensures that no value is present for ProcessGroups, not even an explicit nil
func (o *ManagedClusterUpdatePreferences) UnsetProcessGroups() {
	o.ProcessGroups.Unset()
}

// GetUpdateState returns the UpdateState field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManagedClusterUpdatePreferences) GetUpdateState() string {
	if o == nil || IsNil(o.UpdateState.Get()) {
		var ret string
		return ret
	}
	return *o.UpdateState.Get()
}

// GetUpdateStateOk returns a tuple with the UpdateState field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagedClusterUpdatePreferences) GetUpdateStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdateState.Get(), o.UpdateState.IsSet()
}

// HasUpdateState returns a boolean if a field has been set.
func (o *ManagedClusterUpdatePreferences) HasUpdateState() bool {
	if o != nil && o.UpdateState.IsSet() {
		return true
	}

	return false
}

// SetUpdateState gets a reference to the given NullableString and assigns it to the UpdateState field.
func (o *ManagedClusterUpdatePreferences) SetUpdateState(v string) {
	o.UpdateState.Set(&v)
}
// SetUpdateStateNil sets the value for UpdateState to be an explicit nil
func (o *ManagedClusterUpdatePreferences) SetUpdateStateNil() {
	o.UpdateState.Set(nil)
}

// UnsetUpdateState ensures that no value is present for UpdateState, not even an explicit nil
func (o *ManagedClusterUpdatePreferences) UnsetUpdateState() {
	o.UpdateState.Unset()
}

// GetNotificationEmail returns the NotificationEmail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManagedClusterUpdatePreferences) GetNotificationEmail() string {
	if o == nil || IsNil(o.NotificationEmail.Get()) {
		var ret string
		return ret
	}
	return *o.NotificationEmail.Get()
}

// GetNotificationEmailOk returns a tuple with the NotificationEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagedClusterUpdatePreferences) GetNotificationEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NotificationEmail.Get(), o.NotificationEmail.IsSet()
}

// HasNotificationEmail returns a boolean if a field has been set.
func (o *ManagedClusterUpdatePreferences) HasNotificationEmail() bool {
	if o != nil && o.NotificationEmail.IsSet() {
		return true
	}

	return false
}

// SetNotificationEmail gets a reference to the given NullableString and assigns it to the NotificationEmail field.
func (o *ManagedClusterUpdatePreferences) SetNotificationEmail(v string) {
	o.NotificationEmail.Set(&v)
}
// SetNotificationEmailNil sets the value for NotificationEmail to be an explicit nil
func (o *ManagedClusterUpdatePreferences) SetNotificationEmailNil() {
	o.NotificationEmail.Set(nil)
}

// UnsetNotificationEmail ensures that no value is present for NotificationEmail, not even an explicit nil
func (o *ManagedClusterUpdatePreferences) UnsetNotificationEmail() {
	o.NotificationEmail.Unset()
}

func (o ManagedClusterUpdatePreferences) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManagedClusterUpdatePreferences) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ProcessGroups.IsSet() {
		toSerialize["processGroups"] = o.ProcessGroups.Get()
	}
	if o.UpdateState.IsSet() {
		toSerialize["updateState"] = o.UpdateState.Get()
	}
	if o.NotificationEmail.IsSet() {
		toSerialize["notificationEmail"] = o.NotificationEmail.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ManagedClusterUpdatePreferences) UnmarshalJSON(data []byte) (err error) {
	varManagedClusterUpdatePreferences := _ManagedClusterUpdatePreferences{}

	err = json.Unmarshal(data, &varManagedClusterUpdatePreferences)

	if err != nil {
		return err
	}

	*o = ManagedClusterUpdatePreferences(varManagedClusterUpdatePreferences)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "processGroups")
		delete(additionalProperties, "updateState")
		delete(additionalProperties, "notificationEmail")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableManagedClusterUpdatePreferences struct {
	value *ManagedClusterUpdatePreferences
	isSet bool
}

func (v NullableManagedClusterUpdatePreferences) Get() *ManagedClusterUpdatePreferences {
	return v.value
}

func (v *NullableManagedClusterUpdatePreferences) Set(val *ManagedClusterUpdatePreferences) {
	v.value = val
	v.isSet = true
}

func (v NullableManagedClusterUpdatePreferences) IsSet() bool {
	return v.isSet
}

func (v *NullableManagedClusterUpdatePreferences) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagedClusterUpdatePreferences(val *ManagedClusterUpdatePreferences) *NullableManagedClusterUpdatePreferences {
	return &NullableManagedClusterUpdatePreferences{value: val, isSet: true}
}

func (v NullableManagedClusterUpdatePreferences) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagedClusterUpdatePreferences) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


