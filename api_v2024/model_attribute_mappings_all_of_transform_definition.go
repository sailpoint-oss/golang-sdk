/*
Identity Security Cloud V2024 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2024
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2024

import (
	"encoding/json"
)

// checks if the AttributeMappingsAllOfTransformDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AttributeMappingsAllOfTransformDefinition{}

// AttributeMappingsAllOfTransformDefinition struct for AttributeMappingsAllOfTransformDefinition
type AttributeMappingsAllOfTransformDefinition struct {
	// The type of transform
	Type *string `json:"type,omitempty"`
	Attributes *AttributeMappingsAllOfTransformDefinitionAttributes `json:"attributes,omitempty"`
	// Transform Operation
	Id *string `json:"id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AttributeMappingsAllOfTransformDefinition AttributeMappingsAllOfTransformDefinition

// NewAttributeMappingsAllOfTransformDefinition instantiates a new AttributeMappingsAllOfTransformDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttributeMappingsAllOfTransformDefinition() *AttributeMappingsAllOfTransformDefinition {
	this := AttributeMappingsAllOfTransformDefinition{}
	return &this
}

// NewAttributeMappingsAllOfTransformDefinitionWithDefaults instantiates a new AttributeMappingsAllOfTransformDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttributeMappingsAllOfTransformDefinitionWithDefaults() *AttributeMappingsAllOfTransformDefinition {
	this := AttributeMappingsAllOfTransformDefinition{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AttributeMappingsAllOfTransformDefinition) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeMappingsAllOfTransformDefinition) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AttributeMappingsAllOfTransformDefinition) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AttributeMappingsAllOfTransformDefinition) SetType(v string) {
	o.Type = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *AttributeMappingsAllOfTransformDefinition) GetAttributes() AttributeMappingsAllOfTransformDefinitionAttributes {
	if o == nil || IsNil(o.Attributes) {
		var ret AttributeMappingsAllOfTransformDefinitionAttributes
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeMappingsAllOfTransformDefinition) GetAttributesOk() (*AttributeMappingsAllOfTransformDefinitionAttributes, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *AttributeMappingsAllOfTransformDefinition) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given AttributeMappingsAllOfTransformDefinitionAttributes and assigns it to the Attributes field.
func (o *AttributeMappingsAllOfTransformDefinition) SetAttributes(v AttributeMappingsAllOfTransformDefinitionAttributes) {
	o.Attributes = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AttributeMappingsAllOfTransformDefinition) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeMappingsAllOfTransformDefinition) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AttributeMappingsAllOfTransformDefinition) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AttributeMappingsAllOfTransformDefinition) SetId(v string) {
	o.Id = &v
}

func (o AttributeMappingsAllOfTransformDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AttributeMappingsAllOfTransformDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AttributeMappingsAllOfTransformDefinition) UnmarshalJSON(data []byte) (err error) {
	varAttributeMappingsAllOfTransformDefinition := _AttributeMappingsAllOfTransformDefinition{}

	err = json.Unmarshal(data, &varAttributeMappingsAllOfTransformDefinition)

	if err != nil {
		return err
	}

	*o = AttributeMappingsAllOfTransformDefinition(varAttributeMappingsAllOfTransformDefinition)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "attributes")
		delete(additionalProperties, "id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAttributeMappingsAllOfTransformDefinition struct {
	value *AttributeMappingsAllOfTransformDefinition
	isSet bool
}

func (v NullableAttributeMappingsAllOfTransformDefinition) Get() *AttributeMappingsAllOfTransformDefinition {
	return v.value
}

func (v *NullableAttributeMappingsAllOfTransformDefinition) Set(val *AttributeMappingsAllOfTransformDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableAttributeMappingsAllOfTransformDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableAttributeMappingsAllOfTransformDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttributeMappingsAllOfTransformDefinition(val *AttributeMappingsAllOfTransformDefinition) *NullableAttributeMappingsAllOfTransformDefinition {
	return &NullableAttributeMappingsAllOfTransformDefinition{value: val, isSet: true}
}

func (v NullableAttributeMappingsAllOfTransformDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttributeMappingsAllOfTransformDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


