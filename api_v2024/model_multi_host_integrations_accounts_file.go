/*
Identity Security Cloud V2024 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2024
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2024

import (
	"encoding/json"
	
)

// checks if the MultiHostIntegrationsAccountsFile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MultiHostIntegrationsAccountsFile{}

// MultiHostIntegrationsAccountsFile Reference to accounts file for the source.
type MultiHostIntegrationsAccountsFile struct {
	// Name of the accounts file.
	Name *string `json:"name,omitempty"`
	// The accounts file key.
	Key *string `json:"key,omitempty"`
	// Date-time when the file was uploaded
	UploadTime *SailPointTime `json:"uploadTime,omitempty"`
	// Date-time when the accounts file expired.
	Expiry *SailPointTime `json:"expiry,omitempty"`
	// If this is true, it indicates that the accounts file has expired.
	Expired *bool `json:"expired,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MultiHostIntegrationsAccountsFile MultiHostIntegrationsAccountsFile

// NewMultiHostIntegrationsAccountsFile instantiates a new MultiHostIntegrationsAccountsFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultiHostIntegrationsAccountsFile() *MultiHostIntegrationsAccountsFile {
	this := MultiHostIntegrationsAccountsFile{}
	var expired bool = false
	this.Expired = &expired
	return &this
}

// NewMultiHostIntegrationsAccountsFileWithDefaults instantiates a new MultiHostIntegrationsAccountsFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultiHostIntegrationsAccountsFileWithDefaults() *MultiHostIntegrationsAccountsFile {
	this := MultiHostIntegrationsAccountsFile{}
	var expired bool = false
	this.Expired = &expired
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MultiHostIntegrationsAccountsFile) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrationsAccountsFile) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MultiHostIntegrationsAccountsFile) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MultiHostIntegrationsAccountsFile) SetName(v string) {
	o.Name = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *MultiHostIntegrationsAccountsFile) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrationsAccountsFile) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *MultiHostIntegrationsAccountsFile) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *MultiHostIntegrationsAccountsFile) SetKey(v string) {
	o.Key = &v
}

// GetUploadTime returns the UploadTime field value if set, zero value otherwise.
func (o *MultiHostIntegrationsAccountsFile) GetUploadTime() SailPointTime {
	if o == nil || IsNil(o.UploadTime) {
		var ret SailPointTime
		return ret
	}
	return *o.UploadTime
}

// GetUploadTimeOk returns a tuple with the UploadTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrationsAccountsFile) GetUploadTimeOk() (*SailPointTime, bool) {
	if o == nil || IsNil(o.UploadTime) {
		return nil, false
	}
	return o.UploadTime, true
}

// HasUploadTime returns a boolean if a field has been set.
func (o *MultiHostIntegrationsAccountsFile) HasUploadTime() bool {
	if o != nil && !IsNil(o.UploadTime) {
		return true
	}

	return false
}

// SetUploadTime gets a reference to the given SailPointTime and assigns it to the UploadTime field.
func (o *MultiHostIntegrationsAccountsFile) SetUploadTime(v SailPointTime) {
	o.UploadTime = &v
}

// GetExpiry returns the Expiry field value if set, zero value otherwise.
func (o *MultiHostIntegrationsAccountsFile) GetExpiry() SailPointTime {
	if o == nil || IsNil(o.Expiry) {
		var ret SailPointTime
		return ret
	}
	return *o.Expiry
}

// GetExpiryOk returns a tuple with the Expiry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrationsAccountsFile) GetExpiryOk() (*SailPointTime, bool) {
	if o == nil || IsNil(o.Expiry) {
		return nil, false
	}
	return o.Expiry, true
}

// HasExpiry returns a boolean if a field has been set.
func (o *MultiHostIntegrationsAccountsFile) HasExpiry() bool {
	if o != nil && !IsNil(o.Expiry) {
		return true
	}

	return false
}

// SetExpiry gets a reference to the given SailPointTime and assigns it to the Expiry field.
func (o *MultiHostIntegrationsAccountsFile) SetExpiry(v SailPointTime) {
	o.Expiry = &v
}

// GetExpired returns the Expired field value if set, zero value otherwise.
func (o *MultiHostIntegrationsAccountsFile) GetExpired() bool {
	if o == nil || IsNil(o.Expired) {
		var ret bool
		return ret
	}
	return *o.Expired
}

// GetExpiredOk returns a tuple with the Expired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrationsAccountsFile) GetExpiredOk() (*bool, bool) {
	if o == nil || IsNil(o.Expired) {
		return nil, false
	}
	return o.Expired, true
}

// HasExpired returns a boolean if a field has been set.
func (o *MultiHostIntegrationsAccountsFile) HasExpired() bool {
	if o != nil && !IsNil(o.Expired) {
		return true
	}

	return false
}

// SetExpired gets a reference to the given bool and assigns it to the Expired field.
func (o *MultiHostIntegrationsAccountsFile) SetExpired(v bool) {
	o.Expired = &v
}

func (o MultiHostIntegrationsAccountsFile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MultiHostIntegrationsAccountsFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.UploadTime) {
		toSerialize["uploadTime"] = o.UploadTime
	}
	if !IsNil(o.Expiry) {
		toSerialize["expiry"] = o.Expiry
	}
	if !IsNil(o.Expired) {
		toSerialize["expired"] = o.Expired
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MultiHostIntegrationsAccountsFile) UnmarshalJSON(data []byte) (err error) {
	varMultiHostIntegrationsAccountsFile := _MultiHostIntegrationsAccountsFile{}

	err = json.Unmarshal(data, &varMultiHostIntegrationsAccountsFile)

	if err != nil {
		return err
	}

	*o = MultiHostIntegrationsAccountsFile(varMultiHostIntegrationsAccountsFile)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "key")
		delete(additionalProperties, "uploadTime")
		delete(additionalProperties, "expiry")
		delete(additionalProperties, "expired")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMultiHostIntegrationsAccountsFile struct {
	value *MultiHostIntegrationsAccountsFile
	isSet bool
}

func (v NullableMultiHostIntegrationsAccountsFile) Get() *MultiHostIntegrationsAccountsFile {
	return v.value
}

func (v *NullableMultiHostIntegrationsAccountsFile) Set(val *MultiHostIntegrationsAccountsFile) {
	v.value = val
	v.isSet = true
}

func (v NullableMultiHostIntegrationsAccountsFile) IsSet() bool {
	return v.isSet
}

func (v *NullableMultiHostIntegrationsAccountsFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultiHostIntegrationsAccountsFile(val *MultiHostIntegrationsAccountsFile) *NullableMultiHostIntegrationsAccountsFile {
	return &NullableMultiHostIntegrationsAccountsFile{value: val, isSet: true}
}

func (v NullableMultiHostIntegrationsAccountsFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultiHostIntegrationsAccountsFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


