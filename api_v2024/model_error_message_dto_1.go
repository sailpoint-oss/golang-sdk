/*
Identity Security Cloud V2024 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2024
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2024

import (
	"encoding/json"
)

// checks if the ErrorMessageDto1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorMessageDto1{}

// ErrorMessageDto1 struct for ErrorMessageDto1
type ErrorMessageDto1 struct {
	// The locale for the message text, a BCP 47 language tag.
	Locale NullableString `json:"locale,omitempty"`
	LocaleOrigin NullableLocaleOrigin `json:"localeOrigin,omitempty"`
	// Actual text of the error message in the indicated locale.
	Text *string `json:"text,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ErrorMessageDto1 ErrorMessageDto1

// NewErrorMessageDto1 instantiates a new ErrorMessageDto1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorMessageDto1() *ErrorMessageDto1 {
	this := ErrorMessageDto1{}
	return &this
}

// NewErrorMessageDto1WithDefaults instantiates a new ErrorMessageDto1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorMessageDto1WithDefaults() *ErrorMessageDto1 {
	this := ErrorMessageDto1{}
	return &this
}

// GetLocale returns the Locale field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ErrorMessageDto1) GetLocale() string {
	if o == nil || IsNil(o.Locale.Get()) {
		var ret string
		return ret
	}
	return *o.Locale.Get()
}

// GetLocaleOk returns a tuple with the Locale field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ErrorMessageDto1) GetLocaleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Locale.Get(), o.Locale.IsSet()
}

// HasLocale returns a boolean if a field has been set.
func (o *ErrorMessageDto1) HasLocale() bool {
	if o != nil && o.Locale.IsSet() {
		return true
	}

	return false
}

// SetLocale gets a reference to the given NullableString and assigns it to the Locale field.
func (o *ErrorMessageDto1) SetLocale(v string) {
	o.Locale.Set(&v)
}
// SetLocaleNil sets the value for Locale to be an explicit nil
func (o *ErrorMessageDto1) SetLocaleNil() {
	o.Locale.Set(nil)
}

// UnsetLocale ensures that no value is present for Locale, not even an explicit nil
func (o *ErrorMessageDto1) UnsetLocale() {
	o.Locale.Unset()
}

// GetLocaleOrigin returns the LocaleOrigin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ErrorMessageDto1) GetLocaleOrigin() LocaleOrigin {
	if o == nil || IsNil(o.LocaleOrigin.Get()) {
		var ret LocaleOrigin
		return ret
	}
	return *o.LocaleOrigin.Get()
}

// GetLocaleOriginOk returns a tuple with the LocaleOrigin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ErrorMessageDto1) GetLocaleOriginOk() (*LocaleOrigin, bool) {
	if o == nil {
		return nil, false
	}
	return o.LocaleOrigin.Get(), o.LocaleOrigin.IsSet()
}

// HasLocaleOrigin returns a boolean if a field has been set.
func (o *ErrorMessageDto1) HasLocaleOrigin() bool {
	if o != nil && o.LocaleOrigin.IsSet() {
		return true
	}

	return false
}

// SetLocaleOrigin gets a reference to the given NullableLocaleOrigin and assigns it to the LocaleOrigin field.
func (o *ErrorMessageDto1) SetLocaleOrigin(v LocaleOrigin) {
	o.LocaleOrigin.Set(&v)
}
// SetLocaleOriginNil sets the value for LocaleOrigin to be an explicit nil
func (o *ErrorMessageDto1) SetLocaleOriginNil() {
	o.LocaleOrigin.Set(nil)
}

// UnsetLocaleOrigin ensures that no value is present for LocaleOrigin, not even an explicit nil
func (o *ErrorMessageDto1) UnsetLocaleOrigin() {
	o.LocaleOrigin.Unset()
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *ErrorMessageDto1) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorMessageDto1) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *ErrorMessageDto1) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *ErrorMessageDto1) SetText(v string) {
	o.Text = &v
}

func (o ErrorMessageDto1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorMessageDto1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Locale.IsSet() {
		toSerialize["locale"] = o.Locale.Get()
	}
	if o.LocaleOrigin.IsSet() {
		toSerialize["localeOrigin"] = o.LocaleOrigin.Get()
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ErrorMessageDto1) UnmarshalJSON(data []byte) (err error) {
	varErrorMessageDto1 := _ErrorMessageDto1{}

	err = json.Unmarshal(data, &varErrorMessageDto1)

	if err != nil {
		return err
	}

	*o = ErrorMessageDto1(varErrorMessageDto1)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "locale")
		delete(additionalProperties, "localeOrigin")
		delete(additionalProperties, "text")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableErrorMessageDto1 struct {
	value *ErrorMessageDto1
	isSet bool
}

func (v NullableErrorMessageDto1) Get() *ErrorMessageDto1 {
	return v.value
}

func (v *NullableErrorMessageDto1) Set(val *ErrorMessageDto1) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorMessageDto1) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorMessageDto1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorMessageDto1(val *ErrorMessageDto1) *NullableErrorMessageDto1 {
	return &NullableErrorMessageDto1{value: val, isSet: true}
}

func (v NullableErrorMessageDto1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorMessageDto1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


