/*
Identity Security Cloud V2024 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2024
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2024

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ScheduledAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScheduledAttributes{}

// ScheduledAttributes Attributes related to a scheduled trigger
type ScheduledAttributes struct {
	// A valid CRON expression
	CronString *string `json:"cronString,omitempty"`
	// Frequency of execution
	Frequency string `json:"frequency"`
	// Time zone identifier
	TimeZone *string `json:"timeZone,omitempty"`
	// Scheduled days of the week for execution
	WeeklyDays []string `json:"weeklyDays,omitempty"`
	// Scheduled execution times
	WeeklyTimes []string `json:"weeklyTimes,omitempty"`
	// Scheduled execution times
	YearlyTimes []string `json:"yearlyTimes,omitempty"`
}

type _ScheduledAttributes ScheduledAttributes

// NewScheduledAttributes instantiates a new ScheduledAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScheduledAttributes(frequency string) *ScheduledAttributes {
	this := ScheduledAttributes{}
	this.Frequency = frequency
	return &this
}

// NewScheduledAttributesWithDefaults instantiates a new ScheduledAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScheduledAttributesWithDefaults() *ScheduledAttributes {
	this := ScheduledAttributes{}
	return &this
}

// GetCronString returns the CronString field value if set, zero value otherwise.
func (o *ScheduledAttributes) GetCronString() string {
	if o == nil || IsNil(o.CronString) {
		var ret string
		return ret
	}
	return *o.CronString
}

// GetCronStringOk returns a tuple with the CronString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduledAttributes) GetCronStringOk() (*string, bool) {
	if o == nil || IsNil(o.CronString) {
		return nil, false
	}
	return o.CronString, true
}

// HasCronString returns a boolean if a field has been set.
func (o *ScheduledAttributes) HasCronString() bool {
	if o != nil && !IsNil(o.CronString) {
		return true
	}

	return false
}

// SetCronString gets a reference to the given string and assigns it to the CronString field.
func (o *ScheduledAttributes) SetCronString(v string) {
	o.CronString = &v
}

// GetFrequency returns the Frequency field value
func (o *ScheduledAttributes) GetFrequency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Frequency
}

// GetFrequencyOk returns a tuple with the Frequency field value
// and a boolean to check if the value has been set.
func (o *ScheduledAttributes) GetFrequencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Frequency, true
}

// SetFrequency sets field value
func (o *ScheduledAttributes) SetFrequency(v string) {
	o.Frequency = v
}

// GetTimeZone returns the TimeZone field value if set, zero value otherwise.
func (o *ScheduledAttributes) GetTimeZone() string {
	if o == nil || IsNil(o.TimeZone) {
		var ret string
		return ret
	}
	return *o.TimeZone
}

// GetTimeZoneOk returns a tuple with the TimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduledAttributes) GetTimeZoneOk() (*string, bool) {
	if o == nil || IsNil(o.TimeZone) {
		return nil, false
	}
	return o.TimeZone, true
}

// HasTimeZone returns a boolean if a field has been set.
func (o *ScheduledAttributes) HasTimeZone() bool {
	if o != nil && !IsNil(o.TimeZone) {
		return true
	}

	return false
}

// SetTimeZone gets a reference to the given string and assigns it to the TimeZone field.
func (o *ScheduledAttributes) SetTimeZone(v string) {
	o.TimeZone = &v
}

// GetWeeklyDays returns the WeeklyDays field value if set, zero value otherwise.
func (o *ScheduledAttributes) GetWeeklyDays() []string {
	if o == nil || IsNil(o.WeeklyDays) {
		var ret []string
		return ret
	}
	return o.WeeklyDays
}

// GetWeeklyDaysOk returns a tuple with the WeeklyDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduledAttributes) GetWeeklyDaysOk() ([]string, bool) {
	if o == nil || IsNil(o.WeeklyDays) {
		return nil, false
	}
	return o.WeeklyDays, true
}

// HasWeeklyDays returns a boolean if a field has been set.
func (o *ScheduledAttributes) HasWeeklyDays() bool {
	if o != nil && !IsNil(o.WeeklyDays) {
		return true
	}

	return false
}

// SetWeeklyDays gets a reference to the given []string and assigns it to the WeeklyDays field.
func (o *ScheduledAttributes) SetWeeklyDays(v []string) {
	o.WeeklyDays = v
}

// GetWeeklyTimes returns the WeeklyTimes field value if set, zero value otherwise.
func (o *ScheduledAttributes) GetWeeklyTimes() []string {
	if o == nil || IsNil(o.WeeklyTimes) {
		var ret []string
		return ret
	}
	return o.WeeklyTimes
}

// GetWeeklyTimesOk returns a tuple with the WeeklyTimes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduledAttributes) GetWeeklyTimesOk() ([]string, bool) {
	if o == nil || IsNil(o.WeeklyTimes) {
		return nil, false
	}
	return o.WeeklyTimes, true
}

// HasWeeklyTimes returns a boolean if a field has been set.
func (o *ScheduledAttributes) HasWeeklyTimes() bool {
	if o != nil && !IsNil(o.WeeklyTimes) {
		return true
	}

	return false
}

// SetWeeklyTimes gets a reference to the given []string and assigns it to the WeeklyTimes field.
func (o *ScheduledAttributes) SetWeeklyTimes(v []string) {
	o.WeeklyTimes = v
}

// GetYearlyTimes returns the YearlyTimes field value if set, zero value otherwise.
func (o *ScheduledAttributes) GetYearlyTimes() []string {
	if o == nil || IsNil(o.YearlyTimes) {
		var ret []string
		return ret
	}
	return o.YearlyTimes
}

// GetYearlyTimesOk returns a tuple with the YearlyTimes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduledAttributes) GetYearlyTimesOk() ([]string, bool) {
	if o == nil || IsNil(o.YearlyTimes) {
		return nil, false
	}
	return o.YearlyTimes, true
}

// HasYearlyTimes returns a boolean if a field has been set.
func (o *ScheduledAttributes) HasYearlyTimes() bool {
	if o != nil && !IsNil(o.YearlyTimes) {
		return true
	}

	return false
}

// SetYearlyTimes gets a reference to the given []string and assigns it to the YearlyTimes field.
func (o *ScheduledAttributes) SetYearlyTimes(v []string) {
	o.YearlyTimes = v
}

func (o ScheduledAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScheduledAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CronString) {
		toSerialize["cronString"] = o.CronString
	}
	toSerialize["frequency"] = o.Frequency
	if !IsNil(o.TimeZone) {
		toSerialize["timeZone"] = o.TimeZone
	}
	if !IsNil(o.WeeklyDays) {
		toSerialize["weeklyDays"] = o.WeeklyDays
	}
	if !IsNil(o.WeeklyTimes) {
		toSerialize["weeklyTimes"] = o.WeeklyTimes
	}
	if !IsNil(o.YearlyTimes) {
		toSerialize["yearlyTimes"] = o.YearlyTimes
	}
	return toSerialize, nil
}

func (o *ScheduledAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"frequency",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varScheduledAttributes := _ScheduledAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varScheduledAttributes)

	if err != nil {
		return err
	}

	*o = ScheduledAttributes(varScheduledAttributes)

	return err
}

type NullableScheduledAttributes struct {
	value *ScheduledAttributes
	isSet bool
}

func (v NullableScheduledAttributes) Get() *ScheduledAttributes {
	return v.value
}

func (v *NullableScheduledAttributes) Set(val *ScheduledAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduledAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduledAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduledAttributes(val *ScheduledAttributes) *NullableScheduledAttributes {
	return &NullableScheduledAttributes{value: val, isSet: true}
}

func (v NullableScheduledAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduledAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


