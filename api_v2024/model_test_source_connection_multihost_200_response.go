/*
Identity Security Cloud V2024 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2024
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2024

import (
	"encoding/json"
)

// checks if the TestSourceConnectionMultihost200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestSourceConnectionMultihost200Response{}

// TestSourceConnectionMultihost200Response struct for TestSourceConnectionMultihost200Response
type TestSourceConnectionMultihost200Response struct {
	// Source's test connection status.
	Success *bool `json:"success,omitempty"`
	// Source's test connection message.
	Message *string `json:"message,omitempty"`
	// Source's test connection timing.
	Timing *int32 `json:"timing,omitempty"`
	// Source's human-readable result type.
	ResultType map[string]interface{} `json:"resultType,omitempty"`
	// Source's human-readable test connection details.
	TestConnectionDetails *string `json:"testConnectionDetails,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TestSourceConnectionMultihost200Response TestSourceConnectionMultihost200Response

// NewTestSourceConnectionMultihost200Response instantiates a new TestSourceConnectionMultihost200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestSourceConnectionMultihost200Response() *TestSourceConnectionMultihost200Response {
	this := TestSourceConnectionMultihost200Response{}
	return &this
}

// NewTestSourceConnectionMultihost200ResponseWithDefaults instantiates a new TestSourceConnectionMultihost200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestSourceConnectionMultihost200ResponseWithDefaults() *TestSourceConnectionMultihost200Response {
	this := TestSourceConnectionMultihost200Response{}
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *TestSourceConnectionMultihost200Response) GetSuccess() bool {
	if o == nil || IsNil(o.Success) {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSourceConnectionMultihost200Response) GetSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *TestSourceConnectionMultihost200Response) HasSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *TestSourceConnectionMultihost200Response) SetSuccess(v bool) {
	o.Success = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *TestSourceConnectionMultihost200Response) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSourceConnectionMultihost200Response) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *TestSourceConnectionMultihost200Response) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *TestSourceConnectionMultihost200Response) SetMessage(v string) {
	o.Message = &v
}

// GetTiming returns the Timing field value if set, zero value otherwise.
func (o *TestSourceConnectionMultihost200Response) GetTiming() int32 {
	if o == nil || IsNil(o.Timing) {
		var ret int32
		return ret
	}
	return *o.Timing
}

// GetTimingOk returns a tuple with the Timing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSourceConnectionMultihost200Response) GetTimingOk() (*int32, bool) {
	if o == nil || IsNil(o.Timing) {
		return nil, false
	}
	return o.Timing, true
}

// HasTiming returns a boolean if a field has been set.
func (o *TestSourceConnectionMultihost200Response) HasTiming() bool {
	if o != nil && !IsNil(o.Timing) {
		return true
	}

	return false
}

// SetTiming gets a reference to the given int32 and assigns it to the Timing field.
func (o *TestSourceConnectionMultihost200Response) SetTiming(v int32) {
	o.Timing = &v
}

// GetResultType returns the ResultType field value if set, zero value otherwise.
func (o *TestSourceConnectionMultihost200Response) GetResultType() map[string]interface{} {
	if o == nil || IsNil(o.ResultType) {
		var ret map[string]interface{}
		return ret
	}
	return o.ResultType
}

// GetResultTypeOk returns a tuple with the ResultType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSourceConnectionMultihost200Response) GetResultTypeOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ResultType) {
		return map[string]interface{}{}, false
	}
	return o.ResultType, true
}

// HasResultType returns a boolean if a field has been set.
func (o *TestSourceConnectionMultihost200Response) HasResultType() bool {
	if o != nil && !IsNil(o.ResultType) {
		return true
	}

	return false
}

// SetResultType gets a reference to the given map[string]interface{} and assigns it to the ResultType field.
func (o *TestSourceConnectionMultihost200Response) SetResultType(v map[string]interface{}) {
	o.ResultType = v
}

// GetTestConnectionDetails returns the TestConnectionDetails field value if set, zero value otherwise.
func (o *TestSourceConnectionMultihost200Response) GetTestConnectionDetails() string {
	if o == nil || IsNil(o.TestConnectionDetails) {
		var ret string
		return ret
	}
	return *o.TestConnectionDetails
}

// GetTestConnectionDetailsOk returns a tuple with the TestConnectionDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSourceConnectionMultihost200Response) GetTestConnectionDetailsOk() (*string, bool) {
	if o == nil || IsNil(o.TestConnectionDetails) {
		return nil, false
	}
	return o.TestConnectionDetails, true
}

// HasTestConnectionDetails returns a boolean if a field has been set.
func (o *TestSourceConnectionMultihost200Response) HasTestConnectionDetails() bool {
	if o != nil && !IsNil(o.TestConnectionDetails) {
		return true
	}

	return false
}

// SetTestConnectionDetails gets a reference to the given string and assigns it to the TestConnectionDetails field.
func (o *TestSourceConnectionMultihost200Response) SetTestConnectionDetails(v string) {
	o.TestConnectionDetails = &v
}

func (o TestSourceConnectionMultihost200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestSourceConnectionMultihost200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Timing) {
		toSerialize["timing"] = o.Timing
	}
	if !IsNil(o.ResultType) {
		toSerialize["resultType"] = o.ResultType
	}
	if !IsNil(o.TestConnectionDetails) {
		toSerialize["testConnectionDetails"] = o.TestConnectionDetails
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TestSourceConnectionMultihost200Response) UnmarshalJSON(data []byte) (err error) {
	varTestSourceConnectionMultihost200Response := _TestSourceConnectionMultihost200Response{}

	err = json.Unmarshal(data, &varTestSourceConnectionMultihost200Response)

	if err != nil {
		return err
	}

	*o = TestSourceConnectionMultihost200Response(varTestSourceConnectionMultihost200Response)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "success")
		delete(additionalProperties, "message")
		delete(additionalProperties, "timing")
		delete(additionalProperties, "resultType")
		delete(additionalProperties, "testConnectionDetails")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTestSourceConnectionMultihost200Response struct {
	value *TestSourceConnectionMultihost200Response
	isSet bool
}

func (v NullableTestSourceConnectionMultihost200Response) Get() *TestSourceConnectionMultihost200Response {
	return v.value
}

func (v *NullableTestSourceConnectionMultihost200Response) Set(val *TestSourceConnectionMultihost200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableTestSourceConnectionMultihost200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableTestSourceConnectionMultihost200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestSourceConnectionMultihost200Response(val *TestSourceConnectionMultihost200Response) *NullableTestSourceConnectionMultihost200Response {
	return &NullableTestSourceConnectionMultihost200Response{value: val, isSet: true}
}

func (v NullableTestSourceConnectionMultihost200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestSourceConnectionMultihost200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


