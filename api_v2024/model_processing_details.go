/*
Identity Security Cloud V2024 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2024
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2024

import (
	"encoding/json"
	"time"
)

// checks if the ProcessingDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProcessingDetails{}

// ProcessingDetails struct for ProcessingDetails
type ProcessingDetails struct {
	// A date-time in ISO-8601 format
	Date NullableTime `json:"date,omitempty"`
	Stage *string `json:"stage,omitempty"`
	RetryCount *int32 `json:"retryCount,omitempty"`
	StackTrace *string `json:"stackTrace,omitempty"`
	Message *string `json:"message,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ProcessingDetails ProcessingDetails

// NewProcessingDetails instantiates a new ProcessingDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProcessingDetails() *ProcessingDetails {
	this := ProcessingDetails{}
	return &this
}

// NewProcessingDetailsWithDefaults instantiates a new ProcessingDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProcessingDetailsWithDefaults() *ProcessingDetails {
	this := ProcessingDetails{}
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProcessingDetails) GetDate() time.Time {
	if o == nil || IsNil(o.Date.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Date.Get()
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProcessingDetails) GetDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Date.Get(), o.Date.IsSet()
}

// HasDate returns a boolean if a field has been set.
func (o *ProcessingDetails) HasDate() bool {
	if o != nil && o.Date.IsSet() {
		return true
	}

	return false
}

// SetDate gets a reference to the given NullableTime and assigns it to the Date field.
func (o *ProcessingDetails) SetDate(v time.Time) {
	o.Date.Set(&v)
}
// SetDateNil sets the value for Date to be an explicit nil
func (o *ProcessingDetails) SetDateNil() {
	o.Date.Set(nil)
}

// UnsetDate ensures that no value is present for Date, not even an explicit nil
func (o *ProcessingDetails) UnsetDate() {
	o.Date.Unset()
}

// GetStage returns the Stage field value if set, zero value otherwise.
func (o *ProcessingDetails) GetStage() string {
	if o == nil || IsNil(o.Stage) {
		var ret string
		return ret
	}
	return *o.Stage
}

// GetStageOk returns a tuple with the Stage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessingDetails) GetStageOk() (*string, bool) {
	if o == nil || IsNil(o.Stage) {
		return nil, false
	}
	return o.Stage, true
}

// HasStage returns a boolean if a field has been set.
func (o *ProcessingDetails) HasStage() bool {
	if o != nil && !IsNil(o.Stage) {
		return true
	}

	return false
}

// SetStage gets a reference to the given string and assigns it to the Stage field.
func (o *ProcessingDetails) SetStage(v string) {
	o.Stage = &v
}

// GetRetryCount returns the RetryCount field value if set, zero value otherwise.
func (o *ProcessingDetails) GetRetryCount() int32 {
	if o == nil || IsNil(o.RetryCount) {
		var ret int32
		return ret
	}
	return *o.RetryCount
}

// GetRetryCountOk returns a tuple with the RetryCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessingDetails) GetRetryCountOk() (*int32, bool) {
	if o == nil || IsNil(o.RetryCount) {
		return nil, false
	}
	return o.RetryCount, true
}

// HasRetryCount returns a boolean if a field has been set.
func (o *ProcessingDetails) HasRetryCount() bool {
	if o != nil && !IsNil(o.RetryCount) {
		return true
	}

	return false
}

// SetRetryCount gets a reference to the given int32 and assigns it to the RetryCount field.
func (o *ProcessingDetails) SetRetryCount(v int32) {
	o.RetryCount = &v
}

// GetStackTrace returns the StackTrace field value if set, zero value otherwise.
func (o *ProcessingDetails) GetStackTrace() string {
	if o == nil || IsNil(o.StackTrace) {
		var ret string
		return ret
	}
	return *o.StackTrace
}

// GetStackTraceOk returns a tuple with the StackTrace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessingDetails) GetStackTraceOk() (*string, bool) {
	if o == nil || IsNil(o.StackTrace) {
		return nil, false
	}
	return o.StackTrace, true
}

// HasStackTrace returns a boolean if a field has been set.
func (o *ProcessingDetails) HasStackTrace() bool {
	if o != nil && !IsNil(o.StackTrace) {
		return true
	}

	return false
}

// SetStackTrace gets a reference to the given string and assigns it to the StackTrace field.
func (o *ProcessingDetails) SetStackTrace(v string) {
	o.StackTrace = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ProcessingDetails) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessingDetails) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ProcessingDetails) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ProcessingDetails) SetMessage(v string) {
	o.Message = &v
}

func (o ProcessingDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProcessingDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Date.IsSet() {
		toSerialize["date"] = o.Date.Get()
	}
	if !IsNil(o.Stage) {
		toSerialize["stage"] = o.Stage
	}
	if !IsNil(o.RetryCount) {
		toSerialize["retryCount"] = o.RetryCount
	}
	if !IsNil(o.StackTrace) {
		toSerialize["stackTrace"] = o.StackTrace
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ProcessingDetails) UnmarshalJSON(data []byte) (err error) {
	varProcessingDetails := _ProcessingDetails{}

	err = json.Unmarshal(data, &varProcessingDetails)

	if err != nil {
		return err
	}

	*o = ProcessingDetails(varProcessingDetails)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "date")
		delete(additionalProperties, "stage")
		delete(additionalProperties, "retryCount")
		delete(additionalProperties, "stackTrace")
		delete(additionalProperties, "message")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProcessingDetails struct {
	value *ProcessingDetails
	isSet bool
}

func (v NullableProcessingDetails) Get() *ProcessingDetails {
	return v.value
}

func (v *NullableProcessingDetails) Set(val *ProcessingDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableProcessingDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableProcessingDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProcessingDetails(val *ProcessingDetails) *NullableProcessingDetails {
	return &NullableProcessingDetails{value: val, isSet: true}
}

func (v NullableProcessingDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProcessingDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


