/*
Identity Security Cloud V2024 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2024
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2024

import (
	"encoding/json"
	
)

// checks if the ManualWorkItemDetails1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManualWorkItemDetails1{}

// ManualWorkItemDetails1 struct for ManualWorkItemDetails1
type ManualWorkItemDetails1 struct {
	// True if the request for this item was forwarded from one owner to another.
	Forwarded *bool `json:"forwarded,omitempty"`
	OriginalOwner NullableManualWorkItemDetailsOriginalOwner `json:"originalOwner,omitempty"`
	CurrentOwner NullableManualWorkItemDetailsCurrentOwner `json:"currentOwner,omitempty"`
	// Time at which item was modified.
	Modified *SailPointTime `json:"modified,omitempty"`
	Status *ManualWorkItemState `json:"status,omitempty"`
	// The history of approval forward action.
	ForwardHistory []ApprovalForwardHistory1 `json:"forwardHistory,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ManualWorkItemDetails1 ManualWorkItemDetails1

// NewManualWorkItemDetails1 instantiates a new ManualWorkItemDetails1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManualWorkItemDetails1() *ManualWorkItemDetails1 {
	this := ManualWorkItemDetails1{}
	var forwarded bool = false
	this.Forwarded = &forwarded
	return &this
}

// NewManualWorkItemDetails1WithDefaults instantiates a new ManualWorkItemDetails1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManualWorkItemDetails1WithDefaults() *ManualWorkItemDetails1 {
	this := ManualWorkItemDetails1{}
	var forwarded bool = false
	this.Forwarded = &forwarded
	return &this
}

// GetForwarded returns the Forwarded field value if set, zero value otherwise.
func (o *ManualWorkItemDetails1) GetForwarded() bool {
	if o == nil || IsNil(o.Forwarded) {
		var ret bool
		return ret
	}
	return *o.Forwarded
}

// GetForwardedOk returns a tuple with the Forwarded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualWorkItemDetails1) GetForwardedOk() (*bool, bool) {
	if o == nil || IsNil(o.Forwarded) {
		return nil, false
	}
	return o.Forwarded, true
}

// HasForwarded returns a boolean if a field has been set.
func (o *ManualWorkItemDetails1) HasForwarded() bool {
	if o != nil && !IsNil(o.Forwarded) {
		return true
	}

	return false
}

// SetForwarded gets a reference to the given bool and assigns it to the Forwarded field.
func (o *ManualWorkItemDetails1) SetForwarded(v bool) {
	o.Forwarded = &v
}

// GetOriginalOwner returns the OriginalOwner field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManualWorkItemDetails1) GetOriginalOwner() ManualWorkItemDetailsOriginalOwner {
	if o == nil || IsNil(o.OriginalOwner.Get()) {
		var ret ManualWorkItemDetailsOriginalOwner
		return ret
	}
	return *o.OriginalOwner.Get()
}

// GetOriginalOwnerOk returns a tuple with the OriginalOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManualWorkItemDetails1) GetOriginalOwnerOk() (*ManualWorkItemDetailsOriginalOwner, bool) {
	if o == nil {
		return nil, false
	}
	return o.OriginalOwner.Get(), o.OriginalOwner.IsSet()
}

// HasOriginalOwner returns a boolean if a field has been set.
func (o *ManualWorkItemDetails1) HasOriginalOwner() bool {
	if o != nil && o.OriginalOwner.IsSet() {
		return true
	}

	return false
}

// SetOriginalOwner gets a reference to the given NullableManualWorkItemDetailsOriginalOwner and assigns it to the OriginalOwner field.
func (o *ManualWorkItemDetails1) SetOriginalOwner(v ManualWorkItemDetailsOriginalOwner) {
	o.OriginalOwner.Set(&v)
}
// SetOriginalOwnerNil sets the value for OriginalOwner to be an explicit nil
func (o *ManualWorkItemDetails1) SetOriginalOwnerNil() {
	o.OriginalOwner.Set(nil)
}

// UnsetOriginalOwner ensures that no value is present for OriginalOwner, not even an explicit nil
func (o *ManualWorkItemDetails1) UnsetOriginalOwner() {
	o.OriginalOwner.Unset()
}

// GetCurrentOwner returns the CurrentOwner field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManualWorkItemDetails1) GetCurrentOwner() ManualWorkItemDetailsCurrentOwner {
	if o == nil || IsNil(o.CurrentOwner.Get()) {
		var ret ManualWorkItemDetailsCurrentOwner
		return ret
	}
	return *o.CurrentOwner.Get()
}

// GetCurrentOwnerOk returns a tuple with the CurrentOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManualWorkItemDetails1) GetCurrentOwnerOk() (*ManualWorkItemDetailsCurrentOwner, bool) {
	if o == nil {
		return nil, false
	}
	return o.CurrentOwner.Get(), o.CurrentOwner.IsSet()
}

// HasCurrentOwner returns a boolean if a field has been set.
func (o *ManualWorkItemDetails1) HasCurrentOwner() bool {
	if o != nil && o.CurrentOwner.IsSet() {
		return true
	}

	return false
}

// SetCurrentOwner gets a reference to the given NullableManualWorkItemDetailsCurrentOwner and assigns it to the CurrentOwner field.
func (o *ManualWorkItemDetails1) SetCurrentOwner(v ManualWorkItemDetailsCurrentOwner) {
	o.CurrentOwner.Set(&v)
}
// SetCurrentOwnerNil sets the value for CurrentOwner to be an explicit nil
func (o *ManualWorkItemDetails1) SetCurrentOwnerNil() {
	o.CurrentOwner.Set(nil)
}

// UnsetCurrentOwner ensures that no value is present for CurrentOwner, not even an explicit nil
func (o *ManualWorkItemDetails1) UnsetCurrentOwner() {
	o.CurrentOwner.Unset()
}

// GetModified returns the Modified field value if set, zero value otherwise.
func (o *ManualWorkItemDetails1) GetModified() SailPointTime {
	if o == nil || IsNil(o.Modified) {
		var ret SailPointTime
		return ret
	}
	return *o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualWorkItemDetails1) GetModifiedOk() (*SailPointTime, bool) {
	if o == nil || IsNil(o.Modified) {
		return nil, false
	}
	return o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *ManualWorkItemDetails1) HasModified() bool {
	if o != nil && !IsNil(o.Modified) {
		return true
	}

	return false
}

// SetModified gets a reference to the given SailPointTime and assigns it to the Modified field.
func (o *ManualWorkItemDetails1) SetModified(v SailPointTime) {
	o.Modified = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ManualWorkItemDetails1) GetStatus() ManualWorkItemState {
	if o == nil || IsNil(o.Status) {
		var ret ManualWorkItemState
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualWorkItemDetails1) GetStatusOk() (*ManualWorkItemState, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ManualWorkItemDetails1) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ManualWorkItemState and assigns it to the Status field.
func (o *ManualWorkItemDetails1) SetStatus(v ManualWorkItemState) {
	o.Status = &v
}

// GetForwardHistory returns the ForwardHistory field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManualWorkItemDetails1) GetForwardHistory() []ApprovalForwardHistory1 {
	if o == nil {
		var ret []ApprovalForwardHistory1
		return ret
	}
	return o.ForwardHistory
}

// GetForwardHistoryOk returns a tuple with the ForwardHistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManualWorkItemDetails1) GetForwardHistoryOk() ([]ApprovalForwardHistory1, bool) {
	if o == nil || IsNil(o.ForwardHistory) {
		return nil, false
	}
	return o.ForwardHistory, true
}

// HasForwardHistory returns a boolean if a field has been set.
func (o *ManualWorkItemDetails1) HasForwardHistory() bool {
	if o != nil && !IsNil(o.ForwardHistory) {
		return true
	}

	return false
}

// SetForwardHistory gets a reference to the given []ApprovalForwardHistory1 and assigns it to the ForwardHistory field.
func (o *ManualWorkItemDetails1) SetForwardHistory(v []ApprovalForwardHistory1) {
	o.ForwardHistory = v
}

func (o ManualWorkItemDetails1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManualWorkItemDetails1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Forwarded) {
		toSerialize["forwarded"] = o.Forwarded
	}
	if o.OriginalOwner.IsSet() {
		toSerialize["originalOwner"] = o.OriginalOwner.Get()
	}
	if o.CurrentOwner.IsSet() {
		toSerialize["currentOwner"] = o.CurrentOwner.Get()
	}
	if !IsNil(o.Modified) {
		toSerialize["modified"] = o.Modified
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if o.ForwardHistory != nil {
		toSerialize["forwardHistory"] = o.ForwardHistory
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ManualWorkItemDetails1) UnmarshalJSON(data []byte) (err error) {
	varManualWorkItemDetails1 := _ManualWorkItemDetails1{}

	err = json.Unmarshal(data, &varManualWorkItemDetails1)

	if err != nil {
		return err
	}

	*o = ManualWorkItemDetails1(varManualWorkItemDetails1)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "forwarded")
		delete(additionalProperties, "originalOwner")
		delete(additionalProperties, "currentOwner")
		delete(additionalProperties, "modified")
		delete(additionalProperties, "status")
		delete(additionalProperties, "forwardHistory")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableManualWorkItemDetails1 struct {
	value *ManualWorkItemDetails1
	isSet bool
}

func (v NullableManualWorkItemDetails1) Get() *ManualWorkItemDetails1 {
	return v.value
}

func (v *NullableManualWorkItemDetails1) Set(val *ManualWorkItemDetails1) {
	v.value = val
	v.isSet = true
}

func (v NullableManualWorkItemDetails1) IsSet() bool {
	return v.isSet
}

func (v *NullableManualWorkItemDetails1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManualWorkItemDetails1(val *ManualWorkItemDetails1) *NullableManualWorkItemDetails1 {
	return &NullableManualWorkItemDetails1{value: val, isSet: true}
}

func (v NullableManualWorkItemDetails1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManualWorkItemDetails1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


