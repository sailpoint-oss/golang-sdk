/*
Identity Security Cloud V2024 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2024
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2024

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the ApprovalComment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApprovalComment{}

// ApprovalComment struct for ApprovalComment
type ApprovalComment struct {
	// Comment provided either by the approval requester or the approver.
	Comment string `json:"comment"`
	// The time when this comment was provided.
	Timestamp time.Time `json:"timestamp"`
	// Name of the user that provided this comment.
	User string `json:"user"`
	// Id of the user that provided this comment.
	Id string `json:"id"`
	// Status transition of the draft.
	ChangedToStatus string `json:"changedToStatus"`
	AdditionalProperties map[string]interface{}
}

type _ApprovalComment ApprovalComment

// NewApprovalComment instantiates a new ApprovalComment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApprovalComment(comment string, timestamp time.Time, user string, id string, changedToStatus string) *ApprovalComment {
	this := ApprovalComment{}
	this.Comment = comment
	this.Timestamp = timestamp
	this.User = user
	this.Id = id
	this.ChangedToStatus = changedToStatus
	return &this
}

// NewApprovalCommentWithDefaults instantiates a new ApprovalComment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApprovalCommentWithDefaults() *ApprovalComment {
	this := ApprovalComment{}
	return &this
}

// GetComment returns the Comment field value
func (o *ApprovalComment) GetComment() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Comment
}

// GetCommentOk returns a tuple with the Comment field value
// and a boolean to check if the value has been set.
func (o *ApprovalComment) GetCommentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Comment, true
}

// SetComment sets field value
func (o *ApprovalComment) SetComment(v string) {
	o.Comment = v
}

// GetTimestamp returns the Timestamp field value
func (o *ApprovalComment) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *ApprovalComment) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *ApprovalComment) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetUser returns the User field value
func (o *ApprovalComment) GetUser() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *ApprovalComment) GetUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *ApprovalComment) SetUser(v string) {
	o.User = v
}

// GetId returns the Id field value
func (o *ApprovalComment) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ApprovalComment) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ApprovalComment) SetId(v string) {
	o.Id = v
}

// GetChangedToStatus returns the ChangedToStatus field value
func (o *ApprovalComment) GetChangedToStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChangedToStatus
}

// GetChangedToStatusOk returns a tuple with the ChangedToStatus field value
// and a boolean to check if the value has been set.
func (o *ApprovalComment) GetChangedToStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChangedToStatus, true
}

// SetChangedToStatus sets field value
func (o *ApprovalComment) SetChangedToStatus(v string) {
	o.ChangedToStatus = v
}

func (o ApprovalComment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApprovalComment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["comment"] = o.Comment
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["user"] = o.User
	toSerialize["id"] = o.Id
	toSerialize["changedToStatus"] = o.ChangedToStatus

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ApprovalComment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"comment",
		"timestamp",
		"user",
		"id",
		"changedToStatus",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApprovalComment := _ApprovalComment{}

	err = json.Unmarshal(data, &varApprovalComment)

	if err != nil {
		return err
	}

	*o = ApprovalComment(varApprovalComment)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "comment")
		delete(additionalProperties, "timestamp")
		delete(additionalProperties, "user")
		delete(additionalProperties, "id")
		delete(additionalProperties, "changedToStatus")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApprovalComment struct {
	value *ApprovalComment
	isSet bool
}

func (v NullableApprovalComment) Get() *ApprovalComment {
	return v.value
}

func (v *NullableApprovalComment) Set(val *ApprovalComment) {
	v.value = val
	v.isSet = true
}

func (v NullableApprovalComment) IsSet() bool {
	return v.isSet
}

func (v *NullableApprovalComment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApprovalComment(val *ApprovalComment) *NullableApprovalComment {
	return &NullableApprovalComment{value: val, isSet: true}
}

func (v NullableApprovalComment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApprovalComment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


