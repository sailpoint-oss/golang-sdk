/*
Identity Security Cloud V2024 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2024
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2024

import (
	"encoding/json"
	"fmt"
)

// checks if the RightPad type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RightPad{}

// RightPad struct for RightPad
type RightPad struct {
	// An integer value for the desired length of the final output string
	Length string `json:"length"`
	// A string value representing the character that the incoming data should be padded with to get to the desired length   If not provided, the transform will default to a single space (\" \") character for padding 
	Padding *string `json:"padding,omitempty"`
	// A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
	RequiresPeriodicRefresh *bool `json:"requiresPeriodicRefresh,omitempty"`
	// This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
	Input map[string]interface{} `json:"input,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RightPad RightPad

// NewRightPad instantiates a new RightPad object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRightPad(length string) *RightPad {
	this := RightPad{}
	this.Length = length
	var requiresPeriodicRefresh bool = false
	this.RequiresPeriodicRefresh = &requiresPeriodicRefresh
	return &this
}

// NewRightPadWithDefaults instantiates a new RightPad object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRightPadWithDefaults() *RightPad {
	this := RightPad{}
	var requiresPeriodicRefresh bool = false
	this.RequiresPeriodicRefresh = &requiresPeriodicRefresh
	return &this
}

// GetLength returns the Length field value
func (o *RightPad) GetLength() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Length
}

// GetLengthOk returns a tuple with the Length field value
// and a boolean to check if the value has been set.
func (o *RightPad) GetLengthOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Length, true
}

// SetLength sets field value
func (o *RightPad) SetLength(v string) {
	o.Length = v
}

// GetPadding returns the Padding field value if set, zero value otherwise.
func (o *RightPad) GetPadding() string {
	if o == nil || IsNil(o.Padding) {
		var ret string
		return ret
	}
	return *o.Padding
}

// GetPaddingOk returns a tuple with the Padding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightPad) GetPaddingOk() (*string, bool) {
	if o == nil || IsNil(o.Padding) {
		return nil, false
	}
	return o.Padding, true
}

// HasPadding returns a boolean if a field has been set.
func (o *RightPad) HasPadding() bool {
	if o != nil && !IsNil(o.Padding) {
		return true
	}

	return false
}

// SetPadding gets a reference to the given string and assigns it to the Padding field.
func (o *RightPad) SetPadding(v string) {
	o.Padding = &v
}

// GetRequiresPeriodicRefresh returns the RequiresPeriodicRefresh field value if set, zero value otherwise.
func (o *RightPad) GetRequiresPeriodicRefresh() bool {
	if o == nil || IsNil(o.RequiresPeriodicRefresh) {
		var ret bool
		return ret
	}
	return *o.RequiresPeriodicRefresh
}

// GetRequiresPeriodicRefreshOk returns a tuple with the RequiresPeriodicRefresh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightPad) GetRequiresPeriodicRefreshOk() (*bool, bool) {
	if o == nil || IsNil(o.RequiresPeriodicRefresh) {
		return nil, false
	}
	return o.RequiresPeriodicRefresh, true
}

// HasRequiresPeriodicRefresh returns a boolean if a field has been set.
func (o *RightPad) HasRequiresPeriodicRefresh() bool {
	if o != nil && !IsNil(o.RequiresPeriodicRefresh) {
		return true
	}

	return false
}

// SetRequiresPeriodicRefresh gets a reference to the given bool and assigns it to the RequiresPeriodicRefresh field.
func (o *RightPad) SetRequiresPeriodicRefresh(v bool) {
	o.RequiresPeriodicRefresh = &v
}

// GetInput returns the Input field value if set, zero value otherwise.
func (o *RightPad) GetInput() map[string]interface{} {
	if o == nil || IsNil(o.Input) {
		var ret map[string]interface{}
		return ret
	}
	return o.Input
}

// GetInputOk returns a tuple with the Input field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RightPad) GetInputOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Input) {
		return map[string]interface{}{}, false
	}
	return o.Input, true
}

// HasInput returns a boolean if a field has been set.
func (o *RightPad) HasInput() bool {
	if o != nil && !IsNil(o.Input) {
		return true
	}

	return false
}

// SetInput gets a reference to the given map[string]interface{} and assigns it to the Input field.
func (o *RightPad) SetInput(v map[string]interface{}) {
	o.Input = v
}

func (o RightPad) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RightPad) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["length"] = o.Length
	if !IsNil(o.Padding) {
		toSerialize["padding"] = o.Padding
	}
	if !IsNil(o.RequiresPeriodicRefresh) {
		toSerialize["requiresPeriodicRefresh"] = o.RequiresPeriodicRefresh
	}
	if !IsNil(o.Input) {
		toSerialize["input"] = o.Input
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RightPad) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"length",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRightPad := _RightPad{}

	err = json.Unmarshal(data, &varRightPad)

	if err != nil {
		return err
	}

	*o = RightPad(varRightPad)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "length")
		delete(additionalProperties, "padding")
		delete(additionalProperties, "requiresPeriodicRefresh")
		delete(additionalProperties, "input")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRightPad struct {
	value *RightPad
	isSet bool
}

func (v NullableRightPad) Get() *RightPad {
	return v.value
}

func (v *NullableRightPad) Set(val *RightPad) {
	v.value = val
	v.isSet = true
}

func (v NullableRightPad) IsSet() bool {
	return v.isSet
}

func (v *NullableRightPad) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRightPad(val *RightPad) *NullableRightPad {
	return &NullableRightPad{value: val, isSet: true}
}

func (v NullableRightPad) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRightPad) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


