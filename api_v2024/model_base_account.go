/*
Identity Security Cloud V2024 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2024
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2024

import (
	"encoding/json"
	"time"
)

// checks if the BaseAccount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaseAccount{}

// BaseAccount struct for BaseAccount
type BaseAccount struct {
	// The unique ID of the referenced object.
	Id *string `json:"id,omitempty"`
	// The human readable name of the referenced object.
	Name *string `json:"name,omitempty"`
	// Account ID.
	AccountId *string `json:"accountId,omitempty"`
	Source *AccountSource `json:"source,omitempty"`
	// Indicates whether the account is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	// Indicates whether the account is locked.
	Locked *bool `json:"locked,omitempty"`
	// Indicates whether the account is privileged.
	Privileged *bool `json:"privileged,omitempty"`
	// Indicates whether the account has been manually correlated to an identity.
	ManuallyCorrelated *bool `json:"manuallyCorrelated,omitempty"`
	// A date-time in ISO-8601 format
	PasswordLastSet NullableTime `json:"passwordLastSet,omitempty"`
	// Map or dictionary of key/value pairs.
	EntitlementAttributes map[string]interface{} `json:"entitlementAttributes,omitempty"`
	// ISO-8601 date-time referring to the time when the object was created.
	Created NullableTime `json:"created,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _BaseAccount BaseAccount

// NewBaseAccount instantiates a new BaseAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseAccount() *BaseAccount {
	this := BaseAccount{}
	var disabled bool = false
	this.Disabled = &disabled
	var locked bool = false
	this.Locked = &locked
	var privileged bool = false
	this.Privileged = &privileged
	var manuallyCorrelated bool = false
	this.ManuallyCorrelated = &manuallyCorrelated
	return &this
}

// NewBaseAccountWithDefaults instantiates a new BaseAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseAccountWithDefaults() *BaseAccount {
	this := BaseAccount{}
	var disabled bool = false
	this.Disabled = &disabled
	var locked bool = false
	this.Locked = &locked
	var privileged bool = false
	this.Privileged = &privileged
	var manuallyCorrelated bool = false
	this.ManuallyCorrelated = &manuallyCorrelated
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BaseAccount) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseAccount) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BaseAccount) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *BaseAccount) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *BaseAccount) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseAccount) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *BaseAccount) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *BaseAccount) SetName(v string) {
	o.Name = &v
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *BaseAccount) GetAccountId() string {
	if o == nil || IsNil(o.AccountId) {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseAccount) GetAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *BaseAccount) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *BaseAccount) SetAccountId(v string) {
	o.AccountId = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *BaseAccount) GetSource() AccountSource {
	if o == nil || IsNil(o.Source) {
		var ret AccountSource
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseAccount) GetSourceOk() (*AccountSource, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *BaseAccount) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given AccountSource and assigns it to the Source field.
func (o *BaseAccount) SetSource(v AccountSource) {
	o.Source = &v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *BaseAccount) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseAccount) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *BaseAccount) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *BaseAccount) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetLocked returns the Locked field value if set, zero value otherwise.
func (o *BaseAccount) GetLocked() bool {
	if o == nil || IsNil(o.Locked) {
		var ret bool
		return ret
	}
	return *o.Locked
}

// GetLockedOk returns a tuple with the Locked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseAccount) GetLockedOk() (*bool, bool) {
	if o == nil || IsNil(o.Locked) {
		return nil, false
	}
	return o.Locked, true
}

// HasLocked returns a boolean if a field has been set.
func (o *BaseAccount) HasLocked() bool {
	if o != nil && !IsNil(o.Locked) {
		return true
	}

	return false
}

// SetLocked gets a reference to the given bool and assigns it to the Locked field.
func (o *BaseAccount) SetLocked(v bool) {
	o.Locked = &v
}

// GetPrivileged returns the Privileged field value if set, zero value otherwise.
func (o *BaseAccount) GetPrivileged() bool {
	if o == nil || IsNil(o.Privileged) {
		var ret bool
		return ret
	}
	return *o.Privileged
}

// GetPrivilegedOk returns a tuple with the Privileged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseAccount) GetPrivilegedOk() (*bool, bool) {
	if o == nil || IsNil(o.Privileged) {
		return nil, false
	}
	return o.Privileged, true
}

// HasPrivileged returns a boolean if a field has been set.
func (o *BaseAccount) HasPrivileged() bool {
	if o != nil && !IsNil(o.Privileged) {
		return true
	}

	return false
}

// SetPrivileged gets a reference to the given bool and assigns it to the Privileged field.
func (o *BaseAccount) SetPrivileged(v bool) {
	o.Privileged = &v
}

// GetManuallyCorrelated returns the ManuallyCorrelated field value if set, zero value otherwise.
func (o *BaseAccount) GetManuallyCorrelated() bool {
	if o == nil || IsNil(o.ManuallyCorrelated) {
		var ret bool
		return ret
	}
	return *o.ManuallyCorrelated
}

// GetManuallyCorrelatedOk returns a tuple with the ManuallyCorrelated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseAccount) GetManuallyCorrelatedOk() (*bool, bool) {
	if o == nil || IsNil(o.ManuallyCorrelated) {
		return nil, false
	}
	return o.ManuallyCorrelated, true
}

// HasManuallyCorrelated returns a boolean if a field has been set.
func (o *BaseAccount) HasManuallyCorrelated() bool {
	if o != nil && !IsNil(o.ManuallyCorrelated) {
		return true
	}

	return false
}

// SetManuallyCorrelated gets a reference to the given bool and assigns it to the ManuallyCorrelated field.
func (o *BaseAccount) SetManuallyCorrelated(v bool) {
	o.ManuallyCorrelated = &v
}

// GetPasswordLastSet returns the PasswordLastSet field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BaseAccount) GetPasswordLastSet() time.Time {
	if o == nil || IsNil(o.PasswordLastSet.Get()) {
		var ret time.Time
		return ret
	}
	return *o.PasswordLastSet.Get()
}

// GetPasswordLastSetOk returns a tuple with the PasswordLastSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BaseAccount) GetPasswordLastSetOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.PasswordLastSet.Get(), o.PasswordLastSet.IsSet()
}

// HasPasswordLastSet returns a boolean if a field has been set.
func (o *BaseAccount) HasPasswordLastSet() bool {
	if o != nil && o.PasswordLastSet.IsSet() {
		return true
	}

	return false
}

// SetPasswordLastSet gets a reference to the given NullableTime and assigns it to the PasswordLastSet field.
func (o *BaseAccount) SetPasswordLastSet(v time.Time) {
	o.PasswordLastSet.Set(&v)
}
// SetPasswordLastSetNil sets the value for PasswordLastSet to be an explicit nil
func (o *BaseAccount) SetPasswordLastSetNil() {
	o.PasswordLastSet.Set(nil)
}

// UnsetPasswordLastSet ensures that no value is present for PasswordLastSet, not even an explicit nil
func (o *BaseAccount) UnsetPasswordLastSet() {
	o.PasswordLastSet.Unset()
}

// GetEntitlementAttributes returns the EntitlementAttributes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BaseAccount) GetEntitlementAttributes() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.EntitlementAttributes
}

// GetEntitlementAttributesOk returns a tuple with the EntitlementAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BaseAccount) GetEntitlementAttributesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.EntitlementAttributes) {
		return map[string]interface{}{}, false
	}
	return o.EntitlementAttributes, true
}

// HasEntitlementAttributes returns a boolean if a field has been set.
func (o *BaseAccount) HasEntitlementAttributes() bool {
	if o != nil && !IsNil(o.EntitlementAttributes) {
		return true
	}

	return false
}

// SetEntitlementAttributes gets a reference to the given map[string]interface{} and assigns it to the EntitlementAttributes field.
func (o *BaseAccount) SetEntitlementAttributes(v map[string]interface{}) {
	o.EntitlementAttributes = v
}

// GetCreated returns the Created field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BaseAccount) GetCreated() time.Time {
	if o == nil || IsNil(o.Created.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Created.Get()
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BaseAccount) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Created.Get(), o.Created.IsSet()
}

// HasCreated returns a boolean if a field has been set.
func (o *BaseAccount) HasCreated() bool {
	if o != nil && o.Created.IsSet() {
		return true
	}

	return false
}

// SetCreated gets a reference to the given NullableTime and assigns it to the Created field.
func (o *BaseAccount) SetCreated(v time.Time) {
	o.Created.Set(&v)
}
// SetCreatedNil sets the value for Created to be an explicit nil
func (o *BaseAccount) SetCreatedNil() {
	o.Created.Set(nil)
}

// UnsetCreated ensures that no value is present for Created, not even an explicit nil
func (o *BaseAccount) UnsetCreated() {
	o.Created.Unset()
}

func (o BaseAccount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseAccount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.AccountId) {
		toSerialize["accountId"] = o.AccountId
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	if !IsNil(o.Locked) {
		toSerialize["locked"] = o.Locked
	}
	if !IsNil(o.Privileged) {
		toSerialize["privileged"] = o.Privileged
	}
	if !IsNil(o.ManuallyCorrelated) {
		toSerialize["manuallyCorrelated"] = o.ManuallyCorrelated
	}
	if o.PasswordLastSet.IsSet() {
		toSerialize["passwordLastSet"] = o.PasswordLastSet.Get()
	}
	if o.EntitlementAttributes != nil {
		toSerialize["entitlementAttributes"] = o.EntitlementAttributes
	}
	if o.Created.IsSet() {
		toSerialize["created"] = o.Created.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BaseAccount) UnmarshalJSON(data []byte) (err error) {
	varBaseAccount := _BaseAccount{}

	err = json.Unmarshal(data, &varBaseAccount)

	if err != nil {
		return err
	}

	*o = BaseAccount(varBaseAccount)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "accountId")
		delete(additionalProperties, "source")
		delete(additionalProperties, "disabled")
		delete(additionalProperties, "locked")
		delete(additionalProperties, "privileged")
		delete(additionalProperties, "manuallyCorrelated")
		delete(additionalProperties, "passwordLastSet")
		delete(additionalProperties, "entitlementAttributes")
		delete(additionalProperties, "created")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBaseAccount struct {
	value *BaseAccount
	isSet bool
}

func (v NullableBaseAccount) Get() *BaseAccount {
	return v.value
}

func (v *NullableBaseAccount) Set(val *BaseAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseAccount(val *BaseAccount) *NullableBaseAccount {
	return &NullableBaseAccount{value: val, isSet: true}
}

func (v NullableBaseAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


