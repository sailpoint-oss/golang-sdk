/*
Identity Security Cloud V2024 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2024
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2024

import (
	"encoding/json"
	
	"fmt"
)

// checks if the MultiHostIntegrationsCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MultiHostIntegrationsCreate{}

// MultiHostIntegrationsCreate struct for MultiHostIntegrationsCreate
type MultiHostIntegrationsCreate struct {
	// Multi-Host Integration's human-readable name.
	Name string `json:"name"`
	// Multi-Host Integration's human-readable description.
	Description string `json:"description"`
	Owner MultiHostIntegrationsOwner `json:"owner"`
	Cluster NullableSourceCluster `json:"cluster,omitempty"`
	// Connector script name.
	Connector string `json:"connector"`
	// Multi-Host Integration specific configuration. User can add any number of additional attributes. e.g. maxSourcesPerAggGroup, maxAllowedSources etc.
	ConnectorAttributes map[string]interface{} `json:"connectorAttributes,omitempty"`
	ManagementWorkgroup NullableSourceManagementWorkgroup `json:"managementWorkgroup,omitempty"`
	// Date-time when the source was created
	Created *SailPointTime `json:"created,omitempty"`
	// Date-time when the source was last modified.
	Modified *SailPointTime `json:"modified,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MultiHostIntegrationsCreate MultiHostIntegrationsCreate

// NewMultiHostIntegrationsCreate instantiates a new MultiHostIntegrationsCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultiHostIntegrationsCreate(name string, description string, owner MultiHostIntegrationsOwner, connector string) *MultiHostIntegrationsCreate {
	this := MultiHostIntegrationsCreate{}
	this.Name = name
	this.Description = description
	this.Owner = owner
	this.Connector = connector
	return &this
}

// NewMultiHostIntegrationsCreateWithDefaults instantiates a new MultiHostIntegrationsCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultiHostIntegrationsCreateWithDefaults() *MultiHostIntegrationsCreate {
	this := MultiHostIntegrationsCreate{}
	return &this
}

// GetName returns the Name field value
func (o *MultiHostIntegrationsCreate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrationsCreate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MultiHostIntegrationsCreate) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *MultiHostIntegrationsCreate) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrationsCreate) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *MultiHostIntegrationsCreate) SetDescription(v string) {
	o.Description = v
}

// GetOwner returns the Owner field value
func (o *MultiHostIntegrationsCreate) GetOwner() MultiHostIntegrationsOwner {
	if o == nil {
		var ret MultiHostIntegrationsOwner
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrationsCreate) GetOwnerOk() (*MultiHostIntegrationsOwner, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *MultiHostIntegrationsCreate) SetOwner(v MultiHostIntegrationsOwner) {
	o.Owner = v
}

// GetCluster returns the Cluster field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MultiHostIntegrationsCreate) GetCluster() SourceCluster {
	if o == nil || IsNil(o.Cluster.Get()) {
		var ret SourceCluster
		return ret
	}
	return *o.Cluster.Get()
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MultiHostIntegrationsCreate) GetClusterOk() (*SourceCluster, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cluster.Get(), o.Cluster.IsSet()
}

// HasCluster returns a boolean if a field has been set.
func (o *MultiHostIntegrationsCreate) HasCluster() bool {
	if o != nil && o.Cluster.IsSet() {
		return true
	}

	return false
}

// SetCluster gets a reference to the given NullableSourceCluster and assigns it to the Cluster field.
func (o *MultiHostIntegrationsCreate) SetCluster(v SourceCluster) {
	o.Cluster.Set(&v)
}
// SetClusterNil sets the value for Cluster to be an explicit nil
func (o *MultiHostIntegrationsCreate) SetClusterNil() {
	o.Cluster.Set(nil)
}

// UnsetCluster ensures that no value is present for Cluster, not even an explicit nil
func (o *MultiHostIntegrationsCreate) UnsetCluster() {
	o.Cluster.Unset()
}

// GetConnector returns the Connector field value
func (o *MultiHostIntegrationsCreate) GetConnector() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Connector
}

// GetConnectorOk returns a tuple with the Connector field value
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrationsCreate) GetConnectorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Connector, true
}

// SetConnector sets field value
func (o *MultiHostIntegrationsCreate) SetConnector(v string) {
	o.Connector = v
}

// GetConnectorAttributes returns the ConnectorAttributes field value if set, zero value otherwise.
func (o *MultiHostIntegrationsCreate) GetConnectorAttributes() map[string]interface{} {
	if o == nil || IsNil(o.ConnectorAttributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.ConnectorAttributes
}

// GetConnectorAttributesOk returns a tuple with the ConnectorAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrationsCreate) GetConnectorAttributesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ConnectorAttributes) {
		return map[string]interface{}{}, false
	}
	return o.ConnectorAttributes, true
}

// HasConnectorAttributes returns a boolean if a field has been set.
func (o *MultiHostIntegrationsCreate) HasConnectorAttributes() bool {
	if o != nil && !IsNil(o.ConnectorAttributes) {
		return true
	}

	return false
}

// SetConnectorAttributes gets a reference to the given map[string]interface{} and assigns it to the ConnectorAttributes field.
func (o *MultiHostIntegrationsCreate) SetConnectorAttributes(v map[string]interface{}) {
	o.ConnectorAttributes = v
}

// GetManagementWorkgroup returns the ManagementWorkgroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MultiHostIntegrationsCreate) GetManagementWorkgroup() SourceManagementWorkgroup {
	if o == nil || IsNil(o.ManagementWorkgroup.Get()) {
		var ret SourceManagementWorkgroup
		return ret
	}
	return *o.ManagementWorkgroup.Get()
}

// GetManagementWorkgroupOk returns a tuple with the ManagementWorkgroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MultiHostIntegrationsCreate) GetManagementWorkgroupOk() (*SourceManagementWorkgroup, bool) {
	if o == nil {
		return nil, false
	}
	return o.ManagementWorkgroup.Get(), o.ManagementWorkgroup.IsSet()
}

// HasManagementWorkgroup returns a boolean if a field has been set.
func (o *MultiHostIntegrationsCreate) HasManagementWorkgroup() bool {
	if o != nil && o.ManagementWorkgroup.IsSet() {
		return true
	}

	return false
}

// SetManagementWorkgroup gets a reference to the given NullableSourceManagementWorkgroup and assigns it to the ManagementWorkgroup field.
func (o *MultiHostIntegrationsCreate) SetManagementWorkgroup(v SourceManagementWorkgroup) {
	o.ManagementWorkgroup.Set(&v)
}
// SetManagementWorkgroupNil sets the value for ManagementWorkgroup to be an explicit nil
func (o *MultiHostIntegrationsCreate) SetManagementWorkgroupNil() {
	o.ManagementWorkgroup.Set(nil)
}

// UnsetManagementWorkgroup ensures that no value is present for ManagementWorkgroup, not even an explicit nil
func (o *MultiHostIntegrationsCreate) UnsetManagementWorkgroup() {
	o.ManagementWorkgroup.Unset()
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *MultiHostIntegrationsCreate) GetCreated() SailPointTime {
	if o == nil || IsNil(o.Created) {
		var ret SailPointTime
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrationsCreate) GetCreatedOk() (*SailPointTime, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *MultiHostIntegrationsCreate) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given SailPointTime and assigns it to the Created field.
func (o *MultiHostIntegrationsCreate) SetCreated(v SailPointTime) {
	o.Created = &v
}

// GetModified returns the Modified field value if set, zero value otherwise.
func (o *MultiHostIntegrationsCreate) GetModified() SailPointTime {
	if o == nil || IsNil(o.Modified) {
		var ret SailPointTime
		return ret
	}
	return *o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrationsCreate) GetModifiedOk() (*SailPointTime, bool) {
	if o == nil || IsNil(o.Modified) {
		return nil, false
	}
	return o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *MultiHostIntegrationsCreate) HasModified() bool {
	if o != nil && !IsNil(o.Modified) {
		return true
	}

	return false
}

// SetModified gets a reference to the given SailPointTime and assigns it to the Modified field.
func (o *MultiHostIntegrationsCreate) SetModified(v SailPointTime) {
	o.Modified = &v
}

func (o MultiHostIntegrationsCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MultiHostIntegrationsCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	toSerialize["owner"] = o.Owner
	if o.Cluster.IsSet() {
		toSerialize["cluster"] = o.Cluster.Get()
	}
	toSerialize["connector"] = o.Connector
	if !IsNil(o.ConnectorAttributes) {
		toSerialize["connectorAttributes"] = o.ConnectorAttributes
	}
	if o.ManagementWorkgroup.IsSet() {
		toSerialize["managementWorkgroup"] = o.ManagementWorkgroup.Get()
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Modified) {
		toSerialize["modified"] = o.Modified
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MultiHostIntegrationsCreate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"description",
		"owner",
		"connector",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMultiHostIntegrationsCreate := _MultiHostIntegrationsCreate{}

	err = json.Unmarshal(data, &varMultiHostIntegrationsCreate)

	if err != nil {
		return err
	}

	*o = MultiHostIntegrationsCreate(varMultiHostIntegrationsCreate)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "owner")
		delete(additionalProperties, "cluster")
		delete(additionalProperties, "connector")
		delete(additionalProperties, "connectorAttributes")
		delete(additionalProperties, "managementWorkgroup")
		delete(additionalProperties, "created")
		delete(additionalProperties, "modified")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMultiHostIntegrationsCreate struct {
	value *MultiHostIntegrationsCreate
	isSet bool
}

func (v NullableMultiHostIntegrationsCreate) Get() *MultiHostIntegrationsCreate {
	return v.value
}

func (v *NullableMultiHostIntegrationsCreate) Set(val *MultiHostIntegrationsCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableMultiHostIntegrationsCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableMultiHostIntegrationsCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultiHostIntegrationsCreate(val *MultiHostIntegrationsCreate) *NullableMultiHostIntegrationsCreate {
	return &NullableMultiHostIntegrationsCreate{value: val, isSet: true}
}

func (v NullableMultiHostIntegrationsCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultiHostIntegrationsCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


