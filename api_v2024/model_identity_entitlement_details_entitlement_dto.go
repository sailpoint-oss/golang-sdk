/*
Identity Security Cloud V2024 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2024
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2024

import (
	"encoding/json"
	
)

// checks if the IdentityEntitlementDetailsEntitlementDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdentityEntitlementDetailsEntitlementDto{}

// IdentityEntitlementDetailsEntitlementDto struct for IdentityEntitlementDetailsEntitlementDto
type IdentityEntitlementDetailsEntitlementDto struct {
	// The entitlement id
	Id *string `json:"id,omitempty"`
	// The entitlement name
	Name *string `json:"name,omitempty"`
	// Time when the entitlement was last modified
	Created *SailPointTime `json:"created,omitempty"`
	// Time when the entitlement was last modified
	Modified *SailPointTime `json:"modified,omitempty"`
	// The description of the entitlement
	Description NullableString `json:"description,omitempty"`
	// The type of the object, will always be \"ENTITLEMENT\"
	Type *string `json:"type,omitempty"`
	// The source ID
	SourceId *string `json:"sourceId,omitempty"`
	// The source name
	SourceName *string `json:"sourceName,omitempty"`
	Owner *OwnerDto `json:"owner,omitempty"`
	// The value of the entitlement
	Value *string `json:"value,omitempty"`
	// a list of properties informing the viewer about the entitlement
	Flags []string `json:"flags,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IdentityEntitlementDetailsEntitlementDto IdentityEntitlementDetailsEntitlementDto

// NewIdentityEntitlementDetailsEntitlementDto instantiates a new IdentityEntitlementDetailsEntitlementDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityEntitlementDetailsEntitlementDto() *IdentityEntitlementDetailsEntitlementDto {
	this := IdentityEntitlementDetailsEntitlementDto{}
	return &this
}

// NewIdentityEntitlementDetailsEntitlementDtoWithDefaults instantiates a new IdentityEntitlementDetailsEntitlementDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityEntitlementDetailsEntitlementDtoWithDefaults() *IdentityEntitlementDetailsEntitlementDto {
	this := IdentityEntitlementDetailsEntitlementDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IdentityEntitlementDetailsEntitlementDto) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityEntitlementDetailsEntitlementDto) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IdentityEntitlementDetailsEntitlementDto) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IdentityEntitlementDetailsEntitlementDto) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IdentityEntitlementDetailsEntitlementDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityEntitlementDetailsEntitlementDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IdentityEntitlementDetailsEntitlementDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IdentityEntitlementDetailsEntitlementDto) SetName(v string) {
	o.Name = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *IdentityEntitlementDetailsEntitlementDto) GetCreated() SailPointTime {
	if o == nil || IsNil(o.Created) {
		var ret SailPointTime
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityEntitlementDetailsEntitlementDto) GetCreatedOk() (*SailPointTime, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *IdentityEntitlementDetailsEntitlementDto) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given SailPointTime and assigns it to the Created field.
func (o *IdentityEntitlementDetailsEntitlementDto) SetCreated(v SailPointTime) {
	o.Created = &v
}

// GetModified returns the Modified field value if set, zero value otherwise.
func (o *IdentityEntitlementDetailsEntitlementDto) GetModified() SailPointTime {
	if o == nil || IsNil(o.Modified) {
		var ret SailPointTime
		return ret
	}
	return *o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityEntitlementDetailsEntitlementDto) GetModifiedOk() (*SailPointTime, bool) {
	if o == nil || IsNil(o.Modified) {
		return nil, false
	}
	return o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *IdentityEntitlementDetailsEntitlementDto) HasModified() bool {
	if o != nil && !IsNil(o.Modified) {
		return true
	}

	return false
}

// SetModified gets a reference to the given SailPointTime and assigns it to the Modified field.
func (o *IdentityEntitlementDetailsEntitlementDto) SetModified(v SailPointTime) {
	o.Modified = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityEntitlementDetailsEntitlementDto) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityEntitlementDetailsEntitlementDto) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *IdentityEntitlementDetailsEntitlementDto) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *IdentityEntitlementDetailsEntitlementDto) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *IdentityEntitlementDetailsEntitlementDto) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *IdentityEntitlementDetailsEntitlementDto) UnsetDescription() {
	o.Description.Unset()
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *IdentityEntitlementDetailsEntitlementDto) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityEntitlementDetailsEntitlementDto) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *IdentityEntitlementDetailsEntitlementDto) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *IdentityEntitlementDetailsEntitlementDto) SetType(v string) {
	o.Type = &v
}

// GetSourceId returns the SourceId field value if set, zero value otherwise.
func (o *IdentityEntitlementDetailsEntitlementDto) GetSourceId() string {
	if o == nil || IsNil(o.SourceId) {
		var ret string
		return ret
	}
	return *o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityEntitlementDetailsEntitlementDto) GetSourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.SourceId) {
		return nil, false
	}
	return o.SourceId, true
}

// HasSourceId returns a boolean if a field has been set.
func (o *IdentityEntitlementDetailsEntitlementDto) HasSourceId() bool {
	if o != nil && !IsNil(o.SourceId) {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given string and assigns it to the SourceId field.
func (o *IdentityEntitlementDetailsEntitlementDto) SetSourceId(v string) {
	o.SourceId = &v
}

// GetSourceName returns the SourceName field value if set, zero value otherwise.
func (o *IdentityEntitlementDetailsEntitlementDto) GetSourceName() string {
	if o == nil || IsNil(o.SourceName) {
		var ret string
		return ret
	}
	return *o.SourceName
}

// GetSourceNameOk returns a tuple with the SourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityEntitlementDetailsEntitlementDto) GetSourceNameOk() (*string, bool) {
	if o == nil || IsNil(o.SourceName) {
		return nil, false
	}
	return o.SourceName, true
}

// HasSourceName returns a boolean if a field has been set.
func (o *IdentityEntitlementDetailsEntitlementDto) HasSourceName() bool {
	if o != nil && !IsNil(o.SourceName) {
		return true
	}

	return false
}

// SetSourceName gets a reference to the given string and assigns it to the SourceName field.
func (o *IdentityEntitlementDetailsEntitlementDto) SetSourceName(v string) {
	o.SourceName = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *IdentityEntitlementDetailsEntitlementDto) GetOwner() OwnerDto {
	if o == nil || IsNil(o.Owner) {
		var ret OwnerDto
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityEntitlementDetailsEntitlementDto) GetOwnerOk() (*OwnerDto, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *IdentityEntitlementDetailsEntitlementDto) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given OwnerDto and assigns it to the Owner field.
func (o *IdentityEntitlementDetailsEntitlementDto) SetOwner(v OwnerDto) {
	o.Owner = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *IdentityEntitlementDetailsEntitlementDto) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityEntitlementDetailsEntitlementDto) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *IdentityEntitlementDetailsEntitlementDto) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *IdentityEntitlementDetailsEntitlementDto) SetValue(v string) {
	o.Value = &v
}

// GetFlags returns the Flags field value if set, zero value otherwise.
func (o *IdentityEntitlementDetailsEntitlementDto) GetFlags() []string {
	if o == nil || IsNil(o.Flags) {
		var ret []string
		return ret
	}
	return o.Flags
}

// GetFlagsOk returns a tuple with the Flags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityEntitlementDetailsEntitlementDto) GetFlagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Flags) {
		return nil, false
	}
	return o.Flags, true
}

// HasFlags returns a boolean if a field has been set.
func (o *IdentityEntitlementDetailsEntitlementDto) HasFlags() bool {
	if o != nil && !IsNil(o.Flags) {
		return true
	}

	return false
}

// SetFlags gets a reference to the given []string and assigns it to the Flags field.
func (o *IdentityEntitlementDetailsEntitlementDto) SetFlags(v []string) {
	o.Flags = v
}

func (o IdentityEntitlementDetailsEntitlementDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdentityEntitlementDetailsEntitlementDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Modified) {
		toSerialize["modified"] = o.Modified
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.SourceId) {
		toSerialize["sourceId"] = o.SourceId
	}
	if !IsNil(o.SourceName) {
		toSerialize["sourceName"] = o.SourceName
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Flags) {
		toSerialize["flags"] = o.Flags
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IdentityEntitlementDetailsEntitlementDto) UnmarshalJSON(data []byte) (err error) {
	varIdentityEntitlementDetailsEntitlementDto := _IdentityEntitlementDetailsEntitlementDto{}

	err = json.Unmarshal(data, &varIdentityEntitlementDetailsEntitlementDto)

	if err != nil {
		return err
	}

	*o = IdentityEntitlementDetailsEntitlementDto(varIdentityEntitlementDetailsEntitlementDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "created")
		delete(additionalProperties, "modified")
		delete(additionalProperties, "description")
		delete(additionalProperties, "type")
		delete(additionalProperties, "sourceId")
		delete(additionalProperties, "sourceName")
		delete(additionalProperties, "owner")
		delete(additionalProperties, "value")
		delete(additionalProperties, "flags")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIdentityEntitlementDetailsEntitlementDto struct {
	value *IdentityEntitlementDetailsEntitlementDto
	isSet bool
}

func (v NullableIdentityEntitlementDetailsEntitlementDto) Get() *IdentityEntitlementDetailsEntitlementDto {
	return v.value
}

func (v *NullableIdentityEntitlementDetailsEntitlementDto) Set(val *IdentityEntitlementDetailsEntitlementDto) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityEntitlementDetailsEntitlementDto) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityEntitlementDetailsEntitlementDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityEntitlementDetailsEntitlementDto(val *IdentityEntitlementDetailsEntitlementDto) *NullableIdentityEntitlementDetailsEntitlementDto {
	return &NullableIdentityEntitlementDetailsEntitlementDto{value: val, isSet: true}
}

func (v NullableIdentityEntitlementDetailsEntitlementDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityEntitlementDetailsEntitlementDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


