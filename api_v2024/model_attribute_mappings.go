/*
Identity Security Cloud V2024 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2024
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2024

import (
	"encoding/json"
)

// checks if the AttributeMappings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AttributeMappings{}

// AttributeMappings struct for AttributeMappings
type AttributeMappings struct {
	Target *AttributeMappingsAllOfTarget `json:"target,omitempty"`
	TransformDefinition *AttributeMappingsAllOfTransformDefinition `json:"transformDefinition,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AttributeMappings AttributeMappings

// NewAttributeMappings instantiates a new AttributeMappings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttributeMappings() *AttributeMappings {
	this := AttributeMappings{}
	return &this
}

// NewAttributeMappingsWithDefaults instantiates a new AttributeMappings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttributeMappingsWithDefaults() *AttributeMappings {
	this := AttributeMappings{}
	return &this
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *AttributeMappings) GetTarget() AttributeMappingsAllOfTarget {
	if o == nil || IsNil(o.Target) {
		var ret AttributeMappingsAllOfTarget
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeMappings) GetTargetOk() (*AttributeMappingsAllOfTarget, bool) {
	if o == nil || IsNil(o.Target) {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *AttributeMappings) HasTarget() bool {
	if o != nil && !IsNil(o.Target) {
		return true
	}

	return false
}

// SetTarget gets a reference to the given AttributeMappingsAllOfTarget and assigns it to the Target field.
func (o *AttributeMappings) SetTarget(v AttributeMappingsAllOfTarget) {
	o.Target = &v
}

// GetTransformDefinition returns the TransformDefinition field value if set, zero value otherwise.
func (o *AttributeMappings) GetTransformDefinition() AttributeMappingsAllOfTransformDefinition {
	if o == nil || IsNil(o.TransformDefinition) {
		var ret AttributeMappingsAllOfTransformDefinition
		return ret
	}
	return *o.TransformDefinition
}

// GetTransformDefinitionOk returns a tuple with the TransformDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributeMappings) GetTransformDefinitionOk() (*AttributeMappingsAllOfTransformDefinition, bool) {
	if o == nil || IsNil(o.TransformDefinition) {
		return nil, false
	}
	return o.TransformDefinition, true
}

// HasTransformDefinition returns a boolean if a field has been set.
func (o *AttributeMappings) HasTransformDefinition() bool {
	if o != nil && !IsNil(o.TransformDefinition) {
		return true
	}

	return false
}

// SetTransformDefinition gets a reference to the given AttributeMappingsAllOfTransformDefinition and assigns it to the TransformDefinition field.
func (o *AttributeMappings) SetTransformDefinition(v AttributeMappingsAllOfTransformDefinition) {
	o.TransformDefinition = &v
}

func (o AttributeMappings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AttributeMappings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Target) {
		toSerialize["target"] = o.Target
	}
	if !IsNil(o.TransformDefinition) {
		toSerialize["transformDefinition"] = o.TransformDefinition
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AttributeMappings) UnmarshalJSON(data []byte) (err error) {
	varAttributeMappings := _AttributeMappings{}

	err = json.Unmarshal(data, &varAttributeMappings)

	if err != nil {
		return err
	}

	*o = AttributeMappings(varAttributeMappings)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "target")
		delete(additionalProperties, "transformDefinition")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAttributeMappings struct {
	value *AttributeMappings
	isSet bool
}

func (v NullableAttributeMappings) Get() *AttributeMappings {
	return v.value
}

func (v *NullableAttributeMappings) Set(val *AttributeMappings) {
	v.value = val
	v.isSet = true
}

func (v NullableAttributeMappings) IsSet() bool {
	return v.isSet
}

func (v *NullableAttributeMappings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttributeMappings(val *AttributeMappings) *NullableAttributeMappings {
	return &NullableAttributeMappings{value: val, isSet: true}
}

func (v NullableAttributeMappings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttributeMappings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


