/*
Identity Security Cloud V2024 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2024
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2024

import (
	"encoding/json"
)

// checks if the IdentityEntitlementDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdentityEntitlementDetails{}

// IdentityEntitlementDetails struct for IdentityEntitlementDetails
type IdentityEntitlementDetails struct {
	// Id of Identity
	IdentityId *string `json:"identityId,omitempty"`
	Entitlement *IdentityEntitlementDetailsEntitlementDto `json:"entitlement,omitempty"`
	// Id of Source
	SourceId *string `json:"sourceId,omitempty"`
	// A list of account targets on the identity provisioned with the requested entitlement.
	AccountTargets []IdentityEntitlementDetailsAccountTarget `json:"accountTargets,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IdentityEntitlementDetails IdentityEntitlementDetails

// NewIdentityEntitlementDetails instantiates a new IdentityEntitlementDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityEntitlementDetails() *IdentityEntitlementDetails {
	this := IdentityEntitlementDetails{}
	return &this
}

// NewIdentityEntitlementDetailsWithDefaults instantiates a new IdentityEntitlementDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityEntitlementDetailsWithDefaults() *IdentityEntitlementDetails {
	this := IdentityEntitlementDetails{}
	return &this
}

// GetIdentityId returns the IdentityId field value if set, zero value otherwise.
func (o *IdentityEntitlementDetails) GetIdentityId() string {
	if o == nil || IsNil(o.IdentityId) {
		var ret string
		return ret
	}
	return *o.IdentityId
}

// GetIdentityIdOk returns a tuple with the IdentityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityEntitlementDetails) GetIdentityIdOk() (*string, bool) {
	if o == nil || IsNil(o.IdentityId) {
		return nil, false
	}
	return o.IdentityId, true
}

// HasIdentityId returns a boolean if a field has been set.
func (o *IdentityEntitlementDetails) HasIdentityId() bool {
	if o != nil && !IsNil(o.IdentityId) {
		return true
	}

	return false
}

// SetIdentityId gets a reference to the given string and assigns it to the IdentityId field.
func (o *IdentityEntitlementDetails) SetIdentityId(v string) {
	o.IdentityId = &v
}

// GetEntitlement returns the Entitlement field value if set, zero value otherwise.
func (o *IdentityEntitlementDetails) GetEntitlement() IdentityEntitlementDetailsEntitlementDto {
	if o == nil || IsNil(o.Entitlement) {
		var ret IdentityEntitlementDetailsEntitlementDto
		return ret
	}
	return *o.Entitlement
}

// GetEntitlementOk returns a tuple with the Entitlement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityEntitlementDetails) GetEntitlementOk() (*IdentityEntitlementDetailsEntitlementDto, bool) {
	if o == nil || IsNil(o.Entitlement) {
		return nil, false
	}
	return o.Entitlement, true
}

// HasEntitlement returns a boolean if a field has been set.
func (o *IdentityEntitlementDetails) HasEntitlement() bool {
	if o != nil && !IsNil(o.Entitlement) {
		return true
	}

	return false
}

// SetEntitlement gets a reference to the given IdentityEntitlementDetailsEntitlementDto and assigns it to the Entitlement field.
func (o *IdentityEntitlementDetails) SetEntitlement(v IdentityEntitlementDetailsEntitlementDto) {
	o.Entitlement = &v
}

// GetSourceId returns the SourceId field value if set, zero value otherwise.
func (o *IdentityEntitlementDetails) GetSourceId() string {
	if o == nil || IsNil(o.SourceId) {
		var ret string
		return ret
	}
	return *o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityEntitlementDetails) GetSourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.SourceId) {
		return nil, false
	}
	return o.SourceId, true
}

// HasSourceId returns a boolean if a field has been set.
func (o *IdentityEntitlementDetails) HasSourceId() bool {
	if o != nil && !IsNil(o.SourceId) {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given string and assigns it to the SourceId field.
func (o *IdentityEntitlementDetails) SetSourceId(v string) {
	o.SourceId = &v
}

// GetAccountTargets returns the AccountTargets field value if set, zero value otherwise.
func (o *IdentityEntitlementDetails) GetAccountTargets() []IdentityEntitlementDetailsAccountTarget {
	if o == nil || IsNil(o.AccountTargets) {
		var ret []IdentityEntitlementDetailsAccountTarget
		return ret
	}
	return o.AccountTargets
}

// GetAccountTargetsOk returns a tuple with the AccountTargets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityEntitlementDetails) GetAccountTargetsOk() ([]IdentityEntitlementDetailsAccountTarget, bool) {
	if o == nil || IsNil(o.AccountTargets) {
		return nil, false
	}
	return o.AccountTargets, true
}

// HasAccountTargets returns a boolean if a field has been set.
func (o *IdentityEntitlementDetails) HasAccountTargets() bool {
	if o != nil && !IsNil(o.AccountTargets) {
		return true
	}

	return false
}

// SetAccountTargets gets a reference to the given []IdentityEntitlementDetailsAccountTarget and assigns it to the AccountTargets field.
func (o *IdentityEntitlementDetails) SetAccountTargets(v []IdentityEntitlementDetailsAccountTarget) {
	o.AccountTargets = v
}

func (o IdentityEntitlementDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdentityEntitlementDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IdentityId) {
		toSerialize["identityId"] = o.IdentityId
	}
	if !IsNil(o.Entitlement) {
		toSerialize["entitlement"] = o.Entitlement
	}
	if !IsNil(o.SourceId) {
		toSerialize["sourceId"] = o.SourceId
	}
	if !IsNil(o.AccountTargets) {
		toSerialize["accountTargets"] = o.AccountTargets
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IdentityEntitlementDetails) UnmarshalJSON(data []byte) (err error) {
	varIdentityEntitlementDetails := _IdentityEntitlementDetails{}

	err = json.Unmarshal(data, &varIdentityEntitlementDetails)

	if err != nil {
		return err
	}

	*o = IdentityEntitlementDetails(varIdentityEntitlementDetails)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "identityId")
		delete(additionalProperties, "entitlement")
		delete(additionalProperties, "sourceId")
		delete(additionalProperties, "accountTargets")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIdentityEntitlementDetails struct {
	value *IdentityEntitlementDetails
	isSet bool
}

func (v NullableIdentityEntitlementDetails) Get() *IdentityEntitlementDetails {
	return v.value
}

func (v *NullableIdentityEntitlementDetails) Set(val *IdentityEntitlementDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityEntitlementDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityEntitlementDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityEntitlementDetails(val *IdentityEntitlementDetails) *NullableIdentityEntitlementDetails {
	return &NullableIdentityEntitlementDetails{value: val, isSet: true}
}

func (v NullableIdentityEntitlementDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityEntitlementDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


