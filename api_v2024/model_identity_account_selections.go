/*
Identity Security Cloud V2024 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2024
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2024

import (
	"encoding/json"
)

// checks if the IdentityAccountSelections type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdentityAccountSelections{}

// IdentityAccountSelections struct for IdentityAccountSelections
type IdentityAccountSelections struct {
	// Available account selections for the identity, per requested item
	RequestedItems []RequestedItemAccountSelections `json:"requestedItems,omitempty"`
	// A boolean indicating whether any account selections will be required for the user to raise an access request
	AccountsSelectionRequired *bool `json:"accountsSelectionRequired,omitempty"`
	Type *DtoType `json:"type,omitempty"`
	// The identity id for the user
	Id *string `json:"id,omitempty"`
	// The name of the identity
	Name *string `json:"name,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IdentityAccountSelections IdentityAccountSelections

// NewIdentityAccountSelections instantiates a new IdentityAccountSelections object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityAccountSelections() *IdentityAccountSelections {
	this := IdentityAccountSelections{}
	var accountsSelectionRequired bool = false
	this.AccountsSelectionRequired = &accountsSelectionRequired
	return &this
}

// NewIdentityAccountSelectionsWithDefaults instantiates a new IdentityAccountSelections object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityAccountSelectionsWithDefaults() *IdentityAccountSelections {
	this := IdentityAccountSelections{}
	var accountsSelectionRequired bool = false
	this.AccountsSelectionRequired = &accountsSelectionRequired
	return &this
}

// GetRequestedItems returns the RequestedItems field value if set, zero value otherwise.
func (o *IdentityAccountSelections) GetRequestedItems() []RequestedItemAccountSelections {
	if o == nil || IsNil(o.RequestedItems) {
		var ret []RequestedItemAccountSelections
		return ret
	}
	return o.RequestedItems
}

// GetRequestedItemsOk returns a tuple with the RequestedItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityAccountSelections) GetRequestedItemsOk() ([]RequestedItemAccountSelections, bool) {
	if o == nil || IsNil(o.RequestedItems) {
		return nil, false
	}
	return o.RequestedItems, true
}

// HasRequestedItems returns a boolean if a field has been set.
func (o *IdentityAccountSelections) HasRequestedItems() bool {
	if o != nil && !IsNil(o.RequestedItems) {
		return true
	}

	return false
}

// SetRequestedItems gets a reference to the given []RequestedItemAccountSelections and assigns it to the RequestedItems field.
func (o *IdentityAccountSelections) SetRequestedItems(v []RequestedItemAccountSelections) {
	o.RequestedItems = v
}

// GetAccountsSelectionRequired returns the AccountsSelectionRequired field value if set, zero value otherwise.
func (o *IdentityAccountSelections) GetAccountsSelectionRequired() bool {
	if o == nil || IsNil(o.AccountsSelectionRequired) {
		var ret bool
		return ret
	}
	return *o.AccountsSelectionRequired
}

// GetAccountsSelectionRequiredOk returns a tuple with the AccountsSelectionRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityAccountSelections) GetAccountsSelectionRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.AccountsSelectionRequired) {
		return nil, false
	}
	return o.AccountsSelectionRequired, true
}

// HasAccountsSelectionRequired returns a boolean if a field has been set.
func (o *IdentityAccountSelections) HasAccountsSelectionRequired() bool {
	if o != nil && !IsNil(o.AccountsSelectionRequired) {
		return true
	}

	return false
}

// SetAccountsSelectionRequired gets a reference to the given bool and assigns it to the AccountsSelectionRequired field.
func (o *IdentityAccountSelections) SetAccountsSelectionRequired(v bool) {
	o.AccountsSelectionRequired = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *IdentityAccountSelections) GetType() DtoType {
	if o == nil || IsNil(o.Type) {
		var ret DtoType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityAccountSelections) GetTypeOk() (*DtoType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *IdentityAccountSelections) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given DtoType and assigns it to the Type field.
func (o *IdentityAccountSelections) SetType(v DtoType) {
	o.Type = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IdentityAccountSelections) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityAccountSelections) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IdentityAccountSelections) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IdentityAccountSelections) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IdentityAccountSelections) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityAccountSelections) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IdentityAccountSelections) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IdentityAccountSelections) SetName(v string) {
	o.Name = &v
}

func (o IdentityAccountSelections) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdentityAccountSelections) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RequestedItems) {
		toSerialize["requestedItems"] = o.RequestedItems
	}
	if !IsNil(o.AccountsSelectionRequired) {
		toSerialize["accountsSelectionRequired"] = o.AccountsSelectionRequired
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IdentityAccountSelections) UnmarshalJSON(data []byte) (err error) {
	varIdentityAccountSelections := _IdentityAccountSelections{}

	err = json.Unmarshal(data, &varIdentityAccountSelections)

	if err != nil {
		return err
	}

	*o = IdentityAccountSelections(varIdentityAccountSelections)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "requestedItems")
		delete(additionalProperties, "accountsSelectionRequired")
		delete(additionalProperties, "type")
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIdentityAccountSelections struct {
	value *IdentityAccountSelections
	isSet bool
}

func (v NullableIdentityAccountSelections) Get() *IdentityAccountSelections {
	return v.value
}

func (v *NullableIdentityAccountSelections) Set(val *IdentityAccountSelections) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityAccountSelections) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityAccountSelections) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityAccountSelections(val *IdentityAccountSelections) *NullableIdentityAccountSelections {
	return &NullableIdentityAccountSelections{value: val, isSet: true}
}

func (v NullableIdentityAccountSelections) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityAccountSelections) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


