/*
Identity Security Cloud V2024 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2024
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2024

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// Rule - struct for Rule
type Rule struct {
	GenerateRandomString *GenerateRandomString
	GetReferenceIdentityAttribute *GetReferenceIdentityAttribute
	TransformRule *TransformRule
}

// GenerateRandomStringAsRule is a convenience function that returns GenerateRandomString wrapped in Rule
func GenerateRandomStringAsRule(v *GenerateRandomString) Rule {
	return Rule{
		GenerateRandomString: v,
	}
}

// GetReferenceIdentityAttributeAsRule is a convenience function that returns GetReferenceIdentityAttribute wrapped in Rule
func GetReferenceIdentityAttributeAsRule(v *GetReferenceIdentityAttribute) Rule {
	return Rule{
		GetReferenceIdentityAttribute: v,
	}
}

// TransformRuleAsRule is a convenience function that returns TransformRule wrapped in Rule
func TransformRuleAsRule(v *TransformRule) Rule {
	return Rule{
		TransformRule: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Rule) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GenerateRandomString
	err = newStrictDecoder(data).Decode(&dst.GenerateRandomString)
	if err == nil {
		jsonGenerateRandomString, _ := json.Marshal(dst.GenerateRandomString)
		if string(jsonGenerateRandomString) == "{}" { // empty struct
			dst.GenerateRandomString = nil
		} else {
			if err = validator.Validate(dst.GenerateRandomString); err != nil {
				dst.GenerateRandomString = nil
			} else {
				match++
			}
		}
	} else {
		dst.GenerateRandomString = nil
	}

	// try to unmarshal data into GetReferenceIdentityAttribute
	err = newStrictDecoder(data).Decode(&dst.GetReferenceIdentityAttribute)
	if err == nil {
		jsonGetReferenceIdentityAttribute, _ := json.Marshal(dst.GetReferenceIdentityAttribute)
		if string(jsonGetReferenceIdentityAttribute) == "{}" { // empty struct
			dst.GetReferenceIdentityAttribute = nil
		} else {
			if err = validator.Validate(dst.GetReferenceIdentityAttribute); err != nil {
				dst.GetReferenceIdentityAttribute = nil
			} else {
				match++
			}
		}
	} else {
		dst.GetReferenceIdentityAttribute = nil
	}

	// try to unmarshal data into TransformRule
	err = newStrictDecoder(data).Decode(&dst.TransformRule)
	if err == nil {
		jsonTransformRule, _ := json.Marshal(dst.TransformRule)
		if string(jsonTransformRule) == "{}" { // empty struct
			dst.TransformRule = nil
		} else {
			if err = validator.Validate(dst.TransformRule); err != nil {
				dst.TransformRule = nil
			} else {
				match++
			}
		}
	} else {
		dst.TransformRule = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GenerateRandomString = nil
		dst.GetReferenceIdentityAttribute = nil
		dst.TransformRule = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Rule)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Rule)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Rule) MarshalJSON() ([]byte, error) {
	if src.GenerateRandomString != nil {
		return json.Marshal(&src.GenerateRandomString)
	}

	if src.GetReferenceIdentityAttribute != nil {
		return json.Marshal(&src.GetReferenceIdentityAttribute)
	}

	if src.TransformRule != nil {
		return json.Marshal(&src.TransformRule)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Rule) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.GenerateRandomString != nil {
		return obj.GenerateRandomString
	}

	if obj.GetReferenceIdentityAttribute != nil {
		return obj.GetReferenceIdentityAttribute
	}

	if obj.TransformRule != nil {
		return obj.TransformRule
	}

	// all schemas are nil
	return nil
}

type NullableRule struct {
	value *Rule
	isSet bool
}

func (v NullableRule) Get() *Rule {
	return v.value
}

func (v *NullableRule) Set(val *Rule) {
	v.value = val
	v.isSet = true
}

func (v NullableRule) IsSet() bool {
	return v.isSet
}

func (v *NullableRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRule(val *Rule) *NullableRule {
	return &NullableRule{value: val, isSet: true}
}

func (v NullableRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


