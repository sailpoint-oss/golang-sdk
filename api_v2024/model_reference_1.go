/*
Identity Security Cloud V2024 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2024
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2024

import (
	"encoding/json"
)

// checks if the Reference1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Reference1{}

// Reference1 struct for Reference1
type Reference1 struct {
	// The unique ID of the referenced object.
	Id *string `json:"id,omitempty"`
	// The human readable name of the referenced object.
	Name *string `json:"name,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Reference1 Reference1

// NewReference1 instantiates a new Reference1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReference1() *Reference1 {
	this := Reference1{}
	return &this
}

// NewReference1WithDefaults instantiates a new Reference1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReference1WithDefaults() *Reference1 {
	this := Reference1{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Reference1) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reference1) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Reference1) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Reference1) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Reference1) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reference1) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Reference1) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Reference1) SetName(v string) {
	o.Name = &v
}

func (o Reference1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Reference1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Reference1) UnmarshalJSON(data []byte) (err error) {
	varReference1 := _Reference1{}

	err = json.Unmarshal(data, &varReference1)

	if err != nil {
		return err
	}

	*o = Reference1(varReference1)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableReference1 struct {
	value *Reference1
	isSet bool
}

func (v NullableReference1) Get() *Reference1 {
	return v.value
}

func (v *NullableReference1) Set(val *Reference1) {
	v.value = val
	v.isSet = true
}

func (v NullableReference1) IsSet() bool {
	return v.isSet
}

func (v *NullableReference1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReference1(val *Reference1) *NullableReference1 {
	return &NullableReference1{value: val, isSet: true}
}

func (v NullableReference1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReference1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


