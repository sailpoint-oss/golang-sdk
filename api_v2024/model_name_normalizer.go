/*
Identity Security Cloud V2024 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2024
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2024

import (
	"encoding/json"
)

// checks if the NameNormalizer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NameNormalizer{}

// NameNormalizer struct for NameNormalizer
type NameNormalizer struct {
	// A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
	RequiresPeriodicRefresh *bool `json:"requiresPeriodicRefresh,omitempty"`
	// This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
	Input map[string]interface{} `json:"input,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NameNormalizer NameNormalizer

// NewNameNormalizer instantiates a new NameNormalizer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNameNormalizer() *NameNormalizer {
	this := NameNormalizer{}
	var requiresPeriodicRefresh bool = false
	this.RequiresPeriodicRefresh = &requiresPeriodicRefresh
	return &this
}

// NewNameNormalizerWithDefaults instantiates a new NameNormalizer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNameNormalizerWithDefaults() *NameNormalizer {
	this := NameNormalizer{}
	var requiresPeriodicRefresh bool = false
	this.RequiresPeriodicRefresh = &requiresPeriodicRefresh
	return &this
}

// GetRequiresPeriodicRefresh returns the RequiresPeriodicRefresh field value if set, zero value otherwise.
func (o *NameNormalizer) GetRequiresPeriodicRefresh() bool {
	if o == nil || IsNil(o.RequiresPeriodicRefresh) {
		var ret bool
		return ret
	}
	return *o.RequiresPeriodicRefresh
}

// GetRequiresPeriodicRefreshOk returns a tuple with the RequiresPeriodicRefresh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NameNormalizer) GetRequiresPeriodicRefreshOk() (*bool, bool) {
	if o == nil || IsNil(o.RequiresPeriodicRefresh) {
		return nil, false
	}
	return o.RequiresPeriodicRefresh, true
}

// HasRequiresPeriodicRefresh returns a boolean if a field has been set.
func (o *NameNormalizer) HasRequiresPeriodicRefresh() bool {
	if o != nil && !IsNil(o.RequiresPeriodicRefresh) {
		return true
	}

	return false
}

// SetRequiresPeriodicRefresh gets a reference to the given bool and assigns it to the RequiresPeriodicRefresh field.
func (o *NameNormalizer) SetRequiresPeriodicRefresh(v bool) {
	o.RequiresPeriodicRefresh = &v
}

// GetInput returns the Input field value if set, zero value otherwise.
func (o *NameNormalizer) GetInput() map[string]interface{} {
	if o == nil || IsNil(o.Input) {
		var ret map[string]interface{}
		return ret
	}
	return o.Input
}

// GetInputOk returns a tuple with the Input field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NameNormalizer) GetInputOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Input) {
		return map[string]interface{}{}, false
	}
	return o.Input, true
}

// HasInput returns a boolean if a field has been set.
func (o *NameNormalizer) HasInput() bool {
	if o != nil && !IsNil(o.Input) {
		return true
	}

	return false
}

// SetInput gets a reference to the given map[string]interface{} and assigns it to the Input field.
func (o *NameNormalizer) SetInput(v map[string]interface{}) {
	o.Input = v
}

func (o NameNormalizer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NameNormalizer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RequiresPeriodicRefresh) {
		toSerialize["requiresPeriodicRefresh"] = o.RequiresPeriodicRefresh
	}
	if !IsNil(o.Input) {
		toSerialize["input"] = o.Input
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NameNormalizer) UnmarshalJSON(data []byte) (err error) {
	varNameNormalizer := _NameNormalizer{}

	err = json.Unmarshal(data, &varNameNormalizer)

	if err != nil {
		return err
	}

	*o = NameNormalizer(varNameNormalizer)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "requiresPeriodicRefresh")
		delete(additionalProperties, "input")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNameNormalizer struct {
	value *NameNormalizer
	isSet bool
}

func (v NullableNameNormalizer) Get() *NameNormalizer {
	return v.value
}

func (v *NullableNameNormalizer) Set(val *NameNormalizer) {
	v.value = val
	v.isSet = true
}

func (v NullableNameNormalizer) IsSet() bool {
	return v.isSet
}

func (v *NullableNameNormalizer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNameNormalizer(val *NameNormalizer) *NullableNameNormalizer {
	return &NullableNameNormalizer{value: val, isSet: true}
}

func (v NullableNameNormalizer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNameNormalizer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


