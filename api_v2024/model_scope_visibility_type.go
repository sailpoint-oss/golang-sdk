/*
Identity Security Cloud V2024 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2024
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2024

import (
	"encoding/json"
	"fmt"
)

// ScopeVisibilityType An enumeration of the types of scope visibility choices
type ScopeVisibilityType string

// List of ScopeVisibilityType
const (
	SCOPEVISIBILITYTYPE_ALL ScopeVisibilityType = "ALL"
	SCOPEVISIBILITYTYPE_FILTER ScopeVisibilityType = "FILTER"
	SCOPEVISIBILITYTYPE_SELECTION ScopeVisibilityType = "SELECTION"
	SCOPEVISIBILITYTYPE_UNSEGMENTED ScopeVisibilityType = "UNSEGMENTED"
)

// All allowed values of ScopeVisibilityType enum
var AllowedScopeVisibilityTypeEnumValues = []ScopeVisibilityType{
	"ALL",
	"FILTER",
	"SELECTION",
	"UNSEGMENTED",
}

func (v *ScopeVisibilityType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ScopeVisibilityType(value)
	for _, existing := range AllowedScopeVisibilityTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ScopeVisibilityType", value)
}

// NewScopeVisibilityTypeFromValue returns a pointer to a valid ScopeVisibilityType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewScopeVisibilityTypeFromValue(v string) (*ScopeVisibilityType, error) {
	ev := ScopeVisibilityType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ScopeVisibilityType: valid values are %v", v, AllowedScopeVisibilityTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ScopeVisibilityType) IsValid() bool {
	for _, existing := range AllowedScopeVisibilityTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ScopeVisibilityType value
func (v ScopeVisibilityType) Ptr() *ScopeVisibilityType {
	return &v
}

type NullableScopeVisibilityType struct {
	value *ScopeVisibilityType
	isSet bool
}

func (v NullableScopeVisibilityType) Get() *ScopeVisibilityType {
	return v.value
}

func (v *NullableScopeVisibilityType) Set(val *ScopeVisibilityType) {
	v.value = val
	v.isSet = true
}

func (v NullableScopeVisibilityType) IsSet() bool {
	return v.isSet
}

func (v *NullableScopeVisibilityType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScopeVisibilityType(val *ScopeVisibilityType) *NullableScopeVisibilityType {
	return &NullableScopeVisibilityType{value: val, isSet: true}
}

func (v NullableScopeVisibilityType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScopeVisibilityType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

