/*
Identity Security Cloud V2024 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2024
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2024

import (
	"encoding/json"
	"fmt"
)

// MachineClassificationCriteriaOperation An operation to perform on the classification criteria
type MachineClassificationCriteriaOperation string

// List of MachineClassificationCriteriaOperation
const (
	MACHINECLASSIFICATIONCRITERIAOPERATION_EQUALS MachineClassificationCriteriaOperation = "EQUALS"
	MACHINECLASSIFICATIONCRITERIAOPERATION_NOT_EQUALS MachineClassificationCriteriaOperation = "NOT_EQUALS"
	MACHINECLASSIFICATIONCRITERIAOPERATION_STARTS_WITH MachineClassificationCriteriaOperation = "STARTS_WITH"
	MACHINECLASSIFICATIONCRITERIAOPERATION_ENDS_WITH MachineClassificationCriteriaOperation = "ENDS_WITH"
	MACHINECLASSIFICATIONCRITERIAOPERATION_CONTAINS MachineClassificationCriteriaOperation = "CONTAINS"
	MACHINECLASSIFICATIONCRITERIAOPERATION_AND MachineClassificationCriteriaOperation = "AND"
	MACHINECLASSIFICATIONCRITERIAOPERATION_OR MachineClassificationCriteriaOperation = "OR"
)

// All allowed values of MachineClassificationCriteriaOperation enum
var AllowedMachineClassificationCriteriaOperationEnumValues = []MachineClassificationCriteriaOperation{
	"EQUALS",
	"NOT_EQUALS",
	"STARTS_WITH",
	"ENDS_WITH",
	"CONTAINS",
	"AND",
	"OR",
}

func (v *MachineClassificationCriteriaOperation) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MachineClassificationCriteriaOperation(value)
	for _, existing := range AllowedMachineClassificationCriteriaOperationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MachineClassificationCriteriaOperation", value)
}

// NewMachineClassificationCriteriaOperationFromValue returns a pointer to a valid MachineClassificationCriteriaOperation
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMachineClassificationCriteriaOperationFromValue(v string) (*MachineClassificationCriteriaOperation, error) {
	ev := MachineClassificationCriteriaOperation(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MachineClassificationCriteriaOperation: valid values are %v", v, AllowedMachineClassificationCriteriaOperationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MachineClassificationCriteriaOperation) IsValid() bool {
	for _, existing := range AllowedMachineClassificationCriteriaOperationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MachineClassificationCriteriaOperation value
func (v MachineClassificationCriteriaOperation) Ptr() *MachineClassificationCriteriaOperation {
	return &v
}

type NullableMachineClassificationCriteriaOperation struct {
	value *MachineClassificationCriteriaOperation
	isSet bool
}

func (v NullableMachineClassificationCriteriaOperation) Get() *MachineClassificationCriteriaOperation {
	return v.value
}

func (v *NullableMachineClassificationCriteriaOperation) Set(val *MachineClassificationCriteriaOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableMachineClassificationCriteriaOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableMachineClassificationCriteriaOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMachineClassificationCriteriaOperation(val *MachineClassificationCriteriaOperation) *NullableMachineClassificationCriteriaOperation {
	return &NullableMachineClassificationCriteriaOperation{value: val, isSet: true}
}

func (v NullableMachineClassificationCriteriaOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMachineClassificationCriteriaOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

