/*
Identity Security Cloud V2024 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2024
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2024

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the Dimension type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Dimension{}

// Dimension A Dimension
type Dimension struct {
	// The id of the Dimension. This field must be left null when creating a dimension, otherwise a 400 Bad Request error will result.
	Id *string `json:"id,omitempty"`
	// The human-readable display name of the Dimension
	Name string `json:"name"`
	// Date the Dimension was created
	Created *time.Time `json:"created,omitempty"`
	// Date the Dimension was last modified.
	Modified *time.Time `json:"modified,omitempty"`
	// A human-readable description of the Dimension
	Description NullableString `json:"description,omitempty"`
	Owner OwnerReference `json:"owner"`
	AccessProfiles []AccessProfileRef `json:"accessProfiles,omitempty"`
	Entitlements []EntitlementRef `json:"entitlements,omitempty"`
	Membership NullableDimensionMembershipSelector `json:"membership,omitempty"`
	// The ID of the parent role. This field can be left null when creating a dimension, but if provided, it must match the role ID specified in the path variable of the API call.
	ParentId NullableString `json:"parentId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Dimension Dimension

// NewDimension instantiates a new Dimension object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDimension(name string, owner OwnerReference) *Dimension {
	this := Dimension{}
	this.Name = name
	this.Owner = owner
	return &this
}

// NewDimensionWithDefaults instantiates a new Dimension object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDimensionWithDefaults() *Dimension {
	this := Dimension{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Dimension) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dimension) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Dimension) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Dimension) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *Dimension) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Dimension) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Dimension) SetName(v string) {
	o.Name = v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *Dimension) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dimension) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *Dimension) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *Dimension) SetCreated(v time.Time) {
	o.Created = &v
}

// GetModified returns the Modified field value if set, zero value otherwise.
func (o *Dimension) GetModified() time.Time {
	if o == nil || IsNil(o.Modified) {
		var ret time.Time
		return ret
	}
	return *o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dimension) GetModifiedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Modified) {
		return nil, false
	}
	return o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *Dimension) HasModified() bool {
	if o != nil && !IsNil(o.Modified) {
		return true
	}

	return false
}

// SetModified gets a reference to the given time.Time and assigns it to the Modified field.
func (o *Dimension) SetModified(v time.Time) {
	o.Modified = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Dimension) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Dimension) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *Dimension) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *Dimension) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *Dimension) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *Dimension) UnsetDescription() {
	o.Description.Unset()
}

// GetOwner returns the Owner field value
func (o *Dimension) GetOwner() OwnerReference {
	if o == nil {
		var ret OwnerReference
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *Dimension) GetOwnerOk() (*OwnerReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *Dimension) SetOwner(v OwnerReference) {
	o.Owner = v
}

// GetAccessProfiles returns the AccessProfiles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Dimension) GetAccessProfiles() []AccessProfileRef {
	if o == nil {
		var ret []AccessProfileRef
		return ret
	}
	return o.AccessProfiles
}

// GetAccessProfilesOk returns a tuple with the AccessProfiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Dimension) GetAccessProfilesOk() ([]AccessProfileRef, bool) {
	if o == nil || IsNil(o.AccessProfiles) {
		return nil, false
	}
	return o.AccessProfiles, true
}

// HasAccessProfiles returns a boolean if a field has been set.
func (o *Dimension) HasAccessProfiles() bool {
	if o != nil && !IsNil(o.AccessProfiles) {
		return true
	}

	return false
}

// SetAccessProfiles gets a reference to the given []AccessProfileRef and assigns it to the AccessProfiles field.
func (o *Dimension) SetAccessProfiles(v []AccessProfileRef) {
	o.AccessProfiles = v
}

// GetEntitlements returns the Entitlements field value if set, zero value otherwise.
func (o *Dimension) GetEntitlements() []EntitlementRef {
	if o == nil || IsNil(o.Entitlements) {
		var ret []EntitlementRef
		return ret
	}
	return o.Entitlements
}

// GetEntitlementsOk returns a tuple with the Entitlements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dimension) GetEntitlementsOk() ([]EntitlementRef, bool) {
	if o == nil || IsNil(o.Entitlements) {
		return nil, false
	}
	return o.Entitlements, true
}

// HasEntitlements returns a boolean if a field has been set.
func (o *Dimension) HasEntitlements() bool {
	if o != nil && !IsNil(o.Entitlements) {
		return true
	}

	return false
}

// SetEntitlements gets a reference to the given []EntitlementRef and assigns it to the Entitlements field.
func (o *Dimension) SetEntitlements(v []EntitlementRef) {
	o.Entitlements = v
}

// GetMembership returns the Membership field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Dimension) GetMembership() DimensionMembershipSelector {
	if o == nil || IsNil(o.Membership.Get()) {
		var ret DimensionMembershipSelector
		return ret
	}
	return *o.Membership.Get()
}

// GetMembershipOk returns a tuple with the Membership field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Dimension) GetMembershipOk() (*DimensionMembershipSelector, bool) {
	if o == nil {
		return nil, false
	}
	return o.Membership.Get(), o.Membership.IsSet()
}

// HasMembership returns a boolean if a field has been set.
func (o *Dimension) HasMembership() bool {
	if o != nil && o.Membership.IsSet() {
		return true
	}

	return false
}

// SetMembership gets a reference to the given NullableDimensionMembershipSelector and assigns it to the Membership field.
func (o *Dimension) SetMembership(v DimensionMembershipSelector) {
	o.Membership.Set(&v)
}
// SetMembershipNil sets the value for Membership to be an explicit nil
func (o *Dimension) SetMembershipNil() {
	o.Membership.Set(nil)
}

// UnsetMembership ensures that no value is present for Membership, not even an explicit nil
func (o *Dimension) UnsetMembership() {
	o.Membership.Unset()
}

// GetParentId returns the ParentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Dimension) GetParentId() string {
	if o == nil || IsNil(o.ParentId.Get()) {
		var ret string
		return ret
	}
	return *o.ParentId.Get()
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Dimension) GetParentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentId.Get(), o.ParentId.IsSet()
}

// HasParentId returns a boolean if a field has been set.
func (o *Dimension) HasParentId() bool {
	if o != nil && o.ParentId.IsSet() {
		return true
	}

	return false
}

// SetParentId gets a reference to the given NullableString and assigns it to the ParentId field.
func (o *Dimension) SetParentId(v string) {
	o.ParentId.Set(&v)
}
// SetParentIdNil sets the value for ParentId to be an explicit nil
func (o *Dimension) SetParentIdNil() {
	o.ParentId.Set(nil)
}

// UnsetParentId ensures that no value is present for ParentId, not even an explicit nil
func (o *Dimension) UnsetParentId() {
	o.ParentId.Unset()
}

func (o Dimension) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Dimension) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Modified) {
		toSerialize["modified"] = o.Modified
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	toSerialize["owner"] = o.Owner
	if o.AccessProfiles != nil {
		toSerialize["accessProfiles"] = o.AccessProfiles
	}
	if !IsNil(o.Entitlements) {
		toSerialize["entitlements"] = o.Entitlements
	}
	if o.Membership.IsSet() {
		toSerialize["membership"] = o.Membership.Get()
	}
	if o.ParentId.IsSet() {
		toSerialize["parentId"] = o.ParentId.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Dimension) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"owner",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDimension := _Dimension{}

	err = json.Unmarshal(data, &varDimension)

	if err != nil {
		return err
	}

	*o = Dimension(varDimension)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "created")
		delete(additionalProperties, "modified")
		delete(additionalProperties, "description")
		delete(additionalProperties, "owner")
		delete(additionalProperties, "accessProfiles")
		delete(additionalProperties, "entitlements")
		delete(additionalProperties, "membership")
		delete(additionalProperties, "parentId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDimension struct {
	value *Dimension
	isSet bool
}

func (v NullableDimension) Get() *Dimension {
	return v.value
}

func (v *NullableDimension) Set(val *Dimension) {
	v.value = val
	v.isSet = true
}

func (v NullableDimension) IsSet() bool {
	return v.isSet
}

func (v *NullableDimension) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDimension(val *Dimension) *NullableDimension {
	return &NullableDimension{value: val, isSet: true}
}

func (v NullableDimension) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDimension) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


