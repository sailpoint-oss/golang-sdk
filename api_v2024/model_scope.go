/*
Identity Security Cloud V2024 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2024
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2024

import (
	"encoding/json"
)

// checks if the Scope type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Scope{}

// Scope This defines what access the segment is giving
type Scope struct {
	Scope *ScopeType `json:"scope,omitempty"`
	Visibility *ScopeVisibilityType `json:"visibility,omitempty"`
	ScopeFilter *VisibilityCriteria `json:"scopeFilter,omitempty"`
	// List of Identities that are assigned to the segment
	ScopeSelection []Ref `json:"scopeSelection,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Scope Scope

// NewScope instantiates a new Scope object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScope() *Scope {
	this := Scope{}
	return &this
}

// NewScopeWithDefaults instantiates a new Scope object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScopeWithDefaults() *Scope {
	this := Scope{}
	return &this
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *Scope) GetScope() ScopeType {
	if o == nil || IsNil(o.Scope) {
		var ret ScopeType
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scope) GetScopeOk() (*ScopeType, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *Scope) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given ScopeType and assigns it to the Scope field.
func (o *Scope) SetScope(v ScopeType) {
	o.Scope = &v
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *Scope) GetVisibility() ScopeVisibilityType {
	if o == nil || IsNil(o.Visibility) {
		var ret ScopeVisibilityType
		return ret
	}
	return *o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scope) GetVisibilityOk() (*ScopeVisibilityType, bool) {
	if o == nil || IsNil(o.Visibility) {
		return nil, false
	}
	return o.Visibility, true
}

// HasVisibility returns a boolean if a field has been set.
func (o *Scope) HasVisibility() bool {
	if o != nil && !IsNil(o.Visibility) {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given ScopeVisibilityType and assigns it to the Visibility field.
func (o *Scope) SetVisibility(v ScopeVisibilityType) {
	o.Visibility = &v
}

// GetScopeFilter returns the ScopeFilter field value if set, zero value otherwise.
func (o *Scope) GetScopeFilter() VisibilityCriteria {
	if o == nil || IsNil(o.ScopeFilter) {
		var ret VisibilityCriteria
		return ret
	}
	return *o.ScopeFilter
}

// GetScopeFilterOk returns a tuple with the ScopeFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scope) GetScopeFilterOk() (*VisibilityCriteria, bool) {
	if o == nil || IsNil(o.ScopeFilter) {
		return nil, false
	}
	return o.ScopeFilter, true
}

// HasScopeFilter returns a boolean if a field has been set.
func (o *Scope) HasScopeFilter() bool {
	if o != nil && !IsNil(o.ScopeFilter) {
		return true
	}

	return false
}

// SetScopeFilter gets a reference to the given VisibilityCriteria and assigns it to the ScopeFilter field.
func (o *Scope) SetScopeFilter(v VisibilityCriteria) {
	o.ScopeFilter = &v
}

// GetScopeSelection returns the ScopeSelection field value if set, zero value otherwise.
func (o *Scope) GetScopeSelection() []Ref {
	if o == nil || IsNil(o.ScopeSelection) {
		var ret []Ref
		return ret
	}
	return o.ScopeSelection
}

// GetScopeSelectionOk returns a tuple with the ScopeSelection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scope) GetScopeSelectionOk() ([]Ref, bool) {
	if o == nil || IsNil(o.ScopeSelection) {
		return nil, false
	}
	return o.ScopeSelection, true
}

// HasScopeSelection returns a boolean if a field has been set.
func (o *Scope) HasScopeSelection() bool {
	if o != nil && !IsNil(o.ScopeSelection) {
		return true
	}

	return false
}

// SetScopeSelection gets a reference to the given []Ref and assigns it to the ScopeSelection field.
func (o *Scope) SetScopeSelection(v []Ref) {
	o.ScopeSelection = v
}

func (o Scope) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Scope) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	if !IsNil(o.Visibility) {
		toSerialize["visibility"] = o.Visibility
	}
	if !IsNil(o.ScopeFilter) {
		toSerialize["scopeFilter"] = o.ScopeFilter
	}
	if !IsNil(o.ScopeSelection) {
		toSerialize["scopeSelection"] = o.ScopeSelection
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Scope) UnmarshalJSON(data []byte) (err error) {
	varScope := _Scope{}

	err = json.Unmarshal(data, &varScope)

	if err != nil {
		return err
	}

	*o = Scope(varScope)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "scope")
		delete(additionalProperties, "visibility")
		delete(additionalProperties, "scopeFilter")
		delete(additionalProperties, "scopeSelection")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableScope struct {
	value *Scope
	isSet bool
}

func (v NullableScope) Get() *Scope {
	return v.value
}

func (v *NullableScope) Set(val *Scope) {
	v.value = val
	v.isSet = true
}

func (v NullableScope) IsSet() bool {
	return v.isSet
}

func (v *NullableScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScope(val *Scope) *NullableScope {
	return &NullableScope{value: val, isSet: true}
}

func (v NullableScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


