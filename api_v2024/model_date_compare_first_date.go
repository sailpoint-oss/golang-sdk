/*
Identity Security Cloud V2024 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: v2024
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2024

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// DateCompareFirstDate - This is the first date to consider (The date that would be on the left hand side of the comparison operation).
type DateCompareFirstDate struct {
	AccountAttribute *AccountAttribute
	DateFormat *DateFormat
}

// AccountAttributeAsDateCompareFirstDate is a convenience function that returns AccountAttribute wrapped in DateCompareFirstDate
func AccountAttributeAsDateCompareFirstDate(v *AccountAttribute) DateCompareFirstDate {
	return DateCompareFirstDate{
		AccountAttribute: v,
	}
}

// DateFormatAsDateCompareFirstDate is a convenience function that returns DateFormat wrapped in DateCompareFirstDate
func DateFormatAsDateCompareFirstDate(v *DateFormat) DateCompareFirstDate {
	return DateCompareFirstDate{
		DateFormat: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *DateCompareFirstDate) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AccountAttribute
	err = newStrictDecoder(data).Decode(&dst.AccountAttribute)
	if err == nil {
		jsonAccountAttribute, _ := json.Marshal(dst.AccountAttribute)
		if string(jsonAccountAttribute) == "{}" { // empty struct
			dst.AccountAttribute = nil
		} else {
			if err = validator.Validate(dst.AccountAttribute); err != nil {
				dst.AccountAttribute = nil
			} else {
				match++
			}
		}
	} else {
		dst.AccountAttribute = nil
	}

	// try to unmarshal data into DateFormat
	err = newStrictDecoder(data).Decode(&dst.DateFormat)
	if err == nil {
		jsonDateFormat, _ := json.Marshal(dst.DateFormat)
		if string(jsonDateFormat) == "{}" { // empty struct
			dst.DateFormat = nil
		} else {
			if err = validator.Validate(dst.DateFormat); err != nil {
				dst.DateFormat = nil
			} else {
				match++
			}
		}
	} else {
		dst.DateFormat = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AccountAttribute = nil
		dst.DateFormat = nil

		return fmt.Errorf("data matches more than one schema in oneOf(DateCompareFirstDate)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(DateCompareFirstDate)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src DateCompareFirstDate) MarshalJSON() ([]byte, error) {
	if src.AccountAttribute != nil {
		return json.Marshal(&src.AccountAttribute)
	}

	if src.DateFormat != nil {
		return json.Marshal(&src.DateFormat)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *DateCompareFirstDate) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AccountAttribute != nil {
		return obj.AccountAttribute
	}

	if obj.DateFormat != nil {
		return obj.DateFormat
	}

	// all schemas are nil
	return nil
}

type NullableDateCompareFirstDate struct {
	value *DateCompareFirstDate
	isSet bool
}

func (v NullableDateCompareFirstDate) Get() *DateCompareFirstDate {
	return v.value
}

func (v *NullableDateCompareFirstDate) Set(val *DateCompareFirstDate) {
	v.value = val
	v.isSet = true
}

func (v NullableDateCompareFirstDate) IsSet() bool {
	return v.isSet
}

func (v *NullableDateCompareFirstDate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDateCompareFirstDate(val *DateCompareFirstDate) *NullableDateCompareFirstDate {
	return &NullableDateCompareFirstDate{value: val, isSet: true}
}

func (v NullableDateCompareFirstDate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDateCompareFirstDate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


