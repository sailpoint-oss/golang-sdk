/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
)

// AccountSourceAllOf struct for AccountSourceAllOf
type AccountSourceAllOf struct {
	// the type of source returned
	Type *string `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AccountSourceAllOf AccountSourceAllOf

// NewAccountSourceAllOf instantiates a new AccountSourceAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountSourceAllOf() *AccountSourceAllOf {
	this := AccountSourceAllOf{}
	return &this
}

// NewAccountSourceAllOfWithDefaults instantiates a new AccountSourceAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountSourceAllOfWithDefaults() *AccountSourceAllOf {
	this := AccountSourceAllOf{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AccountSourceAllOf) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountSourceAllOf) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AccountSourceAllOf) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AccountSourceAllOf) SetType(v string) {
	o.Type = &v
}

func (o AccountSourceAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *AccountSourceAllOf) UnmarshalJSON(bytes []byte) (err error) {
	varAccountSourceAllOf := _AccountSourceAllOf{}

	if err = json.Unmarshal(bytes, &varAccountSourceAllOf); err == nil {
		*o = AccountSourceAllOf(varAccountSourceAllOf)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAccountSourceAllOf struct {
	value *AccountSourceAllOf
	isSet bool
}

func (v NullableAccountSourceAllOf) Get() *AccountSourceAllOf {
	return v.value
}

func (v *NullableAccountSourceAllOf) Set(val *AccountSourceAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountSourceAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountSourceAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountSourceAllOf(val *AccountSourceAllOf) *NullableAccountSourceAllOf {
	return &NullableAccountSourceAllOf{value: val, isSet: true}
}

func (v NullableAccountSourceAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountSourceAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


