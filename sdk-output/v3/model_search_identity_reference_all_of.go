/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
)

// SearchIdentityReferenceAllOf struct for SearchIdentityReferenceAllOf
type SearchIdentityReferenceAllOf struct {
	Type *DtoType `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SearchIdentityReferenceAllOf SearchIdentityReferenceAllOf

// NewSearchIdentityReferenceAllOf instantiates a new SearchIdentityReferenceAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchIdentityReferenceAllOf() *SearchIdentityReferenceAllOf {
	this := SearchIdentityReferenceAllOf{}
	return &this
}

// NewSearchIdentityReferenceAllOfWithDefaults instantiates a new SearchIdentityReferenceAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchIdentityReferenceAllOfWithDefaults() *SearchIdentityReferenceAllOf {
	this := SearchIdentityReferenceAllOf{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SearchIdentityReferenceAllOf) GetType() DtoType {
	if o == nil || isNil(o.Type) {
		var ret DtoType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchIdentityReferenceAllOf) GetTypeOk() (*DtoType, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SearchIdentityReferenceAllOf) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given DtoType and assigns it to the Type field.
func (o *SearchIdentityReferenceAllOf) SetType(v DtoType) {
	o.Type = &v
}

func (o SearchIdentityReferenceAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *SearchIdentityReferenceAllOf) UnmarshalJSON(bytes []byte) (err error) {
	varSearchIdentityReferenceAllOf := _SearchIdentityReferenceAllOf{}

	if err = json.Unmarshal(bytes, &varSearchIdentityReferenceAllOf); err == nil {
		*o = SearchIdentityReferenceAllOf(varSearchIdentityReferenceAllOf)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSearchIdentityReferenceAllOf struct {
	value *SearchIdentityReferenceAllOf
	isSet bool
}

func (v NullableSearchIdentityReferenceAllOf) Get() *SearchIdentityReferenceAllOf {
	return v.value
}

func (v *NullableSearchIdentityReferenceAllOf) Set(val *SearchIdentityReferenceAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchIdentityReferenceAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchIdentityReferenceAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchIdentityReferenceAllOf(val *SearchIdentityReferenceAllOf) *NullableSearchIdentityReferenceAllOf {
	return &NullableSearchIdentityReferenceAllOf{value: val, isSet: true}
}

func (v NullableSearchIdentityReferenceAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchIdentityReferenceAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


