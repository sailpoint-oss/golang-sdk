/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sailpointsdk

import (
	"encoding/json"
)

// Substring struct for Substring
type Substring struct {
	// The index of the first character to include in the returned substring.   If `begin` is set to -1, the transform will begin at character 0 of the input data 
	Begin int32 `json:"begin"`
	// This integer value is the number of characters to add to the begin attribute when returning a substring.   This attribute is only used if begin is not -1. 
	BeginOffset *int32 `json:"beginOffset,omitempty"`
	// The index of the first character to exclude from the returned substring.  If end is -1 or not provided at all, the substring transform will return everything up to the end of the input string. 
	End *int32 `json:"end,omitempty"`
	// This integer value is the number of characters to add to the end attribute when returning a substring.   This attribute is only used if end is provided and is not -1. 
	EndOffset *int32 `json:"endOffset,omitempty"`
	// A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
	RequiresPeriodicRefresh *bool `json:"requiresPeriodicRefresh,omitempty"`
	Input *Input `json:"input,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Substring Substring

// NewSubstring instantiates a new Substring object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubstring(begin int32) *Substring {
	this := Substring{}
	this.Begin = begin
	var requiresPeriodicRefresh bool = false
	this.RequiresPeriodicRefresh = &requiresPeriodicRefresh
	return &this
}

// NewSubstringWithDefaults instantiates a new Substring object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubstringWithDefaults() *Substring {
	this := Substring{}
	var requiresPeriodicRefresh bool = false
	this.RequiresPeriodicRefresh = &requiresPeriodicRefresh
	return &this
}

// GetBegin returns the Begin field value
func (o *Substring) GetBegin() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Begin
}

// GetBeginOk returns a tuple with the Begin field value
// and a boolean to check if the value has been set.
func (o *Substring) GetBeginOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Begin, true
}

// SetBegin sets field value
func (o *Substring) SetBegin(v int32) {
	o.Begin = v
}

// GetBeginOffset returns the BeginOffset field value if set, zero value otherwise.
func (o *Substring) GetBeginOffset() int32 {
	if o == nil || isNil(o.BeginOffset) {
		var ret int32
		return ret
	}
	return *o.BeginOffset
}

// GetBeginOffsetOk returns a tuple with the BeginOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Substring) GetBeginOffsetOk() (*int32, bool) {
	if o == nil || isNil(o.BeginOffset) {
		return nil, false
	}
	return o.BeginOffset, true
}

// HasBeginOffset returns a boolean if a field has been set.
func (o *Substring) HasBeginOffset() bool {
	if o != nil && !isNil(o.BeginOffset) {
		return true
	}

	return false
}

// SetBeginOffset gets a reference to the given int32 and assigns it to the BeginOffset field.
func (o *Substring) SetBeginOffset(v int32) {
	o.BeginOffset = &v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *Substring) GetEnd() int32 {
	if o == nil || isNil(o.End) {
		var ret int32
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Substring) GetEndOk() (*int32, bool) {
	if o == nil || isNil(o.End) {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *Substring) HasEnd() bool {
	if o != nil && !isNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given int32 and assigns it to the End field.
func (o *Substring) SetEnd(v int32) {
	o.End = &v
}

// GetEndOffset returns the EndOffset field value if set, zero value otherwise.
func (o *Substring) GetEndOffset() int32 {
	if o == nil || isNil(o.EndOffset) {
		var ret int32
		return ret
	}
	return *o.EndOffset
}

// GetEndOffsetOk returns a tuple with the EndOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Substring) GetEndOffsetOk() (*int32, bool) {
	if o == nil || isNil(o.EndOffset) {
		return nil, false
	}
	return o.EndOffset, true
}

// HasEndOffset returns a boolean if a field has been set.
func (o *Substring) HasEndOffset() bool {
	if o != nil && !isNil(o.EndOffset) {
		return true
	}

	return false
}

// SetEndOffset gets a reference to the given int32 and assigns it to the EndOffset field.
func (o *Substring) SetEndOffset(v int32) {
	o.EndOffset = &v
}

// GetRequiresPeriodicRefresh returns the RequiresPeriodicRefresh field value if set, zero value otherwise.
func (o *Substring) GetRequiresPeriodicRefresh() bool {
	if o == nil || isNil(o.RequiresPeriodicRefresh) {
		var ret bool
		return ret
	}
	return *o.RequiresPeriodicRefresh
}

// GetRequiresPeriodicRefreshOk returns a tuple with the RequiresPeriodicRefresh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Substring) GetRequiresPeriodicRefreshOk() (*bool, bool) {
	if o == nil || isNil(o.RequiresPeriodicRefresh) {
		return nil, false
	}
	return o.RequiresPeriodicRefresh, true
}

// HasRequiresPeriodicRefresh returns a boolean if a field has been set.
func (o *Substring) HasRequiresPeriodicRefresh() bool {
	if o != nil && !isNil(o.RequiresPeriodicRefresh) {
		return true
	}

	return false
}

// SetRequiresPeriodicRefresh gets a reference to the given bool and assigns it to the RequiresPeriodicRefresh field.
func (o *Substring) SetRequiresPeriodicRefresh(v bool) {
	o.RequiresPeriodicRefresh = &v
}

// GetInput returns the Input field value if set, zero value otherwise.
func (o *Substring) GetInput() Input {
	if o == nil || isNil(o.Input) {
		var ret Input
		return ret
	}
	return *o.Input
}

// GetInputOk returns a tuple with the Input field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Substring) GetInputOk() (*Input, bool) {
	if o == nil || isNil(o.Input) {
		return nil, false
	}
	return o.Input, true
}

// HasInput returns a boolean if a field has been set.
func (o *Substring) HasInput() bool {
	if o != nil && !isNil(o.Input) {
		return true
	}

	return false
}

// SetInput gets a reference to the given Input and assigns it to the Input field.
func (o *Substring) SetInput(v Input) {
	o.Input = &v
}

func (o Substring) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["begin"] = o.Begin
	}
	if !isNil(o.BeginOffset) {
		toSerialize["beginOffset"] = o.BeginOffset
	}
	if !isNil(o.End) {
		toSerialize["end"] = o.End
	}
	if !isNil(o.EndOffset) {
		toSerialize["endOffset"] = o.EndOffset
	}
	if !isNil(o.RequiresPeriodicRefresh) {
		toSerialize["requiresPeriodicRefresh"] = o.RequiresPeriodicRefresh
	}
	if !isNil(o.Input) {
		toSerialize["input"] = o.Input
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *Substring) UnmarshalJSON(bytes []byte) (err error) {
	varSubstring := _Substring{}

	if err = json.Unmarshal(bytes, &varSubstring); err == nil {
		*o = Substring(varSubstring)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "begin")
		delete(additionalProperties, "beginOffset")
		delete(additionalProperties, "end")
		delete(additionalProperties, "endOffset")
		delete(additionalProperties, "requiresPeriodicRefresh")
		delete(additionalProperties, "input")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSubstring struct {
	value *Substring
	isSet bool
}

func (v NullableSubstring) Get() *Substring {
	return v.value
}

func (v *NullableSubstring) Set(val *Substring) {
	v.value = val
	v.isSet = true
}

func (v NullableSubstring) IsSet() bool {
	return v.isSet
}

func (v *NullableSubstring) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubstring(val *Substring) *NullableSubstring {
	return &NullableSubstring{value: val, isSet: true}
}

func (v NullableSubstring) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubstring) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


