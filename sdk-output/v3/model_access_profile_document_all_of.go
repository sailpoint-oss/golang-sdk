/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sailpointsdk

import (
	"encoding/json"
)

// AccessProfileDocumentAllOf struct for AccessProfileDocumentAllOf
type AccessProfileDocumentAllOf struct {
	Source *Reference `json:"source,omitempty"`
	Entitlements []BaseEntitlement `json:"entitlements,omitempty"`
	EntitlementCount *int32 `json:"entitlementCount,omitempty"`
	Tags []string `json:"tags,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AccessProfileDocumentAllOf AccessProfileDocumentAllOf

// NewAccessProfileDocumentAllOf instantiates a new AccessProfileDocumentAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessProfileDocumentAllOf() *AccessProfileDocumentAllOf {
	this := AccessProfileDocumentAllOf{}
	return &this
}

// NewAccessProfileDocumentAllOfWithDefaults instantiates a new AccessProfileDocumentAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessProfileDocumentAllOfWithDefaults() *AccessProfileDocumentAllOf {
	this := AccessProfileDocumentAllOf{}
	return &this
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *AccessProfileDocumentAllOf) GetSource() Reference {
	if o == nil || isNil(o.Source) {
		var ret Reference
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessProfileDocumentAllOf) GetSourceOk() (*Reference, bool) {
	if o == nil || isNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *AccessProfileDocumentAllOf) HasSource() bool {
	if o != nil && !isNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given Reference and assigns it to the Source field.
func (o *AccessProfileDocumentAllOf) SetSource(v Reference) {
	o.Source = &v
}

// GetEntitlements returns the Entitlements field value if set, zero value otherwise.
func (o *AccessProfileDocumentAllOf) GetEntitlements() []BaseEntitlement {
	if o == nil || isNil(o.Entitlements) {
		var ret []BaseEntitlement
		return ret
	}
	return o.Entitlements
}

// GetEntitlementsOk returns a tuple with the Entitlements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessProfileDocumentAllOf) GetEntitlementsOk() ([]BaseEntitlement, bool) {
	if o == nil || isNil(o.Entitlements) {
		return nil, false
	}
	return o.Entitlements, true
}

// HasEntitlements returns a boolean if a field has been set.
func (o *AccessProfileDocumentAllOf) HasEntitlements() bool {
	if o != nil && !isNil(o.Entitlements) {
		return true
	}

	return false
}

// SetEntitlements gets a reference to the given []BaseEntitlement and assigns it to the Entitlements field.
func (o *AccessProfileDocumentAllOf) SetEntitlements(v []BaseEntitlement) {
	o.Entitlements = v
}

// GetEntitlementCount returns the EntitlementCount field value if set, zero value otherwise.
func (o *AccessProfileDocumentAllOf) GetEntitlementCount() int32 {
	if o == nil || isNil(o.EntitlementCount) {
		var ret int32
		return ret
	}
	return *o.EntitlementCount
}

// GetEntitlementCountOk returns a tuple with the EntitlementCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessProfileDocumentAllOf) GetEntitlementCountOk() (*int32, bool) {
	if o == nil || isNil(o.EntitlementCount) {
		return nil, false
	}
	return o.EntitlementCount, true
}

// HasEntitlementCount returns a boolean if a field has been set.
func (o *AccessProfileDocumentAllOf) HasEntitlementCount() bool {
	if o != nil && !isNil(o.EntitlementCount) {
		return true
	}

	return false
}

// SetEntitlementCount gets a reference to the given int32 and assigns it to the EntitlementCount field.
func (o *AccessProfileDocumentAllOf) SetEntitlementCount(v int32) {
	o.EntitlementCount = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *AccessProfileDocumentAllOf) GetTags() []string {
	if o == nil || isNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessProfileDocumentAllOf) GetTagsOk() ([]string, bool) {
	if o == nil || isNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *AccessProfileDocumentAllOf) HasTags() bool {
	if o != nil && !isNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *AccessProfileDocumentAllOf) SetTags(v []string) {
	o.Tags = v
}

func (o AccessProfileDocumentAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !isNil(o.Entitlements) {
		toSerialize["entitlements"] = o.Entitlements
	}
	if !isNil(o.EntitlementCount) {
		toSerialize["entitlementCount"] = o.EntitlementCount
	}
	if !isNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *AccessProfileDocumentAllOf) UnmarshalJSON(bytes []byte) (err error) {
	varAccessProfileDocumentAllOf := _AccessProfileDocumentAllOf{}

	if err = json.Unmarshal(bytes, &varAccessProfileDocumentAllOf); err == nil {
		*o = AccessProfileDocumentAllOf(varAccessProfileDocumentAllOf)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "source")
		delete(additionalProperties, "entitlements")
		delete(additionalProperties, "entitlementCount")
		delete(additionalProperties, "tags")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAccessProfileDocumentAllOf struct {
	value *AccessProfileDocumentAllOf
	isSet bool
}

func (v NullableAccessProfileDocumentAllOf) Get() *AccessProfileDocumentAllOf {
	return v.value
}

func (v *NullableAccessProfileDocumentAllOf) Set(val *AccessProfileDocumentAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessProfileDocumentAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessProfileDocumentAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessProfileDocumentAllOf(val *AccessProfileDocumentAllOf) *NullableAccessProfileDocumentAllOf {
	return &NullableAccessProfileDocumentAllOf{value: val, isSet: true}
}

func (v NullableAccessProfileDocumentAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessProfileDocumentAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


