/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sailpointsdk

import (
	"encoding/json"
)

// Transform The representation of an internally- or customer-defined transform.
type Transform struct {
	// Unique ID of this transform
	Id *string `json:"id,omitempty"`
	// Unique name of this transform
	Name string `json:"name"`
	// The type of transform operation
	Type string `json:"type"`
	Attributes *TransformAttributes `json:"attributes,omitempty"`
	// Indicates whether this is an internal SailPoint-created transform or a customer-created transform
	Internal *bool `json:"internal,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Transform Transform

// NewTransform instantiates a new Transform object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransform(name string, type_ string) *Transform {
	this := Transform{}
	this.Name = name
	this.Type = type_
	return &this
}

// NewTransformWithDefaults instantiates a new Transform object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransformWithDefaults() *Transform {
	this := Transform{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Transform) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transform) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Transform) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Transform) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *Transform) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Transform) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Transform) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *Transform) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Transform) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Transform) SetType(v string) {
	o.Type = v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *Transform) GetAttributes() TransformAttributes {
	if o == nil || isNil(o.Attributes) {
		var ret TransformAttributes
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transform) GetAttributesOk() (*TransformAttributes, bool) {
	if o == nil || isNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *Transform) HasAttributes() bool {
	if o != nil && !isNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given TransformAttributes and assigns it to the Attributes field.
func (o *Transform) SetAttributes(v TransformAttributes) {
	o.Attributes = &v
}

// GetInternal returns the Internal field value if set, zero value otherwise.
func (o *Transform) GetInternal() bool {
	if o == nil || isNil(o.Internal) {
		var ret bool
		return ret
	}
	return *o.Internal
}

// GetInternalOk returns a tuple with the Internal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transform) GetInternalOk() (*bool, bool) {
	if o == nil || isNil(o.Internal) {
		return nil, false
	}
	return o.Internal, true
}

// HasInternal returns a boolean if a field has been set.
func (o *Transform) HasInternal() bool {
	if o != nil && !isNil(o.Internal) {
		return true
	}

	return false
}

// SetInternal gets a reference to the given bool and assigns it to the Internal field.
func (o *Transform) SetInternal(v bool) {
	o.Internal = &v
}

func (o Transform) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !isNil(o.Internal) {
		toSerialize["internal"] = o.Internal
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *Transform) UnmarshalJSON(bytes []byte) (err error) {
	varTransform := _Transform{}

	if err = json.Unmarshal(bytes, &varTransform); err == nil {
		*o = Transform(varTransform)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "type")
		delete(additionalProperties, "attributes")
		delete(additionalProperties, "internal")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTransform struct {
	value *Transform
	isSet bool
}

func (v NullableTransform) Get() *Transform {
	return v.value
}

func (v *NullableTransform) Set(val *Transform) {
	v.value = val
	v.isSet = true
}

func (v NullableTransform) IsSet() bool {
	return v.isSet
}

func (v *NullableTransform) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransform(val *Transform) *NullableTransform {
	return &NullableTransform{value: val, isSet: true}
}

func (v NullableTransform) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransform) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


