/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sailpointsdk

import (
	"encoding/json"
	"fmt"
)

// TransformAttributes - Meta-data about the transform. Values in this list are specific to the type of transform to be executed.
type TransformAttributes struct {
	AccountAttribute *AccountAttribute
	Base64Decode *Base64Decode
}

// AccountAttributeAsTransformAttributes is a convenience function that returns AccountAttribute wrapped in TransformAttributes
func AccountAttributeAsTransformAttributes(v *AccountAttribute) TransformAttributes {
	return TransformAttributes{
		AccountAttribute: v,
	}
}

// Base64DecodeAsTransformAttributes is a convenience function that returns Base64Decode wrapped in TransformAttributes
func Base64DecodeAsTransformAttributes(v *Base64Decode) TransformAttributes {
	return TransformAttributes{
		Base64Decode: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *TransformAttributes) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AccountAttribute
	err = newStrictDecoder(data).Decode(&dst.AccountAttribute)
	if err == nil {
		jsonAccountAttribute, _ := json.Marshal(dst.AccountAttribute)
		if string(jsonAccountAttribute) == "{}" { // empty struct
			dst.AccountAttribute = nil
		} else {
			match++
		}
	} else {
		dst.AccountAttribute = nil
	}

	// try to unmarshal data into Base64Decode
	err = newStrictDecoder(data).Decode(&dst.Base64Decode)
	if err == nil {
		jsonBase64Decode, _ := json.Marshal(dst.Base64Decode)
		if string(jsonBase64Decode) == "{}" { // empty struct
			dst.Base64Decode = nil
		} else {
			match++
		}
	} else {
		dst.Base64Decode = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AccountAttribute = nil
		dst.Base64Decode = nil

		return fmt.Errorf("data matches more than one schema in oneOf(TransformAttributes)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(TransformAttributes)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TransformAttributes) MarshalJSON() ([]byte, error) {
	if src.AccountAttribute != nil {
		return json.Marshal(&src.AccountAttribute)
	}

	if src.Base64Decode != nil {
		return json.Marshal(&src.Base64Decode)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TransformAttributes) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AccountAttribute != nil {
		return obj.AccountAttribute
	}

	if obj.Base64Decode != nil {
		return obj.Base64Decode
	}

	// all schemas are nil
	return nil
}

type NullableTransformAttributes struct {
	value *TransformAttributes
	isSet bool
}

func (v NullableTransformAttributes) Get() *TransformAttributes {
	return v.value
}

func (v *NullableTransformAttributes) Set(val *TransformAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableTransformAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableTransformAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransformAttributes(val *TransformAttributes) *NullableTransformAttributes {
	return &NullableTransformAttributes{value: val, isSet: true}
}

func (v NullableTransformAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransformAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


