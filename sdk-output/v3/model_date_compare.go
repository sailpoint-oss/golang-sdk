/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sailpointsdk

import (
	"encoding/json"
)

// DateCompare struct for DateCompare
type DateCompare struct {
	FirstDate DateCompareFirstDate `json:"firstDate"`
	SecondDate DateCompareSecondDate `json:"secondDate"`
	// This is the comparison to perform. | Operation | Description | | --------- | ------- | | LT        | Strictly less than: firstDate < secondDate | | LTE       | Less than or equal to: firstDate <= secondDate | | GT        | Strictly greater than: firstDate > secondDate | | GTE       | Greater than or equal to: firstDate >= secondDate | 
	Operator string `json:"operator"`
	// The output of the transform if the expression evalutes to true
	PositiveCondition string `json:"positiveCondition"`
	// The output of the transform if the expression evalutes to false
	NegativeCondition string `json:"negativeCondition"`
	// A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
	RequiresPeriodicRefresh *bool `json:"requiresPeriodicRefresh,omitempty"`
	Input *Input `json:"input,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DateCompare DateCompare

// NewDateCompare instantiates a new DateCompare object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDateCompare(firstDate DateCompareFirstDate, secondDate DateCompareSecondDate, operator string, positiveCondition string, negativeCondition string) *DateCompare {
	this := DateCompare{}
	this.FirstDate = firstDate
	this.SecondDate = secondDate
	this.Operator = operator
	this.PositiveCondition = positiveCondition
	this.NegativeCondition = negativeCondition
	var requiresPeriodicRefresh bool = false
	this.RequiresPeriodicRefresh = &requiresPeriodicRefresh
	return &this
}

// NewDateCompareWithDefaults instantiates a new DateCompare object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDateCompareWithDefaults() *DateCompare {
	this := DateCompare{}
	var requiresPeriodicRefresh bool = false
	this.RequiresPeriodicRefresh = &requiresPeriodicRefresh
	return &this
}

// GetFirstDate returns the FirstDate field value
func (o *DateCompare) GetFirstDate() DateCompareFirstDate {
	if o == nil {
		var ret DateCompareFirstDate
		return ret
	}

	return o.FirstDate
}

// GetFirstDateOk returns a tuple with the FirstDate field value
// and a boolean to check if the value has been set.
func (o *DateCompare) GetFirstDateOk() (*DateCompareFirstDate, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstDate, true
}

// SetFirstDate sets field value
func (o *DateCompare) SetFirstDate(v DateCompareFirstDate) {
	o.FirstDate = v
}

// GetSecondDate returns the SecondDate field value
func (o *DateCompare) GetSecondDate() DateCompareSecondDate {
	if o == nil {
		var ret DateCompareSecondDate
		return ret
	}

	return o.SecondDate
}

// GetSecondDateOk returns a tuple with the SecondDate field value
// and a boolean to check if the value has been set.
func (o *DateCompare) GetSecondDateOk() (*DateCompareSecondDate, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SecondDate, true
}

// SetSecondDate sets field value
func (o *DateCompare) SetSecondDate(v DateCompareSecondDate) {
	o.SecondDate = v
}

// GetOperator returns the Operator field value
func (o *DateCompare) GetOperator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *DateCompare) GetOperatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *DateCompare) SetOperator(v string) {
	o.Operator = v
}

// GetPositiveCondition returns the PositiveCondition field value
func (o *DateCompare) GetPositiveCondition() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PositiveCondition
}

// GetPositiveConditionOk returns a tuple with the PositiveCondition field value
// and a boolean to check if the value has been set.
func (o *DateCompare) GetPositiveConditionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PositiveCondition, true
}

// SetPositiveCondition sets field value
func (o *DateCompare) SetPositiveCondition(v string) {
	o.PositiveCondition = v
}

// GetNegativeCondition returns the NegativeCondition field value
func (o *DateCompare) GetNegativeCondition() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NegativeCondition
}

// GetNegativeConditionOk returns a tuple with the NegativeCondition field value
// and a boolean to check if the value has been set.
func (o *DateCompare) GetNegativeConditionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NegativeCondition, true
}

// SetNegativeCondition sets field value
func (o *DateCompare) SetNegativeCondition(v string) {
	o.NegativeCondition = v
}

// GetRequiresPeriodicRefresh returns the RequiresPeriodicRefresh field value if set, zero value otherwise.
func (o *DateCompare) GetRequiresPeriodicRefresh() bool {
	if o == nil || isNil(o.RequiresPeriodicRefresh) {
		var ret bool
		return ret
	}
	return *o.RequiresPeriodicRefresh
}

// GetRequiresPeriodicRefreshOk returns a tuple with the RequiresPeriodicRefresh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DateCompare) GetRequiresPeriodicRefreshOk() (*bool, bool) {
	if o == nil || isNil(o.RequiresPeriodicRefresh) {
		return nil, false
	}
	return o.RequiresPeriodicRefresh, true
}

// HasRequiresPeriodicRefresh returns a boolean if a field has been set.
func (o *DateCompare) HasRequiresPeriodicRefresh() bool {
	if o != nil && !isNil(o.RequiresPeriodicRefresh) {
		return true
	}

	return false
}

// SetRequiresPeriodicRefresh gets a reference to the given bool and assigns it to the RequiresPeriodicRefresh field.
func (o *DateCompare) SetRequiresPeriodicRefresh(v bool) {
	o.RequiresPeriodicRefresh = &v
}

// GetInput returns the Input field value if set, zero value otherwise.
func (o *DateCompare) GetInput() Input {
	if o == nil || isNil(o.Input) {
		var ret Input
		return ret
	}
	return *o.Input
}

// GetInputOk returns a tuple with the Input field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DateCompare) GetInputOk() (*Input, bool) {
	if o == nil || isNil(o.Input) {
		return nil, false
	}
	return o.Input, true
}

// HasInput returns a boolean if a field has been set.
func (o *DateCompare) HasInput() bool {
	if o != nil && !isNil(o.Input) {
		return true
	}

	return false
}

// SetInput gets a reference to the given Input and assigns it to the Input field.
func (o *DateCompare) SetInput(v Input) {
	o.Input = &v
}

func (o DateCompare) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["firstDate"] = o.FirstDate
	}
	if true {
		toSerialize["secondDate"] = o.SecondDate
	}
	if true {
		toSerialize["operator"] = o.Operator
	}
	if true {
		toSerialize["positiveCondition"] = o.PositiveCondition
	}
	if true {
		toSerialize["negativeCondition"] = o.NegativeCondition
	}
	if !isNil(o.RequiresPeriodicRefresh) {
		toSerialize["requiresPeriodicRefresh"] = o.RequiresPeriodicRefresh
	}
	if !isNil(o.Input) {
		toSerialize["input"] = o.Input
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *DateCompare) UnmarshalJSON(bytes []byte) (err error) {
	varDateCompare := _DateCompare{}

	if err = json.Unmarshal(bytes, &varDateCompare); err == nil {
		*o = DateCompare(varDateCompare)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "firstDate")
		delete(additionalProperties, "secondDate")
		delete(additionalProperties, "operator")
		delete(additionalProperties, "positiveCondition")
		delete(additionalProperties, "negativeCondition")
		delete(additionalProperties, "requiresPeriodicRefresh")
		delete(additionalProperties, "input")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDateCompare struct {
	value *DateCompare
	isSet bool
}

func (v NullableDateCompare) Get() *DateCompare {
	return v.value
}

func (v *NullableDateCompare) Set(val *DateCompare) {
	v.value = val
	v.isSet = true
}

func (v NullableDateCompare) IsSet() bool {
	return v.isSet
}

func (v *NullableDateCompare) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDateCompare(val *DateCompare) *NullableDateCompare {
	return &NullableDateCompare{value: val, isSet: true}
}

func (v NullableDateCompare) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDateCompare) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


