/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package beta

import (
	"encoding/json"
)

// Requestability struct for Requestability
type Requestability struct {
	// Whether the requester of the containing object must provide comments justifying the request
	CommentsRequired *bool `json:"commentsRequired,omitempty"`
	// Whether an approver must provide comments when denying the request
	DenialCommentsRequired *bool `json:"denialCommentsRequired,omitempty"`
	// List describing the steps in approving the request
	ApprovalSchemes []AccessProfileApprovalScheme `json:"approvalSchemes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Requestability Requestability

// NewRequestability instantiates a new Requestability object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequestability() *Requestability {
	this := Requestability{}
	return &this
}

// NewRequestabilityWithDefaults instantiates a new Requestability object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequestabilityWithDefaults() *Requestability {
	this := Requestability{}
	return &this
}

// GetCommentsRequired returns the CommentsRequired field value if set, zero value otherwise.
func (o *Requestability) GetCommentsRequired() bool {
	if o == nil || isNil(o.CommentsRequired) {
		var ret bool
		return ret
	}
	return *o.CommentsRequired
}

// GetCommentsRequiredOk returns a tuple with the CommentsRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Requestability) GetCommentsRequiredOk() (*bool, bool) {
	if o == nil || isNil(o.CommentsRequired) {
		return nil, false
	}
	return o.CommentsRequired, true
}

// HasCommentsRequired returns a boolean if a field has been set.
func (o *Requestability) HasCommentsRequired() bool {
	if o != nil && !isNil(o.CommentsRequired) {
		return true
	}

	return false
}

// SetCommentsRequired gets a reference to the given bool and assigns it to the CommentsRequired field.
func (o *Requestability) SetCommentsRequired(v bool) {
	o.CommentsRequired = &v
}

// GetDenialCommentsRequired returns the DenialCommentsRequired field value if set, zero value otherwise.
func (o *Requestability) GetDenialCommentsRequired() bool {
	if o == nil || isNil(o.DenialCommentsRequired) {
		var ret bool
		return ret
	}
	return *o.DenialCommentsRequired
}

// GetDenialCommentsRequiredOk returns a tuple with the DenialCommentsRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Requestability) GetDenialCommentsRequiredOk() (*bool, bool) {
	if o == nil || isNil(o.DenialCommentsRequired) {
		return nil, false
	}
	return o.DenialCommentsRequired, true
}

// HasDenialCommentsRequired returns a boolean if a field has been set.
func (o *Requestability) HasDenialCommentsRequired() bool {
	if o != nil && !isNil(o.DenialCommentsRequired) {
		return true
	}

	return false
}

// SetDenialCommentsRequired gets a reference to the given bool and assigns it to the DenialCommentsRequired field.
func (o *Requestability) SetDenialCommentsRequired(v bool) {
	o.DenialCommentsRequired = &v
}

// GetApprovalSchemes returns the ApprovalSchemes field value if set, zero value otherwise.
func (o *Requestability) GetApprovalSchemes() []AccessProfileApprovalScheme {
	if o == nil || isNil(o.ApprovalSchemes) {
		var ret []AccessProfileApprovalScheme
		return ret
	}
	return o.ApprovalSchemes
}

// GetApprovalSchemesOk returns a tuple with the ApprovalSchemes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Requestability) GetApprovalSchemesOk() ([]AccessProfileApprovalScheme, bool) {
	if o == nil || isNil(o.ApprovalSchemes) {
		return nil, false
	}
	return o.ApprovalSchemes, true
}

// HasApprovalSchemes returns a boolean if a field has been set.
func (o *Requestability) HasApprovalSchemes() bool {
	if o != nil && !isNil(o.ApprovalSchemes) {
		return true
	}

	return false
}

// SetApprovalSchemes gets a reference to the given []AccessProfileApprovalScheme and assigns it to the ApprovalSchemes field.
func (o *Requestability) SetApprovalSchemes(v []AccessProfileApprovalScheme) {
	o.ApprovalSchemes = v
}

func (o Requestability) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.CommentsRequired) {
		toSerialize["commentsRequired"] = o.CommentsRequired
	}
	if !isNil(o.DenialCommentsRequired) {
		toSerialize["denialCommentsRequired"] = o.DenialCommentsRequired
	}
	if !isNil(o.ApprovalSchemes) {
		toSerialize["approvalSchemes"] = o.ApprovalSchemes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *Requestability) UnmarshalJSON(bytes []byte) (err error) {
	varRequestability := _Requestability{}

	if err = json.Unmarshal(bytes, &varRequestability); err == nil {
		*o = Requestability(varRequestability)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "commentsRequired")
		delete(additionalProperties, "denialCommentsRequired")
		delete(additionalProperties, "approvalSchemes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRequestability struct {
	value *Requestability
	isSet bool
}

func (v NullableRequestability) Get() *Requestability {
	return v.value
}

func (v *NullableRequestability) Set(val *Requestability) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestability) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestability) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestability(val *Requestability) *NullableRequestability {
	return &NullableRequestability{value: val, isSet: true}
}

func (v NullableRequestability) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestability) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


