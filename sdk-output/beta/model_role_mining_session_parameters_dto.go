/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package beta

import (
	"encoding/json"
)

// RoleMiningSessionParametersDto struct for RoleMiningSessionParametersDto
type RoleMiningSessionParametersDto struct {
	// Minimum number of identities in a potential role
	MinNumIdentitiesInPotentialRole *int32 `json:"minNumIdentitiesInPotentialRole,omitempty"`
	// The session's saved name
	Name *string `json:"name,omitempty"`
	// The prune threshold to be used or null to calculate prescribedPruneThreshold
	PruneThreshold *int32 `json:"pruneThreshold,omitempty"`
	// The session's saved status
	Saved *bool `json:"saved,omitempty"`
	Scope *RoleMiningSessionScope `json:"scope,omitempty"`
	Type *RoleMiningRoleType `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RoleMiningSessionParametersDto RoleMiningSessionParametersDto

// NewRoleMiningSessionParametersDto instantiates a new RoleMiningSessionParametersDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleMiningSessionParametersDto() *RoleMiningSessionParametersDto {
	this := RoleMiningSessionParametersDto{}
	return &this
}

// NewRoleMiningSessionParametersDtoWithDefaults instantiates a new RoleMiningSessionParametersDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleMiningSessionParametersDtoWithDefaults() *RoleMiningSessionParametersDto {
	this := RoleMiningSessionParametersDto{}
	return &this
}

// GetMinNumIdentitiesInPotentialRole returns the MinNumIdentitiesInPotentialRole field value if set, zero value otherwise.
func (o *RoleMiningSessionParametersDto) GetMinNumIdentitiesInPotentialRole() int32 {
	if o == nil || isNil(o.MinNumIdentitiesInPotentialRole) {
		var ret int32
		return ret
	}
	return *o.MinNumIdentitiesInPotentialRole
}

// GetMinNumIdentitiesInPotentialRoleOk returns a tuple with the MinNumIdentitiesInPotentialRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleMiningSessionParametersDto) GetMinNumIdentitiesInPotentialRoleOk() (*int32, bool) {
	if o == nil || isNil(o.MinNumIdentitiesInPotentialRole) {
		return nil, false
	}
	return o.MinNumIdentitiesInPotentialRole, true
}

// HasMinNumIdentitiesInPotentialRole returns a boolean if a field has been set.
func (o *RoleMiningSessionParametersDto) HasMinNumIdentitiesInPotentialRole() bool {
	if o != nil && !isNil(o.MinNumIdentitiesInPotentialRole) {
		return true
	}

	return false
}

// SetMinNumIdentitiesInPotentialRole gets a reference to the given int32 and assigns it to the MinNumIdentitiesInPotentialRole field.
func (o *RoleMiningSessionParametersDto) SetMinNumIdentitiesInPotentialRole(v int32) {
	o.MinNumIdentitiesInPotentialRole = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RoleMiningSessionParametersDto) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleMiningSessionParametersDto) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RoleMiningSessionParametersDto) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RoleMiningSessionParametersDto) SetName(v string) {
	o.Name = &v
}

// GetPruneThreshold returns the PruneThreshold field value if set, zero value otherwise.
func (o *RoleMiningSessionParametersDto) GetPruneThreshold() int32 {
	if o == nil || isNil(o.PruneThreshold) {
		var ret int32
		return ret
	}
	return *o.PruneThreshold
}

// GetPruneThresholdOk returns a tuple with the PruneThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleMiningSessionParametersDto) GetPruneThresholdOk() (*int32, bool) {
	if o == nil || isNil(o.PruneThreshold) {
		return nil, false
	}
	return o.PruneThreshold, true
}

// HasPruneThreshold returns a boolean if a field has been set.
func (o *RoleMiningSessionParametersDto) HasPruneThreshold() bool {
	if o != nil && !isNil(o.PruneThreshold) {
		return true
	}

	return false
}

// SetPruneThreshold gets a reference to the given int32 and assigns it to the PruneThreshold field.
func (o *RoleMiningSessionParametersDto) SetPruneThreshold(v int32) {
	o.PruneThreshold = &v
}

// GetSaved returns the Saved field value if set, zero value otherwise.
func (o *RoleMiningSessionParametersDto) GetSaved() bool {
	if o == nil || isNil(o.Saved) {
		var ret bool
		return ret
	}
	return *o.Saved
}

// GetSavedOk returns a tuple with the Saved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleMiningSessionParametersDto) GetSavedOk() (*bool, bool) {
	if o == nil || isNil(o.Saved) {
		return nil, false
	}
	return o.Saved, true
}

// HasSaved returns a boolean if a field has been set.
func (o *RoleMiningSessionParametersDto) HasSaved() bool {
	if o != nil && !isNil(o.Saved) {
		return true
	}

	return false
}

// SetSaved gets a reference to the given bool and assigns it to the Saved field.
func (o *RoleMiningSessionParametersDto) SetSaved(v bool) {
	o.Saved = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *RoleMiningSessionParametersDto) GetScope() RoleMiningSessionScope {
	if o == nil || isNil(o.Scope) {
		var ret RoleMiningSessionScope
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleMiningSessionParametersDto) GetScopeOk() (*RoleMiningSessionScope, bool) {
	if o == nil || isNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *RoleMiningSessionParametersDto) HasScope() bool {
	if o != nil && !isNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given RoleMiningSessionScope and assigns it to the Scope field.
func (o *RoleMiningSessionParametersDto) SetScope(v RoleMiningSessionScope) {
	o.Scope = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RoleMiningSessionParametersDto) GetType() RoleMiningRoleType {
	if o == nil || isNil(o.Type) {
		var ret RoleMiningRoleType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleMiningSessionParametersDto) GetTypeOk() (*RoleMiningRoleType, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RoleMiningSessionParametersDto) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given RoleMiningRoleType and assigns it to the Type field.
func (o *RoleMiningSessionParametersDto) SetType(v RoleMiningRoleType) {
	o.Type = &v
}

func (o RoleMiningSessionParametersDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.MinNumIdentitiesInPotentialRole) {
		toSerialize["minNumIdentitiesInPotentialRole"] = o.MinNumIdentitiesInPotentialRole
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.PruneThreshold) {
		toSerialize["pruneThreshold"] = o.PruneThreshold
	}
	if !isNil(o.Saved) {
		toSerialize["saved"] = o.Saved
	}
	if !isNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *RoleMiningSessionParametersDto) UnmarshalJSON(bytes []byte) (err error) {
	varRoleMiningSessionParametersDto := _RoleMiningSessionParametersDto{}

	if err = json.Unmarshal(bytes, &varRoleMiningSessionParametersDto); err == nil {
		*o = RoleMiningSessionParametersDto(varRoleMiningSessionParametersDto)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "minNumIdentitiesInPotentialRole")
		delete(additionalProperties, "name")
		delete(additionalProperties, "pruneThreshold")
		delete(additionalProperties, "saved")
		delete(additionalProperties, "scope")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRoleMiningSessionParametersDto struct {
	value *RoleMiningSessionParametersDto
	isSet bool
}

func (v NullableRoleMiningSessionParametersDto) Get() *RoleMiningSessionParametersDto {
	return v.value
}

func (v *NullableRoleMiningSessionParametersDto) Set(val *RoleMiningSessionParametersDto) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleMiningSessionParametersDto) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleMiningSessionParametersDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleMiningSessionParametersDto(val *RoleMiningSessionParametersDto) *NullableRoleMiningSessionParametersDto {
	return &NullableRoleMiningSessionParametersDto{value: val, isSet: true}
}

func (v NullableRoleMiningSessionParametersDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleMiningSessionParametersDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


