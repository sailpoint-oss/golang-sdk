/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package beta

import (
	"encoding/json"
	"fmt"
)

// RoleMiningPotentialRoleProvisionState Provision state
type RoleMiningPotentialRoleProvisionState string

// List of RoleMiningPotentialRoleProvisionState
const (
	ROLEMININGPOTENTIALROLEPROVISIONSTATE_POTENTIAL RoleMiningPotentialRoleProvisionState = "POTENTIAL"
	ROLEMININGPOTENTIALROLEPROVISIONSTATE_PENDING RoleMiningPotentialRoleProvisionState = "PENDING"
	ROLEMININGPOTENTIALROLEPROVISIONSTATE_COMPLETE RoleMiningPotentialRoleProvisionState = "COMPLETE"
	ROLEMININGPOTENTIALROLEPROVISIONSTATE_FAILED RoleMiningPotentialRoleProvisionState = "FAILED"
)

// All allowed values of RoleMiningPotentialRoleProvisionState enum
var AllowedRoleMiningPotentialRoleProvisionStateEnumValues = []RoleMiningPotentialRoleProvisionState{
	"POTENTIAL",
	"PENDING",
	"COMPLETE",
	"FAILED",
}

func (v *RoleMiningPotentialRoleProvisionState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RoleMiningPotentialRoleProvisionState(value)
	for _, existing := range AllowedRoleMiningPotentialRoleProvisionStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RoleMiningPotentialRoleProvisionState", value)
}

// NewRoleMiningPotentialRoleProvisionStateFromValue returns a pointer to a valid RoleMiningPotentialRoleProvisionState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRoleMiningPotentialRoleProvisionStateFromValue(v string) (*RoleMiningPotentialRoleProvisionState, error) {
	ev := RoleMiningPotentialRoleProvisionState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RoleMiningPotentialRoleProvisionState: valid values are %v", v, AllowedRoleMiningPotentialRoleProvisionStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RoleMiningPotentialRoleProvisionState) IsValid() bool {
	for _, existing := range AllowedRoleMiningPotentialRoleProvisionStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RoleMiningPotentialRoleProvisionState value
func (v RoleMiningPotentialRoleProvisionState) Ptr() *RoleMiningPotentialRoleProvisionState {
	return &v
}

type NullableRoleMiningPotentialRoleProvisionState struct {
	value *RoleMiningPotentialRoleProvisionState
	isSet bool
}

func (v NullableRoleMiningPotentialRoleProvisionState) Get() *RoleMiningPotentialRoleProvisionState {
	return v.value
}

func (v *NullableRoleMiningPotentialRoleProvisionState) Set(val *RoleMiningPotentialRoleProvisionState) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleMiningPotentialRoleProvisionState) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleMiningPotentialRoleProvisionState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleMiningPotentialRoleProvisionState(val *RoleMiningPotentialRoleProvisionState) *NullableRoleMiningPotentialRoleProvisionState {
	return &NullableRoleMiningPotentialRoleProvisionState{value: val, isSet: true}
}

func (v NullableRoleMiningPotentialRoleProvisionState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleMiningPotentialRoleProvisionState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

