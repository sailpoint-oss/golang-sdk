/*
IdentityNow Beta API

Testing IAIAccessRequestRecommendationsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sailpointbetasdk

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_sailpointbetasdk_IAIAccessRequestRecommendationsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test IAIAccessRequestRecommendationsApiService AccessRequestRecommendations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IAIAccessRequestRecommendationsApi.AccessRequestRecommendations(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IAIAccessRequestRecommendationsApiService AddAccessRequestRecommendationsIgnoredItem", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IAIAccessRequestRecommendationsApi.AddAccessRequestRecommendationsIgnoredItem(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IAIAccessRequestRecommendationsApiService AddAccessRequestRecommendationsRequestedItem", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IAIAccessRequestRecommendationsApi.AddAccessRequestRecommendationsRequestedItem(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IAIAccessRequestRecommendationsApiService AddAccessRequestRecommendationsViewedItem", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IAIAccessRequestRecommendationsApi.AddAccessRequestRecommendationsViewedItem(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IAIAccessRequestRecommendationsApiService AddAccessRequestRecommendationsViewedItems", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IAIAccessRequestRecommendationsApi.AddAccessRequestRecommendationsViewedItems(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IAIAccessRequestRecommendationsApiService GetAccessRequestRecommendationsIgnoredItems", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IAIAccessRequestRecommendationsApi.GetAccessRequestRecommendationsIgnoredItems(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IAIAccessRequestRecommendationsApiService GetAccessRequestRecommendationsRequestedItems", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IAIAccessRequestRecommendationsApi.GetAccessRequestRecommendationsRequestedItems(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IAIAccessRequestRecommendationsApiService GetAccessRequestRecommendationsViewedItems", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IAIAccessRequestRecommendationsApi.GetAccessRequestRecommendationsViewedItems(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IAIAccessRequestRecommendationsApiService GetMessageCatalogs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var catalogId string

		resp, httpRes, err := apiClient.IAIAccessRequestRecommendationsApi.GetMessageCatalogs(context.Background(), catalogId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
