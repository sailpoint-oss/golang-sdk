/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v3

import (
	"encoding/json"
)

// checks if the AccessReviewItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccessReviewItem{}

// AccessReviewItem struct for AccessReviewItem
type AccessReviewItem struct {
	AccessSummary *AccessSummary `json:"accessSummary,omitempty"`
	IdentitySummary *CertificationIdentitySummary `json:"identitySummary,omitempty"`
	// The review item's id
	Id *string `json:"id,omitempty"`
	// Whether the review item is complete
	Completed *bool `json:"completed,omitempty"`
	// Indicates whether the review item is for new access to a source
	NewAccess *bool `json:"newAccess,omitempty"`
	Decision *CertificationDecision `json:"decision,omitempty"`
	// Comments for this review item
	Comments NullableString `json:"comments,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AccessReviewItem AccessReviewItem

// NewAccessReviewItem instantiates a new AccessReviewItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessReviewItem() *AccessReviewItem {
	this := AccessReviewItem{}
	return &this
}

// NewAccessReviewItemWithDefaults instantiates a new AccessReviewItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessReviewItemWithDefaults() *AccessReviewItem {
	this := AccessReviewItem{}
	return &this
}

// GetAccessSummary returns the AccessSummary field value if set, zero value otherwise.
func (o *AccessReviewItem) GetAccessSummary() AccessSummary {
	if o == nil || isNil(o.AccessSummary) {
		var ret AccessSummary
		return ret
	}
	return *o.AccessSummary
}

// GetAccessSummaryOk returns a tuple with the AccessSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessReviewItem) GetAccessSummaryOk() (*AccessSummary, bool) {
	if o == nil || isNil(o.AccessSummary) {
		return nil, false
	}
	return o.AccessSummary, true
}

// HasAccessSummary returns a boolean if a field has been set.
func (o *AccessReviewItem) HasAccessSummary() bool {
	if o != nil && !isNil(o.AccessSummary) {
		return true
	}

	return false
}

// SetAccessSummary gets a reference to the given AccessSummary and assigns it to the AccessSummary field.
func (o *AccessReviewItem) SetAccessSummary(v AccessSummary) {
	o.AccessSummary = &v
}

// GetIdentitySummary returns the IdentitySummary field value if set, zero value otherwise.
func (o *AccessReviewItem) GetIdentitySummary() CertificationIdentitySummary {
	if o == nil || isNil(o.IdentitySummary) {
		var ret CertificationIdentitySummary
		return ret
	}
	return *o.IdentitySummary
}

// GetIdentitySummaryOk returns a tuple with the IdentitySummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessReviewItem) GetIdentitySummaryOk() (*CertificationIdentitySummary, bool) {
	if o == nil || isNil(o.IdentitySummary) {
		return nil, false
	}
	return o.IdentitySummary, true
}

// HasIdentitySummary returns a boolean if a field has been set.
func (o *AccessReviewItem) HasIdentitySummary() bool {
	if o != nil && !isNil(o.IdentitySummary) {
		return true
	}

	return false
}

// SetIdentitySummary gets a reference to the given CertificationIdentitySummary and assigns it to the IdentitySummary field.
func (o *AccessReviewItem) SetIdentitySummary(v CertificationIdentitySummary) {
	o.IdentitySummary = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AccessReviewItem) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessReviewItem) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AccessReviewItem) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AccessReviewItem) SetId(v string) {
	o.Id = &v
}

// GetCompleted returns the Completed field value if set, zero value otherwise.
func (o *AccessReviewItem) GetCompleted() bool {
	if o == nil || isNil(o.Completed) {
		var ret bool
		return ret
	}
	return *o.Completed
}

// GetCompletedOk returns a tuple with the Completed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessReviewItem) GetCompletedOk() (*bool, bool) {
	if o == nil || isNil(o.Completed) {
		return nil, false
	}
	return o.Completed, true
}

// HasCompleted returns a boolean if a field has been set.
func (o *AccessReviewItem) HasCompleted() bool {
	if o != nil && !isNil(o.Completed) {
		return true
	}

	return false
}

// SetCompleted gets a reference to the given bool and assigns it to the Completed field.
func (o *AccessReviewItem) SetCompleted(v bool) {
	o.Completed = &v
}

// GetNewAccess returns the NewAccess field value if set, zero value otherwise.
func (o *AccessReviewItem) GetNewAccess() bool {
	if o == nil || isNil(o.NewAccess) {
		var ret bool
		return ret
	}
	return *o.NewAccess
}

// GetNewAccessOk returns a tuple with the NewAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessReviewItem) GetNewAccessOk() (*bool, bool) {
	if o == nil || isNil(o.NewAccess) {
		return nil, false
	}
	return o.NewAccess, true
}

// HasNewAccess returns a boolean if a field has been set.
func (o *AccessReviewItem) HasNewAccess() bool {
	if o != nil && !isNil(o.NewAccess) {
		return true
	}

	return false
}

// SetNewAccess gets a reference to the given bool and assigns it to the NewAccess field.
func (o *AccessReviewItem) SetNewAccess(v bool) {
	o.NewAccess = &v
}

// GetDecision returns the Decision field value if set, zero value otherwise.
func (o *AccessReviewItem) GetDecision() CertificationDecision {
	if o == nil || isNil(o.Decision) {
		var ret CertificationDecision
		return ret
	}
	return *o.Decision
}

// GetDecisionOk returns a tuple with the Decision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessReviewItem) GetDecisionOk() (*CertificationDecision, bool) {
	if o == nil || isNil(o.Decision) {
		return nil, false
	}
	return o.Decision, true
}

// HasDecision returns a boolean if a field has been set.
func (o *AccessReviewItem) HasDecision() bool {
	if o != nil && !isNil(o.Decision) {
		return true
	}

	return false
}

// SetDecision gets a reference to the given CertificationDecision and assigns it to the Decision field.
func (o *AccessReviewItem) SetDecision(v CertificationDecision) {
	o.Decision = &v
}

// GetComments returns the Comments field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccessReviewItem) GetComments() string {
	if o == nil || isNil(o.Comments.Get()) {
		var ret string
		return ret
	}
	return *o.Comments.Get()
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccessReviewItem) GetCommentsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Comments.Get(), o.Comments.IsSet()
}

// HasComments returns a boolean if a field has been set.
func (o *AccessReviewItem) HasComments() bool {
	if o != nil && o.Comments.IsSet() {
		return true
	}

	return false
}

// SetComments gets a reference to the given NullableString and assigns it to the Comments field.
func (o *AccessReviewItem) SetComments(v string) {
	o.Comments.Set(&v)
}
// SetCommentsNil sets the value for Comments to be an explicit nil
func (o *AccessReviewItem) SetCommentsNil() {
	o.Comments.Set(nil)
}

// UnsetComments ensures that no value is present for Comments, not even an explicit nil
func (o *AccessReviewItem) UnsetComments() {
	o.Comments.Unset()
}

func (o AccessReviewItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccessReviewItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AccessSummary) {
		toSerialize["accessSummary"] = o.AccessSummary
	}
	if !isNil(o.IdentitySummary) {
		toSerialize["identitySummary"] = o.IdentitySummary
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Completed) {
		toSerialize["completed"] = o.Completed
	}
	if !isNil(o.NewAccess) {
		toSerialize["newAccess"] = o.NewAccess
	}
	if !isNil(o.Decision) {
		toSerialize["decision"] = o.Decision
	}
	if o.Comments.IsSet() {
		toSerialize["comments"] = o.Comments.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AccessReviewItem) UnmarshalJSON(bytes []byte) (err error) {
	varAccessReviewItem := _AccessReviewItem{}

	if err = json.Unmarshal(bytes, &varAccessReviewItem); err == nil {
	*o = AccessReviewItem(varAccessReviewItem)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "accessSummary")
		delete(additionalProperties, "identitySummary")
		delete(additionalProperties, "id")
		delete(additionalProperties, "completed")
		delete(additionalProperties, "newAccess")
		delete(additionalProperties, "decision")
		delete(additionalProperties, "comments")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAccessReviewItem struct {
	value *AccessReviewItem
	isSet bool
}

func (v NullableAccessReviewItem) Get() *AccessReviewItem {
	return v.value
}

func (v *NullableAccessReviewItem) Set(val *AccessReviewItem) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessReviewItem) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessReviewItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessReviewItem(val *AccessReviewItem) *NullableAccessReviewItem {
	return &NullableAccessReviewItem{value: val, isSet: true}
}

func (v NullableAccessReviewItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessReviewItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


