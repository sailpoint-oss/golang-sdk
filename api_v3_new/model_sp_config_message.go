/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v3

import (
	"encoding/json"
	"fmt"
)

// checks if the SpConfigMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpConfigMessage{}

// SpConfigMessage Message model for Config Import/Export.
type SpConfigMessage struct {
	// Message key.
	Key string `json:"key"`
	// Message text.
	Text string `json:"text"`
	// Message details if any, in key:value pairs.
	Details map[string]interface{} `json:"details"`
	AdditionalProperties map[string]interface{}
}

type _SpConfigMessage SpConfigMessage

// NewSpConfigMessage instantiates a new SpConfigMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpConfigMessage(key string, text string, details map[string]interface{}) *SpConfigMessage {
	this := SpConfigMessage{}
	this.Key = key
	this.Text = text
	this.Details = details
	return &this
}

// NewSpConfigMessageWithDefaults instantiates a new SpConfigMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpConfigMessageWithDefaults() *SpConfigMessage {
	this := SpConfigMessage{}
	return &this
}

// GetKey returns the Key field value
func (o *SpConfigMessage) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *SpConfigMessage) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *SpConfigMessage) SetKey(v string) {
	o.Key = v
}

// GetText returns the Text field value
func (o *SpConfigMessage) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *SpConfigMessage) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *SpConfigMessage) SetText(v string) {
	o.Text = v
}

// GetDetails returns the Details field value
func (o *SpConfigMessage) GetDetails() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value
// and a boolean to check if the value has been set.
func (o *SpConfigMessage) GetDetailsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Details, true
}

// SetDetails sets field value
func (o *SpConfigMessage) SetDetails(v map[string]interface{}) {
	o.Details = v
}

func (o SpConfigMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpConfigMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	toSerialize["text"] = o.Text
	toSerialize["details"] = o.Details

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SpConfigMessage) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
		"text",
		"details",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSpConfigMessage := _SpConfigMessage{}

	if err = json.Unmarshal(bytes, &varSpConfigMessage); err == nil {
	*o = SpConfigMessage(varSpConfigMessage)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "key")
		delete(additionalProperties, "text")
		delete(additionalProperties, "details")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSpConfigMessage struct {
	value *SpConfigMessage
	isSet bool
}

func (v NullableSpConfigMessage) Get() *SpConfigMessage {
	return v.value
}

func (v *NullableSpConfigMessage) Set(val *SpConfigMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableSpConfigMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableSpConfigMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpConfigMessage(val *SpConfigMessage) *NullableSpConfigMessage {
	return &NullableSpConfigMessage{value: val, isSet: true}
}

func (v NullableSpConfigMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpConfigMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


