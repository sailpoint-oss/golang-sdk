/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v3

import (
	"encoding/json"
	"fmt"
)

// checks if the BucketAggregation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BucketAggregation{}

// BucketAggregation The bucket to group the results of the aggregation query by.
type BucketAggregation struct {
	// The name of the bucket aggregate to be included in the result.
	Name string `json:"name"`
	Type *BucketType `json:"type,omitempty"`
	// The field to bucket on. Prefix the field name with '@' to reference a nested object.
	Field string `json:"field"`
	// Maximum number of buckets to include.
	Size *int32 `json:"size,omitempty"`
	// Minimum number of documents a bucket should have.
	MinDocCount *int32 `json:"minDocCount,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _BucketAggregation BucketAggregation

// NewBucketAggregation instantiates a new BucketAggregation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBucketAggregation(name string, field string) *BucketAggregation {
	this := BucketAggregation{}
	this.Name = name
	var type_ BucketType = BUCKETTYPE_TERMS
	this.Type = &type_
	this.Field = field
	return &this
}

// NewBucketAggregationWithDefaults instantiates a new BucketAggregation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBucketAggregationWithDefaults() *BucketAggregation {
	this := BucketAggregation{}
	var type_ BucketType = BUCKETTYPE_TERMS
	this.Type = &type_
	return &this
}

// GetName returns the Name field value
func (o *BucketAggregation) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *BucketAggregation) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BucketAggregation) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *BucketAggregation) GetType() BucketType {
	if o == nil || isNil(o.Type) {
		var ret BucketType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BucketAggregation) GetTypeOk() (*BucketType, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *BucketAggregation) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given BucketType and assigns it to the Type field.
func (o *BucketAggregation) SetType(v BucketType) {
	o.Type = &v
}

// GetField returns the Field field value
func (o *BucketAggregation) GetField() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Field
}

// GetFieldOk returns a tuple with the Field field value
// and a boolean to check if the value has been set.
func (o *BucketAggregation) GetFieldOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Field, true
}

// SetField sets field value
func (o *BucketAggregation) SetField(v string) {
	o.Field = v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *BucketAggregation) GetSize() int32 {
	if o == nil || isNil(o.Size) {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BucketAggregation) GetSizeOk() (*int32, bool) {
	if o == nil || isNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *BucketAggregation) HasSize() bool {
	if o != nil && !isNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *BucketAggregation) SetSize(v int32) {
	o.Size = &v
}

// GetMinDocCount returns the MinDocCount field value if set, zero value otherwise.
func (o *BucketAggregation) GetMinDocCount() int32 {
	if o == nil || isNil(o.MinDocCount) {
		var ret int32
		return ret
	}
	return *o.MinDocCount
}

// GetMinDocCountOk returns a tuple with the MinDocCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BucketAggregation) GetMinDocCountOk() (*int32, bool) {
	if o == nil || isNil(o.MinDocCount) {
		return nil, false
	}
	return o.MinDocCount, true
}

// HasMinDocCount returns a boolean if a field has been set.
func (o *BucketAggregation) HasMinDocCount() bool {
	if o != nil && !isNil(o.MinDocCount) {
		return true
	}

	return false
}

// SetMinDocCount gets a reference to the given int32 and assigns it to the MinDocCount field.
func (o *BucketAggregation) SetMinDocCount(v int32) {
	o.MinDocCount = &v
}

func (o BucketAggregation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BucketAggregation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["field"] = o.Field
	if !isNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !isNil(o.MinDocCount) {
		toSerialize["minDocCount"] = o.MinDocCount
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BucketAggregation) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"field",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBucketAggregation := _BucketAggregation{}

	if err = json.Unmarshal(bytes, &varBucketAggregation); err == nil {
	*o = BucketAggregation(varBucketAggregation)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "type")
		delete(additionalProperties, "field")
		delete(additionalProperties, "size")
		delete(additionalProperties, "minDocCount")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBucketAggregation struct {
	value *BucketAggregation
	isSet bool
}

func (v NullableBucketAggregation) Get() *BucketAggregation {
	return v.value
}

func (v *NullableBucketAggregation) Set(val *BucketAggregation) {
	v.value = val
	v.isSet = true
}

func (v NullableBucketAggregation) IsSet() bool {
	return v.isSet
}

func (v *NullableBucketAggregation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBucketAggregation(val *BucketAggregation) *NullableBucketAggregation {
	return &NullableBucketAggregation{value: val, isSet: true}
}

func (v NullableBucketAggregation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBucketAggregation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


