/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v3

import (
	"encoding/json"
)

// checks if the ReassignmentTrailDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReassignmentTrailDTO{}

// ReassignmentTrailDTO struct for ReassignmentTrailDTO
type ReassignmentTrailDTO struct {
	// The ID of previous owner identity.
	PreviousOwner *string `json:"previousOwner,omitempty"`
	// The ID of new owner identity.
	NewOwner *string `json:"newOwner,omitempty"`
	// The type of reassignment.
	ReassignmentType *string `json:"reassignmentType,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ReassignmentTrailDTO ReassignmentTrailDTO

// NewReassignmentTrailDTO instantiates a new ReassignmentTrailDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReassignmentTrailDTO() *ReassignmentTrailDTO {
	this := ReassignmentTrailDTO{}
	return &this
}

// NewReassignmentTrailDTOWithDefaults instantiates a new ReassignmentTrailDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReassignmentTrailDTOWithDefaults() *ReassignmentTrailDTO {
	this := ReassignmentTrailDTO{}
	return &this
}

// GetPreviousOwner returns the PreviousOwner field value if set, zero value otherwise.
func (o *ReassignmentTrailDTO) GetPreviousOwner() string {
	if o == nil || isNil(o.PreviousOwner) {
		var ret string
		return ret
	}
	return *o.PreviousOwner
}

// GetPreviousOwnerOk returns a tuple with the PreviousOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReassignmentTrailDTO) GetPreviousOwnerOk() (*string, bool) {
	if o == nil || isNil(o.PreviousOwner) {
		return nil, false
	}
	return o.PreviousOwner, true
}

// HasPreviousOwner returns a boolean if a field has been set.
func (o *ReassignmentTrailDTO) HasPreviousOwner() bool {
	if o != nil && !isNil(o.PreviousOwner) {
		return true
	}

	return false
}

// SetPreviousOwner gets a reference to the given string and assigns it to the PreviousOwner field.
func (o *ReassignmentTrailDTO) SetPreviousOwner(v string) {
	o.PreviousOwner = &v
}

// GetNewOwner returns the NewOwner field value if set, zero value otherwise.
func (o *ReassignmentTrailDTO) GetNewOwner() string {
	if o == nil || isNil(o.NewOwner) {
		var ret string
		return ret
	}
	return *o.NewOwner
}

// GetNewOwnerOk returns a tuple with the NewOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReassignmentTrailDTO) GetNewOwnerOk() (*string, bool) {
	if o == nil || isNil(o.NewOwner) {
		return nil, false
	}
	return o.NewOwner, true
}

// HasNewOwner returns a boolean if a field has been set.
func (o *ReassignmentTrailDTO) HasNewOwner() bool {
	if o != nil && !isNil(o.NewOwner) {
		return true
	}

	return false
}

// SetNewOwner gets a reference to the given string and assigns it to the NewOwner field.
func (o *ReassignmentTrailDTO) SetNewOwner(v string) {
	o.NewOwner = &v
}

// GetReassignmentType returns the ReassignmentType field value if set, zero value otherwise.
func (o *ReassignmentTrailDTO) GetReassignmentType() string {
	if o == nil || isNil(o.ReassignmentType) {
		var ret string
		return ret
	}
	return *o.ReassignmentType
}

// GetReassignmentTypeOk returns a tuple with the ReassignmentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReassignmentTrailDTO) GetReassignmentTypeOk() (*string, bool) {
	if o == nil || isNil(o.ReassignmentType) {
		return nil, false
	}
	return o.ReassignmentType, true
}

// HasReassignmentType returns a boolean if a field has been set.
func (o *ReassignmentTrailDTO) HasReassignmentType() bool {
	if o != nil && !isNil(o.ReassignmentType) {
		return true
	}

	return false
}

// SetReassignmentType gets a reference to the given string and assigns it to the ReassignmentType field.
func (o *ReassignmentTrailDTO) SetReassignmentType(v string) {
	o.ReassignmentType = &v
}

func (o ReassignmentTrailDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReassignmentTrailDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.PreviousOwner) {
		toSerialize["previousOwner"] = o.PreviousOwner
	}
	if !isNil(o.NewOwner) {
		toSerialize["newOwner"] = o.NewOwner
	}
	if !isNil(o.ReassignmentType) {
		toSerialize["reassignmentType"] = o.ReassignmentType
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ReassignmentTrailDTO) UnmarshalJSON(bytes []byte) (err error) {
	varReassignmentTrailDTO := _ReassignmentTrailDTO{}

	if err = json.Unmarshal(bytes, &varReassignmentTrailDTO); err == nil {
	*o = ReassignmentTrailDTO(varReassignmentTrailDTO)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "previousOwner")
		delete(additionalProperties, "newOwner")
		delete(additionalProperties, "reassignmentType")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableReassignmentTrailDTO struct {
	value *ReassignmentTrailDTO
	isSet bool
}

func (v NullableReassignmentTrailDTO) Get() *ReassignmentTrailDTO {
	return v.value
}

func (v *NullableReassignmentTrailDTO) Set(val *ReassignmentTrailDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableReassignmentTrailDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableReassignmentTrailDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReassignmentTrailDTO(val *ReassignmentTrailDTO) *NullableReassignmentTrailDTO {
	return &NullableReassignmentTrailDTO{value: val, isSet: true}
}

func (v NullableReassignmentTrailDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReassignmentTrailDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


