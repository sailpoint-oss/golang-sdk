/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v3

import (
	"encoding/json"
	"time"
)

// checks if the CertificationTask type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertificationTask{}

// CertificationTask struct for CertificationTask
type CertificationTask struct {
	// The ID of the certification task.
	Id *string `json:"id,omitempty"`
	// The type of the certification task. More values may be added in the future.
	Type *string `json:"type,omitempty"`
	// The type of item that is being operated on by this task whose ID is stored in the targetId field.
	TargetType *string `json:"targetType,omitempty"`
	// The ID of the item being operated on by this task.
	TargetId *string `json:"targetId,omitempty"`
	// The status of the task.
	Status *string `json:"status,omitempty"`
	Errors []ErrorMessageDto `json:"errors,omitempty"`
	// Reassignment trails that lead to self certification identity
	ReassignmentTrailDTOs []ReassignmentTrailDTO `json:"reassignmentTrailDTOs,omitempty"`
	// The date and time on which this task was created.
	Created *time.Time `json:"created,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CertificationTask CertificationTask

// NewCertificationTask instantiates a new CertificationTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificationTask() *CertificationTask {
	this := CertificationTask{}
	return &this
}

// NewCertificationTaskWithDefaults instantiates a new CertificationTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificationTaskWithDefaults() *CertificationTask {
	this := CertificationTask{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CertificationTask) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificationTask) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CertificationTask) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CertificationTask) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CertificationTask) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificationTask) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CertificationTask) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CertificationTask) SetType(v string) {
	o.Type = &v
}

// GetTargetType returns the TargetType field value if set, zero value otherwise.
func (o *CertificationTask) GetTargetType() string {
	if o == nil || isNil(o.TargetType) {
		var ret string
		return ret
	}
	return *o.TargetType
}

// GetTargetTypeOk returns a tuple with the TargetType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificationTask) GetTargetTypeOk() (*string, bool) {
	if o == nil || isNil(o.TargetType) {
		return nil, false
	}
	return o.TargetType, true
}

// HasTargetType returns a boolean if a field has been set.
func (o *CertificationTask) HasTargetType() bool {
	if o != nil && !isNil(o.TargetType) {
		return true
	}

	return false
}

// SetTargetType gets a reference to the given string and assigns it to the TargetType field.
func (o *CertificationTask) SetTargetType(v string) {
	o.TargetType = &v
}

// GetTargetId returns the TargetId field value if set, zero value otherwise.
func (o *CertificationTask) GetTargetId() string {
	if o == nil || isNil(o.TargetId) {
		var ret string
		return ret
	}
	return *o.TargetId
}

// GetTargetIdOk returns a tuple with the TargetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificationTask) GetTargetIdOk() (*string, bool) {
	if o == nil || isNil(o.TargetId) {
		return nil, false
	}
	return o.TargetId, true
}

// HasTargetId returns a boolean if a field has been set.
func (o *CertificationTask) HasTargetId() bool {
	if o != nil && !isNil(o.TargetId) {
		return true
	}

	return false
}

// SetTargetId gets a reference to the given string and assigns it to the TargetId field.
func (o *CertificationTask) SetTargetId(v string) {
	o.TargetId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CertificationTask) GetStatus() string {
	if o == nil || isNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificationTask) GetStatusOk() (*string, bool) {
	if o == nil || isNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *CertificationTask) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *CertificationTask) SetStatus(v string) {
	o.Status = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *CertificationTask) GetErrors() []ErrorMessageDto {
	if o == nil || isNil(o.Errors) {
		var ret []ErrorMessageDto
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificationTask) GetErrorsOk() ([]ErrorMessageDto, bool) {
	if o == nil || isNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *CertificationTask) HasErrors() bool {
	if o != nil && !isNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []ErrorMessageDto and assigns it to the Errors field.
func (o *CertificationTask) SetErrors(v []ErrorMessageDto) {
	o.Errors = v
}

// GetReassignmentTrailDTOs returns the ReassignmentTrailDTOs field value if set, zero value otherwise.
func (o *CertificationTask) GetReassignmentTrailDTOs() []ReassignmentTrailDTO {
	if o == nil || isNil(o.ReassignmentTrailDTOs) {
		var ret []ReassignmentTrailDTO
		return ret
	}
	return o.ReassignmentTrailDTOs
}

// GetReassignmentTrailDTOsOk returns a tuple with the ReassignmentTrailDTOs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificationTask) GetReassignmentTrailDTOsOk() ([]ReassignmentTrailDTO, bool) {
	if o == nil || isNil(o.ReassignmentTrailDTOs) {
		return nil, false
	}
	return o.ReassignmentTrailDTOs, true
}

// HasReassignmentTrailDTOs returns a boolean if a field has been set.
func (o *CertificationTask) HasReassignmentTrailDTOs() bool {
	if o != nil && !isNil(o.ReassignmentTrailDTOs) {
		return true
	}

	return false
}

// SetReassignmentTrailDTOs gets a reference to the given []ReassignmentTrailDTO and assigns it to the ReassignmentTrailDTOs field.
func (o *CertificationTask) SetReassignmentTrailDTOs(v []ReassignmentTrailDTO) {
	o.ReassignmentTrailDTOs = v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *CertificationTask) GetCreated() time.Time {
	if o == nil || isNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificationTask) GetCreatedOk() (*time.Time, bool) {
	if o == nil || isNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *CertificationTask) HasCreated() bool {
	if o != nil && !isNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *CertificationTask) SetCreated(v time.Time) {
	o.Created = &v
}

func (o CertificationTask) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CertificationTask) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.TargetType) {
		toSerialize["targetType"] = o.TargetType
	}
	if !isNil(o.TargetId) {
		toSerialize["targetId"] = o.TargetId
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !isNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	if !isNil(o.ReassignmentTrailDTOs) {
		toSerialize["reassignmentTrailDTOs"] = o.ReassignmentTrailDTOs
	}
	if !isNil(o.Created) {
		toSerialize["created"] = o.Created
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CertificationTask) UnmarshalJSON(bytes []byte) (err error) {
	varCertificationTask := _CertificationTask{}

	if err = json.Unmarshal(bytes, &varCertificationTask); err == nil {
	*o = CertificationTask(varCertificationTask)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "type")
		delete(additionalProperties, "targetType")
		delete(additionalProperties, "targetId")
		delete(additionalProperties, "status")
		delete(additionalProperties, "errors")
		delete(additionalProperties, "reassignmentTrailDTOs")
		delete(additionalProperties, "created")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCertificationTask struct {
	value *CertificationTask
	isSet bool
}

func (v NullableCertificationTask) Get() *CertificationTask {
	return v.value
}

func (v *NullableCertificationTask) Set(val *CertificationTask) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificationTask) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificationTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificationTask(val *CertificationTask) *NullableCertificationTask {
	return &NullableCertificationTask{value: val, isSet: true}
}

func (v NullableCertificationTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificationTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


