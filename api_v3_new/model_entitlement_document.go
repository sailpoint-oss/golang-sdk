/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v3

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the EntitlementDocument type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntitlementDocument{}

// EntitlementDocument Entitlement
type EntitlementDocument struct {
	Id string `json:"id"`
	Name string `json:"name"`
	Type DocumentType `json:"_type"`
	// ISO-8601 date-time referring to the time when the object was last modified.
	Modified NullableTime `json:"modified,omitempty"`
	// ISO-8601 date-time referring to the date-time when object was queued to be synced into search database for use in the search API.   This date-time changes anytime there is an update to the object, which triggers a synchronization event being sent to the search database.  There may be some delay between the `synced` time and the time when the updated data is actually available in the search API. 
	Synced *string `json:"synced,omitempty"`
	// Entitlement's display name.
	DisplayName *string `json:"displayName,omitempty"`
	Source *EntitlementDocumentAllOfSource `json:"source,omitempty"`
	// Segments with the role.
	Segments []BaseSegment `json:"segments,omitempty"`
	// Number of segments with the role.
	SegmentCount *int32 `json:"segmentCount,omitempty"`
	// Indicates whether the entitlement is requestable.
	Requestable *bool `json:"requestable,omitempty"`
	// Indicates whether the entitlement is cloud governed.
	CloudGoverned *bool `json:"cloudGoverned,omitempty"`
	// ISO-8601 date-time referring to the time when the object was created.
	Created NullableTime `json:"created,omitempty"`
	// Indicates whether the entitlement is privileged.
	Privileged *bool `json:"privileged,omitempty"`
	// Number of identities who have access to the entitlement.
	IdentityCount *int32 `json:"identityCount,omitempty"`
	// Tags that have been applied to the object.
	Tags []string `json:"tags,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EntitlementDocument EntitlementDocument

// NewEntitlementDocument instantiates a new EntitlementDocument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntitlementDocument(id string, name string, type_ DocumentType) *EntitlementDocument {
	this := EntitlementDocument{}
	this.Id = id
	this.Name = name
	this.Type = type_
	var requestable bool = false
	this.Requestable = &requestable
	var cloudGoverned bool = false
	this.CloudGoverned = &cloudGoverned
	var privileged bool = false
	this.Privileged = &privileged
	return &this
}

// NewEntitlementDocumentWithDefaults instantiates a new EntitlementDocument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntitlementDocumentWithDefaults() *EntitlementDocument {
	this := EntitlementDocument{}
	var requestable bool = false
	this.Requestable = &requestable
	var cloudGoverned bool = false
	this.CloudGoverned = &cloudGoverned
	var privileged bool = false
	this.Privileged = &privileged
	return &this
}

// GetId returns the Id field value
func (o *EntitlementDocument) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *EntitlementDocument) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *EntitlementDocument) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *EntitlementDocument) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EntitlementDocument) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EntitlementDocument) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *EntitlementDocument) GetType() DocumentType {
	if o == nil {
		var ret DocumentType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *EntitlementDocument) GetTypeOk() (*DocumentType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *EntitlementDocument) SetType(v DocumentType) {
	o.Type = v
}

// GetModified returns the Modified field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EntitlementDocument) GetModified() time.Time {
	if o == nil || isNil(o.Modified.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Modified.Get()
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EntitlementDocument) GetModifiedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Modified.Get(), o.Modified.IsSet()
}

// HasModified returns a boolean if a field has been set.
func (o *EntitlementDocument) HasModified() bool {
	if o != nil && o.Modified.IsSet() {
		return true
	}

	return false
}

// SetModified gets a reference to the given NullableTime and assigns it to the Modified field.
func (o *EntitlementDocument) SetModified(v time.Time) {
	o.Modified.Set(&v)
}
// SetModifiedNil sets the value for Modified to be an explicit nil
func (o *EntitlementDocument) SetModifiedNil() {
	o.Modified.Set(nil)
}

// UnsetModified ensures that no value is present for Modified, not even an explicit nil
func (o *EntitlementDocument) UnsetModified() {
	o.Modified.Unset()
}

// GetSynced returns the Synced field value if set, zero value otherwise.
func (o *EntitlementDocument) GetSynced() string {
	if o == nil || isNil(o.Synced) {
		var ret string
		return ret
	}
	return *o.Synced
}

// GetSyncedOk returns a tuple with the Synced field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntitlementDocument) GetSyncedOk() (*string, bool) {
	if o == nil || isNil(o.Synced) {
		return nil, false
	}
	return o.Synced, true
}

// HasSynced returns a boolean if a field has been set.
func (o *EntitlementDocument) HasSynced() bool {
	if o != nil && !isNil(o.Synced) {
		return true
	}

	return false
}

// SetSynced gets a reference to the given string and assigns it to the Synced field.
func (o *EntitlementDocument) SetSynced(v string) {
	o.Synced = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *EntitlementDocument) GetDisplayName() string {
	if o == nil || isNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntitlementDocument) GetDisplayNameOk() (*string, bool) {
	if o == nil || isNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *EntitlementDocument) HasDisplayName() bool {
	if o != nil && !isNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *EntitlementDocument) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *EntitlementDocument) GetSource() EntitlementDocumentAllOfSource {
	if o == nil || isNil(o.Source) {
		var ret EntitlementDocumentAllOfSource
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntitlementDocument) GetSourceOk() (*EntitlementDocumentAllOfSource, bool) {
	if o == nil || isNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *EntitlementDocument) HasSource() bool {
	if o != nil && !isNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given EntitlementDocumentAllOfSource and assigns it to the Source field.
func (o *EntitlementDocument) SetSource(v EntitlementDocumentAllOfSource) {
	o.Source = &v
}

// GetSegments returns the Segments field value if set, zero value otherwise.
func (o *EntitlementDocument) GetSegments() []BaseSegment {
	if o == nil || isNil(o.Segments) {
		var ret []BaseSegment
		return ret
	}
	return o.Segments
}

// GetSegmentsOk returns a tuple with the Segments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntitlementDocument) GetSegmentsOk() ([]BaseSegment, bool) {
	if o == nil || isNil(o.Segments) {
		return nil, false
	}
	return o.Segments, true
}

// HasSegments returns a boolean if a field has been set.
func (o *EntitlementDocument) HasSegments() bool {
	if o != nil && !isNil(o.Segments) {
		return true
	}

	return false
}

// SetSegments gets a reference to the given []BaseSegment and assigns it to the Segments field.
func (o *EntitlementDocument) SetSegments(v []BaseSegment) {
	o.Segments = v
}

// GetSegmentCount returns the SegmentCount field value if set, zero value otherwise.
func (o *EntitlementDocument) GetSegmentCount() int32 {
	if o == nil || isNil(o.SegmentCount) {
		var ret int32
		return ret
	}
	return *o.SegmentCount
}

// GetSegmentCountOk returns a tuple with the SegmentCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntitlementDocument) GetSegmentCountOk() (*int32, bool) {
	if o == nil || isNil(o.SegmentCount) {
		return nil, false
	}
	return o.SegmentCount, true
}

// HasSegmentCount returns a boolean if a field has been set.
func (o *EntitlementDocument) HasSegmentCount() bool {
	if o != nil && !isNil(o.SegmentCount) {
		return true
	}

	return false
}

// SetSegmentCount gets a reference to the given int32 and assigns it to the SegmentCount field.
func (o *EntitlementDocument) SetSegmentCount(v int32) {
	o.SegmentCount = &v
}

// GetRequestable returns the Requestable field value if set, zero value otherwise.
func (o *EntitlementDocument) GetRequestable() bool {
	if o == nil || isNil(o.Requestable) {
		var ret bool
		return ret
	}
	return *o.Requestable
}

// GetRequestableOk returns a tuple with the Requestable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntitlementDocument) GetRequestableOk() (*bool, bool) {
	if o == nil || isNil(o.Requestable) {
		return nil, false
	}
	return o.Requestable, true
}

// HasRequestable returns a boolean if a field has been set.
func (o *EntitlementDocument) HasRequestable() bool {
	if o != nil && !isNil(o.Requestable) {
		return true
	}

	return false
}

// SetRequestable gets a reference to the given bool and assigns it to the Requestable field.
func (o *EntitlementDocument) SetRequestable(v bool) {
	o.Requestable = &v
}

// GetCloudGoverned returns the CloudGoverned field value if set, zero value otherwise.
func (o *EntitlementDocument) GetCloudGoverned() bool {
	if o == nil || isNil(o.CloudGoverned) {
		var ret bool
		return ret
	}
	return *o.CloudGoverned
}

// GetCloudGovernedOk returns a tuple with the CloudGoverned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntitlementDocument) GetCloudGovernedOk() (*bool, bool) {
	if o == nil || isNil(o.CloudGoverned) {
		return nil, false
	}
	return o.CloudGoverned, true
}

// HasCloudGoverned returns a boolean if a field has been set.
func (o *EntitlementDocument) HasCloudGoverned() bool {
	if o != nil && !isNil(o.CloudGoverned) {
		return true
	}

	return false
}

// SetCloudGoverned gets a reference to the given bool and assigns it to the CloudGoverned field.
func (o *EntitlementDocument) SetCloudGoverned(v bool) {
	o.CloudGoverned = &v
}

// GetCreated returns the Created field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EntitlementDocument) GetCreated() time.Time {
	if o == nil || isNil(o.Created.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Created.Get()
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EntitlementDocument) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Created.Get(), o.Created.IsSet()
}

// HasCreated returns a boolean if a field has been set.
func (o *EntitlementDocument) HasCreated() bool {
	if o != nil && o.Created.IsSet() {
		return true
	}

	return false
}

// SetCreated gets a reference to the given NullableTime and assigns it to the Created field.
func (o *EntitlementDocument) SetCreated(v time.Time) {
	o.Created.Set(&v)
}
// SetCreatedNil sets the value for Created to be an explicit nil
func (o *EntitlementDocument) SetCreatedNil() {
	o.Created.Set(nil)
}

// UnsetCreated ensures that no value is present for Created, not even an explicit nil
func (o *EntitlementDocument) UnsetCreated() {
	o.Created.Unset()
}

// GetPrivileged returns the Privileged field value if set, zero value otherwise.
func (o *EntitlementDocument) GetPrivileged() bool {
	if o == nil || isNil(o.Privileged) {
		var ret bool
		return ret
	}
	return *o.Privileged
}

// GetPrivilegedOk returns a tuple with the Privileged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntitlementDocument) GetPrivilegedOk() (*bool, bool) {
	if o == nil || isNil(o.Privileged) {
		return nil, false
	}
	return o.Privileged, true
}

// HasPrivileged returns a boolean if a field has been set.
func (o *EntitlementDocument) HasPrivileged() bool {
	if o != nil && !isNil(o.Privileged) {
		return true
	}

	return false
}

// SetPrivileged gets a reference to the given bool and assigns it to the Privileged field.
func (o *EntitlementDocument) SetPrivileged(v bool) {
	o.Privileged = &v
}

// GetIdentityCount returns the IdentityCount field value if set, zero value otherwise.
func (o *EntitlementDocument) GetIdentityCount() int32 {
	if o == nil || isNil(o.IdentityCount) {
		var ret int32
		return ret
	}
	return *o.IdentityCount
}

// GetIdentityCountOk returns a tuple with the IdentityCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntitlementDocument) GetIdentityCountOk() (*int32, bool) {
	if o == nil || isNil(o.IdentityCount) {
		return nil, false
	}
	return o.IdentityCount, true
}

// HasIdentityCount returns a boolean if a field has been set.
func (o *EntitlementDocument) HasIdentityCount() bool {
	if o != nil && !isNil(o.IdentityCount) {
		return true
	}

	return false
}

// SetIdentityCount gets a reference to the given int32 and assigns it to the IdentityCount field.
func (o *EntitlementDocument) SetIdentityCount(v int32) {
	o.IdentityCount = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *EntitlementDocument) GetTags() []string {
	if o == nil || isNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntitlementDocument) GetTagsOk() ([]string, bool) {
	if o == nil || isNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *EntitlementDocument) HasTags() bool {
	if o != nil && !isNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *EntitlementDocument) SetTags(v []string) {
	o.Tags = v
}

func (o EntitlementDocument) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntitlementDocument) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["_type"] = o.Type
	if o.Modified.IsSet() {
		toSerialize["modified"] = o.Modified.Get()
	}
	if !isNil(o.Synced) {
		toSerialize["synced"] = o.Synced
	}
	if !isNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !isNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !isNil(o.Segments) {
		toSerialize["segments"] = o.Segments
	}
	if !isNil(o.SegmentCount) {
		toSerialize["segmentCount"] = o.SegmentCount
	}
	if !isNil(o.Requestable) {
		toSerialize["requestable"] = o.Requestable
	}
	if !isNil(o.CloudGoverned) {
		toSerialize["cloudGoverned"] = o.CloudGoverned
	}
	if o.Created.IsSet() {
		toSerialize["created"] = o.Created.Get()
	}
	if !isNil(o.Privileged) {
		toSerialize["privileged"] = o.Privileged
	}
	if !isNil(o.IdentityCount) {
		toSerialize["identityCount"] = o.IdentityCount
	}
	if !isNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EntitlementDocument) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEntitlementDocument := _EntitlementDocument{}

	if err = json.Unmarshal(bytes, &varEntitlementDocument); err == nil {
	*o = EntitlementDocument(varEntitlementDocument)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "_type")
		delete(additionalProperties, "modified")
		delete(additionalProperties, "synced")
		delete(additionalProperties, "displayName")
		delete(additionalProperties, "source")
		delete(additionalProperties, "segments")
		delete(additionalProperties, "segmentCount")
		delete(additionalProperties, "requestable")
		delete(additionalProperties, "cloudGoverned")
		delete(additionalProperties, "created")
		delete(additionalProperties, "privileged")
		delete(additionalProperties, "identityCount")
		delete(additionalProperties, "tags")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEntitlementDocument struct {
	value *EntitlementDocument
	isSet bool
}

func (v NullableEntitlementDocument) Get() *EntitlementDocument {
	return v.value
}

func (v *NullableEntitlementDocument) Set(val *EntitlementDocument) {
	v.value = val
	v.isSet = true
}

func (v NullableEntitlementDocument) IsSet() bool {
	return v.isSet
}

func (v *NullableEntitlementDocument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntitlementDocument(val *EntitlementDocument) *NullableEntitlementDocument {
	return &NullableEntitlementDocument{value: val, isSet: true}
}

func (v NullableEntitlementDocument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntitlementDocument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


