/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v3

import (
	"encoding/json"
)

// checks if the BrandingItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BrandingItem{}

// BrandingItem struct for BrandingItem
type BrandingItem struct {
	// name of branding item
	Name *string `json:"name,omitempty"`
	// product name
	ProductName NullableString `json:"productName,omitempty"`
	// hex value of color for action button
	ActionButtonColor NullableString `json:"actionButtonColor,omitempty"`
	// hex value of color for link
	ActiveLinkColor NullableString `json:"activeLinkColor,omitempty"`
	// hex value of color for navigation bar
	NavigationColor NullableString `json:"navigationColor,omitempty"`
	// email from address
	EmailFromAddress NullableString `json:"emailFromAddress,omitempty"`
	// url to standard logo
	StandardLogoURL NullableString `json:"standardLogoURL,omitempty"`
	// login information message
	LoginInformationalMessage NullableString `json:"loginInformationalMessage,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _BrandingItem BrandingItem

// NewBrandingItem instantiates a new BrandingItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBrandingItem() *BrandingItem {
	this := BrandingItem{}
	return &this
}

// NewBrandingItemWithDefaults instantiates a new BrandingItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBrandingItemWithDefaults() *BrandingItem {
	this := BrandingItem{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *BrandingItem) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BrandingItem) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *BrandingItem) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *BrandingItem) SetName(v string) {
	o.Name = &v
}

// GetProductName returns the ProductName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BrandingItem) GetProductName() string {
	if o == nil || isNil(o.ProductName.Get()) {
		var ret string
		return ret
	}
	return *o.ProductName.Get()
}

// GetProductNameOk returns a tuple with the ProductName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BrandingItem) GetProductNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProductName.Get(), o.ProductName.IsSet()
}

// HasProductName returns a boolean if a field has been set.
func (o *BrandingItem) HasProductName() bool {
	if o != nil && o.ProductName.IsSet() {
		return true
	}

	return false
}

// SetProductName gets a reference to the given NullableString and assigns it to the ProductName field.
func (o *BrandingItem) SetProductName(v string) {
	o.ProductName.Set(&v)
}
// SetProductNameNil sets the value for ProductName to be an explicit nil
func (o *BrandingItem) SetProductNameNil() {
	o.ProductName.Set(nil)
}

// UnsetProductName ensures that no value is present for ProductName, not even an explicit nil
func (o *BrandingItem) UnsetProductName() {
	o.ProductName.Unset()
}

// GetActionButtonColor returns the ActionButtonColor field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BrandingItem) GetActionButtonColor() string {
	if o == nil || isNil(o.ActionButtonColor.Get()) {
		var ret string
		return ret
	}
	return *o.ActionButtonColor.Get()
}

// GetActionButtonColorOk returns a tuple with the ActionButtonColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BrandingItem) GetActionButtonColorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActionButtonColor.Get(), o.ActionButtonColor.IsSet()
}

// HasActionButtonColor returns a boolean if a field has been set.
func (o *BrandingItem) HasActionButtonColor() bool {
	if o != nil && o.ActionButtonColor.IsSet() {
		return true
	}

	return false
}

// SetActionButtonColor gets a reference to the given NullableString and assigns it to the ActionButtonColor field.
func (o *BrandingItem) SetActionButtonColor(v string) {
	o.ActionButtonColor.Set(&v)
}
// SetActionButtonColorNil sets the value for ActionButtonColor to be an explicit nil
func (o *BrandingItem) SetActionButtonColorNil() {
	o.ActionButtonColor.Set(nil)
}

// UnsetActionButtonColor ensures that no value is present for ActionButtonColor, not even an explicit nil
func (o *BrandingItem) UnsetActionButtonColor() {
	o.ActionButtonColor.Unset()
}

// GetActiveLinkColor returns the ActiveLinkColor field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BrandingItem) GetActiveLinkColor() string {
	if o == nil || isNil(o.ActiveLinkColor.Get()) {
		var ret string
		return ret
	}
	return *o.ActiveLinkColor.Get()
}

// GetActiveLinkColorOk returns a tuple with the ActiveLinkColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BrandingItem) GetActiveLinkColorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActiveLinkColor.Get(), o.ActiveLinkColor.IsSet()
}

// HasActiveLinkColor returns a boolean if a field has been set.
func (o *BrandingItem) HasActiveLinkColor() bool {
	if o != nil && o.ActiveLinkColor.IsSet() {
		return true
	}

	return false
}

// SetActiveLinkColor gets a reference to the given NullableString and assigns it to the ActiveLinkColor field.
func (o *BrandingItem) SetActiveLinkColor(v string) {
	o.ActiveLinkColor.Set(&v)
}
// SetActiveLinkColorNil sets the value for ActiveLinkColor to be an explicit nil
func (o *BrandingItem) SetActiveLinkColorNil() {
	o.ActiveLinkColor.Set(nil)
}

// UnsetActiveLinkColor ensures that no value is present for ActiveLinkColor, not even an explicit nil
func (o *BrandingItem) UnsetActiveLinkColor() {
	o.ActiveLinkColor.Unset()
}

// GetNavigationColor returns the NavigationColor field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BrandingItem) GetNavigationColor() string {
	if o == nil || isNil(o.NavigationColor.Get()) {
		var ret string
		return ret
	}
	return *o.NavigationColor.Get()
}

// GetNavigationColorOk returns a tuple with the NavigationColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BrandingItem) GetNavigationColorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NavigationColor.Get(), o.NavigationColor.IsSet()
}

// HasNavigationColor returns a boolean if a field has been set.
func (o *BrandingItem) HasNavigationColor() bool {
	if o != nil && o.NavigationColor.IsSet() {
		return true
	}

	return false
}

// SetNavigationColor gets a reference to the given NullableString and assigns it to the NavigationColor field.
func (o *BrandingItem) SetNavigationColor(v string) {
	o.NavigationColor.Set(&v)
}
// SetNavigationColorNil sets the value for NavigationColor to be an explicit nil
func (o *BrandingItem) SetNavigationColorNil() {
	o.NavigationColor.Set(nil)
}

// UnsetNavigationColor ensures that no value is present for NavigationColor, not even an explicit nil
func (o *BrandingItem) UnsetNavigationColor() {
	o.NavigationColor.Unset()
}

// GetEmailFromAddress returns the EmailFromAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BrandingItem) GetEmailFromAddress() string {
	if o == nil || isNil(o.EmailFromAddress.Get()) {
		var ret string
		return ret
	}
	return *o.EmailFromAddress.Get()
}

// GetEmailFromAddressOk returns a tuple with the EmailFromAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BrandingItem) GetEmailFromAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmailFromAddress.Get(), o.EmailFromAddress.IsSet()
}

// HasEmailFromAddress returns a boolean if a field has been set.
func (o *BrandingItem) HasEmailFromAddress() bool {
	if o != nil && o.EmailFromAddress.IsSet() {
		return true
	}

	return false
}

// SetEmailFromAddress gets a reference to the given NullableString and assigns it to the EmailFromAddress field.
func (o *BrandingItem) SetEmailFromAddress(v string) {
	o.EmailFromAddress.Set(&v)
}
// SetEmailFromAddressNil sets the value for EmailFromAddress to be an explicit nil
func (o *BrandingItem) SetEmailFromAddressNil() {
	o.EmailFromAddress.Set(nil)
}

// UnsetEmailFromAddress ensures that no value is present for EmailFromAddress, not even an explicit nil
func (o *BrandingItem) UnsetEmailFromAddress() {
	o.EmailFromAddress.Unset()
}

// GetStandardLogoURL returns the StandardLogoURL field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BrandingItem) GetStandardLogoURL() string {
	if o == nil || isNil(o.StandardLogoURL.Get()) {
		var ret string
		return ret
	}
	return *o.StandardLogoURL.Get()
}

// GetStandardLogoURLOk returns a tuple with the StandardLogoURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BrandingItem) GetStandardLogoURLOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StandardLogoURL.Get(), o.StandardLogoURL.IsSet()
}

// HasStandardLogoURL returns a boolean if a field has been set.
func (o *BrandingItem) HasStandardLogoURL() bool {
	if o != nil && o.StandardLogoURL.IsSet() {
		return true
	}

	return false
}

// SetStandardLogoURL gets a reference to the given NullableString and assigns it to the StandardLogoURL field.
func (o *BrandingItem) SetStandardLogoURL(v string) {
	o.StandardLogoURL.Set(&v)
}
// SetStandardLogoURLNil sets the value for StandardLogoURL to be an explicit nil
func (o *BrandingItem) SetStandardLogoURLNil() {
	o.StandardLogoURL.Set(nil)
}

// UnsetStandardLogoURL ensures that no value is present for StandardLogoURL, not even an explicit nil
func (o *BrandingItem) UnsetStandardLogoURL() {
	o.StandardLogoURL.Unset()
}

// GetLoginInformationalMessage returns the LoginInformationalMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BrandingItem) GetLoginInformationalMessage() string {
	if o == nil || isNil(o.LoginInformationalMessage.Get()) {
		var ret string
		return ret
	}
	return *o.LoginInformationalMessage.Get()
}

// GetLoginInformationalMessageOk returns a tuple with the LoginInformationalMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BrandingItem) GetLoginInformationalMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LoginInformationalMessage.Get(), o.LoginInformationalMessage.IsSet()
}

// HasLoginInformationalMessage returns a boolean if a field has been set.
func (o *BrandingItem) HasLoginInformationalMessage() bool {
	if o != nil && o.LoginInformationalMessage.IsSet() {
		return true
	}

	return false
}

// SetLoginInformationalMessage gets a reference to the given NullableString and assigns it to the LoginInformationalMessage field.
func (o *BrandingItem) SetLoginInformationalMessage(v string) {
	o.LoginInformationalMessage.Set(&v)
}
// SetLoginInformationalMessageNil sets the value for LoginInformationalMessage to be an explicit nil
func (o *BrandingItem) SetLoginInformationalMessageNil() {
	o.LoginInformationalMessage.Set(nil)
}

// UnsetLoginInformationalMessage ensures that no value is present for LoginInformationalMessage, not even an explicit nil
func (o *BrandingItem) UnsetLoginInformationalMessage() {
	o.LoginInformationalMessage.Unset()
}

func (o BrandingItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BrandingItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.ProductName.IsSet() {
		toSerialize["productName"] = o.ProductName.Get()
	}
	if o.ActionButtonColor.IsSet() {
		toSerialize["actionButtonColor"] = o.ActionButtonColor.Get()
	}
	if o.ActiveLinkColor.IsSet() {
		toSerialize["activeLinkColor"] = o.ActiveLinkColor.Get()
	}
	if o.NavigationColor.IsSet() {
		toSerialize["navigationColor"] = o.NavigationColor.Get()
	}
	if o.EmailFromAddress.IsSet() {
		toSerialize["emailFromAddress"] = o.EmailFromAddress.Get()
	}
	if o.StandardLogoURL.IsSet() {
		toSerialize["standardLogoURL"] = o.StandardLogoURL.Get()
	}
	if o.LoginInformationalMessage.IsSet() {
		toSerialize["loginInformationalMessage"] = o.LoginInformationalMessage.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BrandingItem) UnmarshalJSON(bytes []byte) (err error) {
	varBrandingItem := _BrandingItem{}

	if err = json.Unmarshal(bytes, &varBrandingItem); err == nil {
	*o = BrandingItem(varBrandingItem)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "productName")
		delete(additionalProperties, "actionButtonColor")
		delete(additionalProperties, "activeLinkColor")
		delete(additionalProperties, "navigationColor")
		delete(additionalProperties, "emailFromAddress")
		delete(additionalProperties, "standardLogoURL")
		delete(additionalProperties, "loginInformationalMessage")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBrandingItem struct {
	value *BrandingItem
	isSet bool
}

func (v NullableBrandingItem) Get() *BrandingItem {
	return v.value
}

func (v *NullableBrandingItem) Set(val *BrandingItem) {
	v.value = val
	v.isSet = true
}

func (v NullableBrandingItem) IsSet() bool {
	return v.isSet
}

func (v *NullableBrandingItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBrandingItem(val *BrandingItem) *NullableBrandingItem {
	return &NullableBrandingItem{value: val, isSet: true}
}

func (v NullableBrandingItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBrandingItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


