/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v3

import (
	"encoding/json"
)

// checks if the SourceUsageStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SourceUsageStatus{}

// SourceUsageStatus struct for SourceUsageStatus
type SourceUsageStatus struct {
	// Source Usage Status. Acceptable values are:   - COMPLETE       - This status means that an activity data source has been setup and usage insights are available for the source.   - INCOMPLETE       - This status means that an activity data source has not been setup and usage insights are not available for the source.
	Status *string `json:"status,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SourceUsageStatus SourceUsageStatus

// NewSourceUsageStatus instantiates a new SourceUsageStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceUsageStatus() *SourceUsageStatus {
	this := SourceUsageStatus{}
	return &this
}

// NewSourceUsageStatusWithDefaults instantiates a new SourceUsageStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceUsageStatusWithDefaults() *SourceUsageStatus {
	this := SourceUsageStatus{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SourceUsageStatus) GetStatus() string {
	if o == nil || isNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceUsageStatus) GetStatusOk() (*string, bool) {
	if o == nil || isNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SourceUsageStatus) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *SourceUsageStatus) SetStatus(v string) {
	o.Status = &v
}

func (o SourceUsageStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SourceUsageStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SourceUsageStatus) UnmarshalJSON(bytes []byte) (err error) {
	varSourceUsageStatus := _SourceUsageStatus{}

	if err = json.Unmarshal(bytes, &varSourceUsageStatus); err == nil {
	*o = SourceUsageStatus(varSourceUsageStatus)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "status")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSourceUsageStatus struct {
	value *SourceUsageStatus
	isSet bool
}

func (v NullableSourceUsageStatus) Get() *SourceUsageStatus {
	return v.value
}

func (v *NullableSourceUsageStatus) Set(val *SourceUsageStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceUsageStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceUsageStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceUsageStatus(val *SourceUsageStatus) *NullableSourceUsageStatus {
	return &NullableSourceUsageStatus{value: val, isSet: true}
}

func (v NullableSourceUsageStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceUsageStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


