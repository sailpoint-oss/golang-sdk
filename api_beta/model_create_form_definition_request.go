/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateFormDefinitionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateFormDefinitionRequest{}

// CreateFormDefinitionRequest struct for CreateFormDefinitionRequest
type CreateFormDefinitionRequest struct {
	// Description is the form definition description
	Description *string `json:"description,omitempty"`
	// FormConditions is the conditional logic that modify the form dynamically modify the form as the recipient is interacting out the form
	FormConditions []FormCondition `json:"formConditions,omitempty"`
	// FormElements is a list of nested form elements
	FormElements []FormElement `json:"formElements,omitempty"`
	// FormInput is a list of form inputs that are required when creating a form-instance object
	FormInput []FormDefinitionInput `json:"formInput,omitempty"`
	// Name is the form definition name
	Name string `json:"name"`
	Owner FormOwner `json:"owner"`
	// UsedBy is a list of objects where when any system uses a particular form it reaches out to the form service to record it is currently being used
	UsedBy []FormUsedBy `json:"usedBy,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateFormDefinitionRequest CreateFormDefinitionRequest

// NewCreateFormDefinitionRequest instantiates a new CreateFormDefinitionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateFormDefinitionRequest(name string, owner FormOwner) *CreateFormDefinitionRequest {
	this := CreateFormDefinitionRequest{}
	this.Name = name
	this.Owner = owner
	return &this
}

// NewCreateFormDefinitionRequestWithDefaults instantiates a new CreateFormDefinitionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateFormDefinitionRequestWithDefaults() *CreateFormDefinitionRequest {
	this := CreateFormDefinitionRequest{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateFormDefinitionRequest) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateFormDefinitionRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateFormDefinitionRequest) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateFormDefinitionRequest) SetDescription(v string) {
	o.Description = &v
}

// GetFormConditions returns the FormConditions field value if set, zero value otherwise.
func (o *CreateFormDefinitionRequest) GetFormConditions() []FormCondition {
	if o == nil || isNil(o.FormConditions) {
		var ret []FormCondition
		return ret
	}
	return o.FormConditions
}

// GetFormConditionsOk returns a tuple with the FormConditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateFormDefinitionRequest) GetFormConditionsOk() ([]FormCondition, bool) {
	if o == nil || isNil(o.FormConditions) {
		return nil, false
	}
	return o.FormConditions, true
}

// HasFormConditions returns a boolean if a field has been set.
func (o *CreateFormDefinitionRequest) HasFormConditions() bool {
	if o != nil && !isNil(o.FormConditions) {
		return true
	}

	return false
}

// SetFormConditions gets a reference to the given []FormCondition and assigns it to the FormConditions field.
func (o *CreateFormDefinitionRequest) SetFormConditions(v []FormCondition) {
	o.FormConditions = v
}

// GetFormElements returns the FormElements field value if set, zero value otherwise.
func (o *CreateFormDefinitionRequest) GetFormElements() []FormElement {
	if o == nil || isNil(o.FormElements) {
		var ret []FormElement
		return ret
	}
	return o.FormElements
}

// GetFormElementsOk returns a tuple with the FormElements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateFormDefinitionRequest) GetFormElementsOk() ([]FormElement, bool) {
	if o == nil || isNil(o.FormElements) {
		return nil, false
	}
	return o.FormElements, true
}

// HasFormElements returns a boolean if a field has been set.
func (o *CreateFormDefinitionRequest) HasFormElements() bool {
	if o != nil && !isNil(o.FormElements) {
		return true
	}

	return false
}

// SetFormElements gets a reference to the given []FormElement and assigns it to the FormElements field.
func (o *CreateFormDefinitionRequest) SetFormElements(v []FormElement) {
	o.FormElements = v
}

// GetFormInput returns the FormInput field value if set, zero value otherwise.
func (o *CreateFormDefinitionRequest) GetFormInput() []FormDefinitionInput {
	if o == nil || isNil(o.FormInput) {
		var ret []FormDefinitionInput
		return ret
	}
	return o.FormInput
}

// GetFormInputOk returns a tuple with the FormInput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateFormDefinitionRequest) GetFormInputOk() ([]FormDefinitionInput, bool) {
	if o == nil || isNil(o.FormInput) {
		return nil, false
	}
	return o.FormInput, true
}

// HasFormInput returns a boolean if a field has been set.
func (o *CreateFormDefinitionRequest) HasFormInput() bool {
	if o != nil && !isNil(o.FormInput) {
		return true
	}

	return false
}

// SetFormInput gets a reference to the given []FormDefinitionInput and assigns it to the FormInput field.
func (o *CreateFormDefinitionRequest) SetFormInput(v []FormDefinitionInput) {
	o.FormInput = v
}

// GetName returns the Name field value
func (o *CreateFormDefinitionRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateFormDefinitionRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateFormDefinitionRequest) SetName(v string) {
	o.Name = v
}

// GetOwner returns the Owner field value
func (o *CreateFormDefinitionRequest) GetOwner() FormOwner {
	if o == nil {
		var ret FormOwner
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *CreateFormDefinitionRequest) GetOwnerOk() (*FormOwner, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *CreateFormDefinitionRequest) SetOwner(v FormOwner) {
	o.Owner = v
}

// GetUsedBy returns the UsedBy field value if set, zero value otherwise.
func (o *CreateFormDefinitionRequest) GetUsedBy() []FormUsedBy {
	if o == nil || isNil(o.UsedBy) {
		var ret []FormUsedBy
		return ret
	}
	return o.UsedBy
}

// GetUsedByOk returns a tuple with the UsedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateFormDefinitionRequest) GetUsedByOk() ([]FormUsedBy, bool) {
	if o == nil || isNil(o.UsedBy) {
		return nil, false
	}
	return o.UsedBy, true
}

// HasUsedBy returns a boolean if a field has been set.
func (o *CreateFormDefinitionRequest) HasUsedBy() bool {
	if o != nil && !isNil(o.UsedBy) {
		return true
	}

	return false
}

// SetUsedBy gets a reference to the given []FormUsedBy and assigns it to the UsedBy field.
func (o *CreateFormDefinitionRequest) SetUsedBy(v []FormUsedBy) {
	o.UsedBy = v
}

func (o CreateFormDefinitionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateFormDefinitionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.FormConditions) {
		toSerialize["formConditions"] = o.FormConditions
	}
	if !isNil(o.FormElements) {
		toSerialize["formElements"] = o.FormElements
	}
	if !isNil(o.FormInput) {
		toSerialize["formInput"] = o.FormInput
	}
	toSerialize["name"] = o.Name
	toSerialize["owner"] = o.Owner
	if !isNil(o.UsedBy) {
		toSerialize["usedBy"] = o.UsedBy
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateFormDefinitionRequest) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"owner",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateFormDefinitionRequest := _CreateFormDefinitionRequest{}

	if err = json.Unmarshal(bytes, &varCreateFormDefinitionRequest); err == nil {
	*o = CreateFormDefinitionRequest(varCreateFormDefinitionRequest)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "description")
		delete(additionalProperties, "formConditions")
		delete(additionalProperties, "formElements")
		delete(additionalProperties, "formInput")
		delete(additionalProperties, "name")
		delete(additionalProperties, "owner")
		delete(additionalProperties, "usedBy")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateFormDefinitionRequest struct {
	value *CreateFormDefinitionRequest
	isSet bool
}

func (v NullableCreateFormDefinitionRequest) Get() *CreateFormDefinitionRequest {
	return v.value
}

func (v *NullableCreateFormDefinitionRequest) Set(val *CreateFormDefinitionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateFormDefinitionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateFormDefinitionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateFormDefinitionRequest(val *CreateFormDefinitionRequest) *NullableCreateFormDefinitionRequest {
	return &NullableCreateFormDefinitionRequest{value: val, isSet: true}
}

func (v NullableCreateFormDefinitionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateFormDefinitionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


