/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"fmt"
)

// RequestedItemStatusRequestState Indicates the state of an access request: * EXECUTING: The request is executing, which indicates the system is doing some processing. * REQUEST_COMPLETED: Indicates the request  has been completed. * CANCELLED: The request was cancelled with no user input. * TERMINATED: The request has been terminated before it was able to complete. * PROVISIONING_VERIFICATION_PENDING: The request has finished any approval steps and provisioning is waiting to be verified. * REJECTED: The request was rejected. * PROVISIONING_FAILED: The request has failed to complete. * NOT_ALL_ITEMS_PROVISIONED: One or more of the requested items failed to complete, but there were one or more  successes. * ERROR: An error occurred during request processing.
type RequestedItemStatusRequestState string

// List of RequestedItemStatusRequestState
const (
	REQUESTEDITEMSTATUSREQUESTSTATE_EXECUTING RequestedItemStatusRequestState = "EXECUTING"
	REQUESTEDITEMSTATUSREQUESTSTATE_REQUEST_COMPLETED RequestedItemStatusRequestState = "REQUEST_COMPLETED"
	REQUESTEDITEMSTATUSREQUESTSTATE_CANCELLED RequestedItemStatusRequestState = "CANCELLED"
	REQUESTEDITEMSTATUSREQUESTSTATE_TERMINATED RequestedItemStatusRequestState = "TERMINATED"
	REQUESTEDITEMSTATUSREQUESTSTATE_PROVISIONING_VERIFICATION_PENDING RequestedItemStatusRequestState = "PROVISIONING_VERIFICATION_PENDING"
	REQUESTEDITEMSTATUSREQUESTSTATE_REJECTED RequestedItemStatusRequestState = "REJECTED"
	REQUESTEDITEMSTATUSREQUESTSTATE_PROVISIONING_FAILED RequestedItemStatusRequestState = "PROVISIONING_FAILED"
	REQUESTEDITEMSTATUSREQUESTSTATE_NOT_ALL_ITEMS_PROVISIONED RequestedItemStatusRequestState = "NOT_ALL_ITEMS_PROVISIONED"
	REQUESTEDITEMSTATUSREQUESTSTATE_ERROR RequestedItemStatusRequestState = "ERROR"
)

// All allowed values of RequestedItemStatusRequestState enum
var AllowedRequestedItemStatusRequestStateEnumValues = []RequestedItemStatusRequestState{
	"EXECUTING",
	"REQUEST_COMPLETED",
	"CANCELLED",
	"TERMINATED",
	"PROVISIONING_VERIFICATION_PENDING",
	"REJECTED",
	"PROVISIONING_FAILED",
	"NOT_ALL_ITEMS_PROVISIONED",
	"ERROR",
}

func (v *RequestedItemStatusRequestState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RequestedItemStatusRequestState(value)
	for _, existing := range AllowedRequestedItemStatusRequestStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RequestedItemStatusRequestState", value)
}

// NewRequestedItemStatusRequestStateFromValue returns a pointer to a valid RequestedItemStatusRequestState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRequestedItemStatusRequestStateFromValue(v string) (*RequestedItemStatusRequestState, error) {
	ev := RequestedItemStatusRequestState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RequestedItemStatusRequestState: valid values are %v", v, AllowedRequestedItemStatusRequestStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RequestedItemStatusRequestState) IsValid() bool {
	for _, existing := range AllowedRequestedItemStatusRequestStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RequestedItemStatusRequestState value
func (v RequestedItemStatusRequestState) Ptr() *RequestedItemStatusRequestState {
	return &v
}

type NullableRequestedItemStatusRequestState struct {
	value *RequestedItemStatusRequestState
	isSet bool
}

func (v NullableRequestedItemStatusRequestState) Get() *RequestedItemStatusRequestState {
	return v.value
}

func (v *NullableRequestedItemStatusRequestState) Set(val *RequestedItemStatusRequestState) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestedItemStatusRequestState) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestedItemStatusRequestState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestedItemStatusRequestState(val *RequestedItemStatusRequestState) *NullableRequestedItemStatusRequestState {
	return &NullableRequestedItemStatusRequestState{value: val, isSet: true}
}

func (v NullableRequestedItemStatusRequestState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestedItemStatusRequestState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

