/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
)

// checks if the TenantConfigurationDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TenantConfigurationDetails{}

// TenantConfigurationDetails Details of any tenant-wide Reassignment Configurations (eg. enabled/disabled)
type TenantConfigurationDetails struct {
	// Flag to determine if Reassignment Configuration is enabled or disabled for a tenant.  When this flag is set to true, Reassignment Configuration is disabled.
	Disabled NullableBool `json:"disabled,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TenantConfigurationDetails TenantConfigurationDetails

// NewTenantConfigurationDetails instantiates a new TenantConfigurationDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenantConfigurationDetails() *TenantConfigurationDetails {
	this := TenantConfigurationDetails{}
	var disabled bool = false
	this.Disabled = *NewNullableBool(&disabled)
	return &this
}

// NewTenantConfigurationDetailsWithDefaults instantiates a new TenantConfigurationDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantConfigurationDetailsWithDefaults() *TenantConfigurationDetails {
	this := TenantConfigurationDetails{}
	var disabled bool = false
	this.Disabled = *NewNullableBool(&disabled)
	return &this
}

// GetDisabled returns the Disabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantConfigurationDetails) GetDisabled() bool {
	if o == nil || isNil(o.Disabled.Get()) {
		var ret bool
		return ret
	}
	return *o.Disabled.Get()
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantConfigurationDetails) GetDisabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Disabled.Get(), o.Disabled.IsSet()
}

// HasDisabled returns a boolean if a field has been set.
func (o *TenantConfigurationDetails) HasDisabled() bool {
	if o != nil && o.Disabled.IsSet() {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given NullableBool and assigns it to the Disabled field.
func (o *TenantConfigurationDetails) SetDisabled(v bool) {
	o.Disabled.Set(&v)
}
// SetDisabledNil sets the value for Disabled to be an explicit nil
func (o *TenantConfigurationDetails) SetDisabledNil() {
	o.Disabled.Set(nil)
}

// UnsetDisabled ensures that no value is present for Disabled, not even an explicit nil
func (o *TenantConfigurationDetails) UnsetDisabled() {
	o.Disabled.Unset()
}

func (o TenantConfigurationDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TenantConfigurationDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Disabled.IsSet() {
		toSerialize["disabled"] = o.Disabled.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TenantConfigurationDetails) UnmarshalJSON(bytes []byte) (err error) {
	varTenantConfigurationDetails := _TenantConfigurationDetails{}

	if err = json.Unmarshal(bytes, &varTenantConfigurationDetails); err == nil {
	*o = TenantConfigurationDetails(varTenantConfigurationDetails)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "disabled")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTenantConfigurationDetails struct {
	value *TenantConfigurationDetails
	isSet bool
}

func (v NullableTenantConfigurationDetails) Get() *TenantConfigurationDetails {
	return v.value
}

func (v *NullableTenantConfigurationDetails) Set(val *TenantConfigurationDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantConfigurationDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantConfigurationDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantConfigurationDetails(val *TenantConfigurationDetails) *NullableTenantConfigurationDetails {
	return &NullableTenantConfigurationDetails{value: val, isSet: true}
}

func (v NullableTenantConfigurationDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantConfigurationDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


