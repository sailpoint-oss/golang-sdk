/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"fmt"
)

// ContextAttributeDtoValue - The value of the attribute.  This can be either a string or a multi-valued string
type ContextAttributeDtoValue struct {
	ArrayOfString *[]string
	String *string
}

// []stringAsContextAttributeDtoValue is a convenience function that returns []string wrapped in ContextAttributeDtoValue
func ArrayOfStringAsContextAttributeDtoValue(v *[]string) ContextAttributeDtoValue {
	return ContextAttributeDtoValue{
		ArrayOfString: v,
	}
}

// stringAsContextAttributeDtoValue is a convenience function that returns string wrapped in ContextAttributeDtoValue
func StringAsContextAttributeDtoValue(v *string) ContextAttributeDtoValue {
	return ContextAttributeDtoValue{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ContextAttributeDtoValue) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ArrayOfString
	err = newStrictDecoder(data).Decode(&dst.ArrayOfString)
	if err == nil {
		jsonArrayOfString, _ := json.Marshal(dst.ArrayOfString)
		if string(jsonArrayOfString) == "{}" { // empty struct
			dst.ArrayOfString = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfString = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ArrayOfString = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ContextAttributeDtoValue)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ContextAttributeDtoValue)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ContextAttributeDtoValue) MarshalJSON() ([]byte, error) {
	if src.ArrayOfString != nil {
		return json.Marshal(&src.ArrayOfString)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ContextAttributeDtoValue) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ArrayOfString != nil {
		return obj.ArrayOfString
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableContextAttributeDtoValue struct {
	value *ContextAttributeDtoValue
	isSet bool
}

func (v NullableContextAttributeDtoValue) Get() *ContextAttributeDtoValue {
	return v.value
}

func (v *NullableContextAttributeDtoValue) Set(val *ContextAttributeDtoValue) {
	v.value = val
	v.isSet = true
}

func (v NullableContextAttributeDtoValue) IsSet() bool {
	return v.isSet
}

func (v *NullableContextAttributeDtoValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContextAttributeDtoValue(val *ContextAttributeDtoValue) *NullableContextAttributeDtoValue {
	return &NullableContextAttributeDtoValue{value: val, isSet: true}
}

func (v NullableContextAttributeDtoValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContextAttributeDtoValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


