/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"time"
)

// checks if the Entitlement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Entitlement{}

// Entitlement struct for Entitlement
type Entitlement struct {
	// The entitlement id
	Id *string `json:"id,omitempty"`
	// The entitlement name
	Name *string `json:"name,omitempty"`
	// Time when the entitlement was created
	Created *time.Time `json:"created,omitempty"`
	// Time when the entitlement was last modified
	Modified *time.Time `json:"modified,omitempty"`
	// The entitlement attribute name
	Attribute *string `json:"attribute,omitempty"`
	// The value of the entitlement
	Value *string `json:"value,omitempty"`
	// The object type of the entitlement from the source schema
	SourceSchemaObjectType *string `json:"sourceSchemaObjectType,omitempty"`
	// True if the entitlement is privileged
	Privileged *bool `json:"privileged,omitempty"`
	// True if the entitlement is cloud governed
	CloudGoverned *bool `json:"cloudGoverned,omitempty"`
	// The description of the entitlement
	Description *string `json:"description,omitempty"`
	// True if the entitlement is requestable
	Requestable *bool `json:"requestable,omitempty"`
	// A map of free-form key-value pairs from the source system
	Attributes map[string]interface{} `json:"attributes,omitempty"`
	Source *EntitlementSource `json:"source,omitempty"`
	Owner *OwnerReferenceDto `json:"owner,omitempty"`
	DirectPermissions []PermissionDto `json:"directPermissions,omitempty"`
	// List of IDs of segments, if any, to which this Entitlement is assigned.
	Segments []string `json:"segments,omitempty"`
	ManuallyUpdatedFields *ManuallyUpdatedFieldsDTO `json:"manuallyUpdatedFields,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Entitlement Entitlement

// NewEntitlement instantiates a new Entitlement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntitlement() *Entitlement {
	this := Entitlement{}
	var privileged bool = false
	this.Privileged = &privileged
	var cloudGoverned bool = false
	this.CloudGoverned = &cloudGoverned
	var requestable bool = false
	this.Requestable = &requestable
	return &this
}

// NewEntitlementWithDefaults instantiates a new Entitlement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntitlementWithDefaults() *Entitlement {
	this := Entitlement{}
	var privileged bool = false
	this.Privileged = &privileged
	var cloudGoverned bool = false
	this.CloudGoverned = &cloudGoverned
	var requestable bool = false
	this.Requestable = &requestable
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Entitlement) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entitlement) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Entitlement) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Entitlement) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Entitlement) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entitlement) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Entitlement) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Entitlement) SetName(v string) {
	o.Name = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *Entitlement) GetCreated() time.Time {
	if o == nil || isNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entitlement) GetCreatedOk() (*time.Time, bool) {
	if o == nil || isNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *Entitlement) HasCreated() bool {
	if o != nil && !isNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *Entitlement) SetCreated(v time.Time) {
	o.Created = &v
}

// GetModified returns the Modified field value if set, zero value otherwise.
func (o *Entitlement) GetModified() time.Time {
	if o == nil || isNil(o.Modified) {
		var ret time.Time
		return ret
	}
	return *o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entitlement) GetModifiedOk() (*time.Time, bool) {
	if o == nil || isNil(o.Modified) {
		return nil, false
	}
	return o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *Entitlement) HasModified() bool {
	if o != nil && !isNil(o.Modified) {
		return true
	}

	return false
}

// SetModified gets a reference to the given time.Time and assigns it to the Modified field.
func (o *Entitlement) SetModified(v time.Time) {
	o.Modified = &v
}

// GetAttribute returns the Attribute field value if set, zero value otherwise.
func (o *Entitlement) GetAttribute() string {
	if o == nil || isNil(o.Attribute) {
		var ret string
		return ret
	}
	return *o.Attribute
}

// GetAttributeOk returns a tuple with the Attribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entitlement) GetAttributeOk() (*string, bool) {
	if o == nil || isNil(o.Attribute) {
		return nil, false
	}
	return o.Attribute, true
}

// HasAttribute returns a boolean if a field has been set.
func (o *Entitlement) HasAttribute() bool {
	if o != nil && !isNil(o.Attribute) {
		return true
	}

	return false
}

// SetAttribute gets a reference to the given string and assigns it to the Attribute field.
func (o *Entitlement) SetAttribute(v string) {
	o.Attribute = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *Entitlement) GetValue() string {
	if o == nil || isNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entitlement) GetValueOk() (*string, bool) {
	if o == nil || isNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *Entitlement) HasValue() bool {
	if o != nil && !isNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *Entitlement) SetValue(v string) {
	o.Value = &v
}

// GetSourceSchemaObjectType returns the SourceSchemaObjectType field value if set, zero value otherwise.
func (o *Entitlement) GetSourceSchemaObjectType() string {
	if o == nil || isNil(o.SourceSchemaObjectType) {
		var ret string
		return ret
	}
	return *o.SourceSchemaObjectType
}

// GetSourceSchemaObjectTypeOk returns a tuple with the SourceSchemaObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entitlement) GetSourceSchemaObjectTypeOk() (*string, bool) {
	if o == nil || isNil(o.SourceSchemaObjectType) {
		return nil, false
	}
	return o.SourceSchemaObjectType, true
}

// HasSourceSchemaObjectType returns a boolean if a field has been set.
func (o *Entitlement) HasSourceSchemaObjectType() bool {
	if o != nil && !isNil(o.SourceSchemaObjectType) {
		return true
	}

	return false
}

// SetSourceSchemaObjectType gets a reference to the given string and assigns it to the SourceSchemaObjectType field.
func (o *Entitlement) SetSourceSchemaObjectType(v string) {
	o.SourceSchemaObjectType = &v
}

// GetPrivileged returns the Privileged field value if set, zero value otherwise.
func (o *Entitlement) GetPrivileged() bool {
	if o == nil || isNil(o.Privileged) {
		var ret bool
		return ret
	}
	return *o.Privileged
}

// GetPrivilegedOk returns a tuple with the Privileged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entitlement) GetPrivilegedOk() (*bool, bool) {
	if o == nil || isNil(o.Privileged) {
		return nil, false
	}
	return o.Privileged, true
}

// HasPrivileged returns a boolean if a field has been set.
func (o *Entitlement) HasPrivileged() bool {
	if o != nil && !isNil(o.Privileged) {
		return true
	}

	return false
}

// SetPrivileged gets a reference to the given bool and assigns it to the Privileged field.
func (o *Entitlement) SetPrivileged(v bool) {
	o.Privileged = &v
}

// GetCloudGoverned returns the CloudGoverned field value if set, zero value otherwise.
func (o *Entitlement) GetCloudGoverned() bool {
	if o == nil || isNil(o.CloudGoverned) {
		var ret bool
		return ret
	}
	return *o.CloudGoverned
}

// GetCloudGovernedOk returns a tuple with the CloudGoverned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entitlement) GetCloudGovernedOk() (*bool, bool) {
	if o == nil || isNil(o.CloudGoverned) {
		return nil, false
	}
	return o.CloudGoverned, true
}

// HasCloudGoverned returns a boolean if a field has been set.
func (o *Entitlement) HasCloudGoverned() bool {
	if o != nil && !isNil(o.CloudGoverned) {
		return true
	}

	return false
}

// SetCloudGoverned gets a reference to the given bool and assigns it to the CloudGoverned field.
func (o *Entitlement) SetCloudGoverned(v bool) {
	o.CloudGoverned = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Entitlement) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entitlement) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Entitlement) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Entitlement) SetDescription(v string) {
	o.Description = &v
}

// GetRequestable returns the Requestable field value if set, zero value otherwise.
func (o *Entitlement) GetRequestable() bool {
	if o == nil || isNil(o.Requestable) {
		var ret bool
		return ret
	}
	return *o.Requestable
}

// GetRequestableOk returns a tuple with the Requestable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entitlement) GetRequestableOk() (*bool, bool) {
	if o == nil || isNil(o.Requestable) {
		return nil, false
	}
	return o.Requestable, true
}

// HasRequestable returns a boolean if a field has been set.
func (o *Entitlement) HasRequestable() bool {
	if o != nil && !isNil(o.Requestable) {
		return true
	}

	return false
}

// SetRequestable gets a reference to the given bool and assigns it to the Requestable field.
func (o *Entitlement) SetRequestable(v bool) {
	o.Requestable = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *Entitlement) GetAttributes() map[string]interface{} {
	if o == nil || isNil(o.Attributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entitlement) GetAttributesOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Attributes) {
		return map[string]interface{}{}, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *Entitlement) HasAttributes() bool {
	if o != nil && !isNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]interface{} and assigns it to the Attributes field.
func (o *Entitlement) SetAttributes(v map[string]interface{}) {
	o.Attributes = v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *Entitlement) GetSource() EntitlementSource {
	if o == nil || isNil(o.Source) {
		var ret EntitlementSource
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entitlement) GetSourceOk() (*EntitlementSource, bool) {
	if o == nil || isNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *Entitlement) HasSource() bool {
	if o != nil && !isNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given EntitlementSource and assigns it to the Source field.
func (o *Entitlement) SetSource(v EntitlementSource) {
	o.Source = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *Entitlement) GetOwner() OwnerReferenceDto {
	if o == nil || isNil(o.Owner) {
		var ret OwnerReferenceDto
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entitlement) GetOwnerOk() (*OwnerReferenceDto, bool) {
	if o == nil || isNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *Entitlement) HasOwner() bool {
	if o != nil && !isNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given OwnerReferenceDto and assigns it to the Owner field.
func (o *Entitlement) SetOwner(v OwnerReferenceDto) {
	o.Owner = &v
}

// GetDirectPermissions returns the DirectPermissions field value if set, zero value otherwise.
func (o *Entitlement) GetDirectPermissions() []PermissionDto {
	if o == nil || isNil(o.DirectPermissions) {
		var ret []PermissionDto
		return ret
	}
	return o.DirectPermissions
}

// GetDirectPermissionsOk returns a tuple with the DirectPermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entitlement) GetDirectPermissionsOk() ([]PermissionDto, bool) {
	if o == nil || isNil(o.DirectPermissions) {
		return nil, false
	}
	return o.DirectPermissions, true
}

// HasDirectPermissions returns a boolean if a field has been set.
func (o *Entitlement) HasDirectPermissions() bool {
	if o != nil && !isNil(o.DirectPermissions) {
		return true
	}

	return false
}

// SetDirectPermissions gets a reference to the given []PermissionDto and assigns it to the DirectPermissions field.
func (o *Entitlement) SetDirectPermissions(v []PermissionDto) {
	o.DirectPermissions = v
}

// GetSegments returns the Segments field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Entitlement) GetSegments() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Segments
}

// GetSegmentsOk returns a tuple with the Segments field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Entitlement) GetSegmentsOk() ([]string, bool) {
	if o == nil || isNil(o.Segments) {
		return nil, false
	}
	return o.Segments, true
}

// HasSegments returns a boolean if a field has been set.
func (o *Entitlement) HasSegments() bool {
	if o != nil && isNil(o.Segments) {
		return true
	}

	return false
}

// SetSegments gets a reference to the given []string and assigns it to the Segments field.
func (o *Entitlement) SetSegments(v []string) {
	o.Segments = v
}

// GetManuallyUpdatedFields returns the ManuallyUpdatedFields field value if set, zero value otherwise.
func (o *Entitlement) GetManuallyUpdatedFields() ManuallyUpdatedFieldsDTO {
	if o == nil || isNil(o.ManuallyUpdatedFields) {
		var ret ManuallyUpdatedFieldsDTO
		return ret
	}
	return *o.ManuallyUpdatedFields
}

// GetManuallyUpdatedFieldsOk returns a tuple with the ManuallyUpdatedFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entitlement) GetManuallyUpdatedFieldsOk() (*ManuallyUpdatedFieldsDTO, bool) {
	if o == nil || isNil(o.ManuallyUpdatedFields) {
		return nil, false
	}
	return o.ManuallyUpdatedFields, true
}

// HasManuallyUpdatedFields returns a boolean if a field has been set.
func (o *Entitlement) HasManuallyUpdatedFields() bool {
	if o != nil && !isNil(o.ManuallyUpdatedFields) {
		return true
	}

	return false
}

// SetManuallyUpdatedFields gets a reference to the given ManuallyUpdatedFieldsDTO and assigns it to the ManuallyUpdatedFields field.
func (o *Entitlement) SetManuallyUpdatedFields(v ManuallyUpdatedFieldsDTO) {
	o.ManuallyUpdatedFields = &v
}

func (o Entitlement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Entitlement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !isNil(o.Modified) {
		toSerialize["modified"] = o.Modified
	}
	if !isNil(o.Attribute) {
		toSerialize["attribute"] = o.Attribute
	}
	if !isNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !isNil(o.SourceSchemaObjectType) {
		toSerialize["sourceSchemaObjectType"] = o.SourceSchemaObjectType
	}
	if !isNil(o.Privileged) {
		toSerialize["privileged"] = o.Privileged
	}
	if !isNil(o.CloudGoverned) {
		toSerialize["cloudGoverned"] = o.CloudGoverned
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.Requestable) {
		toSerialize["requestable"] = o.Requestable
	}
	if !isNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !isNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !isNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !isNil(o.DirectPermissions) {
		toSerialize["directPermissions"] = o.DirectPermissions
	}
	if o.Segments != nil {
		toSerialize["segments"] = o.Segments
	}
	if !isNil(o.ManuallyUpdatedFields) {
		toSerialize["manuallyUpdatedFields"] = o.ManuallyUpdatedFields
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Entitlement) UnmarshalJSON(bytes []byte) (err error) {
	varEntitlement := _Entitlement{}

	if err = json.Unmarshal(bytes, &varEntitlement); err == nil {
	*o = Entitlement(varEntitlement)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "created")
		delete(additionalProperties, "modified")
		delete(additionalProperties, "attribute")
		delete(additionalProperties, "value")
		delete(additionalProperties, "sourceSchemaObjectType")
		delete(additionalProperties, "privileged")
		delete(additionalProperties, "cloudGoverned")
		delete(additionalProperties, "description")
		delete(additionalProperties, "requestable")
		delete(additionalProperties, "attributes")
		delete(additionalProperties, "source")
		delete(additionalProperties, "owner")
		delete(additionalProperties, "directPermissions")
		delete(additionalProperties, "segments")
		delete(additionalProperties, "manuallyUpdatedFields")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEntitlement struct {
	value *Entitlement
	isSet bool
}

func (v NullableEntitlement) Get() *Entitlement {
	return v.value
}

func (v *NullableEntitlement) Set(val *Entitlement) {
	v.value = val
	v.isSet = true
}

func (v NullableEntitlement) IsSet() bool {
	return v.isSet
}

func (v *NullableEntitlement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntitlement(val *Entitlement) *NullableEntitlement {
	return &NullableEntitlement{value: val, isSet: true}
}

func (v NullableEntitlement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntitlement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


