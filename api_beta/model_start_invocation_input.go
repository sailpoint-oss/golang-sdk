/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
)

// checks if the StartInvocationInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StartInvocationInput{}

// StartInvocationInput struct for StartInvocationInput
type StartInvocationInput struct {
	// Trigger ID
	TriggerId *string `json:"triggerId,omitempty"`
	// Trigger input payload. Its schema is defined in the trigger definition.
	Input map[string]interface{} `json:"input,omitempty"`
	// JSON map of invocation metadata
	ContentJson map[string]interface{} `json:"contentJson,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StartInvocationInput StartInvocationInput

// NewStartInvocationInput instantiates a new StartInvocationInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStartInvocationInput() *StartInvocationInput {
	this := StartInvocationInput{}
	return &this
}

// NewStartInvocationInputWithDefaults instantiates a new StartInvocationInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStartInvocationInputWithDefaults() *StartInvocationInput {
	this := StartInvocationInput{}
	return &this
}

// GetTriggerId returns the TriggerId field value if set, zero value otherwise.
func (o *StartInvocationInput) GetTriggerId() string {
	if o == nil || isNil(o.TriggerId) {
		var ret string
		return ret
	}
	return *o.TriggerId
}

// GetTriggerIdOk returns a tuple with the TriggerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartInvocationInput) GetTriggerIdOk() (*string, bool) {
	if o == nil || isNil(o.TriggerId) {
		return nil, false
	}
	return o.TriggerId, true
}

// HasTriggerId returns a boolean if a field has been set.
func (o *StartInvocationInput) HasTriggerId() bool {
	if o != nil && !isNil(o.TriggerId) {
		return true
	}

	return false
}

// SetTriggerId gets a reference to the given string and assigns it to the TriggerId field.
func (o *StartInvocationInput) SetTriggerId(v string) {
	o.TriggerId = &v
}

// GetInput returns the Input field value if set, zero value otherwise.
func (o *StartInvocationInput) GetInput() map[string]interface{} {
	if o == nil || isNil(o.Input) {
		var ret map[string]interface{}
		return ret
	}
	return o.Input
}

// GetInputOk returns a tuple with the Input field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartInvocationInput) GetInputOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Input) {
		return map[string]interface{}{}, false
	}
	return o.Input, true
}

// HasInput returns a boolean if a field has been set.
func (o *StartInvocationInput) HasInput() bool {
	if o != nil && !isNil(o.Input) {
		return true
	}

	return false
}

// SetInput gets a reference to the given map[string]interface{} and assigns it to the Input field.
func (o *StartInvocationInput) SetInput(v map[string]interface{}) {
	o.Input = v
}

// GetContentJson returns the ContentJson field value if set, zero value otherwise.
func (o *StartInvocationInput) GetContentJson() map[string]interface{} {
	if o == nil || isNil(o.ContentJson) {
		var ret map[string]interface{}
		return ret
	}
	return o.ContentJson
}

// GetContentJsonOk returns a tuple with the ContentJson field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartInvocationInput) GetContentJsonOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.ContentJson) {
		return map[string]interface{}{}, false
	}
	return o.ContentJson, true
}

// HasContentJson returns a boolean if a field has been set.
func (o *StartInvocationInput) HasContentJson() bool {
	if o != nil && !isNil(o.ContentJson) {
		return true
	}

	return false
}

// SetContentJson gets a reference to the given map[string]interface{} and assigns it to the ContentJson field.
func (o *StartInvocationInput) SetContentJson(v map[string]interface{}) {
	o.ContentJson = v
}

func (o StartInvocationInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StartInvocationInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.TriggerId) {
		toSerialize["triggerId"] = o.TriggerId
	}
	if !isNil(o.Input) {
		toSerialize["input"] = o.Input
	}
	if !isNil(o.ContentJson) {
		toSerialize["contentJson"] = o.ContentJson
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StartInvocationInput) UnmarshalJSON(bytes []byte) (err error) {
	varStartInvocationInput := _StartInvocationInput{}

	if err = json.Unmarshal(bytes, &varStartInvocationInput); err == nil {
	*o = StartInvocationInput(varStartInvocationInput)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "triggerId")
		delete(additionalProperties, "input")
		delete(additionalProperties, "contentJson")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStartInvocationInput struct {
	value *StartInvocationInput
	isSet bool
}

func (v NullableStartInvocationInput) Get() *StartInvocationInput {
	return v.value
}

func (v *NullableStartInvocationInput) Set(val *StartInvocationInput) {
	v.value = val
	v.isSet = true
}

func (v NullableStartInvocationInput) IsSet() bool {
	return v.isSet
}

func (v *NullableStartInvocationInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStartInvocationInput(val *StartInvocationInput) *NullableStartInvocationInput {
	return &NullableStartInvocationInput{value: val, isSet: true}
}

func (v NullableStartInvocationInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStartInvocationInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


