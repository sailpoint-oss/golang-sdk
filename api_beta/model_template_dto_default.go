/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
)

// checks if the TemplateDtoDefault type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TemplateDtoDefault{}

// TemplateDtoDefault struct for TemplateDtoDefault
type TemplateDtoDefault struct {
	// The key of the default template
	Key *string `json:"key,omitempty"`
	// The name of the default template
	Name *string `json:"name,omitempty"`
	// The message medium. More mediums may be added in the future.
	Medium *string `json:"medium,omitempty"`
	// The locale for the message text, a BCP 47 language tag.
	Locale *string `json:"locale,omitempty"`
	// The subject of the default template
	Subject *string `json:"subject,omitempty"`
	// The header value is now located within the body field. If included with non-null values, will result in a 400.
	// Deprecated
	Header NullableString `json:"header,omitempty"`
	// The body of the default template
	Body *string `json:"body,omitempty"`
	// The footer value is now located within the body field. If included with non-null values, will result in a 400.
	// Deprecated
	Footer NullableString `json:"footer,omitempty"`
	// The \"From:\" address of the default template
	From *string `json:"from,omitempty"`
	// The \"Reply To\" field of the default template
	ReplyTo *string `json:"replyTo,omitempty"`
	// The description of the default template
	Description *string `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TemplateDtoDefault TemplateDtoDefault

// NewTemplateDtoDefault instantiates a new TemplateDtoDefault object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTemplateDtoDefault() *TemplateDtoDefault {
	this := TemplateDtoDefault{}
	return &this
}

// NewTemplateDtoDefaultWithDefaults instantiates a new TemplateDtoDefault object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTemplateDtoDefaultWithDefaults() *TemplateDtoDefault {
	this := TemplateDtoDefault{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *TemplateDtoDefault) GetKey() string {
	if o == nil || isNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateDtoDefault) GetKeyOk() (*string, bool) {
	if o == nil || isNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *TemplateDtoDefault) HasKey() bool {
	if o != nil && !isNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *TemplateDtoDefault) SetKey(v string) {
	o.Key = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TemplateDtoDefault) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateDtoDefault) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TemplateDtoDefault) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TemplateDtoDefault) SetName(v string) {
	o.Name = &v
}

// GetMedium returns the Medium field value if set, zero value otherwise.
func (o *TemplateDtoDefault) GetMedium() string {
	if o == nil || isNil(o.Medium) {
		var ret string
		return ret
	}
	return *o.Medium
}

// GetMediumOk returns a tuple with the Medium field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateDtoDefault) GetMediumOk() (*string, bool) {
	if o == nil || isNil(o.Medium) {
		return nil, false
	}
	return o.Medium, true
}

// HasMedium returns a boolean if a field has been set.
func (o *TemplateDtoDefault) HasMedium() bool {
	if o != nil && !isNil(o.Medium) {
		return true
	}

	return false
}

// SetMedium gets a reference to the given string and assigns it to the Medium field.
func (o *TemplateDtoDefault) SetMedium(v string) {
	o.Medium = &v
}

// GetLocale returns the Locale field value if set, zero value otherwise.
func (o *TemplateDtoDefault) GetLocale() string {
	if o == nil || isNil(o.Locale) {
		var ret string
		return ret
	}
	return *o.Locale
}

// GetLocaleOk returns a tuple with the Locale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateDtoDefault) GetLocaleOk() (*string, bool) {
	if o == nil || isNil(o.Locale) {
		return nil, false
	}
	return o.Locale, true
}

// HasLocale returns a boolean if a field has been set.
func (o *TemplateDtoDefault) HasLocale() bool {
	if o != nil && !isNil(o.Locale) {
		return true
	}

	return false
}

// SetLocale gets a reference to the given string and assigns it to the Locale field.
func (o *TemplateDtoDefault) SetLocale(v string) {
	o.Locale = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *TemplateDtoDefault) GetSubject() string {
	if o == nil || isNil(o.Subject) {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateDtoDefault) GetSubjectOk() (*string, bool) {
	if o == nil || isNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *TemplateDtoDefault) HasSubject() bool {
	if o != nil && !isNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *TemplateDtoDefault) SetSubject(v string) {
	o.Subject = &v
}

// GetHeader returns the Header field value if set, zero value otherwise (both if not set or set to explicit null).
// Deprecated
func (o *TemplateDtoDefault) GetHeader() string {
	if o == nil || isNil(o.Header.Get()) {
		var ret string
		return ret
	}
	return *o.Header.Get()
}

// GetHeaderOk returns a tuple with the Header field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
// Deprecated
func (o *TemplateDtoDefault) GetHeaderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Header.Get(), o.Header.IsSet()
}

// HasHeader returns a boolean if a field has been set.
func (o *TemplateDtoDefault) HasHeader() bool {
	if o != nil && o.Header.IsSet() {
		return true
	}

	return false
}

// SetHeader gets a reference to the given NullableString and assigns it to the Header field.
// Deprecated
func (o *TemplateDtoDefault) SetHeader(v string) {
	o.Header.Set(&v)
}
// SetHeaderNil sets the value for Header to be an explicit nil
func (o *TemplateDtoDefault) SetHeaderNil() {
	o.Header.Set(nil)
}

// UnsetHeader ensures that no value is present for Header, not even an explicit nil
func (o *TemplateDtoDefault) UnsetHeader() {
	o.Header.Unset()
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *TemplateDtoDefault) GetBody() string {
	if o == nil || isNil(o.Body) {
		var ret string
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateDtoDefault) GetBodyOk() (*string, bool) {
	if o == nil || isNil(o.Body) {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *TemplateDtoDefault) HasBody() bool {
	if o != nil && !isNil(o.Body) {
		return true
	}

	return false
}

// SetBody gets a reference to the given string and assigns it to the Body field.
func (o *TemplateDtoDefault) SetBody(v string) {
	o.Body = &v
}

// GetFooter returns the Footer field value if set, zero value otherwise (both if not set or set to explicit null).
// Deprecated
func (o *TemplateDtoDefault) GetFooter() string {
	if o == nil || isNil(o.Footer.Get()) {
		var ret string
		return ret
	}
	return *o.Footer.Get()
}

// GetFooterOk returns a tuple with the Footer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
// Deprecated
func (o *TemplateDtoDefault) GetFooterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Footer.Get(), o.Footer.IsSet()
}

// HasFooter returns a boolean if a field has been set.
func (o *TemplateDtoDefault) HasFooter() bool {
	if o != nil && o.Footer.IsSet() {
		return true
	}

	return false
}

// SetFooter gets a reference to the given NullableString and assigns it to the Footer field.
// Deprecated
func (o *TemplateDtoDefault) SetFooter(v string) {
	o.Footer.Set(&v)
}
// SetFooterNil sets the value for Footer to be an explicit nil
func (o *TemplateDtoDefault) SetFooterNil() {
	o.Footer.Set(nil)
}

// UnsetFooter ensures that no value is present for Footer, not even an explicit nil
func (o *TemplateDtoDefault) UnsetFooter() {
	o.Footer.Unset()
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *TemplateDtoDefault) GetFrom() string {
	if o == nil || isNil(o.From) {
		var ret string
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateDtoDefault) GetFromOk() (*string, bool) {
	if o == nil || isNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *TemplateDtoDefault) HasFrom() bool {
	if o != nil && !isNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given string and assigns it to the From field.
func (o *TemplateDtoDefault) SetFrom(v string) {
	o.From = &v
}

// GetReplyTo returns the ReplyTo field value if set, zero value otherwise.
func (o *TemplateDtoDefault) GetReplyTo() string {
	if o == nil || isNil(o.ReplyTo) {
		var ret string
		return ret
	}
	return *o.ReplyTo
}

// GetReplyToOk returns a tuple with the ReplyTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateDtoDefault) GetReplyToOk() (*string, bool) {
	if o == nil || isNil(o.ReplyTo) {
		return nil, false
	}
	return o.ReplyTo, true
}

// HasReplyTo returns a boolean if a field has been set.
func (o *TemplateDtoDefault) HasReplyTo() bool {
	if o != nil && !isNil(o.ReplyTo) {
		return true
	}

	return false
}

// SetReplyTo gets a reference to the given string and assigns it to the ReplyTo field.
func (o *TemplateDtoDefault) SetReplyTo(v string) {
	o.ReplyTo = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TemplateDtoDefault) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateDtoDefault) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TemplateDtoDefault) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TemplateDtoDefault) SetDescription(v string) {
	o.Description = &v
}

func (o TemplateDtoDefault) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TemplateDtoDefault) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Medium) {
		toSerialize["medium"] = o.Medium
	}
	if !isNil(o.Locale) {
		toSerialize["locale"] = o.Locale
	}
	if !isNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	if o.Header.IsSet() {
		toSerialize["header"] = o.Header.Get()
	}
	if !isNil(o.Body) {
		toSerialize["body"] = o.Body
	}
	if o.Footer.IsSet() {
		toSerialize["footer"] = o.Footer.Get()
	}
	if !isNil(o.From) {
		toSerialize["from"] = o.From
	}
	if !isNil(o.ReplyTo) {
		toSerialize["replyTo"] = o.ReplyTo
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TemplateDtoDefault) UnmarshalJSON(bytes []byte) (err error) {
	varTemplateDtoDefault := _TemplateDtoDefault{}

	if err = json.Unmarshal(bytes, &varTemplateDtoDefault); err == nil {
	*o = TemplateDtoDefault(varTemplateDtoDefault)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "key")
		delete(additionalProperties, "name")
		delete(additionalProperties, "medium")
		delete(additionalProperties, "locale")
		delete(additionalProperties, "subject")
		delete(additionalProperties, "header")
		delete(additionalProperties, "body")
		delete(additionalProperties, "footer")
		delete(additionalProperties, "from")
		delete(additionalProperties, "replyTo")
		delete(additionalProperties, "description")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTemplateDtoDefault struct {
	value *TemplateDtoDefault
	isSet bool
}

func (v NullableTemplateDtoDefault) Get() *TemplateDtoDefault {
	return v.value
}

func (v *NullableTemplateDtoDefault) Set(val *TemplateDtoDefault) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateDtoDefault) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateDtoDefault) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateDtoDefault(val *TemplateDtoDefault) *NullableTemplateDtoDefault {
	return &NullableTemplateDtoDefault{value: val, isSet: true}
}

func (v NullableTemplateDtoDefault) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateDtoDefault) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


