/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"fmt"
)

// checks if the DuoVerificationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DuoVerificationRequest{}

// DuoVerificationRequest struct for DuoVerificationRequest
type DuoVerificationRequest struct {
	// User id for Verification request.
	UserId string `json:"userId"`
	// User id for Verification request.
	SignedResponse string `json:"signedResponse"`
	AdditionalProperties map[string]interface{}
}

type _DuoVerificationRequest DuoVerificationRequest

// NewDuoVerificationRequest instantiates a new DuoVerificationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDuoVerificationRequest(userId string, signedResponse string) *DuoVerificationRequest {
	this := DuoVerificationRequest{}
	this.UserId = userId
	this.SignedResponse = signedResponse
	return &this
}

// NewDuoVerificationRequestWithDefaults instantiates a new DuoVerificationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDuoVerificationRequestWithDefaults() *DuoVerificationRequest {
	this := DuoVerificationRequest{}
	return &this
}

// GetUserId returns the UserId field value
func (o *DuoVerificationRequest) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *DuoVerificationRequest) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *DuoVerificationRequest) SetUserId(v string) {
	o.UserId = v
}

// GetSignedResponse returns the SignedResponse field value
func (o *DuoVerificationRequest) GetSignedResponse() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SignedResponse
}

// GetSignedResponseOk returns a tuple with the SignedResponse field value
// and a boolean to check if the value has been set.
func (o *DuoVerificationRequest) GetSignedResponseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SignedResponse, true
}

// SetSignedResponse sets field value
func (o *DuoVerificationRequest) SetSignedResponse(v string) {
	o.SignedResponse = v
}

func (o DuoVerificationRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DuoVerificationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["userId"] = o.UserId
	toSerialize["signedResponse"] = o.SignedResponse

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DuoVerificationRequest) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"userId",
		"signedResponse",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDuoVerificationRequest := _DuoVerificationRequest{}

	if err = json.Unmarshal(bytes, &varDuoVerificationRequest); err == nil {
	*o = DuoVerificationRequest(varDuoVerificationRequest)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "userId")
		delete(additionalProperties, "signedResponse")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDuoVerificationRequest struct {
	value *DuoVerificationRequest
	isSet bool
}

func (v NullableDuoVerificationRequest) Get() *DuoVerificationRequest {
	return v.value
}

func (v *NullableDuoVerificationRequest) Set(val *DuoVerificationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDuoVerificationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDuoVerificationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDuoVerificationRequest(val *DuoVerificationRequest) *NullableDuoVerificationRequest {
	return &NullableDuoVerificationRequest{value: val, isSet: true}
}

func (v NullableDuoVerificationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDuoVerificationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


