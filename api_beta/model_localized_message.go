/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"fmt"
)

// checks if the LocalizedMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LocalizedMessage{}

// LocalizedMessage Localized error message to indicate a failed invocation or error if any.
type LocalizedMessage struct {
	// Message locale
	Locale string `json:"locale"`
	// Message text
	Message string `json:"message"`
	AdditionalProperties map[string]interface{}
}

type _LocalizedMessage LocalizedMessage

// NewLocalizedMessage instantiates a new LocalizedMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocalizedMessage(locale string, message string) *LocalizedMessage {
	this := LocalizedMessage{}
	this.Locale = locale
	this.Message = message
	return &this
}

// NewLocalizedMessageWithDefaults instantiates a new LocalizedMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocalizedMessageWithDefaults() *LocalizedMessage {
	this := LocalizedMessage{}
	return &this
}

// GetLocale returns the Locale field value
func (o *LocalizedMessage) GetLocale() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locale
}

// GetLocaleOk returns a tuple with the Locale field value
// and a boolean to check if the value has been set.
func (o *LocalizedMessage) GetLocaleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locale, true
}

// SetLocale sets field value
func (o *LocalizedMessage) SetLocale(v string) {
	o.Locale = v
}

// GetMessage returns the Message field value
func (o *LocalizedMessage) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *LocalizedMessage) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *LocalizedMessage) SetMessage(v string) {
	o.Message = v
}

func (o LocalizedMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LocalizedMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["locale"] = o.Locale
	toSerialize["message"] = o.Message

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LocalizedMessage) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"locale",
		"message",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLocalizedMessage := _LocalizedMessage{}

	if err = json.Unmarshal(bytes, &varLocalizedMessage); err == nil {
	*o = LocalizedMessage(varLocalizedMessage)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "locale")
		delete(additionalProperties, "message")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLocalizedMessage struct {
	value *LocalizedMessage
	isSet bool
}

func (v NullableLocalizedMessage) Get() *LocalizedMessage {
	return v.value
}

func (v *NullableLocalizedMessage) Set(val *LocalizedMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableLocalizedMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableLocalizedMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocalizedMessage(val *LocalizedMessage) *NullableLocalizedMessage {
	return &NullableLocalizedMessage{value: val, isSet: true}
}

func (v NullableLocalizedMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocalizedMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


