/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"time"
)

// checks if the RoleInsight type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoleInsight{}

// RoleInsight struct for RoleInsight
type RoleInsight struct {
	// Insight id
	Id *string `json:"id,omitempty"`
	// Total number of updates for this role
	NumberOfUpdates *int32 `json:"numberOfUpdates,omitempty"`
	// The date-time insights were last created for this role.
	CreatedDate *time.Time `json:"createdDate,omitempty"`
	Role *RoleInsightsRole `json:"role,omitempty"`
	Insight *RoleInsightsInsight `json:"insight,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RoleInsight RoleInsight

// NewRoleInsight instantiates a new RoleInsight object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleInsight() *RoleInsight {
	this := RoleInsight{}
	return &this
}

// NewRoleInsightWithDefaults instantiates a new RoleInsight object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleInsightWithDefaults() *RoleInsight {
	this := RoleInsight{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RoleInsight) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleInsight) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RoleInsight) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RoleInsight) SetId(v string) {
	o.Id = &v
}

// GetNumberOfUpdates returns the NumberOfUpdates field value if set, zero value otherwise.
func (o *RoleInsight) GetNumberOfUpdates() int32 {
	if o == nil || isNil(o.NumberOfUpdates) {
		var ret int32
		return ret
	}
	return *o.NumberOfUpdates
}

// GetNumberOfUpdatesOk returns a tuple with the NumberOfUpdates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleInsight) GetNumberOfUpdatesOk() (*int32, bool) {
	if o == nil || isNil(o.NumberOfUpdates) {
		return nil, false
	}
	return o.NumberOfUpdates, true
}

// HasNumberOfUpdates returns a boolean if a field has been set.
func (o *RoleInsight) HasNumberOfUpdates() bool {
	if o != nil && !isNil(o.NumberOfUpdates) {
		return true
	}

	return false
}

// SetNumberOfUpdates gets a reference to the given int32 and assigns it to the NumberOfUpdates field.
func (o *RoleInsight) SetNumberOfUpdates(v int32) {
	o.NumberOfUpdates = &v
}

// GetCreatedDate returns the CreatedDate field value if set, zero value otherwise.
func (o *RoleInsight) GetCreatedDate() time.Time {
	if o == nil || isNil(o.CreatedDate) {
		var ret time.Time
		return ret
	}
	return *o.CreatedDate
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleInsight) GetCreatedDateOk() (*time.Time, bool) {
	if o == nil || isNil(o.CreatedDate) {
		return nil, false
	}
	return o.CreatedDate, true
}

// HasCreatedDate returns a boolean if a field has been set.
func (o *RoleInsight) HasCreatedDate() bool {
	if o != nil && !isNil(o.CreatedDate) {
		return true
	}

	return false
}

// SetCreatedDate gets a reference to the given time.Time and assigns it to the CreatedDate field.
func (o *RoleInsight) SetCreatedDate(v time.Time) {
	o.CreatedDate = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *RoleInsight) GetRole() RoleInsightsRole {
	if o == nil || isNil(o.Role) {
		var ret RoleInsightsRole
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleInsight) GetRoleOk() (*RoleInsightsRole, bool) {
	if o == nil || isNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *RoleInsight) HasRole() bool {
	if o != nil && !isNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given RoleInsightsRole and assigns it to the Role field.
func (o *RoleInsight) SetRole(v RoleInsightsRole) {
	o.Role = &v
}

// GetInsight returns the Insight field value if set, zero value otherwise.
func (o *RoleInsight) GetInsight() RoleInsightsInsight {
	if o == nil || isNil(o.Insight) {
		var ret RoleInsightsInsight
		return ret
	}
	return *o.Insight
}

// GetInsightOk returns a tuple with the Insight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleInsight) GetInsightOk() (*RoleInsightsInsight, bool) {
	if o == nil || isNil(o.Insight) {
		return nil, false
	}
	return o.Insight, true
}

// HasInsight returns a boolean if a field has been set.
func (o *RoleInsight) HasInsight() bool {
	if o != nil && !isNil(o.Insight) {
		return true
	}

	return false
}

// SetInsight gets a reference to the given RoleInsightsInsight and assigns it to the Insight field.
func (o *RoleInsight) SetInsight(v RoleInsightsInsight) {
	o.Insight = &v
}

func (o RoleInsight) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoleInsight) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.NumberOfUpdates) {
		toSerialize["numberOfUpdates"] = o.NumberOfUpdates
	}
	if !isNil(o.CreatedDate) {
		toSerialize["createdDate"] = o.CreatedDate
	}
	if !isNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !isNil(o.Insight) {
		toSerialize["insight"] = o.Insight
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RoleInsight) UnmarshalJSON(bytes []byte) (err error) {
	varRoleInsight := _RoleInsight{}

	if err = json.Unmarshal(bytes, &varRoleInsight); err == nil {
	*o = RoleInsight(varRoleInsight)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "numberOfUpdates")
		delete(additionalProperties, "createdDate")
		delete(additionalProperties, "role")
		delete(additionalProperties, "insight")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRoleInsight struct {
	value *RoleInsight
	isSet bool
}

func (v NullableRoleInsight) Get() *RoleInsight {
	return v.value
}

func (v *NullableRoleInsight) Set(val *RoleInsight) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleInsight) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleInsight) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleInsight(val *RoleInsight) *NullableRoleInsight {
	return &NullableRoleInsight{value: val, isSet: true}
}

func (v NullableRoleInsight) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleInsight) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


