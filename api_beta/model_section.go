/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
)

// checks if the Section type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Section{}

// Section struct for Section
type Section struct {
	// Name of the FormItem
	Name *string `json:"name,omitempty"`
	// Label of the section
	Label *string `json:"label,omitempty"`
	// List of FormItems. FormItems can be SectionDetails and/or FieldDetails
	FormItems []map[string]interface{} `json:"formItems,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Section Section

// NewSection instantiates a new Section object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSection() *Section {
	this := Section{}
	return &this
}

// NewSectionWithDefaults instantiates a new Section object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSectionWithDefaults() *Section {
	this := Section{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Section) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Section) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Section) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Section) SetName(v string) {
	o.Name = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *Section) GetLabel() string {
	if o == nil || isNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Section) GetLabelOk() (*string, bool) {
	if o == nil || isNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *Section) HasLabel() bool {
	if o != nil && !isNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *Section) SetLabel(v string) {
	o.Label = &v
}

// GetFormItems returns the FormItems field value if set, zero value otherwise.
func (o *Section) GetFormItems() []map[string]interface{} {
	if o == nil || isNil(o.FormItems) {
		var ret []map[string]interface{}
		return ret
	}
	return o.FormItems
}

// GetFormItemsOk returns a tuple with the FormItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Section) GetFormItemsOk() ([]map[string]interface{}, bool) {
	if o == nil || isNil(o.FormItems) {
		return nil, false
	}
	return o.FormItems, true
}

// HasFormItems returns a boolean if a field has been set.
func (o *Section) HasFormItems() bool {
	if o != nil && !isNil(o.FormItems) {
		return true
	}

	return false
}

// SetFormItems gets a reference to the given []map[string]interface{} and assigns it to the FormItems field.
func (o *Section) SetFormItems(v []map[string]interface{}) {
	o.FormItems = v
}

func (o Section) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Section) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !isNil(o.FormItems) {
		toSerialize["formItems"] = o.FormItems
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Section) UnmarshalJSON(bytes []byte) (err error) {
	varSection := _Section{}

	if err = json.Unmarshal(bytes, &varSection); err == nil {
	*o = Section(varSection)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "label")
		delete(additionalProperties, "formItems")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSection struct {
	value *Section
	isSet bool
}

func (v NullableSection) Get() *Section {
	return v.value
}

func (v *NullableSection) Set(val *Section) {
	v.value = val
	v.isSet = true
}

func (v NullableSection) IsSet() bool {
	return v.isSet
}

func (v *NullableSection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSection(val *Section) *NullableSection {
	return &NullableSection{value: val, isSet: true}
}

func (v NullableSection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


