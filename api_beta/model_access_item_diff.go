/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
)

// checks if the AccessItemDiff type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccessItemDiff{}

// AccessItemDiff struct for AccessItemDiff
type AccessItemDiff struct {
	// the id of the access item
	Id *string `json:"id,omitempty"`
	EventType *string `json:"eventType,omitempty"`
	// the display name of the access item
	DisplayName *string `json:"displayName,omitempty"`
	// the source name of the access item
	SourceName *string `json:"sourceName,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AccessItemDiff AccessItemDiff

// NewAccessItemDiff instantiates a new AccessItemDiff object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessItemDiff() *AccessItemDiff {
	this := AccessItemDiff{}
	return &this
}

// NewAccessItemDiffWithDefaults instantiates a new AccessItemDiff object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessItemDiffWithDefaults() *AccessItemDiff {
	this := AccessItemDiff{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AccessItemDiff) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessItemDiff) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AccessItemDiff) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AccessItemDiff) SetId(v string) {
	o.Id = &v
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *AccessItemDiff) GetEventType() string {
	if o == nil || isNil(o.EventType) {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessItemDiff) GetEventTypeOk() (*string, bool) {
	if o == nil || isNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *AccessItemDiff) HasEventType() bool {
	if o != nil && !isNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *AccessItemDiff) SetEventType(v string) {
	o.EventType = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *AccessItemDiff) GetDisplayName() string {
	if o == nil || isNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessItemDiff) GetDisplayNameOk() (*string, bool) {
	if o == nil || isNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *AccessItemDiff) HasDisplayName() bool {
	if o != nil && !isNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *AccessItemDiff) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetSourceName returns the SourceName field value if set, zero value otherwise.
func (o *AccessItemDiff) GetSourceName() string {
	if o == nil || isNil(o.SourceName) {
		var ret string
		return ret
	}
	return *o.SourceName
}

// GetSourceNameOk returns a tuple with the SourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessItemDiff) GetSourceNameOk() (*string, bool) {
	if o == nil || isNil(o.SourceName) {
		return nil, false
	}
	return o.SourceName, true
}

// HasSourceName returns a boolean if a field has been set.
func (o *AccessItemDiff) HasSourceName() bool {
	if o != nil && !isNil(o.SourceName) {
		return true
	}

	return false
}

// SetSourceName gets a reference to the given string and assigns it to the SourceName field.
func (o *AccessItemDiff) SetSourceName(v string) {
	o.SourceName = &v
}

func (o AccessItemDiff) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccessItemDiff) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.EventType) {
		toSerialize["eventType"] = o.EventType
	}
	if !isNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !isNil(o.SourceName) {
		toSerialize["sourceName"] = o.SourceName
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AccessItemDiff) UnmarshalJSON(bytes []byte) (err error) {
	varAccessItemDiff := _AccessItemDiff{}

	if err = json.Unmarshal(bytes, &varAccessItemDiff); err == nil {
	*o = AccessItemDiff(varAccessItemDiff)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "eventType")
		delete(additionalProperties, "displayName")
		delete(additionalProperties, "sourceName")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAccessItemDiff struct {
	value *AccessItemDiff
	isSet bool
}

func (v NullableAccessItemDiff) Get() *AccessItemDiff {
	return v.value
}

func (v *NullableAccessItemDiff) Set(val *AccessItemDiff) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessItemDiff) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessItemDiff) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessItemDiff(val *AccessItemDiff) *NullableAccessItemDiff {
	return &NullableAccessItemDiff{value: val, isSet: true}
}

func (v NullableAccessItemDiff) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessItemDiff) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


