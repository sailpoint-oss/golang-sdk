/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"fmt"
)

// RequestableObjectRequestStatus Status indicating the ability of an access request for the object to be made by or on behalf of the identity specified by *identity-id*. *AVAILABLE* indicates the object is available to request. *PENDING* indicates the object is unavailable because the identity has a pending request in flight. *ASSIGNED* indicates the object is unavailable because the identity already has the indicated role or access profile. If *identity-id* is not specified (allowed only for admin users), then status will be *AVAILABLE* for all results.
type RequestableObjectRequestStatus string

// List of RequestableObjectRequestStatus
const (
	REQUESTABLEOBJECTREQUESTSTATUS_AVAILABLE RequestableObjectRequestStatus = "AVAILABLE"
	REQUESTABLEOBJECTREQUESTSTATUS_PENDING RequestableObjectRequestStatus = "PENDING"
	REQUESTABLEOBJECTREQUESTSTATUS_ASSIGNED RequestableObjectRequestStatus = "ASSIGNED"
	REQUESTABLEOBJECTREQUESTSTATUS_NULL RequestableObjectRequestStatus = "null"
)

// All allowed values of RequestableObjectRequestStatus enum
var AllowedRequestableObjectRequestStatusEnumValues = []RequestableObjectRequestStatus{
	"AVAILABLE",
	"PENDING",
	"ASSIGNED",
	"null",
}

func (v *RequestableObjectRequestStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RequestableObjectRequestStatus(value)
	for _, existing := range AllowedRequestableObjectRequestStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RequestableObjectRequestStatus", value)
}

// NewRequestableObjectRequestStatusFromValue returns a pointer to a valid RequestableObjectRequestStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRequestableObjectRequestStatusFromValue(v string) (*RequestableObjectRequestStatus, error) {
	ev := RequestableObjectRequestStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RequestableObjectRequestStatus: valid values are %v", v, AllowedRequestableObjectRequestStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RequestableObjectRequestStatus) IsValid() bool {
	for _, existing := range AllowedRequestableObjectRequestStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RequestableObjectRequestStatus value
func (v RequestableObjectRequestStatus) Ptr() *RequestableObjectRequestStatus {
	return &v
}

type NullableRequestableObjectRequestStatus struct {
	value *RequestableObjectRequestStatus
	isSet bool
}

func (v NullableRequestableObjectRequestStatus) Get() *RequestableObjectRequestStatus {
	return v.value
}

func (v *NullableRequestableObjectRequestStatus) Set(val *RequestableObjectRequestStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestableObjectRequestStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestableObjectRequestStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestableObjectRequestStatus(val *RequestableObjectRequestStatus) *NullableRequestableObjectRequestStatus {
	return &NullableRequestableObjectRequestStatus{value: val, isSet: true}
}

func (v NullableRequestableObjectRequestStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestableObjectRequestStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

