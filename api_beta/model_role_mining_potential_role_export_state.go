/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"fmt"
)

// RoleMiningPotentialRoleExportState the model 'RoleMiningPotentialRoleExportState'
type RoleMiningPotentialRoleExportState string

// List of RoleMiningPotentialRoleExportState
const (
	ROLEMININGPOTENTIALROLEEXPORTSTATE_QUEUED RoleMiningPotentialRoleExportState = "QUEUED"
	ROLEMININGPOTENTIALROLEEXPORTSTATE_IN_PROGRESS RoleMiningPotentialRoleExportState = "IN_PROGRESS"
	ROLEMININGPOTENTIALROLEEXPORTSTATE_SUCCESS RoleMiningPotentialRoleExportState = "SUCCESS"
	ROLEMININGPOTENTIALROLEEXPORTSTATE_ERROR RoleMiningPotentialRoleExportState = "ERROR"
)

// All allowed values of RoleMiningPotentialRoleExportState enum
var AllowedRoleMiningPotentialRoleExportStateEnumValues = []RoleMiningPotentialRoleExportState{
	"QUEUED",
	"IN_PROGRESS",
	"SUCCESS",
	"ERROR",
}

func (v *RoleMiningPotentialRoleExportState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RoleMiningPotentialRoleExportState(value)
	for _, existing := range AllowedRoleMiningPotentialRoleExportStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RoleMiningPotentialRoleExportState", value)
}

// NewRoleMiningPotentialRoleExportStateFromValue returns a pointer to a valid RoleMiningPotentialRoleExportState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRoleMiningPotentialRoleExportStateFromValue(v string) (*RoleMiningPotentialRoleExportState, error) {
	ev := RoleMiningPotentialRoleExportState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RoleMiningPotentialRoleExportState: valid values are %v", v, AllowedRoleMiningPotentialRoleExportStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RoleMiningPotentialRoleExportState) IsValid() bool {
	for _, existing := range AllowedRoleMiningPotentialRoleExportStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RoleMiningPotentialRoleExportState value
func (v RoleMiningPotentialRoleExportState) Ptr() *RoleMiningPotentialRoleExportState {
	return &v
}

type NullableRoleMiningPotentialRoleExportState struct {
	value *RoleMiningPotentialRoleExportState
	isSet bool
}

func (v NullableRoleMiningPotentialRoleExportState) Get() *RoleMiningPotentialRoleExportState {
	return v.value
}

func (v *NullableRoleMiningPotentialRoleExportState) Set(val *RoleMiningPotentialRoleExportState) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleMiningPotentialRoleExportState) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleMiningPotentialRoleExportState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleMiningPotentialRoleExportState(val *RoleMiningPotentialRoleExportState) *NullableRoleMiningPotentialRoleExportState {
	return &NullableRoleMiningPotentialRoleExportState{value: val, isSet: true}
}

func (v NullableRoleMiningPotentialRoleExportState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleMiningPotentialRoleExportState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

