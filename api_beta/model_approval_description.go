/*
Identity Security Cloud Beta API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
)

// checks if the ApprovalDescription type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApprovalDescription{}

// ApprovalDescription The description of what the approval is asking for
type ApprovalDescription struct {
	// The description of what the approval is asking for
	Value *string `json:"value,omitempty"`
	// What locale the description of the approval is using
	Locale *string `json:"locale,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ApprovalDescription ApprovalDescription

// NewApprovalDescription instantiates a new ApprovalDescription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApprovalDescription() *ApprovalDescription {
	this := ApprovalDescription{}
	return &this
}

// NewApprovalDescriptionWithDefaults instantiates a new ApprovalDescription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApprovalDescriptionWithDefaults() *ApprovalDescription {
	this := ApprovalDescription{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ApprovalDescription) GetValue() string {
	if o == nil || isNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalDescription) GetValueOk() (*string, bool) {
	if o == nil || isNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ApprovalDescription) HasValue() bool {
	if o != nil && !isNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *ApprovalDescription) SetValue(v string) {
	o.Value = &v
}

// GetLocale returns the Locale field value if set, zero value otherwise.
func (o *ApprovalDescription) GetLocale() string {
	if o == nil || isNil(o.Locale) {
		var ret string
		return ret
	}
	return *o.Locale
}

// GetLocaleOk returns a tuple with the Locale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApprovalDescription) GetLocaleOk() (*string, bool) {
	if o == nil || isNil(o.Locale) {
		return nil, false
	}
	return o.Locale, true
}

// HasLocale returns a boolean if a field has been set.
func (o *ApprovalDescription) HasLocale() bool {
	if o != nil && !isNil(o.Locale) {
		return true
	}

	return false
}

// SetLocale gets a reference to the given string and assigns it to the Locale field.
func (o *ApprovalDescription) SetLocale(v string) {
	o.Locale = &v
}

func (o ApprovalDescription) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApprovalDescription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !isNil(o.Locale) {
		toSerialize["locale"] = o.Locale
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ApprovalDescription) UnmarshalJSON(bytes []byte) (err error) {
	varApprovalDescription := _ApprovalDescription{}

	if err = json.Unmarshal(bytes, &varApprovalDescription); err == nil {
			*o = ApprovalDescription(varApprovalDescription)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "value")
		delete(additionalProperties, "locale")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApprovalDescription struct {
	value *ApprovalDescription
	isSet bool
}

func (v NullableApprovalDescription) Get() *ApprovalDescription {
	return v.value
}

func (v *NullableApprovalDescription) Set(val *ApprovalDescription) {
	v.value = val
	v.isSet = true
}

func (v NullableApprovalDescription) IsSet() bool {
	return v.isSet
}

func (v *NullableApprovalDescription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApprovalDescription(val *ApprovalDescription) *NullableApprovalDescription {
	return &NullableApprovalDescription{value: val, isSet: true}
}

func (v NullableApprovalDescription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApprovalDescription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


