/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
)

// checks if the ReportConfigDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReportConfigDTO{}

// ReportConfigDTO struct for ReportConfigDTO
type ReportConfigDTO struct {
	// Name of column in report
	ColumnName *string `json:"columnName,omitempty"`
	// If true, column is required in all reports, and this entry is immutable. A 400 error will result from any attempt to modify the column's definition.
	Required *bool `json:"required,omitempty"`
	// If true, column is included in the report. A 400 error will be thrown if an attempt is made to set included=false if required==true.
	Included *bool `json:"included,omitempty"`
	// Relative sort order for the column. Columns will be displayed left-to-right in nondecreasing order.
	Order *int32 `json:"order,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ReportConfigDTO ReportConfigDTO

// NewReportConfigDTO instantiates a new ReportConfigDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportConfigDTO() *ReportConfigDTO {
	this := ReportConfigDTO{}
	var required bool = false
	this.Required = &required
	var included bool = false
	this.Included = &included
	return &this
}

// NewReportConfigDTOWithDefaults instantiates a new ReportConfigDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportConfigDTOWithDefaults() *ReportConfigDTO {
	this := ReportConfigDTO{}
	var required bool = false
	this.Required = &required
	var included bool = false
	this.Included = &included
	return &this
}

// GetColumnName returns the ColumnName field value if set, zero value otherwise.
func (o *ReportConfigDTO) GetColumnName() string {
	if o == nil || isNil(o.ColumnName) {
		var ret string
		return ret
	}
	return *o.ColumnName
}

// GetColumnNameOk returns a tuple with the ColumnName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportConfigDTO) GetColumnNameOk() (*string, bool) {
	if o == nil || isNil(o.ColumnName) {
		return nil, false
	}
	return o.ColumnName, true
}

// HasColumnName returns a boolean if a field has been set.
func (o *ReportConfigDTO) HasColumnName() bool {
	if o != nil && !isNil(o.ColumnName) {
		return true
	}

	return false
}

// SetColumnName gets a reference to the given string and assigns it to the ColumnName field.
func (o *ReportConfigDTO) SetColumnName(v string) {
	o.ColumnName = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *ReportConfigDTO) GetRequired() bool {
	if o == nil || isNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportConfigDTO) GetRequiredOk() (*bool, bool) {
	if o == nil || isNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *ReportConfigDTO) HasRequired() bool {
	if o != nil && !isNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *ReportConfigDTO) SetRequired(v bool) {
	o.Required = &v
}

// GetIncluded returns the Included field value if set, zero value otherwise.
func (o *ReportConfigDTO) GetIncluded() bool {
	if o == nil || isNil(o.Included) {
		var ret bool
		return ret
	}
	return *o.Included
}

// GetIncludedOk returns a tuple with the Included field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportConfigDTO) GetIncludedOk() (*bool, bool) {
	if o == nil || isNil(o.Included) {
		return nil, false
	}
	return o.Included, true
}

// HasIncluded returns a boolean if a field has been set.
func (o *ReportConfigDTO) HasIncluded() bool {
	if o != nil && !isNil(o.Included) {
		return true
	}

	return false
}

// SetIncluded gets a reference to the given bool and assigns it to the Included field.
func (o *ReportConfigDTO) SetIncluded(v bool) {
	o.Included = &v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *ReportConfigDTO) GetOrder() int32 {
	if o == nil || isNil(o.Order) {
		var ret int32
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportConfigDTO) GetOrderOk() (*int32, bool) {
	if o == nil || isNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *ReportConfigDTO) HasOrder() bool {
	if o != nil && !isNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given int32 and assigns it to the Order field.
func (o *ReportConfigDTO) SetOrder(v int32) {
	o.Order = &v
}

func (o ReportConfigDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReportConfigDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ColumnName) {
		toSerialize["columnName"] = o.ColumnName
	}
	if !isNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	if !isNil(o.Included) {
		toSerialize["included"] = o.Included
	}
	if !isNil(o.Order) {
		toSerialize["order"] = o.Order
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ReportConfigDTO) UnmarshalJSON(bytes []byte) (err error) {
	varReportConfigDTO := _ReportConfigDTO{}

	if err = json.Unmarshal(bytes, &varReportConfigDTO); err == nil {
	*o = ReportConfigDTO(varReportConfigDTO)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "columnName")
		delete(additionalProperties, "required")
		delete(additionalProperties, "included")
		delete(additionalProperties, "order")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableReportConfigDTO struct {
	value *ReportConfigDTO
	isSet bool
}

func (v NullableReportConfigDTO) Get() *ReportConfigDTO {
	return v.value
}

func (v *NullableReportConfigDTO) Set(val *ReportConfigDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableReportConfigDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableReportConfigDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportConfigDTO(val *ReportConfigDTO) *NullableReportConfigDTO {
	return &NullableReportConfigDTO{value: val, isSet: true}
}

func (v NullableReportConfigDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportConfigDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


