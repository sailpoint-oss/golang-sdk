/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"time"
)

// checks if the ConfigurationDetailsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigurationDetailsResponse{}

// ConfigurationDetailsResponse The request body of Reassignment Configuration Details for a specific identity and config type
type ConfigurationDetailsResponse struct {
	ConfigType *ConfigTypeEnum `json:"configType,omitempty"`
	TargetIdentity *Identity1 `json:"targetIdentity,omitempty"`
	// The date from which to start reassigning work items
	StartDate *time.Time `json:"startDate,omitempty"`
	// The date from which to stop reassigning work items.  If this is an empty string it indicates a permanent reassignment.
	EndDate *time.Time `json:"endDate,omitempty"`
	AuditDetails *AuditDetails `json:"auditDetails,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ConfigurationDetailsResponse ConfigurationDetailsResponse

// NewConfigurationDetailsResponse instantiates a new ConfigurationDetailsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigurationDetailsResponse() *ConfigurationDetailsResponse {
	this := ConfigurationDetailsResponse{}
	return &this
}

// NewConfigurationDetailsResponseWithDefaults instantiates a new ConfigurationDetailsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigurationDetailsResponseWithDefaults() *ConfigurationDetailsResponse {
	this := ConfigurationDetailsResponse{}
	return &this
}

// GetConfigType returns the ConfigType field value if set, zero value otherwise.
func (o *ConfigurationDetailsResponse) GetConfigType() ConfigTypeEnum {
	if o == nil || isNil(o.ConfigType) {
		var ret ConfigTypeEnum
		return ret
	}
	return *o.ConfigType
}

// GetConfigTypeOk returns a tuple with the ConfigType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationDetailsResponse) GetConfigTypeOk() (*ConfigTypeEnum, bool) {
	if o == nil || isNil(o.ConfigType) {
		return nil, false
	}
	return o.ConfigType, true
}

// HasConfigType returns a boolean if a field has been set.
func (o *ConfigurationDetailsResponse) HasConfigType() bool {
	if o != nil && !isNil(o.ConfigType) {
		return true
	}

	return false
}

// SetConfigType gets a reference to the given ConfigTypeEnum and assigns it to the ConfigType field.
func (o *ConfigurationDetailsResponse) SetConfigType(v ConfigTypeEnum) {
	o.ConfigType = &v
}

// GetTargetIdentity returns the TargetIdentity field value if set, zero value otherwise.
func (o *ConfigurationDetailsResponse) GetTargetIdentity() Identity1 {
	if o == nil || isNil(o.TargetIdentity) {
		var ret Identity1
		return ret
	}
	return *o.TargetIdentity
}

// GetTargetIdentityOk returns a tuple with the TargetIdentity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationDetailsResponse) GetTargetIdentityOk() (*Identity1, bool) {
	if o == nil || isNil(o.TargetIdentity) {
		return nil, false
	}
	return o.TargetIdentity, true
}

// HasTargetIdentity returns a boolean if a field has been set.
func (o *ConfigurationDetailsResponse) HasTargetIdentity() bool {
	if o != nil && !isNil(o.TargetIdentity) {
		return true
	}

	return false
}

// SetTargetIdentity gets a reference to the given Identity1 and assigns it to the TargetIdentity field.
func (o *ConfigurationDetailsResponse) SetTargetIdentity(v Identity1) {
	o.TargetIdentity = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *ConfigurationDetailsResponse) GetStartDate() time.Time {
	if o == nil || isNil(o.StartDate) {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationDetailsResponse) GetStartDateOk() (*time.Time, bool) {
	if o == nil || isNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *ConfigurationDetailsResponse) HasStartDate() bool {
	if o != nil && !isNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *ConfigurationDetailsResponse) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *ConfigurationDetailsResponse) GetEndDate() time.Time {
	if o == nil || isNil(o.EndDate) {
		var ret time.Time
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationDetailsResponse) GetEndDateOk() (*time.Time, bool) {
	if o == nil || isNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *ConfigurationDetailsResponse) HasEndDate() bool {
	if o != nil && !isNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given time.Time and assigns it to the EndDate field.
func (o *ConfigurationDetailsResponse) SetEndDate(v time.Time) {
	o.EndDate = &v
}

// GetAuditDetails returns the AuditDetails field value if set, zero value otherwise.
func (o *ConfigurationDetailsResponse) GetAuditDetails() AuditDetails {
	if o == nil || isNil(o.AuditDetails) {
		var ret AuditDetails
		return ret
	}
	return *o.AuditDetails
}

// GetAuditDetailsOk returns a tuple with the AuditDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationDetailsResponse) GetAuditDetailsOk() (*AuditDetails, bool) {
	if o == nil || isNil(o.AuditDetails) {
		return nil, false
	}
	return o.AuditDetails, true
}

// HasAuditDetails returns a boolean if a field has been set.
func (o *ConfigurationDetailsResponse) HasAuditDetails() bool {
	if o != nil && !isNil(o.AuditDetails) {
		return true
	}

	return false
}

// SetAuditDetails gets a reference to the given AuditDetails and assigns it to the AuditDetails field.
func (o *ConfigurationDetailsResponse) SetAuditDetails(v AuditDetails) {
	o.AuditDetails = &v
}

func (o ConfigurationDetailsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigurationDetailsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ConfigType) {
		toSerialize["configType"] = o.ConfigType
	}
	if !isNil(o.TargetIdentity) {
		toSerialize["targetIdentity"] = o.TargetIdentity
	}
	if !isNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !isNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !isNil(o.AuditDetails) {
		toSerialize["auditDetails"] = o.AuditDetails
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ConfigurationDetailsResponse) UnmarshalJSON(bytes []byte) (err error) {
	varConfigurationDetailsResponse := _ConfigurationDetailsResponse{}

	if err = json.Unmarshal(bytes, &varConfigurationDetailsResponse); err == nil {
	*o = ConfigurationDetailsResponse(varConfigurationDetailsResponse)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "configType")
		delete(additionalProperties, "targetIdentity")
		delete(additionalProperties, "startDate")
		delete(additionalProperties, "endDate")
		delete(additionalProperties, "auditDetails")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableConfigurationDetailsResponse struct {
	value *ConfigurationDetailsResponse
	isSet bool
}

func (v NullableConfigurationDetailsResponse) Get() *ConfigurationDetailsResponse {
	return v.value
}

func (v *NullableConfigurationDetailsResponse) Set(val *ConfigurationDetailsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigurationDetailsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigurationDetailsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigurationDetailsResponse(val *ConfigurationDetailsResponse) *NullableConfigurationDetailsResponse {
	return &NullableConfigurationDetailsResponse{value: val, isSet: true}
}

func (v NullableConfigurationDetailsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigurationDetailsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


