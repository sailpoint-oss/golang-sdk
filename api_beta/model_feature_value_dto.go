/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
)

// checks if the FeatureValueDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeatureValueDto{}

// FeatureValueDto struct for FeatureValueDto
type FeatureValueDto struct {
	// The type of feature
	Feature *string `json:"feature,omitempty"`
	// The number of identities that have access to the feature
	Numerator *int32 `json:"numerator,omitempty"`
	// The number of identities with the corresponding feature
	Denominator *int32 `json:"denominator,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FeatureValueDto FeatureValueDto

// NewFeatureValueDto instantiates a new FeatureValueDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeatureValueDto() *FeatureValueDto {
	this := FeatureValueDto{}
	return &this
}

// NewFeatureValueDtoWithDefaults instantiates a new FeatureValueDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeatureValueDtoWithDefaults() *FeatureValueDto {
	this := FeatureValueDto{}
	return &this
}

// GetFeature returns the Feature field value if set, zero value otherwise.
func (o *FeatureValueDto) GetFeature() string {
	if o == nil || isNil(o.Feature) {
		var ret string
		return ret
	}
	return *o.Feature
}

// GetFeatureOk returns a tuple with the Feature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureValueDto) GetFeatureOk() (*string, bool) {
	if o == nil || isNil(o.Feature) {
		return nil, false
	}
	return o.Feature, true
}

// HasFeature returns a boolean if a field has been set.
func (o *FeatureValueDto) HasFeature() bool {
	if o != nil && !isNil(o.Feature) {
		return true
	}

	return false
}

// SetFeature gets a reference to the given string and assigns it to the Feature field.
func (o *FeatureValueDto) SetFeature(v string) {
	o.Feature = &v
}

// GetNumerator returns the Numerator field value if set, zero value otherwise.
func (o *FeatureValueDto) GetNumerator() int32 {
	if o == nil || isNil(o.Numerator) {
		var ret int32
		return ret
	}
	return *o.Numerator
}

// GetNumeratorOk returns a tuple with the Numerator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureValueDto) GetNumeratorOk() (*int32, bool) {
	if o == nil || isNil(o.Numerator) {
		return nil, false
	}
	return o.Numerator, true
}

// HasNumerator returns a boolean if a field has been set.
func (o *FeatureValueDto) HasNumerator() bool {
	if o != nil && !isNil(o.Numerator) {
		return true
	}

	return false
}

// SetNumerator gets a reference to the given int32 and assigns it to the Numerator field.
func (o *FeatureValueDto) SetNumerator(v int32) {
	o.Numerator = &v
}

// GetDenominator returns the Denominator field value if set, zero value otherwise.
func (o *FeatureValueDto) GetDenominator() int32 {
	if o == nil || isNil(o.Denominator) {
		var ret int32
		return ret
	}
	return *o.Denominator
}

// GetDenominatorOk returns a tuple with the Denominator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureValueDto) GetDenominatorOk() (*int32, bool) {
	if o == nil || isNil(o.Denominator) {
		return nil, false
	}
	return o.Denominator, true
}

// HasDenominator returns a boolean if a field has been set.
func (o *FeatureValueDto) HasDenominator() bool {
	if o != nil && !isNil(o.Denominator) {
		return true
	}

	return false
}

// SetDenominator gets a reference to the given int32 and assigns it to the Denominator field.
func (o *FeatureValueDto) SetDenominator(v int32) {
	o.Denominator = &v
}

func (o FeatureValueDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeatureValueDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Feature) {
		toSerialize["feature"] = o.Feature
	}
	if !isNil(o.Numerator) {
		toSerialize["numerator"] = o.Numerator
	}
	if !isNil(o.Denominator) {
		toSerialize["denominator"] = o.Denominator
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FeatureValueDto) UnmarshalJSON(bytes []byte) (err error) {
	varFeatureValueDto := _FeatureValueDto{}

	if err = json.Unmarshal(bytes, &varFeatureValueDto); err == nil {
	*o = FeatureValueDto(varFeatureValueDto)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "feature")
		delete(additionalProperties, "numerator")
		delete(additionalProperties, "denominator")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFeatureValueDto struct {
	value *FeatureValueDto
	isSet bool
}

func (v NullableFeatureValueDto) Get() *FeatureValueDto {
	return v.value
}

func (v *NullableFeatureValueDto) Set(val *FeatureValueDto) {
	v.value = val
	v.isSet = true
}

func (v NullableFeatureValueDto) IsSet() bool {
	return v.isSet
}

func (v *NullableFeatureValueDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeatureValueDto(val *FeatureValueDto) *NullableFeatureValueDto {
	return &NullableFeatureValueDto{value: val, isSet: true}
}

func (v NullableFeatureValueDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeatureValueDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


