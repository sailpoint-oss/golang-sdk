/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
)

// checks if the IdentityAttributeTransform1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdentityAttributeTransform1{}

// IdentityAttributeTransform1 Defines a transformation definition for an identity attribute.
type IdentityAttributeTransform1 struct {
	// Name of the identity attribute.
	IdentityAttributeName *string `json:"identityAttributeName,omitempty"`
	TransformDefinition *TransformDefinition1 `json:"transformDefinition,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IdentityAttributeTransform1 IdentityAttributeTransform1

// NewIdentityAttributeTransform1 instantiates a new IdentityAttributeTransform1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityAttributeTransform1() *IdentityAttributeTransform1 {
	this := IdentityAttributeTransform1{}
	return &this
}

// NewIdentityAttributeTransform1WithDefaults instantiates a new IdentityAttributeTransform1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityAttributeTransform1WithDefaults() *IdentityAttributeTransform1 {
	this := IdentityAttributeTransform1{}
	return &this
}

// GetIdentityAttributeName returns the IdentityAttributeName field value if set, zero value otherwise.
func (o *IdentityAttributeTransform1) GetIdentityAttributeName() string {
	if o == nil || isNil(o.IdentityAttributeName) {
		var ret string
		return ret
	}
	return *o.IdentityAttributeName
}

// GetIdentityAttributeNameOk returns a tuple with the IdentityAttributeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityAttributeTransform1) GetIdentityAttributeNameOk() (*string, bool) {
	if o == nil || isNil(o.IdentityAttributeName) {
		return nil, false
	}
	return o.IdentityAttributeName, true
}

// HasIdentityAttributeName returns a boolean if a field has been set.
func (o *IdentityAttributeTransform1) HasIdentityAttributeName() bool {
	if o != nil && !isNil(o.IdentityAttributeName) {
		return true
	}

	return false
}

// SetIdentityAttributeName gets a reference to the given string and assigns it to the IdentityAttributeName field.
func (o *IdentityAttributeTransform1) SetIdentityAttributeName(v string) {
	o.IdentityAttributeName = &v
}

// GetTransformDefinition returns the TransformDefinition field value if set, zero value otherwise.
func (o *IdentityAttributeTransform1) GetTransformDefinition() TransformDefinition1 {
	if o == nil || isNil(o.TransformDefinition) {
		var ret TransformDefinition1
		return ret
	}
	return *o.TransformDefinition
}

// GetTransformDefinitionOk returns a tuple with the TransformDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityAttributeTransform1) GetTransformDefinitionOk() (*TransformDefinition1, bool) {
	if o == nil || isNil(o.TransformDefinition) {
		return nil, false
	}
	return o.TransformDefinition, true
}

// HasTransformDefinition returns a boolean if a field has been set.
func (o *IdentityAttributeTransform1) HasTransformDefinition() bool {
	if o != nil && !isNil(o.TransformDefinition) {
		return true
	}

	return false
}

// SetTransformDefinition gets a reference to the given TransformDefinition1 and assigns it to the TransformDefinition field.
func (o *IdentityAttributeTransform1) SetTransformDefinition(v TransformDefinition1) {
	o.TransformDefinition = &v
}

func (o IdentityAttributeTransform1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdentityAttributeTransform1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.IdentityAttributeName) {
		toSerialize["identityAttributeName"] = o.IdentityAttributeName
	}
	if !isNil(o.TransformDefinition) {
		toSerialize["transformDefinition"] = o.TransformDefinition
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IdentityAttributeTransform1) UnmarshalJSON(bytes []byte) (err error) {
	varIdentityAttributeTransform1 := _IdentityAttributeTransform1{}

	if err = json.Unmarshal(bytes, &varIdentityAttributeTransform1); err == nil {
	*o = IdentityAttributeTransform1(varIdentityAttributeTransform1)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "identityAttributeName")
		delete(additionalProperties, "transformDefinition")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIdentityAttributeTransform1 struct {
	value *IdentityAttributeTransform1
	isSet bool
}

func (v NullableIdentityAttributeTransform1) Get() *IdentityAttributeTransform1 {
	return v.value
}

func (v *NullableIdentityAttributeTransform1) Set(val *IdentityAttributeTransform1) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityAttributeTransform1) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityAttributeTransform1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityAttributeTransform1(val *IdentityAttributeTransform1) *NullableIdentityAttributeTransform1 {
	return &NullableIdentityAttributeTransform1{value: val, isSet: true}
}

func (v NullableIdentityAttributeTransform1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityAttributeTransform1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


