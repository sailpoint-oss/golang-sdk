/*
Identity Security Cloud Beta API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"fmt"
)

// checks if the AccessItemRemoved type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccessItemRemoved{}

// AccessItemRemoved struct for AccessItemRemoved
type AccessItemRemoved struct {
	AccessItem AccessItemAssociatedAccessItem `json:"accessItem"`
	// the identity id
	IdentityId *string `json:"identityId,omitempty"`
	// the event type
	EventType *string `json:"eventType,omitempty"`
	// the date of event
	DateTime *string `json:"dateTime,omitempty"`
	// the access item type
	AccessItemType *string `json:"accessItemType,omitempty"`
	GovernanceEvent NullableCorrelatedGovernanceEvent `json:"governanceEvent,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AccessItemRemoved AccessItemRemoved

// NewAccessItemRemoved instantiates a new AccessItemRemoved object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessItemRemoved(accessItem AccessItemAssociatedAccessItem) *AccessItemRemoved {
	this := AccessItemRemoved{}
	this.AccessItem = accessItem
	return &this
}

// NewAccessItemRemovedWithDefaults instantiates a new AccessItemRemoved object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessItemRemovedWithDefaults() *AccessItemRemoved {
	this := AccessItemRemoved{}
	return &this
}

// GetAccessItem returns the AccessItem field value
func (o *AccessItemRemoved) GetAccessItem() AccessItemAssociatedAccessItem {
	if o == nil {
		var ret AccessItemAssociatedAccessItem
		return ret
	}

	return o.AccessItem
}

// GetAccessItemOk returns a tuple with the AccessItem field value
// and a boolean to check if the value has been set.
func (o *AccessItemRemoved) GetAccessItemOk() (*AccessItemAssociatedAccessItem, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessItem, true
}

// SetAccessItem sets field value
func (o *AccessItemRemoved) SetAccessItem(v AccessItemAssociatedAccessItem) {
	o.AccessItem = v
}

// GetIdentityId returns the IdentityId field value if set, zero value otherwise.
func (o *AccessItemRemoved) GetIdentityId() string {
	if o == nil || IsNil(o.IdentityId) {
		var ret string
		return ret
	}
	return *o.IdentityId
}

// GetIdentityIdOk returns a tuple with the IdentityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessItemRemoved) GetIdentityIdOk() (*string, bool) {
	if o == nil || IsNil(o.IdentityId) {
		return nil, false
	}
	return o.IdentityId, true
}

// HasIdentityId returns a boolean if a field has been set.
func (o *AccessItemRemoved) HasIdentityId() bool {
	if o != nil && !IsNil(o.IdentityId) {
		return true
	}

	return false
}

// SetIdentityId gets a reference to the given string and assigns it to the IdentityId field.
func (o *AccessItemRemoved) SetIdentityId(v string) {
	o.IdentityId = &v
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *AccessItemRemoved) GetEventType() string {
	if o == nil || IsNil(o.EventType) {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessItemRemoved) GetEventTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *AccessItemRemoved) HasEventType() bool {
	if o != nil && !IsNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *AccessItemRemoved) SetEventType(v string) {
	o.EventType = &v
}

// GetDateTime returns the DateTime field value if set, zero value otherwise.
func (o *AccessItemRemoved) GetDateTime() string {
	if o == nil || IsNil(o.DateTime) {
		var ret string
		return ret
	}
	return *o.DateTime
}

// GetDateTimeOk returns a tuple with the DateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessItemRemoved) GetDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.DateTime) {
		return nil, false
	}
	return o.DateTime, true
}

// HasDateTime returns a boolean if a field has been set.
func (o *AccessItemRemoved) HasDateTime() bool {
	if o != nil && !IsNil(o.DateTime) {
		return true
	}

	return false
}

// SetDateTime gets a reference to the given string and assigns it to the DateTime field.
func (o *AccessItemRemoved) SetDateTime(v string) {
	o.DateTime = &v
}

// GetAccessItemType returns the AccessItemType field value if set, zero value otherwise.
func (o *AccessItemRemoved) GetAccessItemType() string {
	if o == nil || IsNil(o.AccessItemType) {
		var ret string
		return ret
	}
	return *o.AccessItemType
}

// GetAccessItemTypeOk returns a tuple with the AccessItemType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessItemRemoved) GetAccessItemTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AccessItemType) {
		return nil, false
	}
	return o.AccessItemType, true
}

// HasAccessItemType returns a boolean if a field has been set.
func (o *AccessItemRemoved) HasAccessItemType() bool {
	if o != nil && !IsNil(o.AccessItemType) {
		return true
	}

	return false
}

// SetAccessItemType gets a reference to the given string and assigns it to the AccessItemType field.
func (o *AccessItemRemoved) SetAccessItemType(v string) {
	o.AccessItemType = &v
}

// GetGovernanceEvent returns the GovernanceEvent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccessItemRemoved) GetGovernanceEvent() CorrelatedGovernanceEvent {
	if o == nil || IsNil(o.GovernanceEvent.Get()) {
		var ret CorrelatedGovernanceEvent
		return ret
	}
	return *o.GovernanceEvent.Get()
}

// GetGovernanceEventOk returns a tuple with the GovernanceEvent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccessItemRemoved) GetGovernanceEventOk() (*CorrelatedGovernanceEvent, bool) {
	if o == nil {
		return nil, false
	}
	return o.GovernanceEvent.Get(), o.GovernanceEvent.IsSet()
}

// HasGovernanceEvent returns a boolean if a field has been set.
func (o *AccessItemRemoved) HasGovernanceEvent() bool {
	if o != nil && o.GovernanceEvent.IsSet() {
		return true
	}

	return false
}

// SetGovernanceEvent gets a reference to the given NullableCorrelatedGovernanceEvent and assigns it to the GovernanceEvent field.
func (o *AccessItemRemoved) SetGovernanceEvent(v CorrelatedGovernanceEvent) {
	o.GovernanceEvent.Set(&v)
}
// SetGovernanceEventNil sets the value for GovernanceEvent to be an explicit nil
func (o *AccessItemRemoved) SetGovernanceEventNil() {
	o.GovernanceEvent.Set(nil)
}

// UnsetGovernanceEvent ensures that no value is present for GovernanceEvent, not even an explicit nil
func (o *AccessItemRemoved) UnsetGovernanceEvent() {
	o.GovernanceEvent.Unset()
}

func (o AccessItemRemoved) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccessItemRemoved) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["accessItem"] = o.AccessItem
	if !IsNil(o.IdentityId) {
		toSerialize["identityId"] = o.IdentityId
	}
	if !IsNil(o.EventType) {
		toSerialize["eventType"] = o.EventType
	}
	if !IsNil(o.DateTime) {
		toSerialize["dateTime"] = o.DateTime
	}
	if !IsNil(o.AccessItemType) {
		toSerialize["accessItemType"] = o.AccessItemType
	}
	if o.GovernanceEvent.IsSet() {
		toSerialize["governanceEvent"] = o.GovernanceEvent.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AccessItemRemoved) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"accessItem",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccessItemRemoved := _AccessItemRemoved{}

	err = json.Unmarshal(data, &varAccessItemRemoved)

	if err != nil {
		return err
	}

	*o = AccessItemRemoved(varAccessItemRemoved)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "accessItem")
		delete(additionalProperties, "identityId")
		delete(additionalProperties, "eventType")
		delete(additionalProperties, "dateTime")
		delete(additionalProperties, "accessItemType")
		delete(additionalProperties, "governanceEvent")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAccessItemRemoved struct {
	value *AccessItemRemoved
	isSet bool
}

func (v NullableAccessItemRemoved) Get() *AccessItemRemoved {
	return v.value
}

func (v *NullableAccessItemRemoved) Set(val *AccessItemRemoved) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessItemRemoved) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessItemRemoved) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessItemRemoved(val *AccessItemRemoved) *NullableAccessItemRemoved {
	return &NullableAccessItemRemoved{value: val, isSet: true}
}

func (v NullableAccessItemRemoved) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessItemRemoved) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


