/*
Identity Security Cloud Beta API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"time"
)

// checks if the Sed type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Sed{}

// Sed Suggested Entitlement Description
type Sed struct {
	// name of the entitlement
	Name *string `json:"Name,omitempty"`
	// entitlement approved by
	ApprovedBy *string `json:"approved_by,omitempty"`
	// entitlement approved type
	ApprovedType *string `json:"approved_type,omitempty"`
	// entitlement approved then
	ApprovedWhen *time.Time `json:"approved_when,omitempty"`
	// entitlement attribute
	Attribute *string `json:"attribute,omitempty"`
	// description of entitlement
	Description *string `json:"description,omitempty"`
	// entitlement display name
	DisplayName *string `json:"displayName,omitempty"`
	// sed id
	Id *string `json:"id,omitempty"`
	// entitlement source id
	SourceId *string `json:"sourceId,omitempty"`
	// entitlement source name
	SourceName *string `json:"sourceName,omitempty"`
	// entitlement status
	Status *string `json:"status,omitempty"`
	// llm suggested entitlement description
	SuggestedDescription *string `json:"suggestedDescription,omitempty"`
	// entitlement type
	Type *string `json:"type,omitempty"`
	// entitlement value
	Value *string `json:"value,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Sed Sed

// NewSed instantiates a new Sed object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSed() *Sed {
	this := Sed{}
	return &this
}

// NewSedWithDefaults instantiates a new Sed object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSedWithDefaults() *Sed {
	this := Sed{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Sed) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sed) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Sed) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Sed) SetName(v string) {
	o.Name = &v
}

// GetApprovedBy returns the ApprovedBy field value if set, zero value otherwise.
func (o *Sed) GetApprovedBy() string {
	if o == nil || IsNil(o.ApprovedBy) {
		var ret string
		return ret
	}
	return *o.ApprovedBy
}

// GetApprovedByOk returns a tuple with the ApprovedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sed) GetApprovedByOk() (*string, bool) {
	if o == nil || IsNil(o.ApprovedBy) {
		return nil, false
	}
	return o.ApprovedBy, true
}

// HasApprovedBy returns a boolean if a field has been set.
func (o *Sed) HasApprovedBy() bool {
	if o != nil && !IsNil(o.ApprovedBy) {
		return true
	}

	return false
}

// SetApprovedBy gets a reference to the given string and assigns it to the ApprovedBy field.
func (o *Sed) SetApprovedBy(v string) {
	o.ApprovedBy = &v
}

// GetApprovedType returns the ApprovedType field value if set, zero value otherwise.
func (o *Sed) GetApprovedType() string {
	if o == nil || IsNil(o.ApprovedType) {
		var ret string
		return ret
	}
	return *o.ApprovedType
}

// GetApprovedTypeOk returns a tuple with the ApprovedType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sed) GetApprovedTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ApprovedType) {
		return nil, false
	}
	return o.ApprovedType, true
}

// HasApprovedType returns a boolean if a field has been set.
func (o *Sed) HasApprovedType() bool {
	if o != nil && !IsNil(o.ApprovedType) {
		return true
	}

	return false
}

// SetApprovedType gets a reference to the given string and assigns it to the ApprovedType field.
func (o *Sed) SetApprovedType(v string) {
	o.ApprovedType = &v
}

// GetApprovedWhen returns the ApprovedWhen field value if set, zero value otherwise.
func (o *Sed) GetApprovedWhen() time.Time {
	if o == nil || IsNil(o.ApprovedWhen) {
		var ret time.Time
		return ret
	}
	return *o.ApprovedWhen
}

// GetApprovedWhenOk returns a tuple with the ApprovedWhen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sed) GetApprovedWhenOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ApprovedWhen) {
		return nil, false
	}
	return o.ApprovedWhen, true
}

// HasApprovedWhen returns a boolean if a field has been set.
func (o *Sed) HasApprovedWhen() bool {
	if o != nil && !IsNil(o.ApprovedWhen) {
		return true
	}

	return false
}

// SetApprovedWhen gets a reference to the given time.Time and assigns it to the ApprovedWhen field.
func (o *Sed) SetApprovedWhen(v time.Time) {
	o.ApprovedWhen = &v
}

// GetAttribute returns the Attribute field value if set, zero value otherwise.
func (o *Sed) GetAttribute() string {
	if o == nil || IsNil(o.Attribute) {
		var ret string
		return ret
	}
	return *o.Attribute
}

// GetAttributeOk returns a tuple with the Attribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sed) GetAttributeOk() (*string, bool) {
	if o == nil || IsNil(o.Attribute) {
		return nil, false
	}
	return o.Attribute, true
}

// HasAttribute returns a boolean if a field has been set.
func (o *Sed) HasAttribute() bool {
	if o != nil && !IsNil(o.Attribute) {
		return true
	}

	return false
}

// SetAttribute gets a reference to the given string and assigns it to the Attribute field.
func (o *Sed) SetAttribute(v string) {
	o.Attribute = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Sed) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sed) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Sed) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Sed) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *Sed) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sed) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *Sed) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *Sed) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Sed) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sed) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Sed) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Sed) SetId(v string) {
	o.Id = &v
}

// GetSourceId returns the SourceId field value if set, zero value otherwise.
func (o *Sed) GetSourceId() string {
	if o == nil || IsNil(o.SourceId) {
		var ret string
		return ret
	}
	return *o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sed) GetSourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.SourceId) {
		return nil, false
	}
	return o.SourceId, true
}

// HasSourceId returns a boolean if a field has been set.
func (o *Sed) HasSourceId() bool {
	if o != nil && !IsNil(o.SourceId) {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given string and assigns it to the SourceId field.
func (o *Sed) SetSourceId(v string) {
	o.SourceId = &v
}

// GetSourceName returns the SourceName field value if set, zero value otherwise.
func (o *Sed) GetSourceName() string {
	if o == nil || IsNil(o.SourceName) {
		var ret string
		return ret
	}
	return *o.SourceName
}

// GetSourceNameOk returns a tuple with the SourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sed) GetSourceNameOk() (*string, bool) {
	if o == nil || IsNil(o.SourceName) {
		return nil, false
	}
	return o.SourceName, true
}

// HasSourceName returns a boolean if a field has been set.
func (o *Sed) HasSourceName() bool {
	if o != nil && !IsNil(o.SourceName) {
		return true
	}

	return false
}

// SetSourceName gets a reference to the given string and assigns it to the SourceName field.
func (o *Sed) SetSourceName(v string) {
	o.SourceName = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Sed) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sed) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Sed) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Sed) SetStatus(v string) {
	o.Status = &v
}

// GetSuggestedDescription returns the SuggestedDescription field value if set, zero value otherwise.
func (o *Sed) GetSuggestedDescription() string {
	if o == nil || IsNil(o.SuggestedDescription) {
		var ret string
		return ret
	}
	return *o.SuggestedDescription
}

// GetSuggestedDescriptionOk returns a tuple with the SuggestedDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sed) GetSuggestedDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.SuggestedDescription) {
		return nil, false
	}
	return o.SuggestedDescription, true
}

// HasSuggestedDescription returns a boolean if a field has been set.
func (o *Sed) HasSuggestedDescription() bool {
	if o != nil && !IsNil(o.SuggestedDescription) {
		return true
	}

	return false
}

// SetSuggestedDescription gets a reference to the given string and assigns it to the SuggestedDescription field.
func (o *Sed) SetSuggestedDescription(v string) {
	o.SuggestedDescription = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Sed) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sed) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Sed) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Sed) SetType(v string) {
	o.Type = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *Sed) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sed) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *Sed) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *Sed) SetValue(v string) {
	o.Value = &v
}

func (o Sed) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Sed) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.ApprovedBy) {
		toSerialize["approved_by"] = o.ApprovedBy
	}
	if !IsNil(o.ApprovedType) {
		toSerialize["approved_type"] = o.ApprovedType
	}
	if !IsNil(o.ApprovedWhen) {
		toSerialize["approved_when"] = o.ApprovedWhen
	}
	if !IsNil(o.Attribute) {
		toSerialize["attribute"] = o.Attribute
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.SourceId) {
		toSerialize["sourceId"] = o.SourceId
	}
	if !IsNil(o.SourceName) {
		toSerialize["sourceName"] = o.SourceName
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.SuggestedDescription) {
		toSerialize["suggestedDescription"] = o.SuggestedDescription
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Sed) UnmarshalJSON(data []byte) (err error) {
	varSed := _Sed{}

	err = json.Unmarshal(data, &varSed)

	if err != nil {
		return err
	}

	*o = Sed(varSed)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "Name")
		delete(additionalProperties, "approved_by")
		delete(additionalProperties, "approved_type")
		delete(additionalProperties, "approved_when")
		delete(additionalProperties, "attribute")
		delete(additionalProperties, "description")
		delete(additionalProperties, "displayName")
		delete(additionalProperties, "id")
		delete(additionalProperties, "sourceId")
		delete(additionalProperties, "sourceName")
		delete(additionalProperties, "status")
		delete(additionalProperties, "suggestedDescription")
		delete(additionalProperties, "type")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSed struct {
	value *Sed
	isSet bool
}

func (v NullableSed) Get() *Sed {
	return v.value
}

func (v *NullableSed) Set(val *Sed) {
	v.value = val
	v.isSet = true
}

func (v NullableSed) IsSet() bool {
	return v.isSet
}

func (v *NullableSed) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSed(val *Sed) *NullableSed {
	return &NullableSed{value: val, isSet: true}
}

func (v NullableSed) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSed) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


