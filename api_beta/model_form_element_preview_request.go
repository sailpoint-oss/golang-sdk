/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
)

// checks if the FormElementPreviewRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FormElementPreviewRequest{}

// FormElementPreviewRequest struct for FormElementPreviewRequest
type FormElementPreviewRequest struct {
	DataSource *FormElementDynamicDataSource `json:"dataSource,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FormElementPreviewRequest FormElementPreviewRequest

// NewFormElementPreviewRequest instantiates a new FormElementPreviewRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFormElementPreviewRequest() *FormElementPreviewRequest {
	this := FormElementPreviewRequest{}
	return &this
}

// NewFormElementPreviewRequestWithDefaults instantiates a new FormElementPreviewRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormElementPreviewRequestWithDefaults() *FormElementPreviewRequest {
	this := FormElementPreviewRequest{}
	return &this
}

// GetDataSource returns the DataSource field value if set, zero value otherwise.
func (o *FormElementPreviewRequest) GetDataSource() FormElementDynamicDataSource {
	if o == nil || isNil(o.DataSource) {
		var ret FormElementDynamicDataSource
		return ret
	}
	return *o.DataSource
}

// GetDataSourceOk returns a tuple with the DataSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormElementPreviewRequest) GetDataSourceOk() (*FormElementDynamicDataSource, bool) {
	if o == nil || isNil(o.DataSource) {
		return nil, false
	}
	return o.DataSource, true
}

// HasDataSource returns a boolean if a field has been set.
func (o *FormElementPreviewRequest) HasDataSource() bool {
	if o != nil && !isNil(o.DataSource) {
		return true
	}

	return false
}

// SetDataSource gets a reference to the given FormElementDynamicDataSource and assigns it to the DataSource field.
func (o *FormElementPreviewRequest) SetDataSource(v FormElementDynamicDataSource) {
	o.DataSource = &v
}

func (o FormElementPreviewRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FormElementPreviewRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.DataSource) {
		toSerialize["dataSource"] = o.DataSource
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FormElementPreviewRequest) UnmarshalJSON(bytes []byte) (err error) {
	varFormElementPreviewRequest := _FormElementPreviewRequest{}

	if err = json.Unmarshal(bytes, &varFormElementPreviewRequest); err == nil {
	*o = FormElementPreviewRequest(varFormElementPreviewRequest)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "dataSource")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFormElementPreviewRequest struct {
	value *FormElementPreviewRequest
	isSet bool
}

func (v NullableFormElementPreviewRequest) Get() *FormElementPreviewRequest {
	return v.value
}

func (v *NullableFormElementPreviewRequest) Set(val *FormElementPreviewRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableFormElementPreviewRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableFormElementPreviewRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormElementPreviewRequest(val *FormElementPreviewRequest) *NullableFormElementPreviewRequest {
	return &NullableFormElementPreviewRequest{value: val, isSet: true}
}

func (v NullableFormElementPreviewRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormElementPreviewRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


