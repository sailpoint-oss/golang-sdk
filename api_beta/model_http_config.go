/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"fmt"
)

// checks if the HttpConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HttpConfig{}

// HttpConfig struct for HttpConfig
type HttpConfig struct {
	// URL of the external/custom integration.
	Url string `json:"url"`
	HttpDispatchMode HttpDispatchMode `json:"httpDispatchMode"`
	HttpAuthenticationType *HttpAuthenticationType `json:"httpAuthenticationType,omitempty"`
	BasicAuthConfig NullableBasicAuthConfig `json:"basicAuthConfig,omitempty"`
	BearerTokenAuthConfig NullableBearerTokenAuthConfig `json:"bearerTokenAuthConfig,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HttpConfig HttpConfig

// NewHttpConfig instantiates a new HttpConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHttpConfig(url string, httpDispatchMode HttpDispatchMode) *HttpConfig {
	this := HttpConfig{}
	this.Url = url
	this.HttpDispatchMode = httpDispatchMode
	var httpAuthenticationType HttpAuthenticationType = HTTPAUTHENTICATIONTYPE_NO_AUTH
	this.HttpAuthenticationType = &httpAuthenticationType
	return &this
}

// NewHttpConfigWithDefaults instantiates a new HttpConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHttpConfigWithDefaults() *HttpConfig {
	this := HttpConfig{}
	var httpAuthenticationType HttpAuthenticationType = HTTPAUTHENTICATIONTYPE_NO_AUTH
	this.HttpAuthenticationType = &httpAuthenticationType
	return &this
}

// GetUrl returns the Url field value
func (o *HttpConfig) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *HttpConfig) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *HttpConfig) SetUrl(v string) {
	o.Url = v
}

// GetHttpDispatchMode returns the HttpDispatchMode field value
func (o *HttpConfig) GetHttpDispatchMode() HttpDispatchMode {
	if o == nil {
		var ret HttpDispatchMode
		return ret
	}

	return o.HttpDispatchMode
}

// GetHttpDispatchModeOk returns a tuple with the HttpDispatchMode field value
// and a boolean to check if the value has been set.
func (o *HttpConfig) GetHttpDispatchModeOk() (*HttpDispatchMode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HttpDispatchMode, true
}

// SetHttpDispatchMode sets field value
func (o *HttpConfig) SetHttpDispatchMode(v HttpDispatchMode) {
	o.HttpDispatchMode = v
}

// GetHttpAuthenticationType returns the HttpAuthenticationType field value if set, zero value otherwise.
func (o *HttpConfig) GetHttpAuthenticationType() HttpAuthenticationType {
	if o == nil || isNil(o.HttpAuthenticationType) {
		var ret HttpAuthenticationType
		return ret
	}
	return *o.HttpAuthenticationType
}

// GetHttpAuthenticationTypeOk returns a tuple with the HttpAuthenticationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpConfig) GetHttpAuthenticationTypeOk() (*HttpAuthenticationType, bool) {
	if o == nil || isNil(o.HttpAuthenticationType) {
		return nil, false
	}
	return o.HttpAuthenticationType, true
}

// HasHttpAuthenticationType returns a boolean if a field has been set.
func (o *HttpConfig) HasHttpAuthenticationType() bool {
	if o != nil && !isNil(o.HttpAuthenticationType) {
		return true
	}

	return false
}

// SetHttpAuthenticationType gets a reference to the given HttpAuthenticationType and assigns it to the HttpAuthenticationType field.
func (o *HttpConfig) SetHttpAuthenticationType(v HttpAuthenticationType) {
	o.HttpAuthenticationType = &v
}

// GetBasicAuthConfig returns the BasicAuthConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HttpConfig) GetBasicAuthConfig() BasicAuthConfig {
	if o == nil || isNil(o.BasicAuthConfig.Get()) {
		var ret BasicAuthConfig
		return ret
	}
	return *o.BasicAuthConfig.Get()
}

// GetBasicAuthConfigOk returns a tuple with the BasicAuthConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HttpConfig) GetBasicAuthConfigOk() (*BasicAuthConfig, bool) {
	if o == nil {
		return nil, false
	}
	return o.BasicAuthConfig.Get(), o.BasicAuthConfig.IsSet()
}

// HasBasicAuthConfig returns a boolean if a field has been set.
func (o *HttpConfig) HasBasicAuthConfig() bool {
	if o != nil && o.BasicAuthConfig.IsSet() {
		return true
	}

	return false
}

// SetBasicAuthConfig gets a reference to the given NullableBasicAuthConfig and assigns it to the BasicAuthConfig field.
func (o *HttpConfig) SetBasicAuthConfig(v BasicAuthConfig) {
	o.BasicAuthConfig.Set(&v)
}
// SetBasicAuthConfigNil sets the value for BasicAuthConfig to be an explicit nil
func (o *HttpConfig) SetBasicAuthConfigNil() {
	o.BasicAuthConfig.Set(nil)
}

// UnsetBasicAuthConfig ensures that no value is present for BasicAuthConfig, not even an explicit nil
func (o *HttpConfig) UnsetBasicAuthConfig() {
	o.BasicAuthConfig.Unset()
}

// GetBearerTokenAuthConfig returns the BearerTokenAuthConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HttpConfig) GetBearerTokenAuthConfig() BearerTokenAuthConfig {
	if o == nil || isNil(o.BearerTokenAuthConfig.Get()) {
		var ret BearerTokenAuthConfig
		return ret
	}
	return *o.BearerTokenAuthConfig.Get()
}

// GetBearerTokenAuthConfigOk returns a tuple with the BearerTokenAuthConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HttpConfig) GetBearerTokenAuthConfigOk() (*BearerTokenAuthConfig, bool) {
	if o == nil {
		return nil, false
	}
	return o.BearerTokenAuthConfig.Get(), o.BearerTokenAuthConfig.IsSet()
}

// HasBearerTokenAuthConfig returns a boolean if a field has been set.
func (o *HttpConfig) HasBearerTokenAuthConfig() bool {
	if o != nil && o.BearerTokenAuthConfig.IsSet() {
		return true
	}

	return false
}

// SetBearerTokenAuthConfig gets a reference to the given NullableBearerTokenAuthConfig and assigns it to the BearerTokenAuthConfig field.
func (o *HttpConfig) SetBearerTokenAuthConfig(v BearerTokenAuthConfig) {
	o.BearerTokenAuthConfig.Set(&v)
}
// SetBearerTokenAuthConfigNil sets the value for BearerTokenAuthConfig to be an explicit nil
func (o *HttpConfig) SetBearerTokenAuthConfigNil() {
	o.BearerTokenAuthConfig.Set(nil)
}

// UnsetBearerTokenAuthConfig ensures that no value is present for BearerTokenAuthConfig, not even an explicit nil
func (o *HttpConfig) UnsetBearerTokenAuthConfig() {
	o.BearerTokenAuthConfig.Unset()
}

func (o HttpConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HttpConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["url"] = o.Url
	toSerialize["httpDispatchMode"] = o.HttpDispatchMode
	if !isNil(o.HttpAuthenticationType) {
		toSerialize["httpAuthenticationType"] = o.HttpAuthenticationType
	}
	if o.BasicAuthConfig.IsSet() {
		toSerialize["basicAuthConfig"] = o.BasicAuthConfig.Get()
	}
	if o.BearerTokenAuthConfig.IsSet() {
		toSerialize["bearerTokenAuthConfig"] = o.BearerTokenAuthConfig.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HttpConfig) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"url",
		"httpDispatchMode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHttpConfig := _HttpConfig{}

	if err = json.Unmarshal(bytes, &varHttpConfig); err == nil {
	*o = HttpConfig(varHttpConfig)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "url")
		delete(additionalProperties, "httpDispatchMode")
		delete(additionalProperties, "httpAuthenticationType")
		delete(additionalProperties, "basicAuthConfig")
		delete(additionalProperties, "bearerTokenAuthConfig")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHttpConfig struct {
	value *HttpConfig
	isSet bool
}

func (v NullableHttpConfig) Get() *HttpConfig {
	return v.value
}

func (v *NullableHttpConfig) Set(val *HttpConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableHttpConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableHttpConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHttpConfig(val *HttpConfig) *NullableHttpConfig {
	return &NullableHttpConfig{value: val, isSet: true}
}

func (v NullableHttpConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHttpConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


