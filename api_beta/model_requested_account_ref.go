/*
Identity Security Cloud Beta API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
)

// checks if the RequestedAccountRef type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RequestedAccountRef{}

// RequestedAccountRef struct for RequestedAccountRef
type RequestedAccountRef struct {
	// Display name of the account for the user
	Name *string `json:"name,omitempty"`
	Type *DtoType `json:"type,omitempty"`
	// The uuid for the account
	AccountUuid NullableString `json:"accountUuid,omitempty"`
	// The native identity for the account
	AccountId NullableString `json:"accountId,omitempty"`
	// Display name of the source for the account
	SourceName *string `json:"sourceName,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RequestedAccountRef RequestedAccountRef

// NewRequestedAccountRef instantiates a new RequestedAccountRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequestedAccountRef() *RequestedAccountRef {
	this := RequestedAccountRef{}
	return &this
}

// NewRequestedAccountRefWithDefaults instantiates a new RequestedAccountRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequestedAccountRefWithDefaults() *RequestedAccountRef {
	this := RequestedAccountRef{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RequestedAccountRef) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestedAccountRef) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RequestedAccountRef) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RequestedAccountRef) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RequestedAccountRef) GetType() DtoType {
	if o == nil || IsNil(o.Type) {
		var ret DtoType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestedAccountRef) GetTypeOk() (*DtoType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RequestedAccountRef) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given DtoType and assigns it to the Type field.
func (o *RequestedAccountRef) SetType(v DtoType) {
	o.Type = &v
}

// GetAccountUuid returns the AccountUuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RequestedAccountRef) GetAccountUuid() string {
	if o == nil || IsNil(o.AccountUuid.Get()) {
		var ret string
		return ret
	}
	return *o.AccountUuid.Get()
}

// GetAccountUuidOk returns a tuple with the AccountUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RequestedAccountRef) GetAccountUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccountUuid.Get(), o.AccountUuid.IsSet()
}

// HasAccountUuid returns a boolean if a field has been set.
func (o *RequestedAccountRef) HasAccountUuid() bool {
	if o != nil && o.AccountUuid.IsSet() {
		return true
	}

	return false
}

// SetAccountUuid gets a reference to the given NullableString and assigns it to the AccountUuid field.
func (o *RequestedAccountRef) SetAccountUuid(v string) {
	o.AccountUuid.Set(&v)
}
// SetAccountUuidNil sets the value for AccountUuid to be an explicit nil
func (o *RequestedAccountRef) SetAccountUuidNil() {
	o.AccountUuid.Set(nil)
}

// UnsetAccountUuid ensures that no value is present for AccountUuid, not even an explicit nil
func (o *RequestedAccountRef) UnsetAccountUuid() {
	o.AccountUuid.Unset()
}

// GetAccountId returns the AccountId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RequestedAccountRef) GetAccountId() string {
	if o == nil || IsNil(o.AccountId.Get()) {
		var ret string
		return ret
	}
	return *o.AccountId.Get()
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RequestedAccountRef) GetAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccountId.Get(), o.AccountId.IsSet()
}

// HasAccountId returns a boolean if a field has been set.
func (o *RequestedAccountRef) HasAccountId() bool {
	if o != nil && o.AccountId.IsSet() {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given NullableString and assigns it to the AccountId field.
func (o *RequestedAccountRef) SetAccountId(v string) {
	o.AccountId.Set(&v)
}
// SetAccountIdNil sets the value for AccountId to be an explicit nil
func (o *RequestedAccountRef) SetAccountIdNil() {
	o.AccountId.Set(nil)
}

// UnsetAccountId ensures that no value is present for AccountId, not even an explicit nil
func (o *RequestedAccountRef) UnsetAccountId() {
	o.AccountId.Unset()
}

// GetSourceName returns the SourceName field value if set, zero value otherwise.
func (o *RequestedAccountRef) GetSourceName() string {
	if o == nil || IsNil(o.SourceName) {
		var ret string
		return ret
	}
	return *o.SourceName
}

// GetSourceNameOk returns a tuple with the SourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestedAccountRef) GetSourceNameOk() (*string, bool) {
	if o == nil || IsNil(o.SourceName) {
		return nil, false
	}
	return o.SourceName, true
}

// HasSourceName returns a boolean if a field has been set.
func (o *RequestedAccountRef) HasSourceName() bool {
	if o != nil && !IsNil(o.SourceName) {
		return true
	}

	return false
}

// SetSourceName gets a reference to the given string and assigns it to the SourceName field.
func (o *RequestedAccountRef) SetSourceName(v string) {
	o.SourceName = &v
}

func (o RequestedAccountRef) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RequestedAccountRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if o.AccountUuid.IsSet() {
		toSerialize["accountUuid"] = o.AccountUuid.Get()
	}
	if o.AccountId.IsSet() {
		toSerialize["accountId"] = o.AccountId.Get()
	}
	if !IsNil(o.SourceName) {
		toSerialize["sourceName"] = o.SourceName
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RequestedAccountRef) UnmarshalJSON(data []byte) (err error) {
	varRequestedAccountRef := _RequestedAccountRef{}

	err = json.Unmarshal(data, &varRequestedAccountRef)

	if err != nil {
		return err
	}

	*o = RequestedAccountRef(varRequestedAccountRef)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "type")
		delete(additionalProperties, "accountUuid")
		delete(additionalProperties, "accountId")
		delete(additionalProperties, "sourceName")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRequestedAccountRef struct {
	value *RequestedAccountRef
	isSet bool
}

func (v NullableRequestedAccountRef) Get() *RequestedAccountRef {
	return v.value
}

func (v *NullableRequestedAccountRef) Set(val *RequestedAccountRef) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestedAccountRef) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestedAccountRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestedAccountRef(val *RequestedAccountRef) *NullableRequestedAccountRef {
	return &NullableRequestedAccountRef{value: val, isSet: true}
}

func (v NullableRequestedAccountRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestedAccountRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


