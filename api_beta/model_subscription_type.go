/*
Identity Security Cloud Beta API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"fmt"
)

// SubscriptionType Subscription type. **NOTE** If type is EVENTBRIDGE, then eventBridgeConfig is required. If type is HTTP, then httpConfig is required.
type SubscriptionType string

// List of SubscriptionType
const (
	SUBSCRIPTIONTYPE_HTTP SubscriptionType = "HTTP"
	SUBSCRIPTIONTYPE_EVENTBRIDGE SubscriptionType = "EVENTBRIDGE"
	SUBSCRIPTIONTYPE_INLINE SubscriptionType = "INLINE"
	SUBSCRIPTIONTYPE_SCRIPT SubscriptionType = "SCRIPT"
	SUBSCRIPTIONTYPE_WORKFLOW SubscriptionType = "WORKFLOW"
)

// All allowed values of SubscriptionType enum
var AllowedSubscriptionTypeEnumValues = []SubscriptionType{
	"HTTP",
	"EVENTBRIDGE",
	"INLINE",
	"SCRIPT",
	"WORKFLOW",
}

func (v *SubscriptionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SubscriptionType(value)
	for _, existing := range AllowedSubscriptionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SubscriptionType", value)
}

// NewSubscriptionTypeFromValue returns a pointer to a valid SubscriptionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSubscriptionTypeFromValue(v string) (*SubscriptionType, error) {
	ev := SubscriptionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SubscriptionType: valid values are %v", v, AllowedSubscriptionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SubscriptionType) IsValid() bool {
	for _, existing := range AllowedSubscriptionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SubscriptionType value
func (v SubscriptionType) Ptr() *SubscriptionType {
	return &v
}

type NullableSubscriptionType struct {
	value *SubscriptionType
	isSet bool
}

func (v NullableSubscriptionType) Get() *SubscriptionType {
	return v.value
}

func (v *NullableSubscriptionType) Set(val *SubscriptionType) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionType) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionType(val *SubscriptionType) *NullableSubscriptionType {
	return &NullableSubscriptionType{value: val, isSet: true}
}

func (v NullableSubscriptionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

