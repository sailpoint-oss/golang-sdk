/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
)

// checks if the UUIDGenerator type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UUIDGenerator{}

// UUIDGenerator struct for UUIDGenerator
type UUIDGenerator struct {
	// A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
	RequiresPeriodicRefresh *bool `json:"requiresPeriodicRefresh,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UUIDGenerator UUIDGenerator

// NewUUIDGenerator instantiates a new UUIDGenerator object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUUIDGenerator() *UUIDGenerator {
	this := UUIDGenerator{}
	var requiresPeriodicRefresh bool = false
	this.RequiresPeriodicRefresh = &requiresPeriodicRefresh
	return &this
}

// NewUUIDGeneratorWithDefaults instantiates a new UUIDGenerator object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUUIDGeneratorWithDefaults() *UUIDGenerator {
	this := UUIDGenerator{}
	var requiresPeriodicRefresh bool = false
	this.RequiresPeriodicRefresh = &requiresPeriodicRefresh
	return &this
}

// GetRequiresPeriodicRefresh returns the RequiresPeriodicRefresh field value if set, zero value otherwise.
func (o *UUIDGenerator) GetRequiresPeriodicRefresh() bool {
	if o == nil || isNil(o.RequiresPeriodicRefresh) {
		var ret bool
		return ret
	}
	return *o.RequiresPeriodicRefresh
}

// GetRequiresPeriodicRefreshOk returns a tuple with the RequiresPeriodicRefresh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UUIDGenerator) GetRequiresPeriodicRefreshOk() (*bool, bool) {
	if o == nil || isNil(o.RequiresPeriodicRefresh) {
		return nil, false
	}
	return o.RequiresPeriodicRefresh, true
}

// HasRequiresPeriodicRefresh returns a boolean if a field has been set.
func (o *UUIDGenerator) HasRequiresPeriodicRefresh() bool {
	if o != nil && !isNil(o.RequiresPeriodicRefresh) {
		return true
	}

	return false
}

// SetRequiresPeriodicRefresh gets a reference to the given bool and assigns it to the RequiresPeriodicRefresh field.
func (o *UUIDGenerator) SetRequiresPeriodicRefresh(v bool) {
	o.RequiresPeriodicRefresh = &v
}

func (o UUIDGenerator) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UUIDGenerator) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.RequiresPeriodicRefresh) {
		toSerialize["requiresPeriodicRefresh"] = o.RequiresPeriodicRefresh
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UUIDGenerator) UnmarshalJSON(bytes []byte) (err error) {
	varUUIDGenerator := _UUIDGenerator{}

	if err = json.Unmarshal(bytes, &varUUIDGenerator); err == nil {
	*o = UUIDGenerator(varUUIDGenerator)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "requiresPeriodicRefresh")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUUIDGenerator struct {
	value *UUIDGenerator
	isSet bool
}

func (v NullableUUIDGenerator) Get() *UUIDGenerator {
	return v.value
}

func (v *NullableUUIDGenerator) Set(val *UUIDGenerator) {
	v.value = val
	v.isSet = true
}

func (v NullableUUIDGenerator) IsSet() bool {
	return v.isSet
}

func (v *NullableUUIDGenerator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUUIDGenerator(val *UUIDGenerator) *NullableUUIDGenerator {
	return &NullableUUIDGenerator{value: val, isSet: true}
}

func (v NullableUUIDGenerator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUUIDGenerator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


