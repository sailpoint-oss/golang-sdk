/*
Identity Security Cloud Beta API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"fmt"
)

// ConnectedObjectType An enumeration of the types of Objects associated with a Governance Group. Supported object types are ACCESS_PROFILE, ROLE, SOD_POLICY and SOURCE.
type ConnectedObjectType string

// List of ConnectedObjectType
const (
	CONNECTEDOBJECTTYPE_ACCESS_PROFILE ConnectedObjectType = "ACCESS_PROFILE"
	CONNECTEDOBJECTTYPE_ROLE ConnectedObjectType = "ROLE"
	CONNECTEDOBJECTTYPE_SOD_POLICY ConnectedObjectType = "SOD_POLICY"
	CONNECTEDOBJECTTYPE_SOURCE ConnectedObjectType = "SOURCE"
)

// All allowed values of ConnectedObjectType enum
var AllowedConnectedObjectTypeEnumValues = []ConnectedObjectType{
	"ACCESS_PROFILE",
	"ROLE",
	"SOD_POLICY",
	"SOURCE",
}

func (v *ConnectedObjectType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConnectedObjectType(value)
	for _, existing := range AllowedConnectedObjectTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConnectedObjectType", value)
}

// NewConnectedObjectTypeFromValue returns a pointer to a valid ConnectedObjectType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConnectedObjectTypeFromValue(v string) (*ConnectedObjectType, error) {
	ev := ConnectedObjectType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConnectedObjectType: valid values are %v", v, AllowedConnectedObjectTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConnectedObjectType) IsValid() bool {
	for _, existing := range AllowedConnectedObjectTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConnectedObjectType value
func (v ConnectedObjectType) Ptr() *ConnectedObjectType {
	return &v
}

type NullableConnectedObjectType struct {
	value *ConnectedObjectType
	isSet bool
}

func (v NullableConnectedObjectType) Get() *ConnectedObjectType {
	return v.value
}

func (v *NullableConnectedObjectType) Set(val *ConnectedObjectType) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectedObjectType) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectedObjectType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectedObjectType(val *ConnectedObjectType) *NullableConnectedObjectType {
	return &NullableConnectedObjectType{value: val, isSet: true}
}

func (v NullableConnectedObjectType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectedObjectType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

