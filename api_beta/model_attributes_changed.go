/*
Identity Security Cloud Beta API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"fmt"
)

// checks if the AttributesChanged type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AttributesChanged{}

// AttributesChanged struct for AttributesChanged
type AttributesChanged struct {
	AttributeChanges []AttributeChange `json:"attributeChanges"`
	// the event type
	EventType *string `json:"eventType,omitempty"`
	// the identity id
	IdentityId *string `json:"identityId,omitempty"`
	// the date of event
	DateTime *string `json:"dateTime,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AttributesChanged AttributesChanged

// NewAttributesChanged instantiates a new AttributesChanged object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttributesChanged(attributeChanges []AttributeChange) *AttributesChanged {
	this := AttributesChanged{}
	this.AttributeChanges = attributeChanges
	return &this
}

// NewAttributesChangedWithDefaults instantiates a new AttributesChanged object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttributesChangedWithDefaults() *AttributesChanged {
	this := AttributesChanged{}
	return &this
}

// GetAttributeChanges returns the AttributeChanges field value
func (o *AttributesChanged) GetAttributeChanges() []AttributeChange {
	if o == nil {
		var ret []AttributeChange
		return ret
	}

	return o.AttributeChanges
}

// GetAttributeChangesOk returns a tuple with the AttributeChanges field value
// and a boolean to check if the value has been set.
func (o *AttributesChanged) GetAttributeChangesOk() ([]AttributeChange, bool) {
	if o == nil {
		return nil, false
	}
	return o.AttributeChanges, true
}

// SetAttributeChanges sets field value
func (o *AttributesChanged) SetAttributeChanges(v []AttributeChange) {
	o.AttributeChanges = v
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *AttributesChanged) GetEventType() string {
	if o == nil || IsNil(o.EventType) {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributesChanged) GetEventTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *AttributesChanged) HasEventType() bool {
	if o != nil && !IsNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *AttributesChanged) SetEventType(v string) {
	o.EventType = &v
}

// GetIdentityId returns the IdentityId field value if set, zero value otherwise.
func (o *AttributesChanged) GetIdentityId() string {
	if o == nil || IsNil(o.IdentityId) {
		var ret string
		return ret
	}
	return *o.IdentityId
}

// GetIdentityIdOk returns a tuple with the IdentityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributesChanged) GetIdentityIdOk() (*string, bool) {
	if o == nil || IsNil(o.IdentityId) {
		return nil, false
	}
	return o.IdentityId, true
}

// HasIdentityId returns a boolean if a field has been set.
func (o *AttributesChanged) HasIdentityId() bool {
	if o != nil && !IsNil(o.IdentityId) {
		return true
	}

	return false
}

// SetIdentityId gets a reference to the given string and assigns it to the IdentityId field.
func (o *AttributesChanged) SetIdentityId(v string) {
	o.IdentityId = &v
}

// GetDateTime returns the DateTime field value if set, zero value otherwise.
func (o *AttributesChanged) GetDateTime() string {
	if o == nil || IsNil(o.DateTime) {
		var ret string
		return ret
	}
	return *o.DateTime
}

// GetDateTimeOk returns a tuple with the DateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttributesChanged) GetDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.DateTime) {
		return nil, false
	}
	return o.DateTime, true
}

// HasDateTime returns a boolean if a field has been set.
func (o *AttributesChanged) HasDateTime() bool {
	if o != nil && !IsNil(o.DateTime) {
		return true
	}

	return false
}

// SetDateTime gets a reference to the given string and assigns it to the DateTime field.
func (o *AttributesChanged) SetDateTime(v string) {
	o.DateTime = &v
}

func (o AttributesChanged) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AttributesChanged) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["attributeChanges"] = o.AttributeChanges
	if !IsNil(o.EventType) {
		toSerialize["eventType"] = o.EventType
	}
	if !IsNil(o.IdentityId) {
		toSerialize["identityId"] = o.IdentityId
	}
	if !IsNil(o.DateTime) {
		toSerialize["dateTime"] = o.DateTime
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AttributesChanged) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"attributeChanges",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAttributesChanged := _AttributesChanged{}

	err = json.Unmarshal(data, &varAttributesChanged)

	if err != nil {
		return err
	}

	*o = AttributesChanged(varAttributesChanged)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "attributeChanges")
		delete(additionalProperties, "eventType")
		delete(additionalProperties, "identityId")
		delete(additionalProperties, "dateTime")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAttributesChanged struct {
	value *AttributesChanged
	isSet bool
}

func (v NullableAttributesChanged) Get() *AttributesChanged {
	return v.value
}

func (v *NullableAttributesChanged) Set(val *AttributesChanged) {
	v.value = val
	v.isSet = true
}

func (v NullableAttributesChanged) IsSet() bool {
	return v.isSet
}

func (v *NullableAttributesChanged) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttributesChanged(val *AttributesChanged) *NullableAttributesChanged {
	return &NullableAttributesChanged{value: val, isSet: true}
}

func (v NullableAttributesChanged) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttributesChanged) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


