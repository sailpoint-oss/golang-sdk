/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
)

// checks if the IdentityAttribute type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdentityAttribute{}

// IdentityAttribute struct for IdentityAttribute
type IdentityAttribute struct {
	// The technical name of the identity attribute
	Name *string `json:"name,omitempty"`
	// The business-friendly name of the identity attribute
	DisplayName *string `json:"displayName,omitempty"`
	// Shows if the attribute is 'standard' or default
	Standard *bool `json:"standard,omitempty"`
	// The type of the identity attribute
	Type *string `json:"type,omitempty"`
	// Shows if the identity attribute is multi-valued
	Multi *bool `json:"multi,omitempty"`
	// Shows if the identity attribute is searchable
	Searchable *bool `json:"searchable,omitempty"`
	// Shows this is 'system' identity attribute that does not have a source and is not configurable.
	System *bool `json:"system,omitempty"`
	// List of sources for an attribute, this specifies how the value of the rule is derived
	Sources []Source1 `json:"sources,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IdentityAttribute IdentityAttribute

// NewIdentityAttribute instantiates a new IdentityAttribute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityAttribute() *IdentityAttribute {
	this := IdentityAttribute{}
	var standard bool = false
	this.Standard = &standard
	var multi bool = false
	this.Multi = &multi
	var searchable bool = false
	this.Searchable = &searchable
	var system bool = false
	this.System = &system
	return &this
}

// NewIdentityAttributeWithDefaults instantiates a new IdentityAttribute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityAttributeWithDefaults() *IdentityAttribute {
	this := IdentityAttribute{}
	var standard bool = false
	this.Standard = &standard
	var multi bool = false
	this.Multi = &multi
	var searchable bool = false
	this.Searchable = &searchable
	var system bool = false
	this.System = &system
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IdentityAttribute) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityAttribute) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IdentityAttribute) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IdentityAttribute) SetName(v string) {
	o.Name = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *IdentityAttribute) GetDisplayName() string {
	if o == nil || isNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityAttribute) GetDisplayNameOk() (*string, bool) {
	if o == nil || isNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *IdentityAttribute) HasDisplayName() bool {
	if o != nil && !isNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *IdentityAttribute) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetStandard returns the Standard field value if set, zero value otherwise.
func (o *IdentityAttribute) GetStandard() bool {
	if o == nil || isNil(o.Standard) {
		var ret bool
		return ret
	}
	return *o.Standard
}

// GetStandardOk returns a tuple with the Standard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityAttribute) GetStandardOk() (*bool, bool) {
	if o == nil || isNil(o.Standard) {
		return nil, false
	}
	return o.Standard, true
}

// HasStandard returns a boolean if a field has been set.
func (o *IdentityAttribute) HasStandard() bool {
	if o != nil && !isNil(o.Standard) {
		return true
	}

	return false
}

// SetStandard gets a reference to the given bool and assigns it to the Standard field.
func (o *IdentityAttribute) SetStandard(v bool) {
	o.Standard = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *IdentityAttribute) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityAttribute) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *IdentityAttribute) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *IdentityAttribute) SetType(v string) {
	o.Type = &v
}

// GetMulti returns the Multi field value if set, zero value otherwise.
func (o *IdentityAttribute) GetMulti() bool {
	if o == nil || isNil(o.Multi) {
		var ret bool
		return ret
	}
	return *o.Multi
}

// GetMultiOk returns a tuple with the Multi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityAttribute) GetMultiOk() (*bool, bool) {
	if o == nil || isNil(o.Multi) {
		return nil, false
	}
	return o.Multi, true
}

// HasMulti returns a boolean if a field has been set.
func (o *IdentityAttribute) HasMulti() bool {
	if o != nil && !isNil(o.Multi) {
		return true
	}

	return false
}

// SetMulti gets a reference to the given bool and assigns it to the Multi field.
func (o *IdentityAttribute) SetMulti(v bool) {
	o.Multi = &v
}

// GetSearchable returns the Searchable field value if set, zero value otherwise.
func (o *IdentityAttribute) GetSearchable() bool {
	if o == nil || isNil(o.Searchable) {
		var ret bool
		return ret
	}
	return *o.Searchable
}

// GetSearchableOk returns a tuple with the Searchable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityAttribute) GetSearchableOk() (*bool, bool) {
	if o == nil || isNil(o.Searchable) {
		return nil, false
	}
	return o.Searchable, true
}

// HasSearchable returns a boolean if a field has been set.
func (o *IdentityAttribute) HasSearchable() bool {
	if o != nil && !isNil(o.Searchable) {
		return true
	}

	return false
}

// SetSearchable gets a reference to the given bool and assigns it to the Searchable field.
func (o *IdentityAttribute) SetSearchable(v bool) {
	o.Searchable = &v
}

// GetSystem returns the System field value if set, zero value otherwise.
func (o *IdentityAttribute) GetSystem() bool {
	if o == nil || isNil(o.System) {
		var ret bool
		return ret
	}
	return *o.System
}

// GetSystemOk returns a tuple with the System field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityAttribute) GetSystemOk() (*bool, bool) {
	if o == nil || isNil(o.System) {
		return nil, false
	}
	return o.System, true
}

// HasSystem returns a boolean if a field has been set.
func (o *IdentityAttribute) HasSystem() bool {
	if o != nil && !isNil(o.System) {
		return true
	}

	return false
}

// SetSystem gets a reference to the given bool and assigns it to the System field.
func (o *IdentityAttribute) SetSystem(v bool) {
	o.System = &v
}

// GetSources returns the Sources field value if set, zero value otherwise.
func (o *IdentityAttribute) GetSources() []Source1 {
	if o == nil || isNil(o.Sources) {
		var ret []Source1
		return ret
	}
	return o.Sources
}

// GetSourcesOk returns a tuple with the Sources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityAttribute) GetSourcesOk() ([]Source1, bool) {
	if o == nil || isNil(o.Sources) {
		return nil, false
	}
	return o.Sources, true
}

// HasSources returns a boolean if a field has been set.
func (o *IdentityAttribute) HasSources() bool {
	if o != nil && !isNil(o.Sources) {
		return true
	}

	return false
}

// SetSources gets a reference to the given []Source1 and assigns it to the Sources field.
func (o *IdentityAttribute) SetSources(v []Source1) {
	o.Sources = v
}

func (o IdentityAttribute) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdentityAttribute) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !isNil(o.Standard) {
		toSerialize["standard"] = o.Standard
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.Multi) {
		toSerialize["multi"] = o.Multi
	}
	if !isNil(o.Searchable) {
		toSerialize["searchable"] = o.Searchable
	}
	if !isNil(o.System) {
		toSerialize["system"] = o.System
	}
	if !isNil(o.Sources) {
		toSerialize["sources"] = o.Sources
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IdentityAttribute) UnmarshalJSON(bytes []byte) (err error) {
	varIdentityAttribute := _IdentityAttribute{}

	if err = json.Unmarshal(bytes, &varIdentityAttribute); err == nil {
	*o = IdentityAttribute(varIdentityAttribute)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "displayName")
		delete(additionalProperties, "standard")
		delete(additionalProperties, "type")
		delete(additionalProperties, "multi")
		delete(additionalProperties, "searchable")
		delete(additionalProperties, "system")
		delete(additionalProperties, "sources")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIdentityAttribute struct {
	value *IdentityAttribute
	isSet bool
}

func (v NullableIdentityAttribute) Get() *IdentityAttribute {
	return v.value
}

func (v *NullableIdentityAttribute) Set(val *IdentityAttribute) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityAttribute) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityAttribute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityAttribute(val *IdentityAttribute) *NullableIdentityAttribute {
	return &NullableIdentityAttribute{value: val, isSet: true}
}

func (v NullableIdentityAttribute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityAttribute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


