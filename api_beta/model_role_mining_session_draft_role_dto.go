/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"time"
)

// checks if the RoleMiningSessionDraftRoleDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoleMiningSessionDraftRoleDto{}

// RoleMiningSessionDraftRoleDto struct for RoleMiningSessionDraftRoleDto
type RoleMiningSessionDraftRoleDto struct {
	// Draft role description
	Description *string `json:"description,omitempty"`
	// The list of identities for this role mining session.
	IdentityIds []string `json:"identityIds,omitempty"`
	// The list of entitlement ids for this role mining session.
	EntitlementIds []string `json:"entitlementIds,omitempty"`
	// The list of excluded entitlement ids.
	ExcludedEntitlements []string `json:"excludedEntitlements,omitempty"`
	// Last modified date
	Modified *time.Time `json:"modified,omitempty"`
	// Name of the draft role
	Name *string `json:"name,omitempty"`
	Type *RoleMiningRoleType `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RoleMiningSessionDraftRoleDto RoleMiningSessionDraftRoleDto

// NewRoleMiningSessionDraftRoleDto instantiates a new RoleMiningSessionDraftRoleDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleMiningSessionDraftRoleDto() *RoleMiningSessionDraftRoleDto {
	this := RoleMiningSessionDraftRoleDto{}
	return &this
}

// NewRoleMiningSessionDraftRoleDtoWithDefaults instantiates a new RoleMiningSessionDraftRoleDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleMiningSessionDraftRoleDtoWithDefaults() *RoleMiningSessionDraftRoleDto {
	this := RoleMiningSessionDraftRoleDto{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RoleMiningSessionDraftRoleDto) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleMiningSessionDraftRoleDto) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RoleMiningSessionDraftRoleDto) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RoleMiningSessionDraftRoleDto) SetDescription(v string) {
	o.Description = &v
}

// GetIdentityIds returns the IdentityIds field value if set, zero value otherwise.
func (o *RoleMiningSessionDraftRoleDto) GetIdentityIds() []string {
	if o == nil || isNil(o.IdentityIds) {
		var ret []string
		return ret
	}
	return o.IdentityIds
}

// GetIdentityIdsOk returns a tuple with the IdentityIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleMiningSessionDraftRoleDto) GetIdentityIdsOk() ([]string, bool) {
	if o == nil || isNil(o.IdentityIds) {
		return nil, false
	}
	return o.IdentityIds, true
}

// HasIdentityIds returns a boolean if a field has been set.
func (o *RoleMiningSessionDraftRoleDto) HasIdentityIds() bool {
	if o != nil && !isNil(o.IdentityIds) {
		return true
	}

	return false
}

// SetIdentityIds gets a reference to the given []string and assigns it to the IdentityIds field.
func (o *RoleMiningSessionDraftRoleDto) SetIdentityIds(v []string) {
	o.IdentityIds = v
}

// GetEntitlementIds returns the EntitlementIds field value if set, zero value otherwise.
func (o *RoleMiningSessionDraftRoleDto) GetEntitlementIds() []string {
	if o == nil || isNil(o.EntitlementIds) {
		var ret []string
		return ret
	}
	return o.EntitlementIds
}

// GetEntitlementIdsOk returns a tuple with the EntitlementIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleMiningSessionDraftRoleDto) GetEntitlementIdsOk() ([]string, bool) {
	if o == nil || isNil(o.EntitlementIds) {
		return nil, false
	}
	return o.EntitlementIds, true
}

// HasEntitlementIds returns a boolean if a field has been set.
func (o *RoleMiningSessionDraftRoleDto) HasEntitlementIds() bool {
	if o != nil && !isNil(o.EntitlementIds) {
		return true
	}

	return false
}

// SetEntitlementIds gets a reference to the given []string and assigns it to the EntitlementIds field.
func (o *RoleMiningSessionDraftRoleDto) SetEntitlementIds(v []string) {
	o.EntitlementIds = v
}

// GetExcludedEntitlements returns the ExcludedEntitlements field value if set, zero value otherwise.
func (o *RoleMiningSessionDraftRoleDto) GetExcludedEntitlements() []string {
	if o == nil || isNil(o.ExcludedEntitlements) {
		var ret []string
		return ret
	}
	return o.ExcludedEntitlements
}

// GetExcludedEntitlementsOk returns a tuple with the ExcludedEntitlements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleMiningSessionDraftRoleDto) GetExcludedEntitlementsOk() ([]string, bool) {
	if o == nil || isNil(o.ExcludedEntitlements) {
		return nil, false
	}
	return o.ExcludedEntitlements, true
}

// HasExcludedEntitlements returns a boolean if a field has been set.
func (o *RoleMiningSessionDraftRoleDto) HasExcludedEntitlements() bool {
	if o != nil && !isNil(o.ExcludedEntitlements) {
		return true
	}

	return false
}

// SetExcludedEntitlements gets a reference to the given []string and assigns it to the ExcludedEntitlements field.
func (o *RoleMiningSessionDraftRoleDto) SetExcludedEntitlements(v []string) {
	o.ExcludedEntitlements = v
}

// GetModified returns the Modified field value if set, zero value otherwise.
func (o *RoleMiningSessionDraftRoleDto) GetModified() time.Time {
	if o == nil || isNil(o.Modified) {
		var ret time.Time
		return ret
	}
	return *o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleMiningSessionDraftRoleDto) GetModifiedOk() (*time.Time, bool) {
	if o == nil || isNil(o.Modified) {
		return nil, false
	}
	return o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *RoleMiningSessionDraftRoleDto) HasModified() bool {
	if o != nil && !isNil(o.Modified) {
		return true
	}

	return false
}

// SetModified gets a reference to the given time.Time and assigns it to the Modified field.
func (o *RoleMiningSessionDraftRoleDto) SetModified(v time.Time) {
	o.Modified = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RoleMiningSessionDraftRoleDto) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleMiningSessionDraftRoleDto) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RoleMiningSessionDraftRoleDto) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RoleMiningSessionDraftRoleDto) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RoleMiningSessionDraftRoleDto) GetType() RoleMiningRoleType {
	if o == nil || isNil(o.Type) {
		var ret RoleMiningRoleType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleMiningSessionDraftRoleDto) GetTypeOk() (*RoleMiningRoleType, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RoleMiningSessionDraftRoleDto) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given RoleMiningRoleType and assigns it to the Type field.
func (o *RoleMiningSessionDraftRoleDto) SetType(v RoleMiningRoleType) {
	o.Type = &v
}

func (o RoleMiningSessionDraftRoleDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoleMiningSessionDraftRoleDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.IdentityIds) {
		toSerialize["identityIds"] = o.IdentityIds
	}
	if !isNil(o.EntitlementIds) {
		toSerialize["entitlementIds"] = o.EntitlementIds
	}
	if !isNil(o.ExcludedEntitlements) {
		toSerialize["excludedEntitlements"] = o.ExcludedEntitlements
	}
	if !isNil(o.Modified) {
		toSerialize["modified"] = o.Modified
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RoleMiningSessionDraftRoleDto) UnmarshalJSON(bytes []byte) (err error) {
	varRoleMiningSessionDraftRoleDto := _RoleMiningSessionDraftRoleDto{}

	if err = json.Unmarshal(bytes, &varRoleMiningSessionDraftRoleDto); err == nil {
	*o = RoleMiningSessionDraftRoleDto(varRoleMiningSessionDraftRoleDto)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "description")
		delete(additionalProperties, "identityIds")
		delete(additionalProperties, "entitlementIds")
		delete(additionalProperties, "excludedEntitlements")
		delete(additionalProperties, "modified")
		delete(additionalProperties, "name")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRoleMiningSessionDraftRoleDto struct {
	value *RoleMiningSessionDraftRoleDto
	isSet bool
}

func (v NullableRoleMiningSessionDraftRoleDto) Get() *RoleMiningSessionDraftRoleDto {
	return v.value
}

func (v *NullableRoleMiningSessionDraftRoleDto) Set(val *RoleMiningSessionDraftRoleDto) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleMiningSessionDraftRoleDto) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleMiningSessionDraftRoleDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleMiningSessionDraftRoleDto(val *RoleMiningSessionDraftRoleDto) *NullableRoleMiningSessionDraftRoleDto {
	return &NullableRoleMiningSessionDraftRoleDto{value: val, isSet: true}
}

func (v NullableRoleMiningSessionDraftRoleDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleMiningSessionDraftRoleDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


