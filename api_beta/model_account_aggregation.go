/*
Identity Security Cloud Beta API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"time"
)

// checks if the AccountAggregation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountAggregation{}

// AccountAggregation struct for AccountAggregation
type AccountAggregation struct {
	// When the aggregation started.
	Start *time.Time `json:"start,omitempty"`
	// STARTED - Aggregation started, but source account iteration has not completed.  ACCOUNTS_COLLECTED - Source account iteration completed, but all accounts have not yet been processed.  COMPLETED - Aggregation completed (*possibly with errors*).  CANCELLED - Aggregation cancelled by user.  RETRIED - Aggregation retried because of connectivity issues with the Virtual Appliance.  TERMINATED - Aggregation marked as failed after 3 tries after connectivity issues with the Virtual Appliance. 
	Status *string `json:"status,omitempty"`
	// The total number of *NEW, CHANGED and DELETED* accounts that need to be processed for this aggregation. This does not include accounts that were unchanged since the previous aggregation. This can be zero if there were no new, changed or deleted accounts since the previous aggregation. *Only available when status is ACCOUNTS_COLLECTED or COMPLETED.*
	TotalAccounts *int32 `json:"totalAccounts,omitempty"`
	// The number of *NEW, CHANGED and DELETED* accounts that have been processed so far. This reflects the number of accounts that have been processed at the time of the API call, and may increase on subsequent API calls while the status is ACCOUNTS_COLLECTED. *Only available when status is ACCOUNTS_COLLECTED or COMPLETED.*
	ProcessedAccounts *int32 `json:"processedAccounts,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AccountAggregation AccountAggregation

// NewAccountAggregation instantiates a new AccountAggregation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountAggregation() *AccountAggregation {
	this := AccountAggregation{}
	return &this
}

// NewAccountAggregationWithDefaults instantiates a new AccountAggregation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountAggregationWithDefaults() *AccountAggregation {
	this := AccountAggregation{}
	return &this
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *AccountAggregation) GetStart() time.Time {
	if o == nil || IsNil(o.Start) {
		var ret time.Time
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountAggregation) GetStartOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *AccountAggregation) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given time.Time and assigns it to the Start field.
func (o *AccountAggregation) SetStart(v time.Time) {
	o.Start = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *AccountAggregation) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountAggregation) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *AccountAggregation) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *AccountAggregation) SetStatus(v string) {
	o.Status = &v
}

// GetTotalAccounts returns the TotalAccounts field value if set, zero value otherwise.
func (o *AccountAggregation) GetTotalAccounts() int32 {
	if o == nil || IsNil(o.TotalAccounts) {
		var ret int32
		return ret
	}
	return *o.TotalAccounts
}

// GetTotalAccountsOk returns a tuple with the TotalAccounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountAggregation) GetTotalAccountsOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalAccounts) {
		return nil, false
	}
	return o.TotalAccounts, true
}

// HasTotalAccounts returns a boolean if a field has been set.
func (o *AccountAggregation) HasTotalAccounts() bool {
	if o != nil && !IsNil(o.TotalAccounts) {
		return true
	}

	return false
}

// SetTotalAccounts gets a reference to the given int32 and assigns it to the TotalAccounts field.
func (o *AccountAggregation) SetTotalAccounts(v int32) {
	o.TotalAccounts = &v
}

// GetProcessedAccounts returns the ProcessedAccounts field value if set, zero value otherwise.
func (o *AccountAggregation) GetProcessedAccounts() int32 {
	if o == nil || IsNil(o.ProcessedAccounts) {
		var ret int32
		return ret
	}
	return *o.ProcessedAccounts
}

// GetProcessedAccountsOk returns a tuple with the ProcessedAccounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountAggregation) GetProcessedAccountsOk() (*int32, bool) {
	if o == nil || IsNil(o.ProcessedAccounts) {
		return nil, false
	}
	return o.ProcessedAccounts, true
}

// HasProcessedAccounts returns a boolean if a field has been set.
func (o *AccountAggregation) HasProcessedAccounts() bool {
	if o != nil && !IsNil(o.ProcessedAccounts) {
		return true
	}

	return false
}

// SetProcessedAccounts gets a reference to the given int32 and assigns it to the ProcessedAccounts field.
func (o *AccountAggregation) SetProcessedAccounts(v int32) {
	o.ProcessedAccounts = &v
}

func (o AccountAggregation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountAggregation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.TotalAccounts) {
		toSerialize["totalAccounts"] = o.TotalAccounts
	}
	if !IsNil(o.ProcessedAccounts) {
		toSerialize["processedAccounts"] = o.ProcessedAccounts
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AccountAggregation) UnmarshalJSON(data []byte) (err error) {
	varAccountAggregation := _AccountAggregation{}

	err = json.Unmarshal(data, &varAccountAggregation)

	if err != nil {
		return err
	}

	*o = AccountAggregation(varAccountAggregation)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "start")
		delete(additionalProperties, "status")
		delete(additionalProperties, "totalAccounts")
		delete(additionalProperties, "processedAccounts")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAccountAggregation struct {
	value *AccountAggregation
	isSet bool
}

func (v NullableAccountAggregation) Get() *AccountAggregation {
	return v.value
}

func (v *NullableAccountAggregation) Set(val *AccountAggregation) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountAggregation) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountAggregation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountAggregation(val *AccountAggregation) *NullableAccountAggregation {
	return &NullableAccountAggregation{value: val, isSet: true}
}

func (v NullableAccountAggregation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountAggregation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


