/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
)

// checks if the ConfigurationResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigurationResponse{}

// ConfigurationResponse The response body of a Reassignment Configuration for a single identity
type ConfigurationResponse struct {
	Identity *Identity1 `json:"identity,omitempty"`
	// Details of how work should be reassigned for an Identity
	ConfigDetails []ConfigurationDetailsResponse `json:"configDetails,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ConfigurationResponse ConfigurationResponse

// NewConfigurationResponse instantiates a new ConfigurationResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigurationResponse() *ConfigurationResponse {
	this := ConfigurationResponse{}
	return &this
}

// NewConfigurationResponseWithDefaults instantiates a new ConfigurationResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigurationResponseWithDefaults() *ConfigurationResponse {
	this := ConfigurationResponse{}
	return &this
}

// GetIdentity returns the Identity field value if set, zero value otherwise.
func (o *ConfigurationResponse) GetIdentity() Identity1 {
	if o == nil || isNil(o.Identity) {
		var ret Identity1
		return ret
	}
	return *o.Identity
}

// GetIdentityOk returns a tuple with the Identity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationResponse) GetIdentityOk() (*Identity1, bool) {
	if o == nil || isNil(o.Identity) {
		return nil, false
	}
	return o.Identity, true
}

// HasIdentity returns a boolean if a field has been set.
func (o *ConfigurationResponse) HasIdentity() bool {
	if o != nil && !isNil(o.Identity) {
		return true
	}

	return false
}

// SetIdentity gets a reference to the given Identity1 and assigns it to the Identity field.
func (o *ConfigurationResponse) SetIdentity(v Identity1) {
	o.Identity = &v
}

// GetConfigDetails returns the ConfigDetails field value if set, zero value otherwise.
func (o *ConfigurationResponse) GetConfigDetails() []ConfigurationDetailsResponse {
	if o == nil || isNil(o.ConfigDetails) {
		var ret []ConfigurationDetailsResponse
		return ret
	}
	return o.ConfigDetails
}

// GetConfigDetailsOk returns a tuple with the ConfigDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationResponse) GetConfigDetailsOk() ([]ConfigurationDetailsResponse, bool) {
	if o == nil || isNil(o.ConfigDetails) {
		return nil, false
	}
	return o.ConfigDetails, true
}

// HasConfigDetails returns a boolean if a field has been set.
func (o *ConfigurationResponse) HasConfigDetails() bool {
	if o != nil && !isNil(o.ConfigDetails) {
		return true
	}

	return false
}

// SetConfigDetails gets a reference to the given []ConfigurationDetailsResponse and assigns it to the ConfigDetails field.
func (o *ConfigurationResponse) SetConfigDetails(v []ConfigurationDetailsResponse) {
	o.ConfigDetails = v
}

func (o ConfigurationResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigurationResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Identity) {
		toSerialize["identity"] = o.Identity
	}
	if !isNil(o.ConfigDetails) {
		toSerialize["configDetails"] = o.ConfigDetails
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ConfigurationResponse) UnmarshalJSON(bytes []byte) (err error) {
	varConfigurationResponse := _ConfigurationResponse{}

	if err = json.Unmarshal(bytes, &varConfigurationResponse); err == nil {
	*o = ConfigurationResponse(varConfigurationResponse)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "identity")
		delete(additionalProperties, "configDetails")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableConfigurationResponse struct {
	value *ConfigurationResponse
	isSet bool
}

func (v NullableConfigurationResponse) Get() *ConfigurationResponse {
	return v.value
}

func (v *NullableConfigurationResponse) Set(val *ConfigurationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigurationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigurationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigurationResponse(val *ConfigurationResponse) *NullableConfigurationResponse {
	return &NullableConfigurationResponse{value: val, isSet: true}
}

func (v NullableConfigurationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigurationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


