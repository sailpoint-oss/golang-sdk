/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"fmt"
)

// Medium the model 'Medium'
type Medium string

// List of Medium
const (
	MEDIUM_EMAIL Medium = "EMAIL"
	MEDIUM_SMS Medium = "SMS"
	MEDIUM_PHONE Medium = "PHONE"
	MEDIUM_SLACK Medium = "SLACK"
	MEDIUM_TEAMS Medium = "TEAMS"
)

// All allowed values of Medium enum
var AllowedMediumEnumValues = []Medium{
	"EMAIL",
	"SMS",
	"PHONE",
	"SLACK",
	"TEAMS",
}

func (v *Medium) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Medium(value)
	for _, existing := range AllowedMediumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Medium", value)
}

// NewMediumFromValue returns a pointer to a valid Medium
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMediumFromValue(v string) (*Medium, error) {
	ev := Medium(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Medium: valid values are %v", v, AllowedMediumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Medium) IsValid() bool {
	for _, existing := range AllowedMediumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Medium value
func (v Medium) Ptr() *Medium {
	return &v
}

type NullableMedium struct {
	value *Medium
	isSet bool
}

func (v NullableMedium) Get() *Medium {
	return v.value
}

func (v *NullableMedium) Set(val *Medium) {
	v.value = val
	v.isSet = true
}

func (v NullableMedium) IsSet() bool {
	return v.isSet
}

func (v *NullableMedium) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMedium(val *Medium) *NullableMedium {
	return &NullableMedium{value: val, isSet: true}
}

func (v NullableMedium) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMedium) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

