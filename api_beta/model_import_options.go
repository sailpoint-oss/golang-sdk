/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
)

// checks if the ImportOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImportOptions{}

// ImportOptions struct for ImportOptions
type ImportOptions struct {
	// Object type names to be excluded from an sp-config export command.
	ExcludeTypes []string `json:"excludeTypes,omitempty"`
	// Object type names to be included in an sp-config export command. IncludeTypes takes precedence over excludeTypes.
	IncludeTypes []string `json:"includeTypes,omitempty"`
	// Additional options targeting specific objects related to each item in the includeTypes field
	ObjectOptions *map[string]ObjectExportImportOptions `json:"objectOptions,omitempty"`
	// List of object types that can be used to resolve references on import.
	DefaultReferences []string `json:"defaultReferences,omitempty"`
	// By default, every import will first export all existing objects supported by sp-config as a backup before the import is attempted. If excludeBackup is true, the backup will not be performed.
	ExcludeBackup *bool `json:"excludeBackup,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ImportOptions ImportOptions

// NewImportOptions instantiates a new ImportOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportOptions() *ImportOptions {
	this := ImportOptions{}
	var excludeBackup bool = false
	this.ExcludeBackup = &excludeBackup
	return &this
}

// NewImportOptionsWithDefaults instantiates a new ImportOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportOptionsWithDefaults() *ImportOptions {
	this := ImportOptions{}
	var excludeBackup bool = false
	this.ExcludeBackup = &excludeBackup
	return &this
}

// GetExcludeTypes returns the ExcludeTypes field value if set, zero value otherwise.
func (o *ImportOptions) GetExcludeTypes() []string {
	if o == nil || isNil(o.ExcludeTypes) {
		var ret []string
		return ret
	}
	return o.ExcludeTypes
}

// GetExcludeTypesOk returns a tuple with the ExcludeTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetExcludeTypesOk() ([]string, bool) {
	if o == nil || isNil(o.ExcludeTypes) {
		return nil, false
	}
	return o.ExcludeTypes, true
}

// HasExcludeTypes returns a boolean if a field has been set.
func (o *ImportOptions) HasExcludeTypes() bool {
	if o != nil && !isNil(o.ExcludeTypes) {
		return true
	}

	return false
}

// SetExcludeTypes gets a reference to the given []string and assigns it to the ExcludeTypes field.
func (o *ImportOptions) SetExcludeTypes(v []string) {
	o.ExcludeTypes = v
}

// GetIncludeTypes returns the IncludeTypes field value if set, zero value otherwise.
func (o *ImportOptions) GetIncludeTypes() []string {
	if o == nil || isNil(o.IncludeTypes) {
		var ret []string
		return ret
	}
	return o.IncludeTypes
}

// GetIncludeTypesOk returns a tuple with the IncludeTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetIncludeTypesOk() ([]string, bool) {
	if o == nil || isNil(o.IncludeTypes) {
		return nil, false
	}
	return o.IncludeTypes, true
}

// HasIncludeTypes returns a boolean if a field has been set.
func (o *ImportOptions) HasIncludeTypes() bool {
	if o != nil && !isNil(o.IncludeTypes) {
		return true
	}

	return false
}

// SetIncludeTypes gets a reference to the given []string and assigns it to the IncludeTypes field.
func (o *ImportOptions) SetIncludeTypes(v []string) {
	o.IncludeTypes = v
}

// GetObjectOptions returns the ObjectOptions field value if set, zero value otherwise.
func (o *ImportOptions) GetObjectOptions() map[string]ObjectExportImportOptions {
	if o == nil || isNil(o.ObjectOptions) {
		var ret map[string]ObjectExportImportOptions
		return ret
	}
	return *o.ObjectOptions
}

// GetObjectOptionsOk returns a tuple with the ObjectOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetObjectOptionsOk() (*map[string]ObjectExportImportOptions, bool) {
	if o == nil || isNil(o.ObjectOptions) {
		return nil, false
	}
	return o.ObjectOptions, true
}

// HasObjectOptions returns a boolean if a field has been set.
func (o *ImportOptions) HasObjectOptions() bool {
	if o != nil && !isNil(o.ObjectOptions) {
		return true
	}

	return false
}

// SetObjectOptions gets a reference to the given map[string]ObjectExportImportOptions and assigns it to the ObjectOptions field.
func (o *ImportOptions) SetObjectOptions(v map[string]ObjectExportImportOptions) {
	o.ObjectOptions = &v
}

// GetDefaultReferences returns the DefaultReferences field value if set, zero value otherwise.
func (o *ImportOptions) GetDefaultReferences() []string {
	if o == nil || isNil(o.DefaultReferences) {
		var ret []string
		return ret
	}
	return o.DefaultReferences
}

// GetDefaultReferencesOk returns a tuple with the DefaultReferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetDefaultReferencesOk() ([]string, bool) {
	if o == nil || isNil(o.DefaultReferences) {
		return nil, false
	}
	return o.DefaultReferences, true
}

// HasDefaultReferences returns a boolean if a field has been set.
func (o *ImportOptions) HasDefaultReferences() bool {
	if o != nil && !isNil(o.DefaultReferences) {
		return true
	}

	return false
}

// SetDefaultReferences gets a reference to the given []string and assigns it to the DefaultReferences field.
func (o *ImportOptions) SetDefaultReferences(v []string) {
	o.DefaultReferences = v
}

// GetExcludeBackup returns the ExcludeBackup field value if set, zero value otherwise.
func (o *ImportOptions) GetExcludeBackup() bool {
	if o == nil || isNil(o.ExcludeBackup) {
		var ret bool
		return ret
	}
	return *o.ExcludeBackup
}

// GetExcludeBackupOk returns a tuple with the ExcludeBackup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetExcludeBackupOk() (*bool, bool) {
	if o == nil || isNil(o.ExcludeBackup) {
		return nil, false
	}
	return o.ExcludeBackup, true
}

// HasExcludeBackup returns a boolean if a field has been set.
func (o *ImportOptions) HasExcludeBackup() bool {
	if o != nil && !isNil(o.ExcludeBackup) {
		return true
	}

	return false
}

// SetExcludeBackup gets a reference to the given bool and assigns it to the ExcludeBackup field.
func (o *ImportOptions) SetExcludeBackup(v bool) {
	o.ExcludeBackup = &v
}

func (o ImportOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImportOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ExcludeTypes) {
		toSerialize["excludeTypes"] = o.ExcludeTypes
	}
	if !isNil(o.IncludeTypes) {
		toSerialize["includeTypes"] = o.IncludeTypes
	}
	if !isNil(o.ObjectOptions) {
		toSerialize["objectOptions"] = o.ObjectOptions
	}
	if !isNil(o.DefaultReferences) {
		toSerialize["defaultReferences"] = o.DefaultReferences
	}
	if !isNil(o.ExcludeBackup) {
		toSerialize["excludeBackup"] = o.ExcludeBackup
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ImportOptions) UnmarshalJSON(bytes []byte) (err error) {
	varImportOptions := _ImportOptions{}

	if err = json.Unmarshal(bytes, &varImportOptions); err == nil {
	*o = ImportOptions(varImportOptions)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "excludeTypes")
		delete(additionalProperties, "includeTypes")
		delete(additionalProperties, "objectOptions")
		delete(additionalProperties, "defaultReferences")
		delete(additionalProperties, "excludeBackup")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableImportOptions struct {
	value *ImportOptions
	isSet bool
}

func (v NullableImportOptions) Get() *ImportOptions {
	return v.value
}

func (v *NullableImportOptions) Set(val *ImportOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableImportOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableImportOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportOptions(val *ImportOptions) *NullableImportOptions {
	return &NullableImportOptions{value: val, isSet: true}
}

func (v NullableImportOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


