/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"fmt"
)

// SubscriptionPatchRequestInnerValue The value to be used for the operation, required for \"add\" and \"replace\" operations
type SubscriptionPatchRequestInnerValue struct {
	[]SubscriptionPatchRequestInnerValueAnyOfInner *[]SubscriptionPatchRequestInnerValueAnyOfInner
	int32 *int32
	map[string]interface{} *map[string]interface{}
	string *string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *SubscriptionPatchRequestInnerValue) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into []SubscriptionPatchRequestInnerValueAnyOfInner
	err = json.Unmarshal(data, &dst.[]SubscriptionPatchRequestInnerValueAnyOfInner);
	if err == nil {
		json[]SubscriptionPatchRequestInnerValueAnyOfInner, _ := json.Marshal(dst.[]SubscriptionPatchRequestInnerValueAnyOfInner)
		if string(json[]SubscriptionPatchRequestInnerValueAnyOfInner) == "{}" { // empty struct
			dst.[]SubscriptionPatchRequestInnerValueAnyOfInner = nil
		} else {
			return nil // data stored in dst.[]SubscriptionPatchRequestInnerValueAnyOfInner, return on the first match
		}
	} else {
		dst.[]SubscriptionPatchRequestInnerValueAnyOfInner = nil
	}

	// try to unmarshal JSON data into int32
	err = json.Unmarshal(data, &dst.int32);
	if err == nil {
		jsonint32, _ := json.Marshal(dst.int32)
		if string(jsonint32) == "{}" { // empty struct
			dst.int32 = nil
		} else {
			return nil // data stored in dst.int32, return on the first match
		}
	} else {
		dst.int32 = nil
	}

	// try to unmarshal JSON data into map[string]interface{}
	err = json.Unmarshal(data, &dst.map[string]interface{});
	if err == nil {
		jsonmap[string]interface{}, _ := json.Marshal(dst.map[string]interface{})
		if string(jsonmap[string]interface{}) == "{}" { // empty struct
			dst.map[string]interface{} = nil
		} else {
			return nil // data stored in dst.map[string]interface{}, return on the first match
		}
	} else {
		dst.map[string]interface{} = nil
	}

	// try to unmarshal JSON data into string
	err = json.Unmarshal(data, &dst.string);
	if err == nil {
		jsonstring, _ := json.Marshal(dst.string)
		if string(jsonstring) == "{}" { // empty struct
			dst.string = nil
		} else {
			return nil // data stored in dst.string, return on the first match
		}
	} else {
		dst.string = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(SubscriptionPatchRequestInnerValue)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *SubscriptionPatchRequestInnerValue) MarshalJSON() ([]byte, error) {
	if src.[]SubscriptionPatchRequestInnerValueAnyOfInner != nil {
		return json.Marshal(&src.[]SubscriptionPatchRequestInnerValueAnyOfInner)
	}

	if src.int32 != nil {
		return json.Marshal(&src.int32)
	}

	if src.map[string]interface{} != nil {
		return json.Marshal(&src.map[string]interface{})
	}

	if src.string != nil {
		return json.Marshal(&src.string)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableSubscriptionPatchRequestInnerValue struct {
	value *SubscriptionPatchRequestInnerValue
	isSet bool
}

func (v NullableSubscriptionPatchRequestInnerValue) Get() *SubscriptionPatchRequestInnerValue {
	return v.value
}

func (v *NullableSubscriptionPatchRequestInnerValue) Set(val *SubscriptionPatchRequestInnerValue) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionPatchRequestInnerValue) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionPatchRequestInnerValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionPatchRequestInnerValue(val *SubscriptionPatchRequestInnerValue) *NullableSubscriptionPatchRequestInnerValue {
	return &NullableSubscriptionPatchRequestInnerValue{value: val, isSet: true}
}

func (v NullableSubscriptionPatchRequestInnerValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionPatchRequestInnerValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


