/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"fmt"
)

// checks if the SavedSearchCompleteSearchResultsEntitlement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SavedSearchCompleteSearchResultsEntitlement{}

// SavedSearchCompleteSearchResultsEntitlement A table of entitlements that match the search criteria.
type SavedSearchCompleteSearchResultsEntitlement struct {
	// The number of rows in the table.
	Count string `json:"count"`
	// The type of object represented in the table.
	Noun string `json:"noun"`
	// A sample of the data in the table.
	Preview [][]string `json:"preview"`
	AdditionalProperties map[string]interface{}
}

type _SavedSearchCompleteSearchResultsEntitlement SavedSearchCompleteSearchResultsEntitlement

// NewSavedSearchCompleteSearchResultsEntitlement instantiates a new SavedSearchCompleteSearchResultsEntitlement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSavedSearchCompleteSearchResultsEntitlement(count string, noun string, preview [][]string) *SavedSearchCompleteSearchResultsEntitlement {
	this := SavedSearchCompleteSearchResultsEntitlement{}
	this.Count = count
	this.Noun = noun
	this.Preview = preview
	return &this
}

// NewSavedSearchCompleteSearchResultsEntitlementWithDefaults instantiates a new SavedSearchCompleteSearchResultsEntitlement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSavedSearchCompleteSearchResultsEntitlementWithDefaults() *SavedSearchCompleteSearchResultsEntitlement {
	this := SavedSearchCompleteSearchResultsEntitlement{}
	return &this
}

// GetCount returns the Count field value
func (o *SavedSearchCompleteSearchResultsEntitlement) GetCount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *SavedSearchCompleteSearchResultsEntitlement) GetCountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *SavedSearchCompleteSearchResultsEntitlement) SetCount(v string) {
	o.Count = v
}

// GetNoun returns the Noun field value
func (o *SavedSearchCompleteSearchResultsEntitlement) GetNoun() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Noun
}

// GetNounOk returns a tuple with the Noun field value
// and a boolean to check if the value has been set.
func (o *SavedSearchCompleteSearchResultsEntitlement) GetNounOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Noun, true
}

// SetNoun sets field value
func (o *SavedSearchCompleteSearchResultsEntitlement) SetNoun(v string) {
	o.Noun = v
}

// GetPreview returns the Preview field value
func (o *SavedSearchCompleteSearchResultsEntitlement) GetPreview() [][]string {
	if o == nil {
		var ret [][]string
		return ret
	}

	return o.Preview
}

// GetPreviewOk returns a tuple with the Preview field value
// and a boolean to check if the value has been set.
func (o *SavedSearchCompleteSearchResultsEntitlement) GetPreviewOk() ([][]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Preview, true
}

// SetPreview sets field value
func (o *SavedSearchCompleteSearchResultsEntitlement) SetPreview(v [][]string) {
	o.Preview = v
}

func (o SavedSearchCompleteSearchResultsEntitlement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SavedSearchCompleteSearchResultsEntitlement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["count"] = o.Count
	toSerialize["noun"] = o.Noun
	toSerialize["preview"] = o.Preview

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SavedSearchCompleteSearchResultsEntitlement) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"count",
		"noun",
		"preview",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSavedSearchCompleteSearchResultsEntitlement := _SavedSearchCompleteSearchResultsEntitlement{}

	if err = json.Unmarshal(bytes, &varSavedSearchCompleteSearchResultsEntitlement); err == nil {
	*o = SavedSearchCompleteSearchResultsEntitlement(varSavedSearchCompleteSearchResultsEntitlement)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "count")
		delete(additionalProperties, "noun")
		delete(additionalProperties, "preview")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSavedSearchCompleteSearchResultsEntitlement struct {
	value *SavedSearchCompleteSearchResultsEntitlement
	isSet bool
}

func (v NullableSavedSearchCompleteSearchResultsEntitlement) Get() *SavedSearchCompleteSearchResultsEntitlement {
	return v.value
}

func (v *NullableSavedSearchCompleteSearchResultsEntitlement) Set(val *SavedSearchCompleteSearchResultsEntitlement) {
	v.value = val
	v.isSet = true
}

func (v NullableSavedSearchCompleteSearchResultsEntitlement) IsSet() bool {
	return v.isSet
}

func (v *NullableSavedSearchCompleteSearchResultsEntitlement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSavedSearchCompleteSearchResultsEntitlement(val *SavedSearchCompleteSearchResultsEntitlement) *NullableSavedSearchCompleteSearchResultsEntitlement {
	return &NullableSavedSearchCompleteSearchResultsEntitlement{value: val, isSet: true}
}

func (v NullableSavedSearchCompleteSearchResultsEntitlement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSavedSearchCompleteSearchResultsEntitlement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


