/*
Identity Security Cloud Beta API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"time"
)

// checks if the PasswordPolicyV3Dto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PasswordPolicyV3Dto{}

// PasswordPolicyV3Dto struct for PasswordPolicyV3Dto
type PasswordPolicyV3Dto struct {
	// The password policy Id.
	Id *string `json:"id,omitempty"`
	// Description for current password policy.
	Description NullableString `json:"description,omitempty"`
	// The name of the password policy.
	Name *string `json:"name,omitempty"`
	// Date the Password Policy was created.
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	// Date the Password Policy was updated.
	LastUpdated NullableTime `json:"lastUpdated,omitempty"`
	// The number of days before expiration remaninder.
	FirstExpirationReminder *int64 `json:"firstExpirationReminder,omitempty"`
	// The minimun length of account Id. By default is equals to -1.
	AccountIdMinWordLength *int64 `json:"accountIdMinWordLength,omitempty"`
	// The minimun length of account name. By default is equals to -1.
	AccountNameMinWordLength *int64 `json:"accountNameMinWordLength,omitempty"`
	// Maximum alpha. By default is equals to 0.
	MinAlpha *int64 `json:"minAlpha,omitempty"`
	// MinCharacterTypes. By default is equals to -1.
	MinCharacterTypes *int64 `json:"minCharacterTypes,omitempty"`
	// Maximum length of the password.
	MaxLength *int64 `json:"maxLength,omitempty"`
	// Minimum length of the password. By default is equals to 0.
	MinLength *int64 `json:"minLength,omitempty"`
	// Maximum repetition of the same character in the password. By default is equals to -1.
	MaxRepeatedChars *int64 `json:"maxRepeatedChars,omitempty"`
	// Minimum amount of lower case character in the password. By default is equals to 0.
	MinLower *int64 `json:"minLower,omitempty"`
	// Minimum amount of numeric characters in the password. By default is equals to 0.
	MinNumeric *int64 `json:"minNumeric,omitempty"`
	// Minimum amount of special symbols in the password. By default is equals to 0.
	MinSpecial *int64 `json:"minSpecial,omitempty"`
	// Minimum amount of upper case symbols in the password. By default is equals to 0.
	MinUpper *int64 `json:"minUpper,omitempty"`
	// Number of days before current password expires. By default is equals to 90.
	PasswordExpiration *int64 `json:"passwordExpiration,omitempty"`
	// Defines whether this policy is default or not. Default policy is created automatically when an org is setup. This field is false by default.
	DefaultPolicy *bool `json:"defaultPolicy,omitempty"`
	// Defines whether this policy is enabled to expire or not. This field is false by default.
	EnablePasswdExpiration *bool `json:"enablePasswdExpiration,omitempty"`
	// Defines whether this policy require strong Auth or not. This field is false by default.
	RequireStrongAuthn *bool `json:"requireStrongAuthn,omitempty"`
	// Defines whether this policy require strong Auth of network or not. This field is false by default.
	RequireStrongAuthOffNetwork *bool `json:"requireStrongAuthOffNetwork,omitempty"`
	// Defines whether this policy require strong Auth for untrusted geographies. This field is false by default.
	RequireStrongAuthUntrustedGeographies *bool `json:"requireStrongAuthUntrustedGeographies,omitempty"`
	// Defines whether this policy uses account attributes or not. This field is false by default.
	UseAccountAttributes *bool `json:"useAccountAttributes,omitempty"`
	// Defines whether this policy uses dictionary or not. This field is false by default.
	UseDictionary *bool `json:"useDictionary,omitempty"`
	// Defines whether this policy uses identity attributes or not. This field is false by default.
	UseIdentityAttributes *bool `json:"useIdentityAttributes,omitempty"`
	// Defines whether this policy validate against account id or not. This field is false by default.
	ValidateAgainstAccountId *bool `json:"validateAgainstAccountId,omitempty"`
	// Defines whether this policy validate against account name or not. This field is false by default.
	ValidateAgainstAccountName *bool `json:"validateAgainstAccountName,omitempty"`
	Created NullableString `json:"created,omitempty"`
	Modified NullableString `json:"modified,omitempty"`
	// List of sources IDs managed by this password policy.
	SourceIds []string `json:"sourceIds,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PasswordPolicyV3Dto PasswordPolicyV3Dto

// NewPasswordPolicyV3Dto instantiates a new PasswordPolicyV3Dto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPasswordPolicyV3Dto() *PasswordPolicyV3Dto {
	this := PasswordPolicyV3Dto{}
	var defaultPolicy bool = false
	this.DefaultPolicy = &defaultPolicy
	var enablePasswdExpiration bool = false
	this.EnablePasswdExpiration = &enablePasswdExpiration
	var requireStrongAuthn bool = false
	this.RequireStrongAuthn = &requireStrongAuthn
	var requireStrongAuthOffNetwork bool = false
	this.RequireStrongAuthOffNetwork = &requireStrongAuthOffNetwork
	var requireStrongAuthUntrustedGeographies bool = false
	this.RequireStrongAuthUntrustedGeographies = &requireStrongAuthUntrustedGeographies
	var useAccountAttributes bool = false
	this.UseAccountAttributes = &useAccountAttributes
	var useDictionary bool = false
	this.UseDictionary = &useDictionary
	var useIdentityAttributes bool = false
	this.UseIdentityAttributes = &useIdentityAttributes
	var validateAgainstAccountId bool = false
	this.ValidateAgainstAccountId = &validateAgainstAccountId
	var validateAgainstAccountName bool = false
	this.ValidateAgainstAccountName = &validateAgainstAccountName
	return &this
}

// NewPasswordPolicyV3DtoWithDefaults instantiates a new PasswordPolicyV3Dto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPasswordPolicyV3DtoWithDefaults() *PasswordPolicyV3Dto {
	this := PasswordPolicyV3Dto{}
	var defaultPolicy bool = false
	this.DefaultPolicy = &defaultPolicy
	var enablePasswdExpiration bool = false
	this.EnablePasswdExpiration = &enablePasswdExpiration
	var requireStrongAuthn bool = false
	this.RequireStrongAuthn = &requireStrongAuthn
	var requireStrongAuthOffNetwork bool = false
	this.RequireStrongAuthOffNetwork = &requireStrongAuthOffNetwork
	var requireStrongAuthUntrustedGeographies bool = false
	this.RequireStrongAuthUntrustedGeographies = &requireStrongAuthUntrustedGeographies
	var useAccountAttributes bool = false
	this.UseAccountAttributes = &useAccountAttributes
	var useDictionary bool = false
	this.UseDictionary = &useDictionary
	var useIdentityAttributes bool = false
	this.UseIdentityAttributes = &useIdentityAttributes
	var validateAgainstAccountId bool = false
	this.ValidateAgainstAccountId = &validateAgainstAccountId
	var validateAgainstAccountName bool = false
	this.ValidateAgainstAccountName = &validateAgainstAccountName
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PasswordPolicyV3Dto) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyV3Dto) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PasswordPolicyV3Dto) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PasswordPolicyV3Dto) SetId(v string) {
	o.Id = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PasswordPolicyV3Dto) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PasswordPolicyV3Dto) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *PasswordPolicyV3Dto) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *PasswordPolicyV3Dto) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *PasswordPolicyV3Dto) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *PasswordPolicyV3Dto) UnsetDescription() {
	o.Description.Unset()
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PasswordPolicyV3Dto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyV3Dto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PasswordPolicyV3Dto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PasswordPolicyV3Dto) SetName(v string) {
	o.Name = &v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *PasswordPolicyV3Dto) GetDateCreated() time.Time {
	if o == nil || IsNil(o.DateCreated) {
		var ret time.Time
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyV3Dto) GetDateCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateCreated) {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *PasswordPolicyV3Dto) HasDateCreated() bool {
	if o != nil && !IsNil(o.DateCreated) {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given time.Time and assigns it to the DateCreated field.
func (o *PasswordPolicyV3Dto) SetDateCreated(v time.Time) {
	o.DateCreated = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PasswordPolicyV3Dto) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated.Get()) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated.Get()
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PasswordPolicyV3Dto) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastUpdated.Get(), o.LastUpdated.IsSet()
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *PasswordPolicyV3Dto) HasLastUpdated() bool {
	if o != nil && o.LastUpdated.IsSet() {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given NullableTime and assigns it to the LastUpdated field.
func (o *PasswordPolicyV3Dto) SetLastUpdated(v time.Time) {
	o.LastUpdated.Set(&v)
}
// SetLastUpdatedNil sets the value for LastUpdated to be an explicit nil
func (o *PasswordPolicyV3Dto) SetLastUpdatedNil() {
	o.LastUpdated.Set(nil)
}

// UnsetLastUpdated ensures that no value is present for LastUpdated, not even an explicit nil
func (o *PasswordPolicyV3Dto) UnsetLastUpdated() {
	o.LastUpdated.Unset()
}

// GetFirstExpirationReminder returns the FirstExpirationReminder field value if set, zero value otherwise.
func (o *PasswordPolicyV3Dto) GetFirstExpirationReminder() int64 {
	if o == nil || IsNil(o.FirstExpirationReminder) {
		var ret int64
		return ret
	}
	return *o.FirstExpirationReminder
}

// GetFirstExpirationReminderOk returns a tuple with the FirstExpirationReminder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyV3Dto) GetFirstExpirationReminderOk() (*int64, bool) {
	if o == nil || IsNil(o.FirstExpirationReminder) {
		return nil, false
	}
	return o.FirstExpirationReminder, true
}

// HasFirstExpirationReminder returns a boolean if a field has been set.
func (o *PasswordPolicyV3Dto) HasFirstExpirationReminder() bool {
	if o != nil && !IsNil(o.FirstExpirationReminder) {
		return true
	}

	return false
}

// SetFirstExpirationReminder gets a reference to the given int64 and assigns it to the FirstExpirationReminder field.
func (o *PasswordPolicyV3Dto) SetFirstExpirationReminder(v int64) {
	o.FirstExpirationReminder = &v
}

// GetAccountIdMinWordLength returns the AccountIdMinWordLength field value if set, zero value otherwise.
func (o *PasswordPolicyV3Dto) GetAccountIdMinWordLength() int64 {
	if o == nil || IsNil(o.AccountIdMinWordLength) {
		var ret int64
		return ret
	}
	return *o.AccountIdMinWordLength
}

// GetAccountIdMinWordLengthOk returns a tuple with the AccountIdMinWordLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyV3Dto) GetAccountIdMinWordLengthOk() (*int64, bool) {
	if o == nil || IsNil(o.AccountIdMinWordLength) {
		return nil, false
	}
	return o.AccountIdMinWordLength, true
}

// HasAccountIdMinWordLength returns a boolean if a field has been set.
func (o *PasswordPolicyV3Dto) HasAccountIdMinWordLength() bool {
	if o != nil && !IsNil(o.AccountIdMinWordLength) {
		return true
	}

	return false
}

// SetAccountIdMinWordLength gets a reference to the given int64 and assigns it to the AccountIdMinWordLength field.
func (o *PasswordPolicyV3Dto) SetAccountIdMinWordLength(v int64) {
	o.AccountIdMinWordLength = &v
}

// GetAccountNameMinWordLength returns the AccountNameMinWordLength field value if set, zero value otherwise.
func (o *PasswordPolicyV3Dto) GetAccountNameMinWordLength() int64 {
	if o == nil || IsNil(o.AccountNameMinWordLength) {
		var ret int64
		return ret
	}
	return *o.AccountNameMinWordLength
}

// GetAccountNameMinWordLengthOk returns a tuple with the AccountNameMinWordLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyV3Dto) GetAccountNameMinWordLengthOk() (*int64, bool) {
	if o == nil || IsNil(o.AccountNameMinWordLength) {
		return nil, false
	}
	return o.AccountNameMinWordLength, true
}

// HasAccountNameMinWordLength returns a boolean if a field has been set.
func (o *PasswordPolicyV3Dto) HasAccountNameMinWordLength() bool {
	if o != nil && !IsNil(o.AccountNameMinWordLength) {
		return true
	}

	return false
}

// SetAccountNameMinWordLength gets a reference to the given int64 and assigns it to the AccountNameMinWordLength field.
func (o *PasswordPolicyV3Dto) SetAccountNameMinWordLength(v int64) {
	o.AccountNameMinWordLength = &v
}

// GetMinAlpha returns the MinAlpha field value if set, zero value otherwise.
func (o *PasswordPolicyV3Dto) GetMinAlpha() int64 {
	if o == nil || IsNil(o.MinAlpha) {
		var ret int64
		return ret
	}
	return *o.MinAlpha
}

// GetMinAlphaOk returns a tuple with the MinAlpha field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyV3Dto) GetMinAlphaOk() (*int64, bool) {
	if o == nil || IsNil(o.MinAlpha) {
		return nil, false
	}
	return o.MinAlpha, true
}

// HasMinAlpha returns a boolean if a field has been set.
func (o *PasswordPolicyV3Dto) HasMinAlpha() bool {
	if o != nil && !IsNil(o.MinAlpha) {
		return true
	}

	return false
}

// SetMinAlpha gets a reference to the given int64 and assigns it to the MinAlpha field.
func (o *PasswordPolicyV3Dto) SetMinAlpha(v int64) {
	o.MinAlpha = &v
}

// GetMinCharacterTypes returns the MinCharacterTypes field value if set, zero value otherwise.
func (o *PasswordPolicyV3Dto) GetMinCharacterTypes() int64 {
	if o == nil || IsNil(o.MinCharacterTypes) {
		var ret int64
		return ret
	}
	return *o.MinCharacterTypes
}

// GetMinCharacterTypesOk returns a tuple with the MinCharacterTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyV3Dto) GetMinCharacterTypesOk() (*int64, bool) {
	if o == nil || IsNil(o.MinCharacterTypes) {
		return nil, false
	}
	return o.MinCharacterTypes, true
}

// HasMinCharacterTypes returns a boolean if a field has been set.
func (o *PasswordPolicyV3Dto) HasMinCharacterTypes() bool {
	if o != nil && !IsNil(o.MinCharacterTypes) {
		return true
	}

	return false
}

// SetMinCharacterTypes gets a reference to the given int64 and assigns it to the MinCharacterTypes field.
func (o *PasswordPolicyV3Dto) SetMinCharacterTypes(v int64) {
	o.MinCharacterTypes = &v
}

// GetMaxLength returns the MaxLength field value if set, zero value otherwise.
func (o *PasswordPolicyV3Dto) GetMaxLength() int64 {
	if o == nil || IsNil(o.MaxLength) {
		var ret int64
		return ret
	}
	return *o.MaxLength
}

// GetMaxLengthOk returns a tuple with the MaxLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyV3Dto) GetMaxLengthOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxLength) {
		return nil, false
	}
	return o.MaxLength, true
}

// HasMaxLength returns a boolean if a field has been set.
func (o *PasswordPolicyV3Dto) HasMaxLength() bool {
	if o != nil && !IsNil(o.MaxLength) {
		return true
	}

	return false
}

// SetMaxLength gets a reference to the given int64 and assigns it to the MaxLength field.
func (o *PasswordPolicyV3Dto) SetMaxLength(v int64) {
	o.MaxLength = &v
}

// GetMinLength returns the MinLength field value if set, zero value otherwise.
func (o *PasswordPolicyV3Dto) GetMinLength() int64 {
	if o == nil || IsNil(o.MinLength) {
		var ret int64
		return ret
	}
	return *o.MinLength
}

// GetMinLengthOk returns a tuple with the MinLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyV3Dto) GetMinLengthOk() (*int64, bool) {
	if o == nil || IsNil(o.MinLength) {
		return nil, false
	}
	return o.MinLength, true
}

// HasMinLength returns a boolean if a field has been set.
func (o *PasswordPolicyV3Dto) HasMinLength() bool {
	if o != nil && !IsNil(o.MinLength) {
		return true
	}

	return false
}

// SetMinLength gets a reference to the given int64 and assigns it to the MinLength field.
func (o *PasswordPolicyV3Dto) SetMinLength(v int64) {
	o.MinLength = &v
}

// GetMaxRepeatedChars returns the MaxRepeatedChars field value if set, zero value otherwise.
func (o *PasswordPolicyV3Dto) GetMaxRepeatedChars() int64 {
	if o == nil || IsNil(o.MaxRepeatedChars) {
		var ret int64
		return ret
	}
	return *o.MaxRepeatedChars
}

// GetMaxRepeatedCharsOk returns a tuple with the MaxRepeatedChars field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyV3Dto) GetMaxRepeatedCharsOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxRepeatedChars) {
		return nil, false
	}
	return o.MaxRepeatedChars, true
}

// HasMaxRepeatedChars returns a boolean if a field has been set.
func (o *PasswordPolicyV3Dto) HasMaxRepeatedChars() bool {
	if o != nil && !IsNil(o.MaxRepeatedChars) {
		return true
	}

	return false
}

// SetMaxRepeatedChars gets a reference to the given int64 and assigns it to the MaxRepeatedChars field.
func (o *PasswordPolicyV3Dto) SetMaxRepeatedChars(v int64) {
	o.MaxRepeatedChars = &v
}

// GetMinLower returns the MinLower field value if set, zero value otherwise.
func (o *PasswordPolicyV3Dto) GetMinLower() int64 {
	if o == nil || IsNil(o.MinLower) {
		var ret int64
		return ret
	}
	return *o.MinLower
}

// GetMinLowerOk returns a tuple with the MinLower field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyV3Dto) GetMinLowerOk() (*int64, bool) {
	if o == nil || IsNil(o.MinLower) {
		return nil, false
	}
	return o.MinLower, true
}

// HasMinLower returns a boolean if a field has been set.
func (o *PasswordPolicyV3Dto) HasMinLower() bool {
	if o != nil && !IsNil(o.MinLower) {
		return true
	}

	return false
}

// SetMinLower gets a reference to the given int64 and assigns it to the MinLower field.
func (o *PasswordPolicyV3Dto) SetMinLower(v int64) {
	o.MinLower = &v
}

// GetMinNumeric returns the MinNumeric field value if set, zero value otherwise.
func (o *PasswordPolicyV3Dto) GetMinNumeric() int64 {
	if o == nil || IsNil(o.MinNumeric) {
		var ret int64
		return ret
	}
	return *o.MinNumeric
}

// GetMinNumericOk returns a tuple with the MinNumeric field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyV3Dto) GetMinNumericOk() (*int64, bool) {
	if o == nil || IsNil(o.MinNumeric) {
		return nil, false
	}
	return o.MinNumeric, true
}

// HasMinNumeric returns a boolean if a field has been set.
func (o *PasswordPolicyV3Dto) HasMinNumeric() bool {
	if o != nil && !IsNil(o.MinNumeric) {
		return true
	}

	return false
}

// SetMinNumeric gets a reference to the given int64 and assigns it to the MinNumeric field.
func (o *PasswordPolicyV3Dto) SetMinNumeric(v int64) {
	o.MinNumeric = &v
}

// GetMinSpecial returns the MinSpecial field value if set, zero value otherwise.
func (o *PasswordPolicyV3Dto) GetMinSpecial() int64 {
	if o == nil || IsNil(o.MinSpecial) {
		var ret int64
		return ret
	}
	return *o.MinSpecial
}

// GetMinSpecialOk returns a tuple with the MinSpecial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyV3Dto) GetMinSpecialOk() (*int64, bool) {
	if o == nil || IsNil(o.MinSpecial) {
		return nil, false
	}
	return o.MinSpecial, true
}

// HasMinSpecial returns a boolean if a field has been set.
func (o *PasswordPolicyV3Dto) HasMinSpecial() bool {
	if o != nil && !IsNil(o.MinSpecial) {
		return true
	}

	return false
}

// SetMinSpecial gets a reference to the given int64 and assigns it to the MinSpecial field.
func (o *PasswordPolicyV3Dto) SetMinSpecial(v int64) {
	o.MinSpecial = &v
}

// GetMinUpper returns the MinUpper field value if set, zero value otherwise.
func (o *PasswordPolicyV3Dto) GetMinUpper() int64 {
	if o == nil || IsNil(o.MinUpper) {
		var ret int64
		return ret
	}
	return *o.MinUpper
}

// GetMinUpperOk returns a tuple with the MinUpper field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyV3Dto) GetMinUpperOk() (*int64, bool) {
	if o == nil || IsNil(o.MinUpper) {
		return nil, false
	}
	return o.MinUpper, true
}

// HasMinUpper returns a boolean if a field has been set.
func (o *PasswordPolicyV3Dto) HasMinUpper() bool {
	if o != nil && !IsNil(o.MinUpper) {
		return true
	}

	return false
}

// SetMinUpper gets a reference to the given int64 and assigns it to the MinUpper field.
func (o *PasswordPolicyV3Dto) SetMinUpper(v int64) {
	o.MinUpper = &v
}

// GetPasswordExpiration returns the PasswordExpiration field value if set, zero value otherwise.
func (o *PasswordPolicyV3Dto) GetPasswordExpiration() int64 {
	if o == nil || IsNil(o.PasswordExpiration) {
		var ret int64
		return ret
	}
	return *o.PasswordExpiration
}

// GetPasswordExpirationOk returns a tuple with the PasswordExpiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyV3Dto) GetPasswordExpirationOk() (*int64, bool) {
	if o == nil || IsNil(o.PasswordExpiration) {
		return nil, false
	}
	return o.PasswordExpiration, true
}

// HasPasswordExpiration returns a boolean if a field has been set.
func (o *PasswordPolicyV3Dto) HasPasswordExpiration() bool {
	if o != nil && !IsNil(o.PasswordExpiration) {
		return true
	}

	return false
}

// SetPasswordExpiration gets a reference to the given int64 and assigns it to the PasswordExpiration field.
func (o *PasswordPolicyV3Dto) SetPasswordExpiration(v int64) {
	o.PasswordExpiration = &v
}

// GetDefaultPolicy returns the DefaultPolicy field value if set, zero value otherwise.
func (o *PasswordPolicyV3Dto) GetDefaultPolicy() bool {
	if o == nil || IsNil(o.DefaultPolicy) {
		var ret bool
		return ret
	}
	return *o.DefaultPolicy
}

// GetDefaultPolicyOk returns a tuple with the DefaultPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyV3Dto) GetDefaultPolicyOk() (*bool, bool) {
	if o == nil || IsNil(o.DefaultPolicy) {
		return nil, false
	}
	return o.DefaultPolicy, true
}

// HasDefaultPolicy returns a boolean if a field has been set.
func (o *PasswordPolicyV3Dto) HasDefaultPolicy() bool {
	if o != nil && !IsNil(o.DefaultPolicy) {
		return true
	}

	return false
}

// SetDefaultPolicy gets a reference to the given bool and assigns it to the DefaultPolicy field.
func (o *PasswordPolicyV3Dto) SetDefaultPolicy(v bool) {
	o.DefaultPolicy = &v
}

// GetEnablePasswdExpiration returns the EnablePasswdExpiration field value if set, zero value otherwise.
func (o *PasswordPolicyV3Dto) GetEnablePasswdExpiration() bool {
	if o == nil || IsNil(o.EnablePasswdExpiration) {
		var ret bool
		return ret
	}
	return *o.EnablePasswdExpiration
}

// GetEnablePasswdExpirationOk returns a tuple with the EnablePasswdExpiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyV3Dto) GetEnablePasswdExpirationOk() (*bool, bool) {
	if o == nil || IsNil(o.EnablePasswdExpiration) {
		return nil, false
	}
	return o.EnablePasswdExpiration, true
}

// HasEnablePasswdExpiration returns a boolean if a field has been set.
func (o *PasswordPolicyV3Dto) HasEnablePasswdExpiration() bool {
	if o != nil && !IsNil(o.EnablePasswdExpiration) {
		return true
	}

	return false
}

// SetEnablePasswdExpiration gets a reference to the given bool and assigns it to the EnablePasswdExpiration field.
func (o *PasswordPolicyV3Dto) SetEnablePasswdExpiration(v bool) {
	o.EnablePasswdExpiration = &v
}

// GetRequireStrongAuthn returns the RequireStrongAuthn field value if set, zero value otherwise.
func (o *PasswordPolicyV3Dto) GetRequireStrongAuthn() bool {
	if o == nil || IsNil(o.RequireStrongAuthn) {
		var ret bool
		return ret
	}
	return *o.RequireStrongAuthn
}

// GetRequireStrongAuthnOk returns a tuple with the RequireStrongAuthn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyV3Dto) GetRequireStrongAuthnOk() (*bool, bool) {
	if o == nil || IsNil(o.RequireStrongAuthn) {
		return nil, false
	}
	return o.RequireStrongAuthn, true
}

// HasRequireStrongAuthn returns a boolean if a field has been set.
func (o *PasswordPolicyV3Dto) HasRequireStrongAuthn() bool {
	if o != nil && !IsNil(o.RequireStrongAuthn) {
		return true
	}

	return false
}

// SetRequireStrongAuthn gets a reference to the given bool and assigns it to the RequireStrongAuthn field.
func (o *PasswordPolicyV3Dto) SetRequireStrongAuthn(v bool) {
	o.RequireStrongAuthn = &v
}

// GetRequireStrongAuthOffNetwork returns the RequireStrongAuthOffNetwork field value if set, zero value otherwise.
func (o *PasswordPolicyV3Dto) GetRequireStrongAuthOffNetwork() bool {
	if o == nil || IsNil(o.RequireStrongAuthOffNetwork) {
		var ret bool
		return ret
	}
	return *o.RequireStrongAuthOffNetwork
}

// GetRequireStrongAuthOffNetworkOk returns a tuple with the RequireStrongAuthOffNetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyV3Dto) GetRequireStrongAuthOffNetworkOk() (*bool, bool) {
	if o == nil || IsNil(o.RequireStrongAuthOffNetwork) {
		return nil, false
	}
	return o.RequireStrongAuthOffNetwork, true
}

// HasRequireStrongAuthOffNetwork returns a boolean if a field has been set.
func (o *PasswordPolicyV3Dto) HasRequireStrongAuthOffNetwork() bool {
	if o != nil && !IsNil(o.RequireStrongAuthOffNetwork) {
		return true
	}

	return false
}

// SetRequireStrongAuthOffNetwork gets a reference to the given bool and assigns it to the RequireStrongAuthOffNetwork field.
func (o *PasswordPolicyV3Dto) SetRequireStrongAuthOffNetwork(v bool) {
	o.RequireStrongAuthOffNetwork = &v
}

// GetRequireStrongAuthUntrustedGeographies returns the RequireStrongAuthUntrustedGeographies field value if set, zero value otherwise.
func (o *PasswordPolicyV3Dto) GetRequireStrongAuthUntrustedGeographies() bool {
	if o == nil || IsNil(o.RequireStrongAuthUntrustedGeographies) {
		var ret bool
		return ret
	}
	return *o.RequireStrongAuthUntrustedGeographies
}

// GetRequireStrongAuthUntrustedGeographiesOk returns a tuple with the RequireStrongAuthUntrustedGeographies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyV3Dto) GetRequireStrongAuthUntrustedGeographiesOk() (*bool, bool) {
	if o == nil || IsNil(o.RequireStrongAuthUntrustedGeographies) {
		return nil, false
	}
	return o.RequireStrongAuthUntrustedGeographies, true
}

// HasRequireStrongAuthUntrustedGeographies returns a boolean if a field has been set.
func (o *PasswordPolicyV3Dto) HasRequireStrongAuthUntrustedGeographies() bool {
	if o != nil && !IsNil(o.RequireStrongAuthUntrustedGeographies) {
		return true
	}

	return false
}

// SetRequireStrongAuthUntrustedGeographies gets a reference to the given bool and assigns it to the RequireStrongAuthUntrustedGeographies field.
func (o *PasswordPolicyV3Dto) SetRequireStrongAuthUntrustedGeographies(v bool) {
	o.RequireStrongAuthUntrustedGeographies = &v
}

// GetUseAccountAttributes returns the UseAccountAttributes field value if set, zero value otherwise.
func (o *PasswordPolicyV3Dto) GetUseAccountAttributes() bool {
	if o == nil || IsNil(o.UseAccountAttributes) {
		var ret bool
		return ret
	}
	return *o.UseAccountAttributes
}

// GetUseAccountAttributesOk returns a tuple with the UseAccountAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyV3Dto) GetUseAccountAttributesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseAccountAttributes) {
		return nil, false
	}
	return o.UseAccountAttributes, true
}

// HasUseAccountAttributes returns a boolean if a field has been set.
func (o *PasswordPolicyV3Dto) HasUseAccountAttributes() bool {
	if o != nil && !IsNil(o.UseAccountAttributes) {
		return true
	}

	return false
}

// SetUseAccountAttributes gets a reference to the given bool and assigns it to the UseAccountAttributes field.
func (o *PasswordPolicyV3Dto) SetUseAccountAttributes(v bool) {
	o.UseAccountAttributes = &v
}

// GetUseDictionary returns the UseDictionary field value if set, zero value otherwise.
func (o *PasswordPolicyV3Dto) GetUseDictionary() bool {
	if o == nil || IsNil(o.UseDictionary) {
		var ret bool
		return ret
	}
	return *o.UseDictionary
}

// GetUseDictionaryOk returns a tuple with the UseDictionary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyV3Dto) GetUseDictionaryOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDictionary) {
		return nil, false
	}
	return o.UseDictionary, true
}

// HasUseDictionary returns a boolean if a field has been set.
func (o *PasswordPolicyV3Dto) HasUseDictionary() bool {
	if o != nil && !IsNil(o.UseDictionary) {
		return true
	}

	return false
}

// SetUseDictionary gets a reference to the given bool and assigns it to the UseDictionary field.
func (o *PasswordPolicyV3Dto) SetUseDictionary(v bool) {
	o.UseDictionary = &v
}

// GetUseIdentityAttributes returns the UseIdentityAttributes field value if set, zero value otherwise.
func (o *PasswordPolicyV3Dto) GetUseIdentityAttributes() bool {
	if o == nil || IsNil(o.UseIdentityAttributes) {
		var ret bool
		return ret
	}
	return *o.UseIdentityAttributes
}

// GetUseIdentityAttributesOk returns a tuple with the UseIdentityAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyV3Dto) GetUseIdentityAttributesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseIdentityAttributes) {
		return nil, false
	}
	return o.UseIdentityAttributes, true
}

// HasUseIdentityAttributes returns a boolean if a field has been set.
func (o *PasswordPolicyV3Dto) HasUseIdentityAttributes() bool {
	if o != nil && !IsNil(o.UseIdentityAttributes) {
		return true
	}

	return false
}

// SetUseIdentityAttributes gets a reference to the given bool and assigns it to the UseIdentityAttributes field.
func (o *PasswordPolicyV3Dto) SetUseIdentityAttributes(v bool) {
	o.UseIdentityAttributes = &v
}

// GetValidateAgainstAccountId returns the ValidateAgainstAccountId field value if set, zero value otherwise.
func (o *PasswordPolicyV3Dto) GetValidateAgainstAccountId() bool {
	if o == nil || IsNil(o.ValidateAgainstAccountId) {
		var ret bool
		return ret
	}
	return *o.ValidateAgainstAccountId
}

// GetValidateAgainstAccountIdOk returns a tuple with the ValidateAgainstAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyV3Dto) GetValidateAgainstAccountIdOk() (*bool, bool) {
	if o == nil || IsNil(o.ValidateAgainstAccountId) {
		return nil, false
	}
	return o.ValidateAgainstAccountId, true
}

// HasValidateAgainstAccountId returns a boolean if a field has been set.
func (o *PasswordPolicyV3Dto) HasValidateAgainstAccountId() bool {
	if o != nil && !IsNil(o.ValidateAgainstAccountId) {
		return true
	}

	return false
}

// SetValidateAgainstAccountId gets a reference to the given bool and assigns it to the ValidateAgainstAccountId field.
func (o *PasswordPolicyV3Dto) SetValidateAgainstAccountId(v bool) {
	o.ValidateAgainstAccountId = &v
}

// GetValidateAgainstAccountName returns the ValidateAgainstAccountName field value if set, zero value otherwise.
func (o *PasswordPolicyV3Dto) GetValidateAgainstAccountName() bool {
	if o == nil || IsNil(o.ValidateAgainstAccountName) {
		var ret bool
		return ret
	}
	return *o.ValidateAgainstAccountName
}

// GetValidateAgainstAccountNameOk returns a tuple with the ValidateAgainstAccountName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyV3Dto) GetValidateAgainstAccountNameOk() (*bool, bool) {
	if o == nil || IsNil(o.ValidateAgainstAccountName) {
		return nil, false
	}
	return o.ValidateAgainstAccountName, true
}

// HasValidateAgainstAccountName returns a boolean if a field has been set.
func (o *PasswordPolicyV3Dto) HasValidateAgainstAccountName() bool {
	if o != nil && !IsNil(o.ValidateAgainstAccountName) {
		return true
	}

	return false
}

// SetValidateAgainstAccountName gets a reference to the given bool and assigns it to the ValidateAgainstAccountName field.
func (o *PasswordPolicyV3Dto) SetValidateAgainstAccountName(v bool) {
	o.ValidateAgainstAccountName = &v
}

// GetCreated returns the Created field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PasswordPolicyV3Dto) GetCreated() string {
	if o == nil || IsNil(o.Created.Get()) {
		var ret string
		return ret
	}
	return *o.Created.Get()
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PasswordPolicyV3Dto) GetCreatedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Created.Get(), o.Created.IsSet()
}

// HasCreated returns a boolean if a field has been set.
func (o *PasswordPolicyV3Dto) HasCreated() bool {
	if o != nil && o.Created.IsSet() {
		return true
	}

	return false
}

// SetCreated gets a reference to the given NullableString and assigns it to the Created field.
func (o *PasswordPolicyV3Dto) SetCreated(v string) {
	o.Created.Set(&v)
}
// SetCreatedNil sets the value for Created to be an explicit nil
func (o *PasswordPolicyV3Dto) SetCreatedNil() {
	o.Created.Set(nil)
}

// UnsetCreated ensures that no value is present for Created, not even an explicit nil
func (o *PasswordPolicyV3Dto) UnsetCreated() {
	o.Created.Unset()
}

// GetModified returns the Modified field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PasswordPolicyV3Dto) GetModified() string {
	if o == nil || IsNil(o.Modified.Get()) {
		var ret string
		return ret
	}
	return *o.Modified.Get()
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PasswordPolicyV3Dto) GetModifiedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Modified.Get(), o.Modified.IsSet()
}

// HasModified returns a boolean if a field has been set.
func (o *PasswordPolicyV3Dto) HasModified() bool {
	if o != nil && o.Modified.IsSet() {
		return true
	}

	return false
}

// SetModified gets a reference to the given NullableString and assigns it to the Modified field.
func (o *PasswordPolicyV3Dto) SetModified(v string) {
	o.Modified.Set(&v)
}
// SetModifiedNil sets the value for Modified to be an explicit nil
func (o *PasswordPolicyV3Dto) SetModifiedNil() {
	o.Modified.Set(nil)
}

// UnsetModified ensures that no value is present for Modified, not even an explicit nil
func (o *PasswordPolicyV3Dto) UnsetModified() {
	o.Modified.Unset()
}

// GetSourceIds returns the SourceIds field value if set, zero value otherwise.
func (o *PasswordPolicyV3Dto) GetSourceIds() []string {
	if o == nil || IsNil(o.SourceIds) {
		var ret []string
		return ret
	}
	return o.SourceIds
}

// GetSourceIdsOk returns a tuple with the SourceIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyV3Dto) GetSourceIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.SourceIds) {
		return nil, false
	}
	return o.SourceIds, true
}

// HasSourceIds returns a boolean if a field has been set.
func (o *PasswordPolicyV3Dto) HasSourceIds() bool {
	if o != nil && !IsNil(o.SourceIds) {
		return true
	}

	return false
}

// SetSourceIds gets a reference to the given []string and assigns it to the SourceIds field.
func (o *PasswordPolicyV3Dto) SetSourceIds(v []string) {
	o.SourceIds = v
}

func (o PasswordPolicyV3Dto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PasswordPolicyV3Dto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.DateCreated) {
		toSerialize["dateCreated"] = o.DateCreated
	}
	if o.LastUpdated.IsSet() {
		toSerialize["lastUpdated"] = o.LastUpdated.Get()
	}
	if !IsNil(o.FirstExpirationReminder) {
		toSerialize["firstExpirationReminder"] = o.FirstExpirationReminder
	}
	if !IsNil(o.AccountIdMinWordLength) {
		toSerialize["accountIdMinWordLength"] = o.AccountIdMinWordLength
	}
	if !IsNil(o.AccountNameMinWordLength) {
		toSerialize["accountNameMinWordLength"] = o.AccountNameMinWordLength
	}
	if !IsNil(o.MinAlpha) {
		toSerialize["minAlpha"] = o.MinAlpha
	}
	if !IsNil(o.MinCharacterTypes) {
		toSerialize["minCharacterTypes"] = o.MinCharacterTypes
	}
	if !IsNil(o.MaxLength) {
		toSerialize["maxLength"] = o.MaxLength
	}
	if !IsNil(o.MinLength) {
		toSerialize["minLength"] = o.MinLength
	}
	if !IsNil(o.MaxRepeatedChars) {
		toSerialize["maxRepeatedChars"] = o.MaxRepeatedChars
	}
	if !IsNil(o.MinLower) {
		toSerialize["minLower"] = o.MinLower
	}
	if !IsNil(o.MinNumeric) {
		toSerialize["minNumeric"] = o.MinNumeric
	}
	if !IsNil(o.MinSpecial) {
		toSerialize["minSpecial"] = o.MinSpecial
	}
	if !IsNil(o.MinUpper) {
		toSerialize["minUpper"] = o.MinUpper
	}
	if !IsNil(o.PasswordExpiration) {
		toSerialize["passwordExpiration"] = o.PasswordExpiration
	}
	if !IsNil(o.DefaultPolicy) {
		toSerialize["defaultPolicy"] = o.DefaultPolicy
	}
	if !IsNil(o.EnablePasswdExpiration) {
		toSerialize["enablePasswdExpiration"] = o.EnablePasswdExpiration
	}
	if !IsNil(o.RequireStrongAuthn) {
		toSerialize["requireStrongAuthn"] = o.RequireStrongAuthn
	}
	if !IsNil(o.RequireStrongAuthOffNetwork) {
		toSerialize["requireStrongAuthOffNetwork"] = o.RequireStrongAuthOffNetwork
	}
	if !IsNil(o.RequireStrongAuthUntrustedGeographies) {
		toSerialize["requireStrongAuthUntrustedGeographies"] = o.RequireStrongAuthUntrustedGeographies
	}
	if !IsNil(o.UseAccountAttributes) {
		toSerialize["useAccountAttributes"] = o.UseAccountAttributes
	}
	if !IsNil(o.UseDictionary) {
		toSerialize["useDictionary"] = o.UseDictionary
	}
	if !IsNil(o.UseIdentityAttributes) {
		toSerialize["useIdentityAttributes"] = o.UseIdentityAttributes
	}
	if !IsNil(o.ValidateAgainstAccountId) {
		toSerialize["validateAgainstAccountId"] = o.ValidateAgainstAccountId
	}
	if !IsNil(o.ValidateAgainstAccountName) {
		toSerialize["validateAgainstAccountName"] = o.ValidateAgainstAccountName
	}
	if o.Created.IsSet() {
		toSerialize["created"] = o.Created.Get()
	}
	if o.Modified.IsSet() {
		toSerialize["modified"] = o.Modified.Get()
	}
	if !IsNil(o.SourceIds) {
		toSerialize["sourceIds"] = o.SourceIds
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PasswordPolicyV3Dto) UnmarshalJSON(data []byte) (err error) {
	varPasswordPolicyV3Dto := _PasswordPolicyV3Dto{}

	err = json.Unmarshal(data, &varPasswordPolicyV3Dto)

	if err != nil {
		return err
	}

	*o = PasswordPolicyV3Dto(varPasswordPolicyV3Dto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "description")
		delete(additionalProperties, "name")
		delete(additionalProperties, "dateCreated")
		delete(additionalProperties, "lastUpdated")
		delete(additionalProperties, "firstExpirationReminder")
		delete(additionalProperties, "accountIdMinWordLength")
		delete(additionalProperties, "accountNameMinWordLength")
		delete(additionalProperties, "minAlpha")
		delete(additionalProperties, "minCharacterTypes")
		delete(additionalProperties, "maxLength")
		delete(additionalProperties, "minLength")
		delete(additionalProperties, "maxRepeatedChars")
		delete(additionalProperties, "minLower")
		delete(additionalProperties, "minNumeric")
		delete(additionalProperties, "minSpecial")
		delete(additionalProperties, "minUpper")
		delete(additionalProperties, "passwordExpiration")
		delete(additionalProperties, "defaultPolicy")
		delete(additionalProperties, "enablePasswdExpiration")
		delete(additionalProperties, "requireStrongAuthn")
		delete(additionalProperties, "requireStrongAuthOffNetwork")
		delete(additionalProperties, "requireStrongAuthUntrustedGeographies")
		delete(additionalProperties, "useAccountAttributes")
		delete(additionalProperties, "useDictionary")
		delete(additionalProperties, "useIdentityAttributes")
		delete(additionalProperties, "validateAgainstAccountId")
		delete(additionalProperties, "validateAgainstAccountName")
		delete(additionalProperties, "created")
		delete(additionalProperties, "modified")
		delete(additionalProperties, "sourceIds")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePasswordPolicyV3Dto struct {
	value *PasswordPolicyV3Dto
	isSet bool
}

func (v NullablePasswordPolicyV3Dto) Get() *PasswordPolicyV3Dto {
	return v.value
}

func (v *NullablePasswordPolicyV3Dto) Set(val *PasswordPolicyV3Dto) {
	v.value = val
	v.isSet = true
}

func (v NullablePasswordPolicyV3Dto) IsSet() bool {
	return v.isSet
}

func (v *NullablePasswordPolicyV3Dto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePasswordPolicyV3Dto(val *PasswordPolicyV3Dto) *NullablePasswordPolicyV3Dto {
	return &NullablePasswordPolicyV3Dto{value: val, isSet: true}
}

func (v NullablePasswordPolicyV3Dto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePasswordPolicyV3Dto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


