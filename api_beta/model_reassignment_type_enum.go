/*
Identity Security Cloud Beta API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"fmt"
)

// ReassignmentTypeEnum Enum list containing types of Reassignment that can be found in the evaluate response.
type ReassignmentTypeEnum string

// List of ReassignmentTypeEnum
const (
	REASSIGNMENTTYPEENUM_MANUAL_REASSIGNMENT ReassignmentTypeEnum = "MANUAL_REASSIGNMENT,"
	REASSIGNMENTTYPEENUM_AUTOMATIC_REASSIGNMENT ReassignmentTypeEnum = "AUTOMATIC_REASSIGNMENT,"
	REASSIGNMENTTYPEENUM_AUTO_ESCALATION ReassignmentTypeEnum = "AUTO_ESCALATION,"
	REASSIGNMENTTYPEENUM_SELF_REVIEW_DELEGATION ReassignmentTypeEnum = "SELF_REVIEW_DELEGATION"
)

// All allowed values of ReassignmentTypeEnum enum
var AllowedReassignmentTypeEnumEnumValues = []ReassignmentTypeEnum{
	"MANUAL_REASSIGNMENT,",
	"AUTOMATIC_REASSIGNMENT,",
	"AUTO_ESCALATION,",
	"SELF_REVIEW_DELEGATION",
}

func (v *ReassignmentTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReassignmentTypeEnum(value)
	for _, existing := range AllowedReassignmentTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReassignmentTypeEnum", value)
}

// NewReassignmentTypeEnumFromValue returns a pointer to a valid ReassignmentTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReassignmentTypeEnumFromValue(v string) (*ReassignmentTypeEnum, error) {
	ev := ReassignmentTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReassignmentTypeEnum: valid values are %v", v, AllowedReassignmentTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReassignmentTypeEnum) IsValid() bool {
	for _, existing := range AllowedReassignmentTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReassignmentTypeEnum value
func (v ReassignmentTypeEnum) Ptr() *ReassignmentTypeEnum {
	return &v
}

type NullableReassignmentTypeEnum struct {
	value *ReassignmentTypeEnum
	isSet bool
}

func (v NullableReassignmentTypeEnum) Get() *ReassignmentTypeEnum {
	return v.value
}

func (v *NullableReassignmentTypeEnum) Set(val *ReassignmentTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableReassignmentTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableReassignmentTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReassignmentTypeEnum(val *ReassignmentTypeEnum) *NullableReassignmentTypeEnum {
	return &NullableReassignmentTypeEnum{value: val, isSet: true}
}

func (v NullableReassignmentTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReassignmentTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

