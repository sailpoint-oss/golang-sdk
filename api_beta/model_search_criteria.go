/*
Identity Security Cloud Beta API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"fmt"
)

// checks if the SearchCriteria type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchCriteria{}

// SearchCriteria Represents the search criteria for querying entitlements.
type SearchCriteria struct {
	// A list of indices to search within. Must contain exactly one item, typically \"entitlements\".
	Indices []string `json:"indices"`
	// A map of filters applied to the search. Keys are filter names, and values are filter definitions.
	Filters *map[string]SearchCriteriaFiltersValue `json:"filters,omitempty"`
	Query *SearchCriteriaQuery `json:"query,omitempty"`
	// Specifies the type of query. Must be \"TEXT\" if `textQuery` is used.
	QueryType *string `json:"queryType,omitempty"`
	TextQuery *SearchCriteriaTextQuery `json:"textQuery,omitempty"`
	// Whether to include nested objects in the search results.
	IncludeNested *bool `json:"includeNested,omitempty"`
	// Specifies the sorting order for the results.
	Sort []string `json:"sort,omitempty"`
	// Used for pagination to fetch results after a specific point.
	SearchAfter []string `json:"searchAfter,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SearchCriteria SearchCriteria

// NewSearchCriteria instantiates a new SearchCriteria object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchCriteria(indices []string) *SearchCriteria {
	this := SearchCriteria{}
	this.Indices = indices
	var includeNested bool = false
	this.IncludeNested = &includeNested
	return &this
}

// NewSearchCriteriaWithDefaults instantiates a new SearchCriteria object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchCriteriaWithDefaults() *SearchCriteria {
	this := SearchCriteria{}
	var includeNested bool = false
	this.IncludeNested = &includeNested
	return &this
}

// GetIndices returns the Indices field value
func (o *SearchCriteria) GetIndices() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Indices
}

// GetIndicesOk returns a tuple with the Indices field value
// and a boolean to check if the value has been set.
func (o *SearchCriteria) GetIndicesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Indices, true
}

// SetIndices sets field value
func (o *SearchCriteria) SetIndices(v []string) {
	o.Indices = v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *SearchCriteria) GetFilters() map[string]SearchCriteriaFiltersValue {
	if o == nil || IsNil(o.Filters) {
		var ret map[string]SearchCriteriaFiltersValue
		return ret
	}
	return *o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCriteria) GetFiltersOk() (*map[string]SearchCriteriaFiltersValue, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *SearchCriteria) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given map[string]SearchCriteriaFiltersValue and assigns it to the Filters field.
func (o *SearchCriteria) SetFilters(v map[string]SearchCriteriaFiltersValue) {
	o.Filters = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *SearchCriteria) GetQuery() SearchCriteriaQuery {
	if o == nil || IsNil(o.Query) {
		var ret SearchCriteriaQuery
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCriteria) GetQueryOk() (*SearchCriteriaQuery, bool) {
	if o == nil || IsNil(o.Query) {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *SearchCriteria) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given SearchCriteriaQuery and assigns it to the Query field.
func (o *SearchCriteria) SetQuery(v SearchCriteriaQuery) {
	o.Query = &v
}

// GetQueryType returns the QueryType field value if set, zero value otherwise.
func (o *SearchCriteria) GetQueryType() string {
	if o == nil || IsNil(o.QueryType) {
		var ret string
		return ret
	}
	return *o.QueryType
}

// GetQueryTypeOk returns a tuple with the QueryType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCriteria) GetQueryTypeOk() (*string, bool) {
	if o == nil || IsNil(o.QueryType) {
		return nil, false
	}
	return o.QueryType, true
}

// HasQueryType returns a boolean if a field has been set.
func (o *SearchCriteria) HasQueryType() bool {
	if o != nil && !IsNil(o.QueryType) {
		return true
	}

	return false
}

// SetQueryType gets a reference to the given string and assigns it to the QueryType field.
func (o *SearchCriteria) SetQueryType(v string) {
	o.QueryType = &v
}

// GetTextQuery returns the TextQuery field value if set, zero value otherwise.
func (o *SearchCriteria) GetTextQuery() SearchCriteriaTextQuery {
	if o == nil || IsNil(o.TextQuery) {
		var ret SearchCriteriaTextQuery
		return ret
	}
	return *o.TextQuery
}

// GetTextQueryOk returns a tuple with the TextQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCriteria) GetTextQueryOk() (*SearchCriteriaTextQuery, bool) {
	if o == nil || IsNil(o.TextQuery) {
		return nil, false
	}
	return o.TextQuery, true
}

// HasTextQuery returns a boolean if a field has been set.
func (o *SearchCriteria) HasTextQuery() bool {
	if o != nil && !IsNil(o.TextQuery) {
		return true
	}

	return false
}

// SetTextQuery gets a reference to the given SearchCriteriaTextQuery and assigns it to the TextQuery field.
func (o *SearchCriteria) SetTextQuery(v SearchCriteriaTextQuery) {
	o.TextQuery = &v
}

// GetIncludeNested returns the IncludeNested field value if set, zero value otherwise.
func (o *SearchCriteria) GetIncludeNested() bool {
	if o == nil || IsNil(o.IncludeNested) {
		var ret bool
		return ret
	}
	return *o.IncludeNested
}

// GetIncludeNestedOk returns a tuple with the IncludeNested field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCriteria) GetIncludeNestedOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeNested) {
		return nil, false
	}
	return o.IncludeNested, true
}

// HasIncludeNested returns a boolean if a field has been set.
func (o *SearchCriteria) HasIncludeNested() bool {
	if o != nil && !IsNil(o.IncludeNested) {
		return true
	}

	return false
}

// SetIncludeNested gets a reference to the given bool and assigns it to the IncludeNested field.
func (o *SearchCriteria) SetIncludeNested(v bool) {
	o.IncludeNested = &v
}

// GetSort returns the Sort field value if set, zero value otherwise.
func (o *SearchCriteria) GetSort() []string {
	if o == nil || IsNil(o.Sort) {
		var ret []string
		return ret
	}
	return o.Sort
}

// GetSortOk returns a tuple with the Sort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCriteria) GetSortOk() ([]string, bool) {
	if o == nil || IsNil(o.Sort) {
		return nil, false
	}
	return o.Sort, true
}

// HasSort returns a boolean if a field has been set.
func (o *SearchCriteria) HasSort() bool {
	if o != nil && !IsNil(o.Sort) {
		return true
	}

	return false
}

// SetSort gets a reference to the given []string and assigns it to the Sort field.
func (o *SearchCriteria) SetSort(v []string) {
	o.Sort = v
}

// GetSearchAfter returns the SearchAfter field value if set, zero value otherwise.
func (o *SearchCriteria) GetSearchAfter() []string {
	if o == nil || IsNil(o.SearchAfter) {
		var ret []string
		return ret
	}
	return o.SearchAfter
}

// GetSearchAfterOk returns a tuple with the SearchAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchCriteria) GetSearchAfterOk() ([]string, bool) {
	if o == nil || IsNil(o.SearchAfter) {
		return nil, false
	}
	return o.SearchAfter, true
}

// HasSearchAfter returns a boolean if a field has been set.
func (o *SearchCriteria) HasSearchAfter() bool {
	if o != nil && !IsNil(o.SearchAfter) {
		return true
	}

	return false
}

// SetSearchAfter gets a reference to the given []string and assigns it to the SearchAfter field.
func (o *SearchCriteria) SetSearchAfter(v []string) {
	o.SearchAfter = v
}

func (o SearchCriteria) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchCriteria) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["indices"] = o.Indices
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	if !IsNil(o.QueryType) {
		toSerialize["queryType"] = o.QueryType
	}
	if !IsNil(o.TextQuery) {
		toSerialize["textQuery"] = o.TextQuery
	}
	if !IsNil(o.IncludeNested) {
		toSerialize["includeNested"] = o.IncludeNested
	}
	if !IsNil(o.Sort) {
		toSerialize["sort"] = o.Sort
	}
	if !IsNil(o.SearchAfter) {
		toSerialize["searchAfter"] = o.SearchAfter
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SearchCriteria) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"indices",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSearchCriteria := _SearchCriteria{}

	err = json.Unmarshal(data, &varSearchCriteria)

	if err != nil {
		return err
	}

	*o = SearchCriteria(varSearchCriteria)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "indices")
		delete(additionalProperties, "filters")
		delete(additionalProperties, "query")
		delete(additionalProperties, "queryType")
		delete(additionalProperties, "textQuery")
		delete(additionalProperties, "includeNested")
		delete(additionalProperties, "sort")
		delete(additionalProperties, "searchAfter")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSearchCriteria struct {
	value *SearchCriteria
	isSet bool
}

func (v NullableSearchCriteria) Get() *SearchCriteria {
	return v.value
}

func (v *NullableSearchCriteria) Set(val *SearchCriteria) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchCriteria) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchCriteria) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchCriteria(val *SearchCriteria) *NullableSearchCriteria {
	return &NullableSearchCriteria{value: val, isSet: true}
}

func (v NullableSearchCriteria) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchCriteria) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


