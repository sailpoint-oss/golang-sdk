/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
)

// checks if the FormElementDataSourceConfigOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FormElementDataSourceConfigOptions{}

// FormElementDataSourceConfigOptions struct for FormElementDataSourceConfigOptions
type FormElementDataSourceConfigOptions struct {
	// Label is the main label to display to the user when selecting this option
	Label *string `json:"label,omitempty"`
	// SubLabel is the sub label to display below the label in diminutive styling to help describe or identify this option
	SubLabel *string `json:"subLabel,omitempty"`
	// Value is the value to save as an entry when the user selects this option
	Value *string `json:"value,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FormElementDataSourceConfigOptions FormElementDataSourceConfigOptions

// NewFormElementDataSourceConfigOptions instantiates a new FormElementDataSourceConfigOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFormElementDataSourceConfigOptions() *FormElementDataSourceConfigOptions {
	this := FormElementDataSourceConfigOptions{}
	return &this
}

// NewFormElementDataSourceConfigOptionsWithDefaults instantiates a new FormElementDataSourceConfigOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormElementDataSourceConfigOptionsWithDefaults() *FormElementDataSourceConfigOptions {
	this := FormElementDataSourceConfigOptions{}
	return &this
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *FormElementDataSourceConfigOptions) GetLabel() string {
	if o == nil || isNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormElementDataSourceConfigOptions) GetLabelOk() (*string, bool) {
	if o == nil || isNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *FormElementDataSourceConfigOptions) HasLabel() bool {
	if o != nil && !isNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *FormElementDataSourceConfigOptions) SetLabel(v string) {
	o.Label = &v
}

// GetSubLabel returns the SubLabel field value if set, zero value otherwise.
func (o *FormElementDataSourceConfigOptions) GetSubLabel() string {
	if o == nil || isNil(o.SubLabel) {
		var ret string
		return ret
	}
	return *o.SubLabel
}

// GetSubLabelOk returns a tuple with the SubLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormElementDataSourceConfigOptions) GetSubLabelOk() (*string, bool) {
	if o == nil || isNil(o.SubLabel) {
		return nil, false
	}
	return o.SubLabel, true
}

// HasSubLabel returns a boolean if a field has been set.
func (o *FormElementDataSourceConfigOptions) HasSubLabel() bool {
	if o != nil && !isNil(o.SubLabel) {
		return true
	}

	return false
}

// SetSubLabel gets a reference to the given string and assigns it to the SubLabel field.
func (o *FormElementDataSourceConfigOptions) SetSubLabel(v string) {
	o.SubLabel = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *FormElementDataSourceConfigOptions) GetValue() string {
	if o == nil || isNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormElementDataSourceConfigOptions) GetValueOk() (*string, bool) {
	if o == nil || isNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *FormElementDataSourceConfigOptions) HasValue() bool {
	if o != nil && !isNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *FormElementDataSourceConfigOptions) SetValue(v string) {
	o.Value = &v
}

func (o FormElementDataSourceConfigOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FormElementDataSourceConfigOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !isNil(o.SubLabel) {
		toSerialize["subLabel"] = o.SubLabel
	}
	if !isNil(o.Value) {
		toSerialize["value"] = o.Value
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FormElementDataSourceConfigOptions) UnmarshalJSON(bytes []byte) (err error) {
	varFormElementDataSourceConfigOptions := _FormElementDataSourceConfigOptions{}

	if err = json.Unmarshal(bytes, &varFormElementDataSourceConfigOptions); err == nil {
	*o = FormElementDataSourceConfigOptions(varFormElementDataSourceConfigOptions)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "label")
		delete(additionalProperties, "subLabel")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFormElementDataSourceConfigOptions struct {
	value *FormElementDataSourceConfigOptions
	isSet bool
}

func (v NullableFormElementDataSourceConfigOptions) Get() *FormElementDataSourceConfigOptions {
	return v.value
}

func (v *NullableFormElementDataSourceConfigOptions) Set(val *FormElementDataSourceConfigOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableFormElementDataSourceConfigOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableFormElementDataSourceConfigOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormElementDataSourceConfigOptions(val *FormElementDataSourceConfigOptions) *NullableFormElementDataSourceConfigOptions {
	return &NullableFormElementDataSourceConfigOptions{value: val, isSet: true}
}

func (v NullableFormElementDataSourceConfigOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormElementDataSourceConfigOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


