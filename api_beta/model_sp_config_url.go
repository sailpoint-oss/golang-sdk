/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
)

// checks if the SpConfigUrl type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpConfigUrl{}

// SpConfigUrl Format of resolver URLs for Object Configurations
type SpConfigUrl struct {
	// URL for the target object endpoint.
	Url *string `json:"url,omitempty"`
	// Any query parameters that are needed for the URL.
	Query map[string]interface{} `json:"query,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SpConfigUrl SpConfigUrl

// NewSpConfigUrl instantiates a new SpConfigUrl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpConfigUrl() *SpConfigUrl {
	this := SpConfigUrl{}
	return &this
}

// NewSpConfigUrlWithDefaults instantiates a new SpConfigUrl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpConfigUrlWithDefaults() *SpConfigUrl {
	this := SpConfigUrl{}
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *SpConfigUrl) GetUrl() string {
	if o == nil || isNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpConfigUrl) GetUrlOk() (*string, bool) {
	if o == nil || isNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *SpConfigUrl) HasUrl() bool {
	if o != nil && !isNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *SpConfigUrl) SetUrl(v string) {
	o.Url = &v
}

// GetQuery returns the Query field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SpConfigUrl) GetQuery() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SpConfigUrl) GetQueryOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Query) {
		return map[string]interface{}{}, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *SpConfigUrl) HasQuery() bool {
	if o != nil && isNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given map[string]interface{} and assigns it to the Query field.
func (o *SpConfigUrl) SetQuery(v map[string]interface{}) {
	o.Query = v
}

func (o SpConfigUrl) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpConfigUrl) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if o.Query != nil {
		toSerialize["query"] = o.Query
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SpConfigUrl) UnmarshalJSON(bytes []byte) (err error) {
	varSpConfigUrl := _SpConfigUrl{}

	if err = json.Unmarshal(bytes, &varSpConfigUrl); err == nil {
	*o = SpConfigUrl(varSpConfigUrl)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "url")
		delete(additionalProperties, "query")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSpConfigUrl struct {
	value *SpConfigUrl
	isSet bool
}

func (v NullableSpConfigUrl) Get() *SpConfigUrl {
	return v.value
}

func (v *NullableSpConfigUrl) Set(val *SpConfigUrl) {
	v.value = val
	v.isSet = true
}

func (v NullableSpConfigUrl) IsSet() bool {
	return v.isSet
}

func (v *NullableSpConfigUrl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpConfigUrl(val *SpConfigUrl) *NullableSpConfigUrl {
	return &NullableSpConfigUrl{value: val, isSet: true}
}

func (v NullableSpConfigUrl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpConfigUrl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


