/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"fmt"
)

// ManagedClientType Managed Client type
type ManagedClientType string

// List of ManagedClientType
const (
	MANAGEDCLIENTTYPE_CCG ManagedClientType = "CCG"
	MANAGEDCLIENTTYPE_VA ManagedClientType = "VA"
	MANAGEDCLIENTTYPE_INTERNAL ManagedClientType = "INTERNAL"
	MANAGEDCLIENTTYPE_IIQ_HARVESTER ManagedClientType = "IIQ_HARVESTER"
	MANAGEDCLIENTTYPE_NULL ManagedClientType = "null"
)

// All allowed values of ManagedClientType enum
var AllowedManagedClientTypeEnumValues = []ManagedClientType{
	"CCG",
	"VA",
	"INTERNAL",
	"IIQ_HARVESTER",
	"null",
}

func (v *ManagedClientType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ManagedClientType(value)
	for _, existing := range AllowedManagedClientTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ManagedClientType", value)
}

// NewManagedClientTypeFromValue returns a pointer to a valid ManagedClientType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewManagedClientTypeFromValue(v string) (*ManagedClientType, error) {
	ev := ManagedClientType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ManagedClientType: valid values are %v", v, AllowedManagedClientTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ManagedClientType) IsValid() bool {
	for _, existing := range AllowedManagedClientTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ManagedClientType value
func (v ManagedClientType) Ptr() *ManagedClientType {
	return &v
}

type NullableManagedClientType struct {
	value *ManagedClientType
	isSet bool
}

func (v NullableManagedClientType) Get() *ManagedClientType {
	return v.value
}

func (v *NullableManagedClientType) Set(val *ManagedClientType) {
	v.value = val
	v.isSet = true
}

func (v NullableManagedClientType) IsSet() bool {
	return v.isSet
}

func (v *NullableManagedClientType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagedClientType(val *ManagedClientType) *NullableManagedClientType {
	return &NullableManagedClientType{value: val, isSet: true}
}

func (v NullableManagedClientType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagedClientType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

