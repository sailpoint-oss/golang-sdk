/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"time"
)

// checks if the RoleMiningSessionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoleMiningSessionResponse{}

// RoleMiningSessionResponse struct for RoleMiningSessionResponse
type RoleMiningSessionResponse struct {
	Scope *RoleMiningSessionScope `json:"scope,omitempty"`
	// Minimum number of identities in a potential role
	MinNumIdentitiesInPotentialRole *int32 `json:"minNumIdentitiesInPotentialRole,omitempty"`
	// The computed (or prescribed) prune threshold for this session
	PrescribedPruneThreshold *int32 `json:"prescribedPruneThreshold,omitempty"`
	// The prune threshold to be used for this role mining session
	PruneThreshold *int32 `json:"pruneThreshold,omitempty"`
	// The number of potential roles
	PotentialRoleCount *int32 `json:"potentialRoleCount,omitempty"`
	// The number of potential roles which have completed processing
	PotentialRolesReadyCount *int32 `json:"potentialRolesReadyCount,omitempty"`
	Status *RoleMiningSessionStatus `json:"status,omitempty"`
	// Session Id for this role mining session
	Id *string `json:"id,omitempty"`
	// The date-time when this role mining session was created.
	CreatedDate *time.Time `json:"createdDate,omitempty"`
	// The date-time when this role mining session was completed.
	ModifiedDate *time.Time `json:"modifiedDate,omitempty"`
	Type *RoleMiningRoleType `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RoleMiningSessionResponse RoleMiningSessionResponse

// NewRoleMiningSessionResponse instantiates a new RoleMiningSessionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleMiningSessionResponse() *RoleMiningSessionResponse {
	this := RoleMiningSessionResponse{}
	return &this
}

// NewRoleMiningSessionResponseWithDefaults instantiates a new RoleMiningSessionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleMiningSessionResponseWithDefaults() *RoleMiningSessionResponse {
	this := RoleMiningSessionResponse{}
	return &this
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *RoleMiningSessionResponse) GetScope() RoleMiningSessionScope {
	if o == nil || isNil(o.Scope) {
		var ret RoleMiningSessionScope
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleMiningSessionResponse) GetScopeOk() (*RoleMiningSessionScope, bool) {
	if o == nil || isNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *RoleMiningSessionResponse) HasScope() bool {
	if o != nil && !isNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given RoleMiningSessionScope and assigns it to the Scope field.
func (o *RoleMiningSessionResponse) SetScope(v RoleMiningSessionScope) {
	o.Scope = &v
}

// GetMinNumIdentitiesInPotentialRole returns the MinNumIdentitiesInPotentialRole field value if set, zero value otherwise.
func (o *RoleMiningSessionResponse) GetMinNumIdentitiesInPotentialRole() int32 {
	if o == nil || isNil(o.MinNumIdentitiesInPotentialRole) {
		var ret int32
		return ret
	}
	return *o.MinNumIdentitiesInPotentialRole
}

// GetMinNumIdentitiesInPotentialRoleOk returns a tuple with the MinNumIdentitiesInPotentialRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleMiningSessionResponse) GetMinNumIdentitiesInPotentialRoleOk() (*int32, bool) {
	if o == nil || isNil(o.MinNumIdentitiesInPotentialRole) {
		return nil, false
	}
	return o.MinNumIdentitiesInPotentialRole, true
}

// HasMinNumIdentitiesInPotentialRole returns a boolean if a field has been set.
func (o *RoleMiningSessionResponse) HasMinNumIdentitiesInPotentialRole() bool {
	if o != nil && !isNil(o.MinNumIdentitiesInPotentialRole) {
		return true
	}

	return false
}

// SetMinNumIdentitiesInPotentialRole gets a reference to the given int32 and assigns it to the MinNumIdentitiesInPotentialRole field.
func (o *RoleMiningSessionResponse) SetMinNumIdentitiesInPotentialRole(v int32) {
	o.MinNumIdentitiesInPotentialRole = &v
}

// GetPrescribedPruneThreshold returns the PrescribedPruneThreshold field value if set, zero value otherwise.
func (o *RoleMiningSessionResponse) GetPrescribedPruneThreshold() int32 {
	if o == nil || isNil(o.PrescribedPruneThreshold) {
		var ret int32
		return ret
	}
	return *o.PrescribedPruneThreshold
}

// GetPrescribedPruneThresholdOk returns a tuple with the PrescribedPruneThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleMiningSessionResponse) GetPrescribedPruneThresholdOk() (*int32, bool) {
	if o == nil || isNil(o.PrescribedPruneThreshold) {
		return nil, false
	}
	return o.PrescribedPruneThreshold, true
}

// HasPrescribedPruneThreshold returns a boolean if a field has been set.
func (o *RoleMiningSessionResponse) HasPrescribedPruneThreshold() bool {
	if o != nil && !isNil(o.PrescribedPruneThreshold) {
		return true
	}

	return false
}

// SetPrescribedPruneThreshold gets a reference to the given int32 and assigns it to the PrescribedPruneThreshold field.
func (o *RoleMiningSessionResponse) SetPrescribedPruneThreshold(v int32) {
	o.PrescribedPruneThreshold = &v
}

// GetPruneThreshold returns the PruneThreshold field value if set, zero value otherwise.
func (o *RoleMiningSessionResponse) GetPruneThreshold() int32 {
	if o == nil || isNil(o.PruneThreshold) {
		var ret int32
		return ret
	}
	return *o.PruneThreshold
}

// GetPruneThresholdOk returns a tuple with the PruneThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleMiningSessionResponse) GetPruneThresholdOk() (*int32, bool) {
	if o == nil || isNil(o.PruneThreshold) {
		return nil, false
	}
	return o.PruneThreshold, true
}

// HasPruneThreshold returns a boolean if a field has been set.
func (o *RoleMiningSessionResponse) HasPruneThreshold() bool {
	if o != nil && !isNil(o.PruneThreshold) {
		return true
	}

	return false
}

// SetPruneThreshold gets a reference to the given int32 and assigns it to the PruneThreshold field.
func (o *RoleMiningSessionResponse) SetPruneThreshold(v int32) {
	o.PruneThreshold = &v
}

// GetPotentialRoleCount returns the PotentialRoleCount field value if set, zero value otherwise.
func (o *RoleMiningSessionResponse) GetPotentialRoleCount() int32 {
	if o == nil || isNil(o.PotentialRoleCount) {
		var ret int32
		return ret
	}
	return *o.PotentialRoleCount
}

// GetPotentialRoleCountOk returns a tuple with the PotentialRoleCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleMiningSessionResponse) GetPotentialRoleCountOk() (*int32, bool) {
	if o == nil || isNil(o.PotentialRoleCount) {
		return nil, false
	}
	return o.PotentialRoleCount, true
}

// HasPotentialRoleCount returns a boolean if a field has been set.
func (o *RoleMiningSessionResponse) HasPotentialRoleCount() bool {
	if o != nil && !isNil(o.PotentialRoleCount) {
		return true
	}

	return false
}

// SetPotentialRoleCount gets a reference to the given int32 and assigns it to the PotentialRoleCount field.
func (o *RoleMiningSessionResponse) SetPotentialRoleCount(v int32) {
	o.PotentialRoleCount = &v
}

// GetPotentialRolesReadyCount returns the PotentialRolesReadyCount field value if set, zero value otherwise.
func (o *RoleMiningSessionResponse) GetPotentialRolesReadyCount() int32 {
	if o == nil || isNil(o.PotentialRolesReadyCount) {
		var ret int32
		return ret
	}
	return *o.PotentialRolesReadyCount
}

// GetPotentialRolesReadyCountOk returns a tuple with the PotentialRolesReadyCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleMiningSessionResponse) GetPotentialRolesReadyCountOk() (*int32, bool) {
	if o == nil || isNil(o.PotentialRolesReadyCount) {
		return nil, false
	}
	return o.PotentialRolesReadyCount, true
}

// HasPotentialRolesReadyCount returns a boolean if a field has been set.
func (o *RoleMiningSessionResponse) HasPotentialRolesReadyCount() bool {
	if o != nil && !isNil(o.PotentialRolesReadyCount) {
		return true
	}

	return false
}

// SetPotentialRolesReadyCount gets a reference to the given int32 and assigns it to the PotentialRolesReadyCount field.
func (o *RoleMiningSessionResponse) SetPotentialRolesReadyCount(v int32) {
	o.PotentialRolesReadyCount = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *RoleMiningSessionResponse) GetStatus() RoleMiningSessionStatus {
	if o == nil || isNil(o.Status) {
		var ret RoleMiningSessionStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleMiningSessionResponse) GetStatusOk() (*RoleMiningSessionStatus, bool) {
	if o == nil || isNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *RoleMiningSessionResponse) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given RoleMiningSessionStatus and assigns it to the Status field.
func (o *RoleMiningSessionResponse) SetStatus(v RoleMiningSessionStatus) {
	o.Status = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RoleMiningSessionResponse) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleMiningSessionResponse) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RoleMiningSessionResponse) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RoleMiningSessionResponse) SetId(v string) {
	o.Id = &v
}

// GetCreatedDate returns the CreatedDate field value if set, zero value otherwise.
func (o *RoleMiningSessionResponse) GetCreatedDate() time.Time {
	if o == nil || isNil(o.CreatedDate) {
		var ret time.Time
		return ret
	}
	return *o.CreatedDate
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleMiningSessionResponse) GetCreatedDateOk() (*time.Time, bool) {
	if o == nil || isNil(o.CreatedDate) {
		return nil, false
	}
	return o.CreatedDate, true
}

// HasCreatedDate returns a boolean if a field has been set.
func (o *RoleMiningSessionResponse) HasCreatedDate() bool {
	if o != nil && !isNil(o.CreatedDate) {
		return true
	}

	return false
}

// SetCreatedDate gets a reference to the given time.Time and assigns it to the CreatedDate field.
func (o *RoleMiningSessionResponse) SetCreatedDate(v time.Time) {
	o.CreatedDate = &v
}

// GetModifiedDate returns the ModifiedDate field value if set, zero value otherwise.
func (o *RoleMiningSessionResponse) GetModifiedDate() time.Time {
	if o == nil || isNil(o.ModifiedDate) {
		var ret time.Time
		return ret
	}
	return *o.ModifiedDate
}

// GetModifiedDateOk returns a tuple with the ModifiedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleMiningSessionResponse) GetModifiedDateOk() (*time.Time, bool) {
	if o == nil || isNil(o.ModifiedDate) {
		return nil, false
	}
	return o.ModifiedDate, true
}

// HasModifiedDate returns a boolean if a field has been set.
func (o *RoleMiningSessionResponse) HasModifiedDate() bool {
	if o != nil && !isNil(o.ModifiedDate) {
		return true
	}

	return false
}

// SetModifiedDate gets a reference to the given time.Time and assigns it to the ModifiedDate field.
func (o *RoleMiningSessionResponse) SetModifiedDate(v time.Time) {
	o.ModifiedDate = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RoleMiningSessionResponse) GetType() RoleMiningRoleType {
	if o == nil || isNil(o.Type) {
		var ret RoleMiningRoleType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleMiningSessionResponse) GetTypeOk() (*RoleMiningRoleType, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RoleMiningSessionResponse) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given RoleMiningRoleType and assigns it to the Type field.
func (o *RoleMiningSessionResponse) SetType(v RoleMiningRoleType) {
	o.Type = &v
}

func (o RoleMiningSessionResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoleMiningSessionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	if !isNil(o.MinNumIdentitiesInPotentialRole) {
		toSerialize["minNumIdentitiesInPotentialRole"] = o.MinNumIdentitiesInPotentialRole
	}
	if !isNil(o.PrescribedPruneThreshold) {
		toSerialize["prescribedPruneThreshold"] = o.PrescribedPruneThreshold
	}
	if !isNil(o.PruneThreshold) {
		toSerialize["pruneThreshold"] = o.PruneThreshold
	}
	if !isNil(o.PotentialRoleCount) {
		toSerialize["potentialRoleCount"] = o.PotentialRoleCount
	}
	if !isNil(o.PotentialRolesReadyCount) {
		toSerialize["potentialRolesReadyCount"] = o.PotentialRolesReadyCount
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.CreatedDate) {
		toSerialize["createdDate"] = o.CreatedDate
	}
	if !isNil(o.ModifiedDate) {
		toSerialize["modifiedDate"] = o.ModifiedDate
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RoleMiningSessionResponse) UnmarshalJSON(bytes []byte) (err error) {
	varRoleMiningSessionResponse := _RoleMiningSessionResponse{}

	if err = json.Unmarshal(bytes, &varRoleMiningSessionResponse); err == nil {
	*o = RoleMiningSessionResponse(varRoleMiningSessionResponse)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "scope")
		delete(additionalProperties, "minNumIdentitiesInPotentialRole")
		delete(additionalProperties, "prescribedPruneThreshold")
		delete(additionalProperties, "pruneThreshold")
		delete(additionalProperties, "potentialRoleCount")
		delete(additionalProperties, "potentialRolesReadyCount")
		delete(additionalProperties, "status")
		delete(additionalProperties, "id")
		delete(additionalProperties, "createdDate")
		delete(additionalProperties, "modifiedDate")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRoleMiningSessionResponse struct {
	value *RoleMiningSessionResponse
	isSet bool
}

func (v NullableRoleMiningSessionResponse) Get() *RoleMiningSessionResponse {
	return v.value
}

func (v *NullableRoleMiningSessionResponse) Set(val *RoleMiningSessionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleMiningSessionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleMiningSessionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleMiningSessionResponse(val *RoleMiningSessionResponse) *NullableRoleMiningSessionResponse {
	return &NullableRoleMiningSessionResponse{value: val, isSet: true}
}

func (v NullableRoleMiningSessionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleMiningSessionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


