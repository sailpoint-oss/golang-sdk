/*
Identity Security Cloud Beta API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"fmt"
)

// checks if the KbaQuestion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KbaQuestion{}

// KbaQuestion KBA Configuration
type KbaQuestion struct {
	// KBA Question Id
	Id string `json:"id"`
	// KBA Question description
	Text string `json:"text"`
	// Denotes whether the KBA question has an answer configured for any user in the tenant
	HasAnswer bool `json:"hasAnswer"`
	// Denotes the number of KBA configurations for this question
	NumAnswers int32 `json:"numAnswers"`
	AdditionalProperties map[string]interface{}
}

type _KbaQuestion KbaQuestion

// NewKbaQuestion instantiates a new KbaQuestion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKbaQuestion(id string, text string, hasAnswer bool, numAnswers int32) *KbaQuestion {
	this := KbaQuestion{}
	this.Id = id
	this.Text = text
	this.HasAnswer = hasAnswer
	this.NumAnswers = numAnswers
	return &this
}

// NewKbaQuestionWithDefaults instantiates a new KbaQuestion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKbaQuestionWithDefaults() *KbaQuestion {
	this := KbaQuestion{}
	return &this
}

// GetId returns the Id field value
func (o *KbaQuestion) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *KbaQuestion) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *KbaQuestion) SetId(v string) {
	o.Id = v
}

// GetText returns the Text field value
func (o *KbaQuestion) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *KbaQuestion) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *KbaQuestion) SetText(v string) {
	o.Text = v
}

// GetHasAnswer returns the HasAnswer field value
func (o *KbaQuestion) GetHasAnswer() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasAnswer
}

// GetHasAnswerOk returns a tuple with the HasAnswer field value
// and a boolean to check if the value has been set.
func (o *KbaQuestion) GetHasAnswerOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasAnswer, true
}

// SetHasAnswer sets field value
func (o *KbaQuestion) SetHasAnswer(v bool) {
	o.HasAnswer = v
}

// GetNumAnswers returns the NumAnswers field value
func (o *KbaQuestion) GetNumAnswers() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumAnswers
}

// GetNumAnswersOk returns a tuple with the NumAnswers field value
// and a boolean to check if the value has been set.
func (o *KbaQuestion) GetNumAnswersOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumAnswers, true
}

// SetNumAnswers sets field value
func (o *KbaQuestion) SetNumAnswers(v int32) {
	o.NumAnswers = v
}

func (o KbaQuestion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KbaQuestion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["text"] = o.Text
	toSerialize["hasAnswer"] = o.HasAnswer
	toSerialize["numAnswers"] = o.NumAnswers

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *KbaQuestion) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"text",
		"hasAnswer",
		"numAnswers",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKbaQuestion := _KbaQuestion{}

	if err = json.Unmarshal(bytes, &varKbaQuestion); err == nil {
			*o = KbaQuestion(varKbaQuestion)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "text")
		delete(additionalProperties, "hasAnswer")
		delete(additionalProperties, "numAnswers")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKbaQuestion struct {
	value *KbaQuestion
	isSet bool
}

func (v NullableKbaQuestion) Get() *KbaQuestion {
	return v.value
}

func (v *NullableKbaQuestion) Set(val *KbaQuestion) {
	v.value = val
	v.isSet = true
}

func (v NullableKbaQuestion) IsSet() bool {
	return v.isSet
}

func (v *NullableKbaQuestion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKbaQuestion(val *KbaQuestion) *NullableKbaQuestion {
	return &NullableKbaQuestion{value: val, isSet: true}
}

func (v NullableKbaQuestion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKbaQuestion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


