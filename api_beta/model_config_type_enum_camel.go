/*
Identity Security Cloud Beta API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"fmt"
)

// ConfigTypeEnumCamel Enum list of valid work types that can be selected for a Reassignment Configuration
type ConfigTypeEnumCamel string

// List of ConfigTypeEnumCamel
const (
	CONFIGTYPEENUMCAMEL_ACCESS_REQUESTS ConfigTypeEnumCamel = "accessRequests"
	CONFIGTYPEENUMCAMEL_CERTIFICATIONS ConfigTypeEnumCamel = "certifications"
	CONFIGTYPEENUMCAMEL_MANUAL_TASKS ConfigTypeEnumCamel = "manualTasks"
)

// All allowed values of ConfigTypeEnumCamel enum
var AllowedConfigTypeEnumCamelEnumValues = []ConfigTypeEnumCamel{
	"accessRequests",
	"certifications",
	"manualTasks",
}

func (v *ConfigTypeEnumCamel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConfigTypeEnumCamel(value)
	for _, existing := range AllowedConfigTypeEnumCamelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConfigTypeEnumCamel", value)
}

// NewConfigTypeEnumCamelFromValue returns a pointer to a valid ConfigTypeEnumCamel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConfigTypeEnumCamelFromValue(v string) (*ConfigTypeEnumCamel, error) {
	ev := ConfigTypeEnumCamel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConfigTypeEnumCamel: valid values are %v", v, AllowedConfigTypeEnumCamelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConfigTypeEnumCamel) IsValid() bool {
	for _, existing := range AllowedConfigTypeEnumCamelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConfigTypeEnumCamel value
func (v ConfigTypeEnumCamel) Ptr() *ConfigTypeEnumCamel {
	return &v
}

type NullableConfigTypeEnumCamel struct {
	value *ConfigTypeEnumCamel
	isSet bool
}

func (v NullableConfigTypeEnumCamel) Get() *ConfigTypeEnumCamel {
	return v.value
}

func (v *NullableConfigTypeEnumCamel) Set(val *ConfigTypeEnumCamel) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigTypeEnumCamel) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigTypeEnumCamel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigTypeEnumCamel(val *ConfigTypeEnumCamel) *NullableConfigTypeEnumCamel {
	return &NullableConfigTypeEnumCamel{value: val, isSet: true}
}

func (v NullableConfigTypeEnumCamel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigTypeEnumCamel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

