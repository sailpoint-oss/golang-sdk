/*
Identity Security Cloud Beta API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
)

// checks if the SedPatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SedPatch{}

// SedPatch Patch for Suggested Entitlement Description
type SedPatch struct {
	// desired operation
	Op *string `json:"op,omitempty"`
	// field to be patched
	Path *string `json:"path,omitempty"`
	// value to replace with
	Value map[string]interface{} `json:"value,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SedPatch SedPatch

// NewSedPatch instantiates a new SedPatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSedPatch() *SedPatch {
	this := SedPatch{}
	return &this
}

// NewSedPatchWithDefaults instantiates a new SedPatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSedPatchWithDefaults() *SedPatch {
	this := SedPatch{}
	return &this
}

// GetOp returns the Op field value if set, zero value otherwise.
func (o *SedPatch) GetOp() string {
	if o == nil || isNil(o.Op) {
		var ret string
		return ret
	}
	return *o.Op
}

// GetOpOk returns a tuple with the Op field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SedPatch) GetOpOk() (*string, bool) {
	if o == nil || isNil(o.Op) {
		return nil, false
	}
	return o.Op, true
}

// HasOp returns a boolean if a field has been set.
func (o *SedPatch) HasOp() bool {
	if o != nil && !isNil(o.Op) {
		return true
	}

	return false
}

// SetOp gets a reference to the given string and assigns it to the Op field.
func (o *SedPatch) SetOp(v string) {
	o.Op = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *SedPatch) GetPath() string {
	if o == nil || isNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SedPatch) GetPathOk() (*string, bool) {
	if o == nil || isNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *SedPatch) HasPath() bool {
	if o != nil && !isNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *SedPatch) SetPath(v string) {
	o.Path = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *SedPatch) GetValue() map[string]interface{} {
	if o == nil || isNil(o.Value) {
		var ret map[string]interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SedPatch) GetValueOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Value) {
		return map[string]interface{}{}, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *SedPatch) HasValue() bool {
	if o != nil && !isNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given map[string]interface{} and assigns it to the Value field.
func (o *SedPatch) SetValue(v map[string]interface{}) {
	o.Value = v
}

func (o SedPatch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SedPatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Op) {
		toSerialize["op"] = o.Op
	}
	if !isNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !isNil(o.Value) {
		toSerialize["value"] = o.Value
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SedPatch) UnmarshalJSON(bytes []byte) (err error) {
	varSedPatch := _SedPatch{}

	if err = json.Unmarshal(bytes, &varSedPatch); err == nil {
			*o = SedPatch(varSedPatch)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "op")
		delete(additionalProperties, "path")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSedPatch struct {
	value *SedPatch
	isSet bool
}

func (v NullableSedPatch) Get() *SedPatch {
	return v.value
}

func (v *NullableSedPatch) Set(val *SedPatch) {
	v.value = val
	v.isSet = true
}

func (v NullableSedPatch) IsSet() bool {
	return v.isSet
}

func (v *NullableSedPatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSedPatch(val *SedPatch) *NullableSedPatch {
	return &NullableSedPatch{value: val, isSet: true}
}

func (v NullableSedPatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSedPatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


