/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"fmt"
)

// RoleMembershipSelectorType This enum characterizes the type of a Role's membership selector. Only the following two are fully supported:  STANDARD: Indicates that Role membership is defined in terms of a criteria expression  IDENTITY_LIST: Indicates that Role membership is conferred on the specific identities listed
type RoleMembershipSelectorType string

// List of RoleMembershipSelectorType
const (
	ROLEMEMBERSHIPSELECTORTYPE_STANDARD RoleMembershipSelectorType = "STANDARD"
	ROLEMEMBERSHIPSELECTORTYPE_IDENTITY_LIST RoleMembershipSelectorType = "IDENTITY_LIST"
)

// All allowed values of RoleMembershipSelectorType enum
var AllowedRoleMembershipSelectorTypeEnumValues = []RoleMembershipSelectorType{
	"STANDARD",
	"IDENTITY_LIST",
}

func (v *RoleMembershipSelectorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RoleMembershipSelectorType(value)
	for _, existing := range AllowedRoleMembershipSelectorTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RoleMembershipSelectorType", value)
}

// NewRoleMembershipSelectorTypeFromValue returns a pointer to a valid RoleMembershipSelectorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRoleMembershipSelectorTypeFromValue(v string) (*RoleMembershipSelectorType, error) {
	ev := RoleMembershipSelectorType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RoleMembershipSelectorType: valid values are %v", v, AllowedRoleMembershipSelectorTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RoleMembershipSelectorType) IsValid() bool {
	for _, existing := range AllowedRoleMembershipSelectorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RoleMembershipSelectorType value
func (v RoleMembershipSelectorType) Ptr() *RoleMembershipSelectorType {
	return &v
}

type NullableRoleMembershipSelectorType struct {
	value *RoleMembershipSelectorType
	isSet bool
}

func (v NullableRoleMembershipSelectorType) Get() *RoleMembershipSelectorType {
	return v.value
}

func (v *NullableRoleMembershipSelectorType) Set(val *RoleMembershipSelectorType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleMembershipSelectorType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleMembershipSelectorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleMembershipSelectorType(val *RoleMembershipSelectorType) *NullableRoleMembershipSelectorType {
	return &NullableRoleMembershipSelectorType{value: val, isSet: true}
}

func (v NullableRoleMembershipSelectorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleMembershipSelectorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

