/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
)

// checks if the FormCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FormCondition{}

// FormCondition Represent a form conditional.
type FormCondition struct {
	// ConditionRuleLogicalOperatorType value. AND ConditionRuleLogicalOperatorTypeAnd OR ConditionRuleLogicalOperatorTypeOr
	RuleOperator *string `json:"ruleOperator,omitempty"`
	// List of rules.
	Rules []ConditionRule `json:"rules,omitempty"`
	// List of effects.
	Effects []ConditionEffect `json:"effects,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FormCondition FormCondition

// NewFormCondition instantiates a new FormCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFormCondition() *FormCondition {
	this := FormCondition{}
	return &this
}

// NewFormConditionWithDefaults instantiates a new FormCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormConditionWithDefaults() *FormCondition {
	this := FormCondition{}
	return &this
}

// GetRuleOperator returns the RuleOperator field value if set, zero value otherwise.
func (o *FormCondition) GetRuleOperator() string {
	if o == nil || isNil(o.RuleOperator) {
		var ret string
		return ret
	}
	return *o.RuleOperator
}

// GetRuleOperatorOk returns a tuple with the RuleOperator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormCondition) GetRuleOperatorOk() (*string, bool) {
	if o == nil || isNil(o.RuleOperator) {
		return nil, false
	}
	return o.RuleOperator, true
}

// HasRuleOperator returns a boolean if a field has been set.
func (o *FormCondition) HasRuleOperator() bool {
	if o != nil && !isNil(o.RuleOperator) {
		return true
	}

	return false
}

// SetRuleOperator gets a reference to the given string and assigns it to the RuleOperator field.
func (o *FormCondition) SetRuleOperator(v string) {
	o.RuleOperator = &v
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *FormCondition) GetRules() []ConditionRule {
	if o == nil || isNil(o.Rules) {
		var ret []ConditionRule
		return ret
	}
	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormCondition) GetRulesOk() ([]ConditionRule, bool) {
	if o == nil || isNil(o.Rules) {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *FormCondition) HasRules() bool {
	if o != nil && !isNil(o.Rules) {
		return true
	}

	return false
}

// SetRules gets a reference to the given []ConditionRule and assigns it to the Rules field.
func (o *FormCondition) SetRules(v []ConditionRule) {
	o.Rules = v
}

// GetEffects returns the Effects field value if set, zero value otherwise.
func (o *FormCondition) GetEffects() []ConditionEffect {
	if o == nil || isNil(o.Effects) {
		var ret []ConditionEffect
		return ret
	}
	return o.Effects
}

// GetEffectsOk returns a tuple with the Effects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormCondition) GetEffectsOk() ([]ConditionEffect, bool) {
	if o == nil || isNil(o.Effects) {
		return nil, false
	}
	return o.Effects, true
}

// HasEffects returns a boolean if a field has been set.
func (o *FormCondition) HasEffects() bool {
	if o != nil && !isNil(o.Effects) {
		return true
	}

	return false
}

// SetEffects gets a reference to the given []ConditionEffect and assigns it to the Effects field.
func (o *FormCondition) SetEffects(v []ConditionEffect) {
	o.Effects = v
}

func (o FormCondition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FormCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.RuleOperator) {
		toSerialize["ruleOperator"] = o.RuleOperator
	}
	if !isNil(o.Rules) {
		toSerialize["rules"] = o.Rules
	}
	if !isNil(o.Effects) {
		toSerialize["effects"] = o.Effects
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FormCondition) UnmarshalJSON(bytes []byte) (err error) {
	varFormCondition := _FormCondition{}

	if err = json.Unmarshal(bytes, &varFormCondition); err == nil {
	*o = FormCondition(varFormCondition)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ruleOperator")
		delete(additionalProperties, "rules")
		delete(additionalProperties, "effects")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFormCondition struct {
	value *FormCondition
	isSet bool
}

func (v NullableFormCondition) Get() *FormCondition {
	return v.value
}

func (v *NullableFormCondition) Set(val *FormCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableFormCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableFormCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormCondition(val *FormCondition) *NullableFormCondition {
	return &NullableFormCondition{value: val, isSet: true}
}

func (v NullableFormCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


