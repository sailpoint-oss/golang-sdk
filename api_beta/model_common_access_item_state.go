/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"fmt"
)

// CommonAccessItemState State of common access item.
type CommonAccessItemState string

// List of CommonAccessItemState
const (
	COMMONACCESSITEMSTATE_CONFIRMED CommonAccessItemState = "CONFIRMED"
	COMMONACCESSITEMSTATE_DENIED CommonAccessItemState = "DENIED"
)

// All allowed values of CommonAccessItemState enum
var AllowedCommonAccessItemStateEnumValues = []CommonAccessItemState{
	"CONFIRMED",
	"DENIED",
}

func (v *CommonAccessItemState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CommonAccessItemState(value)
	for _, existing := range AllowedCommonAccessItemStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CommonAccessItemState", value)
}

// NewCommonAccessItemStateFromValue returns a pointer to a valid CommonAccessItemState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCommonAccessItemStateFromValue(v string) (*CommonAccessItemState, error) {
	ev := CommonAccessItemState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CommonAccessItemState: valid values are %v", v, AllowedCommonAccessItemStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CommonAccessItemState) IsValid() bool {
	for _, existing := range AllowedCommonAccessItemStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CommonAccessItemState value
func (v CommonAccessItemState) Ptr() *CommonAccessItemState {
	return &v
}

type NullableCommonAccessItemState struct {
	value *CommonAccessItemState
	isSet bool
}

func (v NullableCommonAccessItemState) Get() *CommonAccessItemState {
	return v.value
}

func (v *NullableCommonAccessItemState) Set(val *CommonAccessItemState) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonAccessItemState) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonAccessItemState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonAccessItemState(val *CommonAccessItemState) *NullableCommonAccessItemState {
	return &NullableCommonAccessItemState{value: val, isSet: true}
}

func (v NullableCommonAccessItemState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonAccessItemState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

