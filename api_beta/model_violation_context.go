/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
)

// checks if the ViolationContext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ViolationContext{}

// ViolationContext struct for ViolationContext
type ViolationContext struct {
	Policy *ViolationContextPolicy `json:"policy,omitempty"`
	ConflictingAccessCriteria *ExceptionAccessCriteria `json:"conflictingAccessCriteria,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ViolationContext ViolationContext

// NewViolationContext instantiates a new ViolationContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViolationContext() *ViolationContext {
	this := ViolationContext{}
	return &this
}

// NewViolationContextWithDefaults instantiates a new ViolationContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViolationContextWithDefaults() *ViolationContext {
	this := ViolationContext{}
	return &this
}

// GetPolicy returns the Policy field value if set, zero value otherwise.
func (o *ViolationContext) GetPolicy() ViolationContextPolicy {
	if o == nil || isNil(o.Policy) {
		var ret ViolationContextPolicy
		return ret
	}
	return *o.Policy
}

// GetPolicyOk returns a tuple with the Policy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViolationContext) GetPolicyOk() (*ViolationContextPolicy, bool) {
	if o == nil || isNil(o.Policy) {
		return nil, false
	}
	return o.Policy, true
}

// HasPolicy returns a boolean if a field has been set.
func (o *ViolationContext) HasPolicy() bool {
	if o != nil && !isNil(o.Policy) {
		return true
	}

	return false
}

// SetPolicy gets a reference to the given ViolationContextPolicy and assigns it to the Policy field.
func (o *ViolationContext) SetPolicy(v ViolationContextPolicy) {
	o.Policy = &v
}

// GetConflictingAccessCriteria returns the ConflictingAccessCriteria field value if set, zero value otherwise.
func (o *ViolationContext) GetConflictingAccessCriteria() ExceptionAccessCriteria {
	if o == nil || isNil(o.ConflictingAccessCriteria) {
		var ret ExceptionAccessCriteria
		return ret
	}
	return *o.ConflictingAccessCriteria
}

// GetConflictingAccessCriteriaOk returns a tuple with the ConflictingAccessCriteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViolationContext) GetConflictingAccessCriteriaOk() (*ExceptionAccessCriteria, bool) {
	if o == nil || isNil(o.ConflictingAccessCriteria) {
		return nil, false
	}
	return o.ConflictingAccessCriteria, true
}

// HasConflictingAccessCriteria returns a boolean if a field has been set.
func (o *ViolationContext) HasConflictingAccessCriteria() bool {
	if o != nil && !isNil(o.ConflictingAccessCriteria) {
		return true
	}

	return false
}

// SetConflictingAccessCriteria gets a reference to the given ExceptionAccessCriteria and assigns it to the ConflictingAccessCriteria field.
func (o *ViolationContext) SetConflictingAccessCriteria(v ExceptionAccessCriteria) {
	o.ConflictingAccessCriteria = &v
}

func (o ViolationContext) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ViolationContext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Policy) {
		toSerialize["policy"] = o.Policy
	}
	if !isNil(o.ConflictingAccessCriteria) {
		toSerialize["conflictingAccessCriteria"] = o.ConflictingAccessCriteria
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ViolationContext) UnmarshalJSON(bytes []byte) (err error) {
	varViolationContext := _ViolationContext{}

	if err = json.Unmarshal(bytes, &varViolationContext); err == nil {
	*o = ViolationContext(varViolationContext)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "policy")
		delete(additionalProperties, "conflictingAccessCriteria")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableViolationContext struct {
	value *ViolationContext
	isSet bool
}

func (v NullableViolationContext) Get() *ViolationContext {
	return v.value
}

func (v *NullableViolationContext) Set(val *ViolationContext) {
	v.value = val
	v.isSet = true
}

func (v NullableViolationContext) IsSet() bool {
	return v.isSet
}

func (v *NullableViolationContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViolationContext(val *ViolationContext) *NullableViolationContext {
	return &NullableViolationContext{value: val, isSet: true}
}

func (v NullableViolationContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViolationContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


