/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
)

// checks if the CommentDto1Author type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommentDto1Author{}

// CommentDto1Author Author of the comment
type CommentDto1Author struct {
	// The type of object
	Type *string `json:"type,omitempty"`
	// The unique ID of the object
	Id *string `json:"id,omitempty"`
	// The display name of the object
	Name *string `json:"name,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CommentDto1Author CommentDto1Author

// NewCommentDto1Author instantiates a new CommentDto1Author object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommentDto1Author() *CommentDto1Author {
	this := CommentDto1Author{}
	return &this
}

// NewCommentDto1AuthorWithDefaults instantiates a new CommentDto1Author object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommentDto1AuthorWithDefaults() *CommentDto1Author {
	this := CommentDto1Author{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CommentDto1Author) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentDto1Author) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CommentDto1Author) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CommentDto1Author) SetType(v string) {
	o.Type = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CommentDto1Author) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentDto1Author) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CommentDto1Author) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CommentDto1Author) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CommentDto1Author) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentDto1Author) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CommentDto1Author) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CommentDto1Author) SetName(v string) {
	o.Name = &v
}

func (o CommentDto1Author) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommentDto1Author) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CommentDto1Author) UnmarshalJSON(bytes []byte) (err error) {
	varCommentDto1Author := _CommentDto1Author{}

	if err = json.Unmarshal(bytes, &varCommentDto1Author); err == nil {
			*o = CommentDto1Author(varCommentDto1Author)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCommentDto1Author struct {
	value *CommentDto1Author
	isSet bool
}

func (v NullableCommentDto1Author) Get() *CommentDto1Author {
	return v.value
}

func (v *NullableCommentDto1Author) Set(val *CommentDto1Author) {
	v.value = val
	v.isSet = true
}

func (v NullableCommentDto1Author) IsSet() bool {
	return v.isSet
}

func (v *NullableCommentDto1Author) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommentDto1Author(val *CommentDto1Author) *NullableCommentDto1Author {
	return &NullableCommentDto1Author{value: val, isSet: true}
}

func (v NullableCommentDto1Author) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommentDto1Author) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


