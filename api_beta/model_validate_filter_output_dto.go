/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
)

// checks if the ValidateFilterOutputDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValidateFilterOutputDto{}

// ValidateFilterOutputDto struct for ValidateFilterOutputDto
type ValidateFilterOutputDto struct {
	// When this field is true, the filter expression is valid against the input.
	IsValid *bool `json:"isValid,omitempty"`
	// When this field is true, the filter expression is using a valid JSON path.
	IsValidJSONPath *bool `json:"isValidJSONPath,omitempty"`
	// When this field is true, the filter expression is using an existing path.
	IsPathExist *bool `json:"isPathExist,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ValidateFilterOutputDto ValidateFilterOutputDto

// NewValidateFilterOutputDto instantiates a new ValidateFilterOutputDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidateFilterOutputDto() *ValidateFilterOutputDto {
	this := ValidateFilterOutputDto{}
	var isValid bool = false
	this.IsValid = &isValid
	var isValidJSONPath bool = false
	this.IsValidJSONPath = &isValidJSONPath
	var isPathExist bool = false
	this.IsPathExist = &isPathExist
	return &this
}

// NewValidateFilterOutputDtoWithDefaults instantiates a new ValidateFilterOutputDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidateFilterOutputDtoWithDefaults() *ValidateFilterOutputDto {
	this := ValidateFilterOutputDto{}
	var isValid bool = false
	this.IsValid = &isValid
	var isValidJSONPath bool = false
	this.IsValidJSONPath = &isValidJSONPath
	var isPathExist bool = false
	this.IsPathExist = &isPathExist
	return &this
}

// GetIsValid returns the IsValid field value if set, zero value otherwise.
func (o *ValidateFilterOutputDto) GetIsValid() bool {
	if o == nil || isNil(o.IsValid) {
		var ret bool
		return ret
	}
	return *o.IsValid
}

// GetIsValidOk returns a tuple with the IsValid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateFilterOutputDto) GetIsValidOk() (*bool, bool) {
	if o == nil || isNil(o.IsValid) {
		return nil, false
	}
	return o.IsValid, true
}

// HasIsValid returns a boolean if a field has been set.
func (o *ValidateFilterOutputDto) HasIsValid() bool {
	if o != nil && !isNil(o.IsValid) {
		return true
	}

	return false
}

// SetIsValid gets a reference to the given bool and assigns it to the IsValid field.
func (o *ValidateFilterOutputDto) SetIsValid(v bool) {
	o.IsValid = &v
}

// GetIsValidJSONPath returns the IsValidJSONPath field value if set, zero value otherwise.
func (o *ValidateFilterOutputDto) GetIsValidJSONPath() bool {
	if o == nil || isNil(o.IsValidJSONPath) {
		var ret bool
		return ret
	}
	return *o.IsValidJSONPath
}

// GetIsValidJSONPathOk returns a tuple with the IsValidJSONPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateFilterOutputDto) GetIsValidJSONPathOk() (*bool, bool) {
	if o == nil || isNil(o.IsValidJSONPath) {
		return nil, false
	}
	return o.IsValidJSONPath, true
}

// HasIsValidJSONPath returns a boolean if a field has been set.
func (o *ValidateFilterOutputDto) HasIsValidJSONPath() bool {
	if o != nil && !isNil(o.IsValidJSONPath) {
		return true
	}

	return false
}

// SetIsValidJSONPath gets a reference to the given bool and assigns it to the IsValidJSONPath field.
func (o *ValidateFilterOutputDto) SetIsValidJSONPath(v bool) {
	o.IsValidJSONPath = &v
}

// GetIsPathExist returns the IsPathExist field value if set, zero value otherwise.
func (o *ValidateFilterOutputDto) GetIsPathExist() bool {
	if o == nil || isNil(o.IsPathExist) {
		var ret bool
		return ret
	}
	return *o.IsPathExist
}

// GetIsPathExistOk returns a tuple with the IsPathExist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidateFilterOutputDto) GetIsPathExistOk() (*bool, bool) {
	if o == nil || isNil(o.IsPathExist) {
		return nil, false
	}
	return o.IsPathExist, true
}

// HasIsPathExist returns a boolean if a field has been set.
func (o *ValidateFilterOutputDto) HasIsPathExist() bool {
	if o != nil && !isNil(o.IsPathExist) {
		return true
	}

	return false
}

// SetIsPathExist gets a reference to the given bool and assigns it to the IsPathExist field.
func (o *ValidateFilterOutputDto) SetIsPathExist(v bool) {
	o.IsPathExist = &v
}

func (o ValidateFilterOutputDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValidateFilterOutputDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.IsValid) {
		toSerialize["isValid"] = o.IsValid
	}
	if !isNil(o.IsValidJSONPath) {
		toSerialize["isValidJSONPath"] = o.IsValidJSONPath
	}
	if !isNil(o.IsPathExist) {
		toSerialize["isPathExist"] = o.IsPathExist
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ValidateFilterOutputDto) UnmarshalJSON(bytes []byte) (err error) {
	varValidateFilterOutputDto := _ValidateFilterOutputDto{}

	if err = json.Unmarshal(bytes, &varValidateFilterOutputDto); err == nil {
	*o = ValidateFilterOutputDto(varValidateFilterOutputDto)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "isValid")
		delete(additionalProperties, "isValidJSONPath")
		delete(additionalProperties, "isPathExist")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableValidateFilterOutputDto struct {
	value *ValidateFilterOutputDto
	isSet bool
}

func (v NullableValidateFilterOutputDto) Get() *ValidateFilterOutputDto {
	return v.value
}

func (v *NullableValidateFilterOutputDto) Set(val *ValidateFilterOutputDto) {
	v.value = val
	v.isSet = true
}

func (v NullableValidateFilterOutputDto) IsSet() bool {
	return v.isSet
}

func (v *NullableValidateFilterOutputDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidateFilterOutputDto(val *ValidateFilterOutputDto) *NullableValidateFilterOutputDto {
	return &NullableValidateFilterOutputDto{value: val, isSet: true}
}

func (v NullableValidateFilterOutputDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidateFilterOutputDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


