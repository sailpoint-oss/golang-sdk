/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
)

// checks if the DomainStatusDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DomainStatusDto{}

// DomainStatusDto Domain status DTO containing everything required to verify via DKIM
type DomainStatusDto struct {
	// New UUID associated with domain to be verified
	Id *string `json:"id,omitempty"`
	// A domain address
	Domain *string `json:"domain,omitempty"`
	// DKIM is enabled for this domain
	DkimEnabled map[string]interface{} `json:"dkimEnabled,omitempty"`
	// DKIM tokens required for authentication
	DkimTokens []string `json:"dkimTokens,omitempty"`
	// Status of DKIM authentication
	DkimVerificationStatus *string `json:"dkimVerificationStatus,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DomainStatusDto DomainStatusDto

// NewDomainStatusDto instantiates a new DomainStatusDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDomainStatusDto() *DomainStatusDto {
	this := DomainStatusDto{}
	return &this
}

// NewDomainStatusDtoWithDefaults instantiates a new DomainStatusDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDomainStatusDtoWithDefaults() *DomainStatusDto {
	this := DomainStatusDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DomainStatusDto) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainStatusDto) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DomainStatusDto) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DomainStatusDto) SetId(v string) {
	o.Id = &v
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *DomainStatusDto) GetDomain() string {
	if o == nil || isNil(o.Domain) {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainStatusDto) GetDomainOk() (*string, bool) {
	if o == nil || isNil(o.Domain) {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *DomainStatusDto) HasDomain() bool {
	if o != nil && !isNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *DomainStatusDto) SetDomain(v string) {
	o.Domain = &v
}

// GetDkimEnabled returns the DkimEnabled field value if set, zero value otherwise.
func (o *DomainStatusDto) GetDkimEnabled() map[string]interface{} {
	if o == nil || isNil(o.DkimEnabled) {
		var ret map[string]interface{}
		return ret
	}
	return o.DkimEnabled
}

// GetDkimEnabledOk returns a tuple with the DkimEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainStatusDto) GetDkimEnabledOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.DkimEnabled) {
		return map[string]interface{}{}, false
	}
	return o.DkimEnabled, true
}

// HasDkimEnabled returns a boolean if a field has been set.
func (o *DomainStatusDto) HasDkimEnabled() bool {
	if o != nil && !isNil(o.DkimEnabled) {
		return true
	}

	return false
}

// SetDkimEnabled gets a reference to the given map[string]interface{} and assigns it to the DkimEnabled field.
func (o *DomainStatusDto) SetDkimEnabled(v map[string]interface{}) {
	o.DkimEnabled = v
}

// GetDkimTokens returns the DkimTokens field value if set, zero value otherwise.
func (o *DomainStatusDto) GetDkimTokens() []string {
	if o == nil || isNil(o.DkimTokens) {
		var ret []string
		return ret
	}
	return o.DkimTokens
}

// GetDkimTokensOk returns a tuple with the DkimTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainStatusDto) GetDkimTokensOk() ([]string, bool) {
	if o == nil || isNil(o.DkimTokens) {
		return nil, false
	}
	return o.DkimTokens, true
}

// HasDkimTokens returns a boolean if a field has been set.
func (o *DomainStatusDto) HasDkimTokens() bool {
	if o != nil && !isNil(o.DkimTokens) {
		return true
	}

	return false
}

// SetDkimTokens gets a reference to the given []string and assigns it to the DkimTokens field.
func (o *DomainStatusDto) SetDkimTokens(v []string) {
	o.DkimTokens = v
}

// GetDkimVerificationStatus returns the DkimVerificationStatus field value if set, zero value otherwise.
func (o *DomainStatusDto) GetDkimVerificationStatus() string {
	if o == nil || isNil(o.DkimVerificationStatus) {
		var ret string
		return ret
	}
	return *o.DkimVerificationStatus
}

// GetDkimVerificationStatusOk returns a tuple with the DkimVerificationStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainStatusDto) GetDkimVerificationStatusOk() (*string, bool) {
	if o == nil || isNil(o.DkimVerificationStatus) {
		return nil, false
	}
	return o.DkimVerificationStatus, true
}

// HasDkimVerificationStatus returns a boolean if a field has been set.
func (o *DomainStatusDto) HasDkimVerificationStatus() bool {
	if o != nil && !isNil(o.DkimVerificationStatus) {
		return true
	}

	return false
}

// SetDkimVerificationStatus gets a reference to the given string and assigns it to the DkimVerificationStatus field.
func (o *DomainStatusDto) SetDkimVerificationStatus(v string) {
	o.DkimVerificationStatus = &v
}

func (o DomainStatusDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DomainStatusDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Domain) {
		toSerialize["domain"] = o.Domain
	}
	if !isNil(o.DkimEnabled) {
		toSerialize["dkimEnabled"] = o.DkimEnabled
	}
	if !isNil(o.DkimTokens) {
		toSerialize["dkimTokens"] = o.DkimTokens
	}
	if !isNil(o.DkimVerificationStatus) {
		toSerialize["dkimVerificationStatus"] = o.DkimVerificationStatus
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DomainStatusDto) UnmarshalJSON(bytes []byte) (err error) {
	varDomainStatusDto := _DomainStatusDto{}

	if err = json.Unmarshal(bytes, &varDomainStatusDto); err == nil {
	*o = DomainStatusDto(varDomainStatusDto)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "domain")
		delete(additionalProperties, "dkimEnabled")
		delete(additionalProperties, "dkimTokens")
		delete(additionalProperties, "dkimVerificationStatus")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDomainStatusDto struct {
	value *DomainStatusDto
	isSet bool
}

func (v NullableDomainStatusDto) Get() *DomainStatusDto {
	return v.value
}

func (v *NullableDomainStatusDto) Set(val *DomainStatusDto) {
	v.value = val
	v.isSet = true
}

func (v NullableDomainStatusDto) IsSet() bool {
	return v.isSet
}

func (v *NullableDomainStatusDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDomainStatusDto(val *DomainStatusDto) *NullableDomainStatusDto {
	return &NullableDomainStatusDto{value: val, isSet: true}
}

func (v NullableDomainStatusDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDomainStatusDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


