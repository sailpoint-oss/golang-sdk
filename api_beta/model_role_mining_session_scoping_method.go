/*
Identity Security Cloud Beta API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"fmt"
)

// RoleMiningSessionScopingMethod The scoping method used in the current role mining session.
type RoleMiningSessionScopingMethod string

// List of RoleMiningSessionScopingMethod
const (
	ROLEMININGSESSIONSCOPINGMETHOD_MANUAL RoleMiningSessionScopingMethod = "MANUAL"
	ROLEMININGSESSIONSCOPINGMETHOD_AUTO_RM RoleMiningSessionScopingMethod = "AUTO_RM"
)

// All allowed values of RoleMiningSessionScopingMethod enum
var AllowedRoleMiningSessionScopingMethodEnumValues = []RoleMiningSessionScopingMethod{
	"MANUAL",
	"AUTO_RM",
}

func (v *RoleMiningSessionScopingMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RoleMiningSessionScopingMethod(value)
	for _, existing := range AllowedRoleMiningSessionScopingMethodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RoleMiningSessionScopingMethod", value)
}

// NewRoleMiningSessionScopingMethodFromValue returns a pointer to a valid RoleMiningSessionScopingMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRoleMiningSessionScopingMethodFromValue(v string) (*RoleMiningSessionScopingMethod, error) {
	ev := RoleMiningSessionScopingMethod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RoleMiningSessionScopingMethod: valid values are %v", v, AllowedRoleMiningSessionScopingMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RoleMiningSessionScopingMethod) IsValid() bool {
	for _, existing := range AllowedRoleMiningSessionScopingMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RoleMiningSessionScopingMethod value
func (v RoleMiningSessionScopingMethod) Ptr() *RoleMiningSessionScopingMethod {
	return &v
}

type NullableRoleMiningSessionScopingMethod struct {
	value *RoleMiningSessionScopingMethod
	isSet bool
}

func (v NullableRoleMiningSessionScopingMethod) Get() *RoleMiningSessionScopingMethod {
	return v.value
}

func (v *NullableRoleMiningSessionScopingMethod) Set(val *RoleMiningSessionScopingMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleMiningSessionScopingMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleMiningSessionScopingMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleMiningSessionScopingMethod(val *RoleMiningSessionScopingMethod) *NullableRoleMiningSessionScopingMethod {
	return &NullableRoleMiningSessionScopingMethod{value: val, isSet: true}
}

func (v NullableRoleMiningSessionScopingMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleMiningSessionScopingMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

