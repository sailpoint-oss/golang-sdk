/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the SourceUpdated type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SourceUpdated{}

// SourceUpdated struct for SourceUpdated
type SourceUpdated struct {
	// The unique ID of the source.
	Id string `json:"id"`
	// The user friendly name of the source.
	Name string `json:"name"`
	// The connection type of the source.
	Type string `json:"type"`
	// The date and time the source was modified.
	Modified time.Time `json:"modified"`
	// The connector type used to connect to the source.
	Connector string `json:"connector"`
	Actor SourceUpdatedActor `json:"actor"`
	AdditionalProperties map[string]interface{}
}

type _SourceUpdated SourceUpdated

// NewSourceUpdated instantiates a new SourceUpdated object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceUpdated(id string, name string, type_ string, modified time.Time, connector string, actor SourceUpdatedActor) *SourceUpdated {
	this := SourceUpdated{}
	this.Id = id
	this.Name = name
	this.Type = type_
	this.Modified = modified
	this.Connector = connector
	this.Actor = actor
	return &this
}

// NewSourceUpdatedWithDefaults instantiates a new SourceUpdated object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceUpdatedWithDefaults() *SourceUpdated {
	this := SourceUpdated{}
	return &this
}

// GetId returns the Id field value
func (o *SourceUpdated) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SourceUpdated) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SourceUpdated) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *SourceUpdated) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SourceUpdated) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SourceUpdated) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *SourceUpdated) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SourceUpdated) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SourceUpdated) SetType(v string) {
	o.Type = v
}

// GetModified returns the Modified field value
func (o *SourceUpdated) GetModified() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value
// and a boolean to check if the value has been set.
func (o *SourceUpdated) GetModifiedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Modified, true
}

// SetModified sets field value
func (o *SourceUpdated) SetModified(v time.Time) {
	o.Modified = v
}

// GetConnector returns the Connector field value
func (o *SourceUpdated) GetConnector() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Connector
}

// GetConnectorOk returns a tuple with the Connector field value
// and a boolean to check if the value has been set.
func (o *SourceUpdated) GetConnectorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Connector, true
}

// SetConnector sets field value
func (o *SourceUpdated) SetConnector(v string) {
	o.Connector = v
}

// GetActor returns the Actor field value
func (o *SourceUpdated) GetActor() SourceUpdatedActor {
	if o == nil {
		var ret SourceUpdatedActor
		return ret
	}

	return o.Actor
}

// GetActorOk returns a tuple with the Actor field value
// and a boolean to check if the value has been set.
func (o *SourceUpdated) GetActorOk() (*SourceUpdatedActor, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Actor, true
}

// SetActor sets field value
func (o *SourceUpdated) SetActor(v SourceUpdatedActor) {
	o.Actor = v
}

func (o SourceUpdated) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SourceUpdated) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	toSerialize["modified"] = o.Modified
	toSerialize["connector"] = o.Connector
	toSerialize["actor"] = o.Actor

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SourceUpdated) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"type",
		"modified",
		"connector",
		"actor",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSourceUpdated := _SourceUpdated{}

	if err = json.Unmarshal(bytes, &varSourceUpdated); err == nil {
	*o = SourceUpdated(varSourceUpdated)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "type")
		delete(additionalProperties, "modified")
		delete(additionalProperties, "connector")
		delete(additionalProperties, "actor")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSourceUpdated struct {
	value *SourceUpdated
	isSet bool
}

func (v NullableSourceUpdated) Get() *SourceUpdated {
	return v.value
}

func (v *NullableSourceUpdated) Set(val *SourceUpdated) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceUpdated) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceUpdated) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceUpdated(val *SourceUpdated) *NullableSourceUpdated {
	return &NullableSourceUpdated{value: val, isSet: true}
}

func (v NullableSourceUpdated) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceUpdated) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


