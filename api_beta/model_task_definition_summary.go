/*
Identity Security Cloud Beta API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"fmt"
)

// checks if the TaskDefinitionSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskDefinitionSummary{}

// TaskDefinitionSummary Definition of a type of task, used to invoke tasks
type TaskDefinitionSummary struct {
	// System-generated unique ID of the TaskDefinition
	Id string `json:"id"`
	// Name of the TaskDefinition
	UniqueName string `json:"uniqueName"`
	// Description of the TaskDefinition
	Description NullableString `json:"description"`
	// Name of the parent of the TaskDefinition
	ParentName string `json:"parentName"`
	// Executor of the TaskDefinition
	Executor NullableString `json:"executor"`
	// Formal parameters of the TaskDefinition, without values
	Arguments map[string]interface{} `json:"arguments"`
	AdditionalProperties map[string]interface{}
}

type _TaskDefinitionSummary TaskDefinitionSummary

// NewTaskDefinitionSummary instantiates a new TaskDefinitionSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskDefinitionSummary(id string, uniqueName string, description NullableString, parentName string, executor NullableString, arguments map[string]interface{}) *TaskDefinitionSummary {
	this := TaskDefinitionSummary{}
	this.Id = id
	this.UniqueName = uniqueName
	this.Description = description
	this.ParentName = parentName
	this.Executor = executor
	this.Arguments = arguments
	return &this
}

// NewTaskDefinitionSummaryWithDefaults instantiates a new TaskDefinitionSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskDefinitionSummaryWithDefaults() *TaskDefinitionSummary {
	this := TaskDefinitionSummary{}
	return &this
}

// GetId returns the Id field value
func (o *TaskDefinitionSummary) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TaskDefinitionSummary) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TaskDefinitionSummary) SetId(v string) {
	o.Id = v
}

// GetUniqueName returns the UniqueName field value
func (o *TaskDefinitionSummary) GetUniqueName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UniqueName
}

// GetUniqueNameOk returns a tuple with the UniqueName field value
// and a boolean to check if the value has been set.
func (o *TaskDefinitionSummary) GetUniqueNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UniqueName, true
}

// SetUniqueName sets field value
func (o *TaskDefinitionSummary) SetUniqueName(v string) {
	o.UniqueName = v
}

// GetDescription returns the Description field value
// If the value is explicit nil, the zero value for string will be returned
func (o *TaskDefinitionSummary) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}

	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskDefinitionSummary) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// SetDescription sets field value
func (o *TaskDefinitionSummary) SetDescription(v string) {
	o.Description.Set(&v)
}

// GetParentName returns the ParentName field value
func (o *TaskDefinitionSummary) GetParentName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ParentName
}

// GetParentNameOk returns a tuple with the ParentName field value
// and a boolean to check if the value has been set.
func (o *TaskDefinitionSummary) GetParentNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParentName, true
}

// SetParentName sets field value
func (o *TaskDefinitionSummary) SetParentName(v string) {
	o.ParentName = v
}

// GetExecutor returns the Executor field value
// If the value is explicit nil, the zero value for string will be returned
func (o *TaskDefinitionSummary) GetExecutor() string {
	if o == nil || o.Executor.Get() == nil {
		var ret string
		return ret
	}

	return *o.Executor.Get()
}

// GetExecutorOk returns a tuple with the Executor field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskDefinitionSummary) GetExecutorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Executor.Get(), o.Executor.IsSet()
}

// SetExecutor sets field value
func (o *TaskDefinitionSummary) SetExecutor(v string) {
	o.Executor.Set(&v)
}

// GetArguments returns the Arguments field value
func (o *TaskDefinitionSummary) GetArguments() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Arguments
}

// GetArgumentsOk returns a tuple with the Arguments field value
// and a boolean to check if the value has been set.
func (o *TaskDefinitionSummary) GetArgumentsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Arguments, true
}

// SetArguments sets field value
func (o *TaskDefinitionSummary) SetArguments(v map[string]interface{}) {
	o.Arguments = v
}

func (o TaskDefinitionSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskDefinitionSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["uniqueName"] = o.UniqueName
	toSerialize["description"] = o.Description.Get()
	toSerialize["parentName"] = o.ParentName
	toSerialize["executor"] = o.Executor.Get()
	toSerialize["arguments"] = o.Arguments

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TaskDefinitionSummary) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"uniqueName",
		"description",
		"parentName",
		"executor",
		"arguments",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTaskDefinitionSummary := _TaskDefinitionSummary{}

	err = json.Unmarshal(data, &varTaskDefinitionSummary)

	if err != nil {
		return err
	}

	*o = TaskDefinitionSummary(varTaskDefinitionSummary)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "uniqueName")
		delete(additionalProperties, "description")
		delete(additionalProperties, "parentName")
		delete(additionalProperties, "executor")
		delete(additionalProperties, "arguments")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTaskDefinitionSummary struct {
	value *TaskDefinitionSummary
	isSet bool
}

func (v NullableTaskDefinitionSummary) Get() *TaskDefinitionSummary {
	return v.value
}

func (v *NullableTaskDefinitionSummary) Set(val *TaskDefinitionSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskDefinitionSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskDefinitionSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskDefinitionSummary(val *TaskDefinitionSummary) *NullableTaskDefinitionSummary {
	return &NullableTaskDefinitionSummary{value: val, isSet: true}
}

func (v NullableTaskDefinitionSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskDefinitionSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


