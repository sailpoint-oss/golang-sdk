/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
)

// checks if the IdentityCertificationTask type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdentityCertificationTask{}

// IdentityCertificationTask struct for IdentityCertificationTask
type IdentityCertificationTask struct {
	// The task id
	Id *string `json:"id,omitempty"`
	// The certification id
	CertificationId *string `json:"certificationId,omitempty"`
	Type *string `json:"type,omitempty"`
	Status *string `json:"status,omitempty"`
	// Any errors executing the task (Optional).
	Errors []string `json:"errors,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IdentityCertificationTask IdentityCertificationTask

// NewIdentityCertificationTask instantiates a new IdentityCertificationTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityCertificationTask() *IdentityCertificationTask {
	this := IdentityCertificationTask{}
	return &this
}

// NewIdentityCertificationTaskWithDefaults instantiates a new IdentityCertificationTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityCertificationTaskWithDefaults() *IdentityCertificationTask {
	this := IdentityCertificationTask{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IdentityCertificationTask) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityCertificationTask) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IdentityCertificationTask) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IdentityCertificationTask) SetId(v string) {
	o.Id = &v
}

// GetCertificationId returns the CertificationId field value if set, zero value otherwise.
func (o *IdentityCertificationTask) GetCertificationId() string {
	if o == nil || isNil(o.CertificationId) {
		var ret string
		return ret
	}
	return *o.CertificationId
}

// GetCertificationIdOk returns a tuple with the CertificationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityCertificationTask) GetCertificationIdOk() (*string, bool) {
	if o == nil || isNil(o.CertificationId) {
		return nil, false
	}
	return o.CertificationId, true
}

// HasCertificationId returns a boolean if a field has been set.
func (o *IdentityCertificationTask) HasCertificationId() bool {
	if o != nil && !isNil(o.CertificationId) {
		return true
	}

	return false
}

// SetCertificationId gets a reference to the given string and assigns it to the CertificationId field.
func (o *IdentityCertificationTask) SetCertificationId(v string) {
	o.CertificationId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *IdentityCertificationTask) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityCertificationTask) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *IdentityCertificationTask) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *IdentityCertificationTask) SetType(v string) {
	o.Type = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *IdentityCertificationTask) GetStatus() string {
	if o == nil || isNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityCertificationTask) GetStatusOk() (*string, bool) {
	if o == nil || isNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *IdentityCertificationTask) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *IdentityCertificationTask) SetStatus(v string) {
	o.Status = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *IdentityCertificationTask) GetErrors() []string {
	if o == nil || isNil(o.Errors) {
		var ret []string
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityCertificationTask) GetErrorsOk() ([]string, bool) {
	if o == nil || isNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *IdentityCertificationTask) HasErrors() bool {
	if o != nil && !isNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []string and assigns it to the Errors field.
func (o *IdentityCertificationTask) SetErrors(v []string) {
	o.Errors = v
}

func (o IdentityCertificationTask) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdentityCertificationTask) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.CertificationId) {
		toSerialize["certificationId"] = o.CertificationId
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !isNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IdentityCertificationTask) UnmarshalJSON(bytes []byte) (err error) {
	varIdentityCertificationTask := _IdentityCertificationTask{}

	if err = json.Unmarshal(bytes, &varIdentityCertificationTask); err == nil {
	*o = IdentityCertificationTask(varIdentityCertificationTask)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "certificationId")
		delete(additionalProperties, "type")
		delete(additionalProperties, "status")
		delete(additionalProperties, "errors")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIdentityCertificationTask struct {
	value *IdentityCertificationTask
	isSet bool
}

func (v NullableIdentityCertificationTask) Get() *IdentityCertificationTask {
	return v.value
}

func (v *NullableIdentityCertificationTask) Set(val *IdentityCertificationTask) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityCertificationTask) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityCertificationTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityCertificationTask(val *IdentityCertificationTask) *NullableIdentityCertificationTask {
	return &NullableIdentityCertificationTask{value: val, isSet: true}
}

func (v NullableIdentityCertificationTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityCertificationTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


