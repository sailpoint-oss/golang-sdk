/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"fmt"
)

// checks if the IdentityCreated type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdentityCreated{}

// IdentityCreated struct for IdentityCreated
type IdentityCreated struct {
	Identity IdentityCreatedIdentity `json:"identity"`
	// The attributes assigned to the identity. Attributes are determined by the identity profile.
	Attributes map[string]interface{} `json:"attributes"`
	AdditionalProperties map[string]interface{}
}

type _IdentityCreated IdentityCreated

// NewIdentityCreated instantiates a new IdentityCreated object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityCreated(identity IdentityCreatedIdentity, attributes map[string]interface{}) *IdentityCreated {
	this := IdentityCreated{}
	this.Identity = identity
	this.Attributes = attributes
	return &this
}

// NewIdentityCreatedWithDefaults instantiates a new IdentityCreated object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityCreatedWithDefaults() *IdentityCreated {
	this := IdentityCreated{}
	return &this
}

// GetIdentity returns the Identity field value
func (o *IdentityCreated) GetIdentity() IdentityCreatedIdentity {
	if o == nil {
		var ret IdentityCreatedIdentity
		return ret
	}

	return o.Identity
}

// GetIdentityOk returns a tuple with the Identity field value
// and a boolean to check if the value has been set.
func (o *IdentityCreated) GetIdentityOk() (*IdentityCreatedIdentity, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identity, true
}

// SetIdentity sets field value
func (o *IdentityCreated) SetIdentity(v IdentityCreatedIdentity) {
	o.Identity = v
}

// GetAttributes returns the Attributes field value
func (o *IdentityCreated) GetAttributes() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value
// and a boolean to check if the value has been set.
func (o *IdentityCreated) GetAttributesOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Attributes, true
}

// SetAttributes sets field value
func (o *IdentityCreated) SetAttributes(v map[string]interface{}) {
	o.Attributes = v
}

func (o IdentityCreated) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdentityCreated) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["identity"] = o.Identity
	toSerialize["attributes"] = o.Attributes

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IdentityCreated) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"identity",
		"attributes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIdentityCreated := _IdentityCreated{}

	if err = json.Unmarshal(bytes, &varIdentityCreated); err == nil {
	*o = IdentityCreated(varIdentityCreated)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "identity")
		delete(additionalProperties, "attributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIdentityCreated struct {
	value *IdentityCreated
	isSet bool
}

func (v NullableIdentityCreated) Get() *IdentityCreated {
	return v.value
}

func (v *NullableIdentityCreated) Set(val *IdentityCreated) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityCreated) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityCreated) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityCreated(val *IdentityCreated) *NullableIdentityCreated {
	return &NullableIdentityCreated{value: val, isSet: true}
}

func (v NullableIdentityCreated) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityCreated) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


