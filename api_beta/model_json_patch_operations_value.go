/*
Identity Security Cloud Beta API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// JsonPatchOperationsValue - The value to be used for the operation, required for \"add\" and \"replace\" operations
type JsonPatchOperationsValue struct {
	ArrayOfArrayInner1 *[]ArrayInner1
	Bool *bool
	String *string
}

// []ArrayInner1AsJsonPatchOperationsValue is a convenience function that returns []ArrayInner1 wrapped in JsonPatchOperationsValue
func ArrayOfArrayInner1AsJsonPatchOperationsValue(v *[]ArrayInner1) JsonPatchOperationsValue {
	return JsonPatchOperationsValue{
		ArrayOfArrayInner1: v,
	}
}

// boolAsJsonPatchOperationsValue is a convenience function that returns bool wrapped in JsonPatchOperationsValue
func BoolAsJsonPatchOperationsValue(v *bool) JsonPatchOperationsValue {
	return JsonPatchOperationsValue{
		Bool: v,
	}
}

// stringAsJsonPatchOperationsValue is a convenience function that returns string wrapped in JsonPatchOperationsValue
func StringAsJsonPatchOperationsValue(v *string) JsonPatchOperationsValue {
	return JsonPatchOperationsValue{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *JsonPatchOperationsValue) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ArrayOfArrayInner1
	err = newStrictDecoder(data).Decode(&dst.ArrayOfArrayInner1)
	if err == nil {
		jsonArrayOfArrayInner1, _ := json.Marshal(dst.ArrayOfArrayInner1)
		if string(jsonArrayOfArrayInner1) == "{}" { // empty struct
			dst.ArrayOfArrayInner1 = nil
		} else {
			if err = validator.Validate(dst.ArrayOfArrayInner1); err != nil {
				dst.ArrayOfArrayInner1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfArrayInner1 = nil
	}

	// try to unmarshal data into Bool
	err = newStrictDecoder(data).Decode(&dst.Bool)
	if err == nil {
		jsonBool, _ := json.Marshal(dst.Bool)
		if string(jsonBool) == "{}" { // empty struct
			dst.Bool = nil
		} else {
			if err = validator.Validate(dst.Bool); err != nil {
				dst.Bool = nil
			} else {
				match++
			}
		}
	} else {
		dst.Bool = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			if err = validator.Validate(dst.String); err != nil {
				dst.String = nil
			} else {
				match++
			}
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ArrayOfArrayInner1 = nil
		dst.Bool = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(JsonPatchOperationsValue)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(JsonPatchOperationsValue)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src JsonPatchOperationsValue) MarshalJSON() ([]byte, error) {
	if src.ArrayOfArrayInner1 != nil {
		return json.Marshal(&src.ArrayOfArrayInner1)
	}

	if src.Bool != nil {
		return json.Marshal(&src.Bool)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *JsonPatchOperationsValue) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ArrayOfArrayInner1 != nil {
		return obj.ArrayOfArrayInner1
	}

	if obj.Bool != nil {
		return obj.Bool
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj JsonPatchOperationsValue) GetActualInstanceValue() (interface{}) {
	if obj.ArrayOfArrayInner1 != nil {
		return *obj.ArrayOfArrayInner1
	}

	if obj.Bool != nil {
		return *obj.Bool
	}

	if obj.String != nil {
		return *obj.String
	}

	// all schemas are nil
	return nil
}

type NullableJsonPatchOperationsValue struct {
	value *JsonPatchOperationsValue
	isSet bool
}

func (v NullableJsonPatchOperationsValue) Get() *JsonPatchOperationsValue {
	return v.value
}

func (v *NullableJsonPatchOperationsValue) Set(val *JsonPatchOperationsValue) {
	v.value = val
	v.isSet = true
}

func (v NullableJsonPatchOperationsValue) IsSet() bool {
	return v.isSet
}

func (v *NullableJsonPatchOperationsValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJsonPatchOperationsValue(val *JsonPatchOperationsValue) *NullableJsonPatchOperationsValue {
	return &NullableJsonPatchOperationsValue{value: val, isSet: true}
}

func (v NullableJsonPatchOperationsValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJsonPatchOperationsValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


