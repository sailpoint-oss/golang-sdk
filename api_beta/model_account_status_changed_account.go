/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
)

// checks if the AccountStatusChangedAccount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountStatusChangedAccount{}

// AccountStatusChangedAccount struct for AccountStatusChangedAccount
type AccountStatusChangedAccount struct {
	// the ID of the account in the database
	Id *string `json:"id,omitempty"`
	// the native identifier of the account
	NativeIdentity *string `json:"nativeIdentity,omitempty"`
	// the display name of the account
	DisplayName *string `json:"displayName,omitempty"`
	// the ID of the source for this account
	SourceId *string `json:"sourceId,omitempty"`
	// the name of the source for this account
	SourceName *string `json:"sourceName,omitempty"`
	// the number of entitlements on this account
	EntitlementCount *int32 `json:"entitlementCount,omitempty"`
	// this value is always \"account\"
	AccessType *string `json:"accessType,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AccountStatusChangedAccount AccountStatusChangedAccount

// NewAccountStatusChangedAccount instantiates a new AccountStatusChangedAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountStatusChangedAccount() *AccountStatusChangedAccount {
	this := AccountStatusChangedAccount{}
	return &this
}

// NewAccountStatusChangedAccountWithDefaults instantiates a new AccountStatusChangedAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountStatusChangedAccountWithDefaults() *AccountStatusChangedAccount {
	this := AccountStatusChangedAccount{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AccountStatusChangedAccount) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountStatusChangedAccount) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AccountStatusChangedAccount) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AccountStatusChangedAccount) SetId(v string) {
	o.Id = &v
}

// GetNativeIdentity returns the NativeIdentity field value if set, zero value otherwise.
func (o *AccountStatusChangedAccount) GetNativeIdentity() string {
	if o == nil || isNil(o.NativeIdentity) {
		var ret string
		return ret
	}
	return *o.NativeIdentity
}

// GetNativeIdentityOk returns a tuple with the NativeIdentity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountStatusChangedAccount) GetNativeIdentityOk() (*string, bool) {
	if o == nil || isNil(o.NativeIdentity) {
		return nil, false
	}
	return o.NativeIdentity, true
}

// HasNativeIdentity returns a boolean if a field has been set.
func (o *AccountStatusChangedAccount) HasNativeIdentity() bool {
	if o != nil && !isNil(o.NativeIdentity) {
		return true
	}

	return false
}

// SetNativeIdentity gets a reference to the given string and assigns it to the NativeIdentity field.
func (o *AccountStatusChangedAccount) SetNativeIdentity(v string) {
	o.NativeIdentity = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *AccountStatusChangedAccount) GetDisplayName() string {
	if o == nil || isNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountStatusChangedAccount) GetDisplayNameOk() (*string, bool) {
	if o == nil || isNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *AccountStatusChangedAccount) HasDisplayName() bool {
	if o != nil && !isNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *AccountStatusChangedAccount) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetSourceId returns the SourceId field value if set, zero value otherwise.
func (o *AccountStatusChangedAccount) GetSourceId() string {
	if o == nil || isNil(o.SourceId) {
		var ret string
		return ret
	}
	return *o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountStatusChangedAccount) GetSourceIdOk() (*string, bool) {
	if o == nil || isNil(o.SourceId) {
		return nil, false
	}
	return o.SourceId, true
}

// HasSourceId returns a boolean if a field has been set.
func (o *AccountStatusChangedAccount) HasSourceId() bool {
	if o != nil && !isNil(o.SourceId) {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given string and assigns it to the SourceId field.
func (o *AccountStatusChangedAccount) SetSourceId(v string) {
	o.SourceId = &v
}

// GetSourceName returns the SourceName field value if set, zero value otherwise.
func (o *AccountStatusChangedAccount) GetSourceName() string {
	if o == nil || isNil(o.SourceName) {
		var ret string
		return ret
	}
	return *o.SourceName
}

// GetSourceNameOk returns a tuple with the SourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountStatusChangedAccount) GetSourceNameOk() (*string, bool) {
	if o == nil || isNil(o.SourceName) {
		return nil, false
	}
	return o.SourceName, true
}

// HasSourceName returns a boolean if a field has been set.
func (o *AccountStatusChangedAccount) HasSourceName() bool {
	if o != nil && !isNil(o.SourceName) {
		return true
	}

	return false
}

// SetSourceName gets a reference to the given string and assigns it to the SourceName field.
func (o *AccountStatusChangedAccount) SetSourceName(v string) {
	o.SourceName = &v
}

// GetEntitlementCount returns the EntitlementCount field value if set, zero value otherwise.
func (o *AccountStatusChangedAccount) GetEntitlementCount() int32 {
	if o == nil || isNil(o.EntitlementCount) {
		var ret int32
		return ret
	}
	return *o.EntitlementCount
}

// GetEntitlementCountOk returns a tuple with the EntitlementCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountStatusChangedAccount) GetEntitlementCountOk() (*int32, bool) {
	if o == nil || isNil(o.EntitlementCount) {
		return nil, false
	}
	return o.EntitlementCount, true
}

// HasEntitlementCount returns a boolean if a field has been set.
func (o *AccountStatusChangedAccount) HasEntitlementCount() bool {
	if o != nil && !isNil(o.EntitlementCount) {
		return true
	}

	return false
}

// SetEntitlementCount gets a reference to the given int32 and assigns it to the EntitlementCount field.
func (o *AccountStatusChangedAccount) SetEntitlementCount(v int32) {
	o.EntitlementCount = &v
}

// GetAccessType returns the AccessType field value if set, zero value otherwise.
func (o *AccountStatusChangedAccount) GetAccessType() string {
	if o == nil || isNil(o.AccessType) {
		var ret string
		return ret
	}
	return *o.AccessType
}

// GetAccessTypeOk returns a tuple with the AccessType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountStatusChangedAccount) GetAccessTypeOk() (*string, bool) {
	if o == nil || isNil(o.AccessType) {
		return nil, false
	}
	return o.AccessType, true
}

// HasAccessType returns a boolean if a field has been set.
func (o *AccountStatusChangedAccount) HasAccessType() bool {
	if o != nil && !isNil(o.AccessType) {
		return true
	}

	return false
}

// SetAccessType gets a reference to the given string and assigns it to the AccessType field.
func (o *AccountStatusChangedAccount) SetAccessType(v string) {
	o.AccessType = &v
}

func (o AccountStatusChangedAccount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountStatusChangedAccount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.NativeIdentity) {
		toSerialize["nativeIdentity"] = o.NativeIdentity
	}
	if !isNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !isNil(o.SourceId) {
		toSerialize["sourceId"] = o.SourceId
	}
	if !isNil(o.SourceName) {
		toSerialize["sourceName"] = o.SourceName
	}
	if !isNil(o.EntitlementCount) {
		toSerialize["entitlementCount"] = o.EntitlementCount
	}
	if !isNil(o.AccessType) {
		toSerialize["accessType"] = o.AccessType
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AccountStatusChangedAccount) UnmarshalJSON(bytes []byte) (err error) {
	varAccountStatusChangedAccount := _AccountStatusChangedAccount{}

	if err = json.Unmarshal(bytes, &varAccountStatusChangedAccount); err == nil {
	*o = AccountStatusChangedAccount(varAccountStatusChangedAccount)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "nativeIdentity")
		delete(additionalProperties, "displayName")
		delete(additionalProperties, "sourceId")
		delete(additionalProperties, "sourceName")
		delete(additionalProperties, "entitlementCount")
		delete(additionalProperties, "accessType")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAccountStatusChangedAccount struct {
	value *AccountStatusChangedAccount
	isSet bool
}

func (v NullableAccountStatusChangedAccount) Get() *AccountStatusChangedAccount {
	return v.value
}

func (v *NullableAccountStatusChangedAccount) Set(val *AccountStatusChangedAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountStatusChangedAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountStatusChangedAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountStatusChangedAccount(val *AccountStatusChangedAccount) *NullableAccountStatusChangedAccount {
	return &NullableAccountStatusChangedAccount{value: val, isSet: true}
}

func (v NullableAccountStatusChangedAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountStatusChangedAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


