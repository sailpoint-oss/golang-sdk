/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
)

// checks if the CertifierResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertifierResponse{}

// CertifierResponse struct for CertifierResponse
type CertifierResponse struct {
	// the id of the certifier
	Id *string `json:"id,omitempty"`
	// the name of the certifier
	DisplayName *string `json:"displayName,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CertifierResponse CertifierResponse

// NewCertifierResponse instantiates a new CertifierResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertifierResponse() *CertifierResponse {
	this := CertifierResponse{}
	return &this
}

// NewCertifierResponseWithDefaults instantiates a new CertifierResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertifierResponseWithDefaults() *CertifierResponse {
	this := CertifierResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CertifierResponse) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertifierResponse) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CertifierResponse) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CertifierResponse) SetId(v string) {
	o.Id = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *CertifierResponse) GetDisplayName() string {
	if o == nil || isNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertifierResponse) GetDisplayNameOk() (*string, bool) {
	if o == nil || isNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *CertifierResponse) HasDisplayName() bool {
	if o != nil && !isNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *CertifierResponse) SetDisplayName(v string) {
	o.DisplayName = &v
}

func (o CertifierResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CertifierResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CertifierResponse) UnmarshalJSON(bytes []byte) (err error) {
	varCertifierResponse := _CertifierResponse{}

	if err = json.Unmarshal(bytes, &varCertifierResponse); err == nil {
	*o = CertifierResponse(varCertifierResponse)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "displayName")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCertifierResponse struct {
	value *CertifierResponse
	isSet bool
}

func (v NullableCertifierResponse) Get() *CertifierResponse {
	return v.value
}

func (v *NullableCertifierResponse) Set(val *CertifierResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCertifierResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCertifierResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertifierResponse(val *CertifierResponse) *NullableCertifierResponse {
	return &NullableCertifierResponse{value: val, isSet: true}
}

func (v NullableCertifierResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertifierResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


