/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"fmt"
)

// ConfigTypeEnum Enum list of valid work types that can be selected for a Reassignment Configuration
type ConfigTypeEnum string

// List of ConfigTypeEnum
const (
	CONFIGTYPEENUM_ACCESS_REQUESTS ConfigTypeEnum = "ACCESS_REQUESTS"
	CONFIGTYPEENUM_CERTIFICATIONS ConfigTypeEnum = "CERTIFICATIONS"
	CONFIGTYPEENUM_MANUAL_TASKS ConfigTypeEnum = "MANUAL_TASKS"
)

// All allowed values of ConfigTypeEnum enum
var AllowedConfigTypeEnumEnumValues = []ConfigTypeEnum{
	"ACCESS_REQUESTS",
	"CERTIFICATIONS",
	"MANUAL_TASKS",
}

func (v *ConfigTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConfigTypeEnum(value)
	for _, existing := range AllowedConfigTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConfigTypeEnum", value)
}

// NewConfigTypeEnumFromValue returns a pointer to a valid ConfigTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConfigTypeEnumFromValue(v string) (*ConfigTypeEnum, error) {
	ev := ConfigTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConfigTypeEnum: valid values are %v", v, AllowedConfigTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConfigTypeEnum) IsValid() bool {
	for _, existing := range AllowedConfigTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConfigTypeEnum value
func (v ConfigTypeEnum) Ptr() *ConfigTypeEnum {
	return &v
}

type NullableConfigTypeEnum struct {
	value *ConfigTypeEnum
	isSet bool
}

func (v NullableConfigTypeEnum) Get() *ConfigTypeEnum {
	return v.value
}

func (v *NullableConfigTypeEnum) Set(val *ConfigTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigTypeEnum(val *ConfigTypeEnum) *NullableConfigTypeEnum {
	return &NullableConfigTypeEnum{value: val, isSet: true}
}

func (v NullableConfigTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

