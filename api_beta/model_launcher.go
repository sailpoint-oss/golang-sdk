/*
Identity Security Cloud Beta API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the Launcher type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Launcher{}

// Launcher struct for Launcher
type Launcher struct {
	// ID of the Launcher
	Id string `json:"id"`
	// Date the Launcher was created
	Created time.Time `json:"created"`
	// Date the Launcher was last modified
	Modified time.Time `json:"modified"`
	Owner LauncherOwner `json:"owner"`
	// Name of the Launcher, limited to 255 characters
	Name string `json:"name"`
	// Description of the Launcher, limited to 2000 characters
	Description string `json:"description"`
	// Launcher type
	Type string `json:"type"`
	// State of the Launcher
	Disabled bool `json:"disabled"`
	Reference *LauncherReference `json:"reference,omitempty"`
	// JSON configuration associated with this Launcher, restricted to a max size of 4KB 
	Config string `json:"config" validate:"regexp=^\\\\{\\\\}$"`
	AdditionalProperties map[string]interface{}
}

type _Launcher Launcher

// NewLauncher instantiates a new Launcher object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLauncher(id string, created time.Time, modified time.Time, owner LauncherOwner, name string, description string, type_ string, disabled bool, config string) *Launcher {
	this := Launcher{}
	this.Id = id
	this.Created = created
	this.Modified = modified
	this.Owner = owner
	this.Name = name
	this.Description = description
	this.Type = type_
	this.Disabled = disabled
	this.Config = config
	return &this
}

// NewLauncherWithDefaults instantiates a new Launcher object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLauncherWithDefaults() *Launcher {
	this := Launcher{}
	return &this
}

// GetId returns the Id field value
func (o *Launcher) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Launcher) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Launcher) SetId(v string) {
	o.Id = v
}

// GetCreated returns the Created field value
func (o *Launcher) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *Launcher) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *Launcher) SetCreated(v time.Time) {
	o.Created = v
}

// GetModified returns the Modified field value
func (o *Launcher) GetModified() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value
// and a boolean to check if the value has been set.
func (o *Launcher) GetModifiedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Modified, true
}

// SetModified sets field value
func (o *Launcher) SetModified(v time.Time) {
	o.Modified = v
}

// GetOwner returns the Owner field value
func (o *Launcher) GetOwner() LauncherOwner {
	if o == nil {
		var ret LauncherOwner
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *Launcher) GetOwnerOk() (*LauncherOwner, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *Launcher) SetOwner(v LauncherOwner) {
	o.Owner = v
}

// GetName returns the Name field value
func (o *Launcher) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Launcher) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Launcher) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *Launcher) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Launcher) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *Launcher) SetDescription(v string) {
	o.Description = v
}

// GetType returns the Type field value
func (o *Launcher) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Launcher) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Launcher) SetType(v string) {
	o.Type = v
}

// GetDisabled returns the Disabled field value
func (o *Launcher) GetDisabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value
// and a boolean to check if the value has been set.
func (o *Launcher) GetDisabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Disabled, true
}

// SetDisabled sets field value
func (o *Launcher) SetDisabled(v bool) {
	o.Disabled = v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *Launcher) GetReference() LauncherReference {
	if o == nil || IsNil(o.Reference) {
		var ret LauncherReference
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Launcher) GetReferenceOk() (*LauncherReference, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *Launcher) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given LauncherReference and assigns it to the Reference field.
func (o *Launcher) SetReference(v LauncherReference) {
	o.Reference = &v
}

// GetConfig returns the Config field value
func (o *Launcher) GetConfig() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *Launcher) GetConfigOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Config, true
}

// SetConfig sets field value
func (o *Launcher) SetConfig(v string) {
	o.Config = v
}

func (o Launcher) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Launcher) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["created"] = o.Created
	toSerialize["modified"] = o.Modified
	toSerialize["owner"] = o.Owner
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	toSerialize["type"] = o.Type
	toSerialize["disabled"] = o.Disabled
	if !IsNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	toSerialize["config"] = o.Config

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Launcher) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"created",
		"modified",
		"owner",
		"name",
		"description",
		"type",
		"disabled",
		"config",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLauncher := _Launcher{}

	err = json.Unmarshal(data, &varLauncher)

	if err != nil {
		return err
	}

	*o = Launcher(varLauncher)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "created")
		delete(additionalProperties, "modified")
		delete(additionalProperties, "owner")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "type")
		delete(additionalProperties, "disabled")
		delete(additionalProperties, "reference")
		delete(additionalProperties, "config")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLauncher struct {
	value *Launcher
	isSet bool
}

func (v NullableLauncher) Get() *Launcher {
	return v.value
}

func (v *NullableLauncher) Set(val *Launcher) {
	v.value = val
	v.isSet = true
}

func (v NullableLauncher) IsSet() bool {
	return v.isSet
}

func (v *NullableLauncher) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLauncher(val *Launcher) *NullableLauncher {
	return &NullableLauncher{value: val, isSet: true}
}

func (v NullableLauncher) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLauncher) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


