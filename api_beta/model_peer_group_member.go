/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
)

// checks if the PeerGroupMember type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PeerGroupMember{}

// PeerGroupMember struct for PeerGroupMember
type PeerGroupMember struct {
	// A unique identifier for the peer group member.
	Id *string `json:"id,omitempty"`
	// The type of the peer group member.
	Type *string `json:"type,omitempty"`
	// The ID of the peer group.
	PeerGroupId *string `json:"peer_group_id,omitempty"`
	// Arbitrary key-value pairs, belonging to the peer group member.
	Attributes map[string]map[string]interface{} `json:"attributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PeerGroupMember PeerGroupMember

// NewPeerGroupMember instantiates a new PeerGroupMember object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPeerGroupMember() *PeerGroupMember {
	this := PeerGroupMember{}
	return &this
}

// NewPeerGroupMemberWithDefaults instantiates a new PeerGroupMember object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPeerGroupMemberWithDefaults() *PeerGroupMember {
	this := PeerGroupMember{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PeerGroupMember) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeerGroupMember) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PeerGroupMember) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PeerGroupMember) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PeerGroupMember) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeerGroupMember) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PeerGroupMember) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PeerGroupMember) SetType(v string) {
	o.Type = &v
}

// GetPeerGroupId returns the PeerGroupId field value if set, zero value otherwise.
func (o *PeerGroupMember) GetPeerGroupId() string {
	if o == nil || isNil(o.PeerGroupId) {
		var ret string
		return ret
	}
	return *o.PeerGroupId
}

// GetPeerGroupIdOk returns a tuple with the PeerGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeerGroupMember) GetPeerGroupIdOk() (*string, bool) {
	if o == nil || isNil(o.PeerGroupId) {
		return nil, false
	}
	return o.PeerGroupId, true
}

// HasPeerGroupId returns a boolean if a field has been set.
func (o *PeerGroupMember) HasPeerGroupId() bool {
	if o != nil && !isNil(o.PeerGroupId) {
		return true
	}

	return false
}

// SetPeerGroupId gets a reference to the given string and assigns it to the PeerGroupId field.
func (o *PeerGroupMember) SetPeerGroupId(v string) {
	o.PeerGroupId = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *PeerGroupMember) GetAttributes() map[string]map[string]interface{} {
	if o == nil || isNil(o.Attributes) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeerGroupMember) GetAttributesOk() (map[string]map[string]interface{}, bool) {
	if o == nil || isNil(o.Attributes) {
		return map[string]map[string]interface{}{}, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *PeerGroupMember) HasAttributes() bool {
	if o != nil && !isNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]map[string]interface{} and assigns it to the Attributes field.
func (o *PeerGroupMember) SetAttributes(v map[string]map[string]interface{}) {
	o.Attributes = v
}

func (o PeerGroupMember) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PeerGroupMember) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.PeerGroupId) {
		toSerialize["peer_group_id"] = o.PeerGroupId
	}
	if !isNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PeerGroupMember) UnmarshalJSON(bytes []byte) (err error) {
	varPeerGroupMember := _PeerGroupMember{}

	if err = json.Unmarshal(bytes, &varPeerGroupMember); err == nil {
	*o = PeerGroupMember(varPeerGroupMember)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "type")
		delete(additionalProperties, "peer_group_id")
		delete(additionalProperties, "attributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePeerGroupMember struct {
	value *PeerGroupMember
	isSet bool
}

func (v NullablePeerGroupMember) Get() *PeerGroupMember {
	return v.value
}

func (v *NullablePeerGroupMember) Set(val *PeerGroupMember) {
	v.value = val
	v.isSet = true
}

func (v NullablePeerGroupMember) IsSet() bool {
	return v.isSet
}

func (v *NullablePeerGroupMember) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePeerGroupMember(val *PeerGroupMember) *NullablePeerGroupMember {
	return &NullablePeerGroupMember{value: val, isSet: true}
}

func (v NullablePeerGroupMember) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePeerGroupMember) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


