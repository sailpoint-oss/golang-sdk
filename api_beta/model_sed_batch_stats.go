/*
Identity Security Cloud Beta API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
)

// checks if the SedBatchStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SedBatchStats{}

// SedBatchStats Sed Batch Stats
type SedBatchStats struct {
	// batch complete
	BatchComplete *bool `json:"batchComplete,omitempty"`
	// batch Id
	BatchId *string `json:"batchId,omitempty"`
	// discovered count
	DiscoveredCount *int64 `json:"discoveredCount,omitempty"`
	// discovery complete
	DiscoveryComplete *bool `json:"discoveryComplete,omitempty"`
	// processed count
	ProcessedCount *int64 `json:"processedCount,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SedBatchStats SedBatchStats

// NewSedBatchStats instantiates a new SedBatchStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSedBatchStats() *SedBatchStats {
	this := SedBatchStats{}
	var batchComplete bool = false
	this.BatchComplete = &batchComplete
	var discoveryComplete bool = false
	this.DiscoveryComplete = &discoveryComplete
	return &this
}

// NewSedBatchStatsWithDefaults instantiates a new SedBatchStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSedBatchStatsWithDefaults() *SedBatchStats {
	this := SedBatchStats{}
	var batchComplete bool = false
	this.BatchComplete = &batchComplete
	var discoveryComplete bool = false
	this.DiscoveryComplete = &discoveryComplete
	return &this
}

// GetBatchComplete returns the BatchComplete field value if set, zero value otherwise.
func (o *SedBatchStats) GetBatchComplete() bool {
	if o == nil || isNil(o.BatchComplete) {
		var ret bool
		return ret
	}
	return *o.BatchComplete
}

// GetBatchCompleteOk returns a tuple with the BatchComplete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SedBatchStats) GetBatchCompleteOk() (*bool, bool) {
	if o == nil || isNil(o.BatchComplete) {
		return nil, false
	}
	return o.BatchComplete, true
}

// HasBatchComplete returns a boolean if a field has been set.
func (o *SedBatchStats) HasBatchComplete() bool {
	if o != nil && !isNil(o.BatchComplete) {
		return true
	}

	return false
}

// SetBatchComplete gets a reference to the given bool and assigns it to the BatchComplete field.
func (o *SedBatchStats) SetBatchComplete(v bool) {
	o.BatchComplete = &v
}

// GetBatchId returns the BatchId field value if set, zero value otherwise.
func (o *SedBatchStats) GetBatchId() string {
	if o == nil || isNil(o.BatchId) {
		var ret string
		return ret
	}
	return *o.BatchId
}

// GetBatchIdOk returns a tuple with the BatchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SedBatchStats) GetBatchIdOk() (*string, bool) {
	if o == nil || isNil(o.BatchId) {
		return nil, false
	}
	return o.BatchId, true
}

// HasBatchId returns a boolean if a field has been set.
func (o *SedBatchStats) HasBatchId() bool {
	if o != nil && !isNil(o.BatchId) {
		return true
	}

	return false
}

// SetBatchId gets a reference to the given string and assigns it to the BatchId field.
func (o *SedBatchStats) SetBatchId(v string) {
	o.BatchId = &v
}

// GetDiscoveredCount returns the DiscoveredCount field value if set, zero value otherwise.
func (o *SedBatchStats) GetDiscoveredCount() int64 {
	if o == nil || isNil(o.DiscoveredCount) {
		var ret int64
		return ret
	}
	return *o.DiscoveredCount
}

// GetDiscoveredCountOk returns a tuple with the DiscoveredCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SedBatchStats) GetDiscoveredCountOk() (*int64, bool) {
	if o == nil || isNil(o.DiscoveredCount) {
		return nil, false
	}
	return o.DiscoveredCount, true
}

// HasDiscoveredCount returns a boolean if a field has been set.
func (o *SedBatchStats) HasDiscoveredCount() bool {
	if o != nil && !isNil(o.DiscoveredCount) {
		return true
	}

	return false
}

// SetDiscoveredCount gets a reference to the given int64 and assigns it to the DiscoveredCount field.
func (o *SedBatchStats) SetDiscoveredCount(v int64) {
	o.DiscoveredCount = &v
}

// GetDiscoveryComplete returns the DiscoveryComplete field value if set, zero value otherwise.
func (o *SedBatchStats) GetDiscoveryComplete() bool {
	if o == nil || isNil(o.DiscoveryComplete) {
		var ret bool
		return ret
	}
	return *o.DiscoveryComplete
}

// GetDiscoveryCompleteOk returns a tuple with the DiscoveryComplete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SedBatchStats) GetDiscoveryCompleteOk() (*bool, bool) {
	if o == nil || isNil(o.DiscoveryComplete) {
		return nil, false
	}
	return o.DiscoveryComplete, true
}

// HasDiscoveryComplete returns a boolean if a field has been set.
func (o *SedBatchStats) HasDiscoveryComplete() bool {
	if o != nil && !isNil(o.DiscoveryComplete) {
		return true
	}

	return false
}

// SetDiscoveryComplete gets a reference to the given bool and assigns it to the DiscoveryComplete field.
func (o *SedBatchStats) SetDiscoveryComplete(v bool) {
	o.DiscoveryComplete = &v
}

// GetProcessedCount returns the ProcessedCount field value if set, zero value otherwise.
func (o *SedBatchStats) GetProcessedCount() int64 {
	if o == nil || isNil(o.ProcessedCount) {
		var ret int64
		return ret
	}
	return *o.ProcessedCount
}

// GetProcessedCountOk returns a tuple with the ProcessedCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SedBatchStats) GetProcessedCountOk() (*int64, bool) {
	if o == nil || isNil(o.ProcessedCount) {
		return nil, false
	}
	return o.ProcessedCount, true
}

// HasProcessedCount returns a boolean if a field has been set.
func (o *SedBatchStats) HasProcessedCount() bool {
	if o != nil && !isNil(o.ProcessedCount) {
		return true
	}

	return false
}

// SetProcessedCount gets a reference to the given int64 and assigns it to the ProcessedCount field.
func (o *SedBatchStats) SetProcessedCount(v int64) {
	o.ProcessedCount = &v
}

func (o SedBatchStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SedBatchStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.BatchComplete) {
		toSerialize["batchComplete"] = o.BatchComplete
	}
	if !isNil(o.BatchId) {
		toSerialize["batchId"] = o.BatchId
	}
	if !isNil(o.DiscoveredCount) {
		toSerialize["discoveredCount"] = o.DiscoveredCount
	}
	if !isNil(o.DiscoveryComplete) {
		toSerialize["discoveryComplete"] = o.DiscoveryComplete
	}
	if !isNil(o.ProcessedCount) {
		toSerialize["processedCount"] = o.ProcessedCount
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SedBatchStats) UnmarshalJSON(bytes []byte) (err error) {
	varSedBatchStats := _SedBatchStats{}

	if err = json.Unmarshal(bytes, &varSedBatchStats); err == nil {
			*o = SedBatchStats(varSedBatchStats)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "batchComplete")
		delete(additionalProperties, "batchId")
		delete(additionalProperties, "discoveredCount")
		delete(additionalProperties, "discoveryComplete")
		delete(additionalProperties, "processedCount")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSedBatchStats struct {
	value *SedBatchStats
	isSet bool
}

func (v NullableSedBatchStats) Get() *SedBatchStats {
	return v.value
}

func (v *NullableSedBatchStats) Set(val *SedBatchStats) {
	v.value = val
	v.isSet = true
}

func (v NullableSedBatchStats) IsSet() bool {
	return v.isSet
}

func (v *NullableSedBatchStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSedBatchStats(val *SedBatchStats) *NullableSedBatchStats {
	return &NullableSedBatchStats{value: val, isSet: true}
}

func (v NullableSedBatchStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSedBatchStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


