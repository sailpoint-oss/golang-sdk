/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
)

// checks if the FormElementDynamicDataSourceConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FormElementDynamicDataSourceConfig{}

// FormElementDynamicDataSourceConfig struct for FormElementDynamicDataSourceConfig
type FormElementDynamicDataSourceConfig struct {
	// AggregationBucketField is the aggregation bucket field name
	AggregationBucketField *string `json:"aggregationBucketField,omitempty"`
	// Indices is a list of indices to use
	Indices []string `json:"indices,omitempty"`
	// ObjectType is a PreDefinedSelectOption value IDENTITY PreDefinedSelectOptionIdentity ACCESS_PROFILE PreDefinedSelectOptionAccessProfile SOURCES PreDefinedSelectOptionSources ROLE PreDefinedSelectOptionRole ENTITLEMENT PreDefinedSelectOptionEntitlement
	ObjectType *string `json:"objectType,omitempty"`
	// Query is a text
	Query *string `json:"query,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FormElementDynamicDataSourceConfig FormElementDynamicDataSourceConfig

// NewFormElementDynamicDataSourceConfig instantiates a new FormElementDynamicDataSourceConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFormElementDynamicDataSourceConfig() *FormElementDynamicDataSourceConfig {
	this := FormElementDynamicDataSourceConfig{}
	return &this
}

// NewFormElementDynamicDataSourceConfigWithDefaults instantiates a new FormElementDynamicDataSourceConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormElementDynamicDataSourceConfigWithDefaults() *FormElementDynamicDataSourceConfig {
	this := FormElementDynamicDataSourceConfig{}
	return &this
}

// GetAggregationBucketField returns the AggregationBucketField field value if set, zero value otherwise.
func (o *FormElementDynamicDataSourceConfig) GetAggregationBucketField() string {
	if o == nil || isNil(o.AggregationBucketField) {
		var ret string
		return ret
	}
	return *o.AggregationBucketField
}

// GetAggregationBucketFieldOk returns a tuple with the AggregationBucketField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormElementDynamicDataSourceConfig) GetAggregationBucketFieldOk() (*string, bool) {
	if o == nil || isNil(o.AggregationBucketField) {
		return nil, false
	}
	return o.AggregationBucketField, true
}

// HasAggregationBucketField returns a boolean if a field has been set.
func (o *FormElementDynamicDataSourceConfig) HasAggregationBucketField() bool {
	if o != nil && !isNil(o.AggregationBucketField) {
		return true
	}

	return false
}

// SetAggregationBucketField gets a reference to the given string and assigns it to the AggregationBucketField field.
func (o *FormElementDynamicDataSourceConfig) SetAggregationBucketField(v string) {
	o.AggregationBucketField = &v
}

// GetIndices returns the Indices field value if set, zero value otherwise.
func (o *FormElementDynamicDataSourceConfig) GetIndices() []string {
	if o == nil || isNil(o.Indices) {
		var ret []string
		return ret
	}
	return o.Indices
}

// GetIndicesOk returns a tuple with the Indices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormElementDynamicDataSourceConfig) GetIndicesOk() ([]string, bool) {
	if o == nil || isNil(o.Indices) {
		return nil, false
	}
	return o.Indices, true
}

// HasIndices returns a boolean if a field has been set.
func (o *FormElementDynamicDataSourceConfig) HasIndices() bool {
	if o != nil && !isNil(o.Indices) {
		return true
	}

	return false
}

// SetIndices gets a reference to the given []string and assigns it to the Indices field.
func (o *FormElementDynamicDataSourceConfig) SetIndices(v []string) {
	o.Indices = v
}

// GetObjectType returns the ObjectType field value if set, zero value otherwise.
func (o *FormElementDynamicDataSourceConfig) GetObjectType() string {
	if o == nil || isNil(o.ObjectType) {
		var ret string
		return ret
	}
	return *o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormElementDynamicDataSourceConfig) GetObjectTypeOk() (*string, bool) {
	if o == nil || isNil(o.ObjectType) {
		return nil, false
	}
	return o.ObjectType, true
}

// HasObjectType returns a boolean if a field has been set.
func (o *FormElementDynamicDataSourceConfig) HasObjectType() bool {
	if o != nil && !isNil(o.ObjectType) {
		return true
	}

	return false
}

// SetObjectType gets a reference to the given string and assigns it to the ObjectType field.
func (o *FormElementDynamicDataSourceConfig) SetObjectType(v string) {
	o.ObjectType = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *FormElementDynamicDataSourceConfig) GetQuery() string {
	if o == nil || isNil(o.Query) {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormElementDynamicDataSourceConfig) GetQueryOk() (*string, bool) {
	if o == nil || isNil(o.Query) {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *FormElementDynamicDataSourceConfig) HasQuery() bool {
	if o != nil && !isNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *FormElementDynamicDataSourceConfig) SetQuery(v string) {
	o.Query = &v
}

func (o FormElementDynamicDataSourceConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FormElementDynamicDataSourceConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AggregationBucketField) {
		toSerialize["aggregationBucketField"] = o.AggregationBucketField
	}
	if !isNil(o.Indices) {
		toSerialize["indices"] = o.Indices
	}
	if !isNil(o.ObjectType) {
		toSerialize["objectType"] = o.ObjectType
	}
	if !isNil(o.Query) {
		toSerialize["query"] = o.Query
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FormElementDynamicDataSourceConfig) UnmarshalJSON(bytes []byte) (err error) {
	varFormElementDynamicDataSourceConfig := _FormElementDynamicDataSourceConfig{}

	if err = json.Unmarshal(bytes, &varFormElementDynamicDataSourceConfig); err == nil {
	*o = FormElementDynamicDataSourceConfig(varFormElementDynamicDataSourceConfig)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "aggregationBucketField")
		delete(additionalProperties, "indices")
		delete(additionalProperties, "objectType")
		delete(additionalProperties, "query")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFormElementDynamicDataSourceConfig struct {
	value *FormElementDynamicDataSourceConfig
	isSet bool
}

func (v NullableFormElementDynamicDataSourceConfig) Get() *FormElementDynamicDataSourceConfig {
	return v.value
}

func (v *NullableFormElementDynamicDataSourceConfig) Set(val *FormElementDynamicDataSourceConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableFormElementDynamicDataSourceConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableFormElementDynamicDataSourceConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormElementDynamicDataSourceConfig(val *FormElementDynamicDataSourceConfig) *NullableFormElementDynamicDataSourceConfig {
	return &NullableFormElementDynamicDataSourceConfig{value: val, isSet: true}
}

func (v NullableFormElementDynamicDataSourceConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormElementDynamicDataSourceConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


