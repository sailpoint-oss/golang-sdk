/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
)

// checks if the WorkflowBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkflowBody{}

// WorkflowBody struct for WorkflowBody
type WorkflowBody struct {
	// The name of the workflow
	Name *string `json:"name,omitempty"`
	Owner *WorkflowBodyOwner `json:"owner,omitempty"`
	// Description of what the workflow accomplishes
	Description *string `json:"description,omitempty"`
	Definition *WorkflowDefinition `json:"definition,omitempty"`
	// Enable or disable the workflow.  Workflows cannot be created in an enabled state.
	Enabled *bool `json:"enabled,omitempty"`
	Trigger *WorkflowTrigger `json:"trigger,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _WorkflowBody WorkflowBody

// NewWorkflowBody instantiates a new WorkflowBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkflowBody() *WorkflowBody {
	this := WorkflowBody{}
	var enabled bool = false
	this.Enabled = &enabled
	return &this
}

// NewWorkflowBodyWithDefaults instantiates a new WorkflowBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkflowBodyWithDefaults() *WorkflowBody {
	this := WorkflowBody{}
	var enabled bool = false
	this.Enabled = &enabled
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *WorkflowBody) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowBody) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *WorkflowBody) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *WorkflowBody) SetName(v string) {
	o.Name = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *WorkflowBody) GetOwner() WorkflowBodyOwner {
	if o == nil || isNil(o.Owner) {
		var ret WorkflowBodyOwner
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowBody) GetOwnerOk() (*WorkflowBodyOwner, bool) {
	if o == nil || isNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *WorkflowBody) HasOwner() bool {
	if o != nil && !isNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given WorkflowBodyOwner and assigns it to the Owner field.
func (o *WorkflowBody) SetOwner(v WorkflowBodyOwner) {
	o.Owner = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *WorkflowBody) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowBody) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *WorkflowBody) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *WorkflowBody) SetDescription(v string) {
	o.Description = &v
}

// GetDefinition returns the Definition field value if set, zero value otherwise.
func (o *WorkflowBody) GetDefinition() WorkflowDefinition {
	if o == nil || isNil(o.Definition) {
		var ret WorkflowDefinition
		return ret
	}
	return *o.Definition
}

// GetDefinitionOk returns a tuple with the Definition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowBody) GetDefinitionOk() (*WorkflowDefinition, bool) {
	if o == nil || isNil(o.Definition) {
		return nil, false
	}
	return o.Definition, true
}

// HasDefinition returns a boolean if a field has been set.
func (o *WorkflowBody) HasDefinition() bool {
	if o != nil && !isNil(o.Definition) {
		return true
	}

	return false
}

// SetDefinition gets a reference to the given WorkflowDefinition and assigns it to the Definition field.
func (o *WorkflowBody) SetDefinition(v WorkflowDefinition) {
	o.Definition = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *WorkflowBody) GetEnabled() bool {
	if o == nil || isNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowBody) GetEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *WorkflowBody) HasEnabled() bool {
	if o != nil && !isNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *WorkflowBody) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetTrigger returns the Trigger field value if set, zero value otherwise.
func (o *WorkflowBody) GetTrigger() WorkflowTrigger {
	if o == nil || isNil(o.Trigger) {
		var ret WorkflowTrigger
		return ret
	}
	return *o.Trigger
}

// GetTriggerOk returns a tuple with the Trigger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowBody) GetTriggerOk() (*WorkflowTrigger, bool) {
	if o == nil || isNil(o.Trigger) {
		return nil, false
	}
	return o.Trigger, true
}

// HasTrigger returns a boolean if a field has been set.
func (o *WorkflowBody) HasTrigger() bool {
	if o != nil && !isNil(o.Trigger) {
		return true
	}

	return false
}

// SetTrigger gets a reference to the given WorkflowTrigger and assigns it to the Trigger field.
func (o *WorkflowBody) SetTrigger(v WorkflowTrigger) {
	o.Trigger = &v
}

func (o WorkflowBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkflowBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.Definition) {
		toSerialize["definition"] = o.Definition
	}
	if !isNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !isNil(o.Trigger) {
		toSerialize["trigger"] = o.Trigger
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WorkflowBody) UnmarshalJSON(bytes []byte) (err error) {
	varWorkflowBody := _WorkflowBody{}

	if err = json.Unmarshal(bytes, &varWorkflowBody); err == nil {
	*o = WorkflowBody(varWorkflowBody)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "owner")
		delete(additionalProperties, "description")
		delete(additionalProperties, "definition")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "trigger")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWorkflowBody struct {
	value *WorkflowBody
	isSet bool
}

func (v NullableWorkflowBody) Get() *WorkflowBody {
	return v.value
}

func (v *NullableWorkflowBody) Set(val *WorkflowBody) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowBody) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowBody(val *WorkflowBody) *NullableWorkflowBody {
	return &NullableWorkflowBody{value: val, isSet: true}
}

func (v NullableWorkflowBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


