/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"fmt"
)

// CertificationPhase The current phase of the campaign. * `STAGED`: The campaign is waiting to be activated. * `ACTIVE`: The campaign is active. * `SIGNED`: The reviewer has signed off on the campaign, and it is considered complete. 
type CertificationPhase string

// List of CertificationPhase
const (
	CERTIFICATIONPHASE_STAGED CertificationPhase = "STAGED"
	CERTIFICATIONPHASE_ACTIVE CertificationPhase = "ACTIVE"
	CERTIFICATIONPHASE_SIGNED CertificationPhase = "SIGNED"
)

// All allowed values of CertificationPhase enum
var AllowedCertificationPhaseEnumValues = []CertificationPhase{
	"STAGED",
	"ACTIVE",
	"SIGNED",
}

func (v *CertificationPhase) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CertificationPhase(value)
	for _, existing := range AllowedCertificationPhaseEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CertificationPhase", value)
}

// NewCertificationPhaseFromValue returns a pointer to a valid CertificationPhase
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCertificationPhaseFromValue(v string) (*CertificationPhase, error) {
	ev := CertificationPhase(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CertificationPhase: valid values are %v", v, AllowedCertificationPhaseEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CertificationPhase) IsValid() bool {
	for _, existing := range AllowedCertificationPhaseEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CertificationPhase value
func (v CertificationPhase) Ptr() *CertificationPhase {
	return &v
}

type NullableCertificationPhase struct {
	value *CertificationPhase
	isSet bool
}

func (v NullableCertificationPhase) Get() *CertificationPhase {
	return v.value
}

func (v *NullableCertificationPhase) Set(val *CertificationPhase) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificationPhase) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificationPhase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificationPhase(val *CertificationPhase) *NullableCertificationPhase {
	return &NullableCertificationPhase{value: val, isSet: true}
}

func (v NullableCertificationPhase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificationPhase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

