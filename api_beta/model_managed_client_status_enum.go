/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"fmt"
)

// ManagedClientStatusEnum the model 'ManagedClientStatusEnum'
type ManagedClientStatusEnum string

// List of ManagedClientStatusEnum
const (
	MANAGEDCLIENTSTATUSENUM_NORMAL ManagedClientStatusEnum = "NORMAL"
	MANAGEDCLIENTSTATUSENUM_UNDEFINED ManagedClientStatusEnum = "UNDEFINED"
	MANAGEDCLIENTSTATUSENUM_NOT_CONFIGURED ManagedClientStatusEnum = "NOT_CONFIGURED"
	MANAGEDCLIENTSTATUSENUM_CONFIGURING ManagedClientStatusEnum = "CONFIGURING"
	MANAGEDCLIENTSTATUSENUM_WARNING ManagedClientStatusEnum = "WARNING"
	MANAGEDCLIENTSTATUSENUM_ERROR ManagedClientStatusEnum = "ERROR"
	MANAGEDCLIENTSTATUSENUM_FAILED ManagedClientStatusEnum = "FAILED"
)

// All allowed values of ManagedClientStatusEnum enum
var AllowedManagedClientStatusEnumEnumValues = []ManagedClientStatusEnum{
	"NORMAL",
	"UNDEFINED",
	"NOT_CONFIGURED",
	"CONFIGURING",
	"WARNING",
	"ERROR",
	"FAILED",
}

func (v *ManagedClientStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ManagedClientStatusEnum(value)
	for _, existing := range AllowedManagedClientStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ManagedClientStatusEnum", value)
}

// NewManagedClientStatusEnumFromValue returns a pointer to a valid ManagedClientStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewManagedClientStatusEnumFromValue(v string) (*ManagedClientStatusEnum, error) {
	ev := ManagedClientStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ManagedClientStatusEnum: valid values are %v", v, AllowedManagedClientStatusEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ManagedClientStatusEnum) IsValid() bool {
	for _, existing := range AllowedManagedClientStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ManagedClientStatusEnum value
func (v ManagedClientStatusEnum) Ptr() *ManagedClientStatusEnum {
	return &v
}

type NullableManagedClientStatusEnum struct {
	value *ManagedClientStatusEnum
	isSet bool
}

func (v NullableManagedClientStatusEnum) Get() *ManagedClientStatusEnum {
	return v.value
}

func (v *NullableManagedClientStatusEnum) Set(val *ManagedClientStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableManagedClientStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableManagedClientStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagedClientStatusEnum(val *ManagedClientStatusEnum) *NullableManagedClientStatusEnum {
	return &NullableManagedClientStatusEnum{value: val, isSet: true}
}

func (v NullableManagedClientStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagedClientStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

