/*
Identity Security Cloud Beta API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"fmt"
)

// InvocationStatusType Defines the Invocation type.  **TEST** The trigger was invocated as a test, either via the test subscription button in the UI or via the start test invocation API.  **REAL_TIME** The trigger subscription is live and was invocated by a real event in IdentityNow.
type InvocationStatusType string

// List of InvocationStatusType
const (
	INVOCATIONSTATUSTYPE_TEST InvocationStatusType = "TEST"
	INVOCATIONSTATUSTYPE_REAL_TIME InvocationStatusType = "REAL_TIME"
)

// All allowed values of InvocationStatusType enum
var AllowedInvocationStatusTypeEnumValues = []InvocationStatusType{
	"TEST",
	"REAL_TIME",
}

func (v *InvocationStatusType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InvocationStatusType(value)
	for _, existing := range AllowedInvocationStatusTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InvocationStatusType", value)
}

// NewInvocationStatusTypeFromValue returns a pointer to a valid InvocationStatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInvocationStatusTypeFromValue(v string) (*InvocationStatusType, error) {
	ev := InvocationStatusType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InvocationStatusType: valid values are %v", v, AllowedInvocationStatusTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InvocationStatusType) IsValid() bool {
	for _, existing := range AllowedInvocationStatusTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InvocationStatusType value
func (v InvocationStatusType) Ptr() *InvocationStatusType {
	return &v
}

type NullableInvocationStatusType struct {
	value *InvocationStatusType
	isSet bool
}

func (v NullableInvocationStatusType) Get() *InvocationStatusType {
	return v.value
}

func (v *NullableInvocationStatusType) Set(val *InvocationStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableInvocationStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableInvocationStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvocationStatusType(val *InvocationStatusType) *NullableInvocationStatusType {
	return &NullableInvocationStatusType{value: val, isSet: true}
}

func (v NullableInvocationStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvocationStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

