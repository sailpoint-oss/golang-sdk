/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the SourceCreated type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SourceCreated{}

// SourceCreated struct for SourceCreated
type SourceCreated struct {
	// The unique ID of the source.
	Id string `json:"id"`
	// Human friendly name of the source.
	Name string `json:"name"`
	// The connection type.
	Type string `json:"type"`
	// The date and time the source was created.
	Created time.Time `json:"created"`
	// The connector type used to connect to the source.
	Connector string `json:"connector"`
	Actor SourceCreatedActor `json:"actor"`
	AdditionalProperties map[string]interface{}
}

type _SourceCreated SourceCreated

// NewSourceCreated instantiates a new SourceCreated object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceCreated(id string, name string, type_ string, created time.Time, connector string, actor SourceCreatedActor) *SourceCreated {
	this := SourceCreated{}
	this.Id = id
	this.Name = name
	this.Type = type_
	this.Created = created
	this.Connector = connector
	this.Actor = actor
	return &this
}

// NewSourceCreatedWithDefaults instantiates a new SourceCreated object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceCreatedWithDefaults() *SourceCreated {
	this := SourceCreated{}
	return &this
}

// GetId returns the Id field value
func (o *SourceCreated) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SourceCreated) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SourceCreated) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *SourceCreated) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SourceCreated) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SourceCreated) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *SourceCreated) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SourceCreated) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SourceCreated) SetType(v string) {
	o.Type = v
}

// GetCreated returns the Created field value
func (o *SourceCreated) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *SourceCreated) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *SourceCreated) SetCreated(v time.Time) {
	o.Created = v
}

// GetConnector returns the Connector field value
func (o *SourceCreated) GetConnector() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Connector
}

// GetConnectorOk returns a tuple with the Connector field value
// and a boolean to check if the value has been set.
func (o *SourceCreated) GetConnectorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Connector, true
}

// SetConnector sets field value
func (o *SourceCreated) SetConnector(v string) {
	o.Connector = v
}

// GetActor returns the Actor field value
func (o *SourceCreated) GetActor() SourceCreatedActor {
	if o == nil {
		var ret SourceCreatedActor
		return ret
	}

	return o.Actor
}

// GetActorOk returns a tuple with the Actor field value
// and a boolean to check if the value has been set.
func (o *SourceCreated) GetActorOk() (*SourceCreatedActor, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Actor, true
}

// SetActor sets field value
func (o *SourceCreated) SetActor(v SourceCreatedActor) {
	o.Actor = v
}

func (o SourceCreated) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SourceCreated) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	toSerialize["created"] = o.Created
	toSerialize["connector"] = o.Connector
	toSerialize["actor"] = o.Actor

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SourceCreated) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"type",
		"created",
		"connector",
		"actor",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSourceCreated := _SourceCreated{}

	if err = json.Unmarshal(bytes, &varSourceCreated); err == nil {
	*o = SourceCreated(varSourceCreated)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "type")
		delete(additionalProperties, "created")
		delete(additionalProperties, "connector")
		delete(additionalProperties, "actor")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSourceCreated struct {
	value *SourceCreated
	isSet bool
}

func (v NullableSourceCreated) Get() *SourceCreated {
	return v.value
}

func (v *NullableSourceCreated) Set(val *SourceCreated) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceCreated) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceCreated) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceCreated(val *SourceCreated) *NullableSourceCreated {
	return &NullableSourceCreated{value: val, isSet: true}
}

func (v NullableSourceCreated) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceCreated) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


