/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
)

// checks if the Reassignment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Reassignment{}

// Reassignment struct for Reassignment
type Reassignment struct {
	From *CertificationReference `json:"from,omitempty"`
	// Comments from the previous reviewer.
	Comment *string `json:"comment,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Reassignment Reassignment

// NewReassignment instantiates a new Reassignment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReassignment() *Reassignment {
	this := Reassignment{}
	return &this
}

// NewReassignmentWithDefaults instantiates a new Reassignment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReassignmentWithDefaults() *Reassignment {
	this := Reassignment{}
	return &this
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *Reassignment) GetFrom() CertificationReference {
	if o == nil || isNil(o.From) {
		var ret CertificationReference
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reassignment) GetFromOk() (*CertificationReference, bool) {
	if o == nil || isNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *Reassignment) HasFrom() bool {
	if o != nil && !isNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given CertificationReference and assigns it to the From field.
func (o *Reassignment) SetFrom(v CertificationReference) {
	o.From = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *Reassignment) GetComment() string {
	if o == nil || isNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reassignment) GetCommentOk() (*string, bool) {
	if o == nil || isNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *Reassignment) HasComment() bool {
	if o != nil && !isNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *Reassignment) SetComment(v string) {
	o.Comment = &v
}

func (o Reassignment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Reassignment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.From) {
		toSerialize["from"] = o.From
	}
	if !isNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Reassignment) UnmarshalJSON(bytes []byte) (err error) {
	varReassignment := _Reassignment{}

	if err = json.Unmarshal(bytes, &varReassignment); err == nil {
	*o = Reassignment(varReassignment)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "from")
		delete(additionalProperties, "comment")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableReassignment struct {
	value *Reassignment
	isSet bool
}

func (v NullableReassignment) Get() *Reassignment {
	return v.value
}

func (v *NullableReassignment) Set(val *Reassignment) {
	v.value = val
	v.isSet = true
}

func (v NullableReassignment) IsSet() bool {
	return v.isSet
}

func (v *NullableReassignment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReassignment(val *Reassignment) *NullableReassignment {
	return &NullableReassignment{value: val, isSet: true}
}

func (v NullableReassignment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReassignment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


