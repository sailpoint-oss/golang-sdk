/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"fmt"
)

// checks if the RoleCriteriaKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoleCriteriaKey{}

// RoleCriteriaKey Refers to a specific Identity attribute, Account attibute, or Entitlement used in Role membership criteria
type RoleCriteriaKey struct {
	Type RoleCriteriaKeyType `json:"type"`
	// The name of the attribute or entitlement to which the associated criteria applies.
	Property string `json:"property"`
	// ID of the Source from which an account attribute or entitlement is drawn. Required if type is ACCOUNT or ENTITLEMENT
	SourceId NullableString `json:"sourceId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RoleCriteriaKey RoleCriteriaKey

// NewRoleCriteriaKey instantiates a new RoleCriteriaKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleCriteriaKey(type_ RoleCriteriaKeyType, property string) *RoleCriteriaKey {
	this := RoleCriteriaKey{}
	this.Type = type_
	this.Property = property
	return &this
}

// NewRoleCriteriaKeyWithDefaults instantiates a new RoleCriteriaKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleCriteriaKeyWithDefaults() *RoleCriteriaKey {
	this := RoleCriteriaKey{}
	return &this
}

// GetType returns the Type field value
func (o *RoleCriteriaKey) GetType() RoleCriteriaKeyType {
	if o == nil {
		var ret RoleCriteriaKeyType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RoleCriteriaKey) GetTypeOk() (*RoleCriteriaKeyType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RoleCriteriaKey) SetType(v RoleCriteriaKeyType) {
	o.Type = v
}

// GetProperty returns the Property field value
func (o *RoleCriteriaKey) GetProperty() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Property
}

// GetPropertyOk returns a tuple with the Property field value
// and a boolean to check if the value has been set.
func (o *RoleCriteriaKey) GetPropertyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Property, true
}

// SetProperty sets field value
func (o *RoleCriteriaKey) SetProperty(v string) {
	o.Property = v
}

// GetSourceId returns the SourceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RoleCriteriaKey) GetSourceId() string {
	if o == nil || isNil(o.SourceId.Get()) {
		var ret string
		return ret
	}
	return *o.SourceId.Get()
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RoleCriteriaKey) GetSourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceId.Get(), o.SourceId.IsSet()
}

// HasSourceId returns a boolean if a field has been set.
func (o *RoleCriteriaKey) HasSourceId() bool {
	if o != nil && o.SourceId.IsSet() {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given NullableString and assigns it to the SourceId field.
func (o *RoleCriteriaKey) SetSourceId(v string) {
	o.SourceId.Set(&v)
}
// SetSourceIdNil sets the value for SourceId to be an explicit nil
func (o *RoleCriteriaKey) SetSourceIdNil() {
	o.SourceId.Set(nil)
}

// UnsetSourceId ensures that no value is present for SourceId, not even an explicit nil
func (o *RoleCriteriaKey) UnsetSourceId() {
	o.SourceId.Unset()
}

func (o RoleCriteriaKey) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoleCriteriaKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["property"] = o.Property
	if o.SourceId.IsSet() {
		toSerialize["sourceId"] = o.SourceId.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RoleCriteriaKey) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"property",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRoleCriteriaKey := _RoleCriteriaKey{}

	if err = json.Unmarshal(bytes, &varRoleCriteriaKey); err == nil {
	*o = RoleCriteriaKey(varRoleCriteriaKey)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "property")
		delete(additionalProperties, "sourceId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRoleCriteriaKey struct {
	value *RoleCriteriaKey
	isSet bool
}

func (v NullableRoleCriteriaKey) Get() *RoleCriteriaKey {
	return v.value
}

func (v *NullableRoleCriteriaKey) Set(val *RoleCriteriaKey) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleCriteriaKey) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleCriteriaKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleCriteriaKey(val *RoleCriteriaKey) *NullableRoleCriteriaKey {
	return &NullableRoleCriteriaKey{value: val, isSet: true}
}

func (v NullableRoleCriteriaKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleCriteriaKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


