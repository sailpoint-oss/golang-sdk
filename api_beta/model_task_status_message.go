/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"fmt"
)

// checks if the TaskStatusMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskStatusMessage{}

// TaskStatusMessage TaskStatus Message
type TaskStatusMessage struct {
	// Type of the message
	Type string `json:"type"`
	LocalizedText LocalizedMessage `json:"localizedText"`
	// Key of the message
	Key string `json:"key"`
	// Message parameters for internationalization
	Parameters []map[string]interface{} `json:"parameters"`
	AdditionalProperties map[string]interface{}
}

type _TaskStatusMessage TaskStatusMessage

// NewTaskStatusMessage instantiates a new TaskStatusMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskStatusMessage(type_ string, localizedText LocalizedMessage, key string, parameters []map[string]interface{}) *TaskStatusMessage {
	this := TaskStatusMessage{}
	this.Type = type_
	this.LocalizedText = localizedText
	this.Key = key
	this.Parameters = parameters
	return &this
}

// NewTaskStatusMessageWithDefaults instantiates a new TaskStatusMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskStatusMessageWithDefaults() *TaskStatusMessage {
	this := TaskStatusMessage{}
	return &this
}

// GetType returns the Type field value
func (o *TaskStatusMessage) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TaskStatusMessage) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TaskStatusMessage) SetType(v string) {
	o.Type = v
}

// GetLocalizedText returns the LocalizedText field value
func (o *TaskStatusMessage) GetLocalizedText() LocalizedMessage {
	if o == nil {
		var ret LocalizedMessage
		return ret
	}

	return o.LocalizedText
}

// GetLocalizedTextOk returns a tuple with the LocalizedText field value
// and a boolean to check if the value has been set.
func (o *TaskStatusMessage) GetLocalizedTextOk() (*LocalizedMessage, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LocalizedText, true
}

// SetLocalizedText sets field value
func (o *TaskStatusMessage) SetLocalizedText(v LocalizedMessage) {
	o.LocalizedText = v
}

// GetKey returns the Key field value
func (o *TaskStatusMessage) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *TaskStatusMessage) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *TaskStatusMessage) SetKey(v string) {
	o.Key = v
}

// GetParameters returns the Parameters field value
func (o *TaskStatusMessage) GetParameters() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value
// and a boolean to check if the value has been set.
func (o *TaskStatusMessage) GetParametersOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Parameters, true
}

// SetParameters sets field value
func (o *TaskStatusMessage) SetParameters(v []map[string]interface{}) {
	o.Parameters = v
}

func (o TaskStatusMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskStatusMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["localizedText"] = o.LocalizedText
	toSerialize["key"] = o.Key
	toSerialize["parameters"] = o.Parameters

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TaskStatusMessage) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"localizedText",
		"key",
		"parameters",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTaskStatusMessage := _TaskStatusMessage{}

	if err = json.Unmarshal(bytes, &varTaskStatusMessage); err == nil {
	*o = TaskStatusMessage(varTaskStatusMessage)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "localizedText")
		delete(additionalProperties, "key")
		delete(additionalProperties, "parameters")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTaskStatusMessage struct {
	value *TaskStatusMessage
	isSet bool
}

func (v NullableTaskStatusMessage) Get() *TaskStatusMessage {
	return v.value
}

func (v *NullableTaskStatusMessage) Set(val *TaskStatusMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskStatusMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskStatusMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskStatusMessage(val *TaskStatusMessage) *NullableTaskStatusMessage {
	return &NullableTaskStatusMessage{value: val, isSet: true}
}

func (v NullableTaskStatusMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskStatusMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


