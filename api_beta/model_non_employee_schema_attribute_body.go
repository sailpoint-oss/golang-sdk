/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"fmt"
)

// checks if the NonEmployeeSchemaAttributeBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NonEmployeeSchemaAttributeBody{}

// NonEmployeeSchemaAttributeBody struct for NonEmployeeSchemaAttributeBody
type NonEmployeeSchemaAttributeBody struct {
	// Type of the attribute. Only type 'TEXT' is supported for custom attributes.
	Type string `json:"type"`
	// Label displayed on the UI for this schema attribute.
	Label string `json:"label"`
	// The technical name of the attribute. Must be unique per source.
	TechnicalName string `json:"technicalName"`
	// help text displayed by UI.
	HelpText *string `json:"helpText,omitempty"`
	// Hint text that fills UI box.
	Placeholder *string `json:"placeholder,omitempty"`
	// If true, the schema attribute is required for all non-employees in the source
	Required *bool `json:"required,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NonEmployeeSchemaAttributeBody NonEmployeeSchemaAttributeBody

// NewNonEmployeeSchemaAttributeBody instantiates a new NonEmployeeSchemaAttributeBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNonEmployeeSchemaAttributeBody(type_ string, label string, technicalName string) *NonEmployeeSchemaAttributeBody {
	this := NonEmployeeSchemaAttributeBody{}
	this.Type = type_
	this.Label = label
	this.TechnicalName = technicalName
	return &this
}

// NewNonEmployeeSchemaAttributeBodyWithDefaults instantiates a new NonEmployeeSchemaAttributeBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNonEmployeeSchemaAttributeBodyWithDefaults() *NonEmployeeSchemaAttributeBody {
	this := NonEmployeeSchemaAttributeBody{}
	return &this
}

// GetType returns the Type field value
func (o *NonEmployeeSchemaAttributeBody) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *NonEmployeeSchemaAttributeBody) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *NonEmployeeSchemaAttributeBody) SetType(v string) {
	o.Type = v
}

// GetLabel returns the Label field value
func (o *NonEmployeeSchemaAttributeBody) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *NonEmployeeSchemaAttributeBody) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *NonEmployeeSchemaAttributeBody) SetLabel(v string) {
	o.Label = v
}

// GetTechnicalName returns the TechnicalName field value
func (o *NonEmployeeSchemaAttributeBody) GetTechnicalName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TechnicalName
}

// GetTechnicalNameOk returns a tuple with the TechnicalName field value
// and a boolean to check if the value has been set.
func (o *NonEmployeeSchemaAttributeBody) GetTechnicalNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TechnicalName, true
}

// SetTechnicalName sets field value
func (o *NonEmployeeSchemaAttributeBody) SetTechnicalName(v string) {
	o.TechnicalName = v
}

// GetHelpText returns the HelpText field value if set, zero value otherwise.
func (o *NonEmployeeSchemaAttributeBody) GetHelpText() string {
	if o == nil || isNil(o.HelpText) {
		var ret string
		return ret
	}
	return *o.HelpText
}

// GetHelpTextOk returns a tuple with the HelpText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonEmployeeSchemaAttributeBody) GetHelpTextOk() (*string, bool) {
	if o == nil || isNil(o.HelpText) {
		return nil, false
	}
	return o.HelpText, true
}

// HasHelpText returns a boolean if a field has been set.
func (o *NonEmployeeSchemaAttributeBody) HasHelpText() bool {
	if o != nil && !isNil(o.HelpText) {
		return true
	}

	return false
}

// SetHelpText gets a reference to the given string and assigns it to the HelpText field.
func (o *NonEmployeeSchemaAttributeBody) SetHelpText(v string) {
	o.HelpText = &v
}

// GetPlaceholder returns the Placeholder field value if set, zero value otherwise.
func (o *NonEmployeeSchemaAttributeBody) GetPlaceholder() string {
	if o == nil || isNil(o.Placeholder) {
		var ret string
		return ret
	}
	return *o.Placeholder
}

// GetPlaceholderOk returns a tuple with the Placeholder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonEmployeeSchemaAttributeBody) GetPlaceholderOk() (*string, bool) {
	if o == nil || isNil(o.Placeholder) {
		return nil, false
	}
	return o.Placeholder, true
}

// HasPlaceholder returns a boolean if a field has been set.
func (o *NonEmployeeSchemaAttributeBody) HasPlaceholder() bool {
	if o != nil && !isNil(o.Placeholder) {
		return true
	}

	return false
}

// SetPlaceholder gets a reference to the given string and assigns it to the Placeholder field.
func (o *NonEmployeeSchemaAttributeBody) SetPlaceholder(v string) {
	o.Placeholder = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *NonEmployeeSchemaAttributeBody) GetRequired() bool {
	if o == nil || isNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonEmployeeSchemaAttributeBody) GetRequiredOk() (*bool, bool) {
	if o == nil || isNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *NonEmployeeSchemaAttributeBody) HasRequired() bool {
	if o != nil && !isNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *NonEmployeeSchemaAttributeBody) SetRequired(v bool) {
	o.Required = &v
}

func (o NonEmployeeSchemaAttributeBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NonEmployeeSchemaAttributeBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["label"] = o.Label
	toSerialize["technicalName"] = o.TechnicalName
	if !isNil(o.HelpText) {
		toSerialize["helpText"] = o.HelpText
	}
	if !isNil(o.Placeholder) {
		toSerialize["placeholder"] = o.Placeholder
	}
	if !isNil(o.Required) {
		toSerialize["required"] = o.Required
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NonEmployeeSchemaAttributeBody) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"label",
		"technicalName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNonEmployeeSchemaAttributeBody := _NonEmployeeSchemaAttributeBody{}

	if err = json.Unmarshal(bytes, &varNonEmployeeSchemaAttributeBody); err == nil {
	*o = NonEmployeeSchemaAttributeBody(varNonEmployeeSchemaAttributeBody)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "label")
		delete(additionalProperties, "technicalName")
		delete(additionalProperties, "helpText")
		delete(additionalProperties, "placeholder")
		delete(additionalProperties, "required")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNonEmployeeSchemaAttributeBody struct {
	value *NonEmployeeSchemaAttributeBody
	isSet bool
}

func (v NullableNonEmployeeSchemaAttributeBody) Get() *NonEmployeeSchemaAttributeBody {
	return v.value
}

func (v *NullableNonEmployeeSchemaAttributeBody) Set(val *NonEmployeeSchemaAttributeBody) {
	v.value = val
	v.isSet = true
}

func (v NullableNonEmployeeSchemaAttributeBody) IsSet() bool {
	return v.isSet
}

func (v *NullableNonEmployeeSchemaAttributeBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNonEmployeeSchemaAttributeBody(val *NonEmployeeSchemaAttributeBody) *NullableNonEmployeeSchemaAttributeBody {
	return &NullableNonEmployeeSchemaAttributeBody{value: val, isSet: true}
}

func (v NullableNonEmployeeSchemaAttributeBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNonEmployeeSchemaAttributeBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


