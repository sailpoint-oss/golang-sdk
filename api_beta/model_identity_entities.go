/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
)

// checks if the IdentityEntities type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdentityEntities{}

// IdentityEntities struct for IdentityEntities
type IdentityEntities struct {
	IdentityEntity *IdentityEntitiesIdentityEntity `json:"identityEntity,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IdentityEntities IdentityEntities

// NewIdentityEntities instantiates a new IdentityEntities object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityEntities() *IdentityEntities {
	this := IdentityEntities{}
	return &this
}

// NewIdentityEntitiesWithDefaults instantiates a new IdentityEntities object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityEntitiesWithDefaults() *IdentityEntities {
	this := IdentityEntities{}
	return &this
}

// GetIdentityEntity returns the IdentityEntity field value if set, zero value otherwise.
func (o *IdentityEntities) GetIdentityEntity() IdentityEntitiesIdentityEntity {
	if o == nil || isNil(o.IdentityEntity) {
		var ret IdentityEntitiesIdentityEntity
		return ret
	}
	return *o.IdentityEntity
}

// GetIdentityEntityOk returns a tuple with the IdentityEntity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityEntities) GetIdentityEntityOk() (*IdentityEntitiesIdentityEntity, bool) {
	if o == nil || isNil(o.IdentityEntity) {
		return nil, false
	}
	return o.IdentityEntity, true
}

// HasIdentityEntity returns a boolean if a field has been set.
func (o *IdentityEntities) HasIdentityEntity() bool {
	if o != nil && !isNil(o.IdentityEntity) {
		return true
	}

	return false
}

// SetIdentityEntity gets a reference to the given IdentityEntitiesIdentityEntity and assigns it to the IdentityEntity field.
func (o *IdentityEntities) SetIdentityEntity(v IdentityEntitiesIdentityEntity) {
	o.IdentityEntity = &v
}

func (o IdentityEntities) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdentityEntities) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.IdentityEntity) {
		toSerialize["identityEntity"] = o.IdentityEntity
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IdentityEntities) UnmarshalJSON(bytes []byte) (err error) {
	varIdentityEntities := _IdentityEntities{}

	if err = json.Unmarshal(bytes, &varIdentityEntities); err == nil {
	*o = IdentityEntities(varIdentityEntities)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "identityEntity")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIdentityEntities struct {
	value *IdentityEntities
	isSet bool
}

func (v NullableIdentityEntities) Get() *IdentityEntities {
	return v.value
}

func (v *NullableIdentityEntities) Set(val *IdentityEntities) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityEntities) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityEntities) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityEntities(val *IdentityEntities) *NullableIdentityEntities {
	return &NullableIdentityEntities{value: val, isSet: true}
}

func (v NullableIdentityEntities) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityEntities) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


