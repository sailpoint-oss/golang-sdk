/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
)

// checks if the RoleAssignmentDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoleAssignmentDto{}

// RoleAssignmentDto struct for RoleAssignmentDto
type RoleAssignmentDto struct {
	// Assignment Id
	Id *string `json:"id,omitempty"`
	Role *BaseReferenceDto `json:"role,omitempty"`
	// Comments added by the user when the assignment was made
	Comments *string `json:"comments,omitempty"`
	// Source describing how this assignment was made
	AssignmentSource *string `json:"assignmentSource,omitempty"`
	Assigner *BaseReferenceDto `json:"assigner,omitempty"`
	// Dimensions assigned related to this role
	AssignedDimensions []BaseReferenceDto `json:"assignedDimensions,omitempty"`
	AccessRequestContext *AccessRequestContext `json:"accessRequestContext,omitempty"`
	AccountTargets []RoleTargetDto `json:"accountTargets,omitempty"`
	// Date that the assignment will be removed
	RemoveDate *string `json:"removeDate,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RoleAssignmentDto RoleAssignmentDto

// NewRoleAssignmentDto instantiates a new RoleAssignmentDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleAssignmentDto() *RoleAssignmentDto {
	this := RoleAssignmentDto{}
	return &this
}

// NewRoleAssignmentDtoWithDefaults instantiates a new RoleAssignmentDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleAssignmentDtoWithDefaults() *RoleAssignmentDto {
	this := RoleAssignmentDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RoleAssignmentDto) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleAssignmentDto) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RoleAssignmentDto) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RoleAssignmentDto) SetId(v string) {
	o.Id = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *RoleAssignmentDto) GetRole() BaseReferenceDto {
	if o == nil || isNil(o.Role) {
		var ret BaseReferenceDto
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleAssignmentDto) GetRoleOk() (*BaseReferenceDto, bool) {
	if o == nil || isNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *RoleAssignmentDto) HasRole() bool {
	if o != nil && !isNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given BaseReferenceDto and assigns it to the Role field.
func (o *RoleAssignmentDto) SetRole(v BaseReferenceDto) {
	o.Role = &v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *RoleAssignmentDto) GetComments() string {
	if o == nil || isNil(o.Comments) {
		var ret string
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleAssignmentDto) GetCommentsOk() (*string, bool) {
	if o == nil || isNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *RoleAssignmentDto) HasComments() bool {
	if o != nil && !isNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given string and assigns it to the Comments field.
func (o *RoleAssignmentDto) SetComments(v string) {
	o.Comments = &v
}

// GetAssignmentSource returns the AssignmentSource field value if set, zero value otherwise.
func (o *RoleAssignmentDto) GetAssignmentSource() string {
	if o == nil || isNil(o.AssignmentSource) {
		var ret string
		return ret
	}
	return *o.AssignmentSource
}

// GetAssignmentSourceOk returns a tuple with the AssignmentSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleAssignmentDto) GetAssignmentSourceOk() (*string, bool) {
	if o == nil || isNil(o.AssignmentSource) {
		return nil, false
	}
	return o.AssignmentSource, true
}

// HasAssignmentSource returns a boolean if a field has been set.
func (o *RoleAssignmentDto) HasAssignmentSource() bool {
	if o != nil && !isNil(o.AssignmentSource) {
		return true
	}

	return false
}

// SetAssignmentSource gets a reference to the given string and assigns it to the AssignmentSource field.
func (o *RoleAssignmentDto) SetAssignmentSource(v string) {
	o.AssignmentSource = &v
}

// GetAssigner returns the Assigner field value if set, zero value otherwise.
func (o *RoleAssignmentDto) GetAssigner() BaseReferenceDto {
	if o == nil || isNil(o.Assigner) {
		var ret BaseReferenceDto
		return ret
	}
	return *o.Assigner
}

// GetAssignerOk returns a tuple with the Assigner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleAssignmentDto) GetAssignerOk() (*BaseReferenceDto, bool) {
	if o == nil || isNil(o.Assigner) {
		return nil, false
	}
	return o.Assigner, true
}

// HasAssigner returns a boolean if a field has been set.
func (o *RoleAssignmentDto) HasAssigner() bool {
	if o != nil && !isNil(o.Assigner) {
		return true
	}

	return false
}

// SetAssigner gets a reference to the given BaseReferenceDto and assigns it to the Assigner field.
func (o *RoleAssignmentDto) SetAssigner(v BaseReferenceDto) {
	o.Assigner = &v
}

// GetAssignedDimensions returns the AssignedDimensions field value if set, zero value otherwise.
func (o *RoleAssignmentDto) GetAssignedDimensions() []BaseReferenceDto {
	if o == nil || isNil(o.AssignedDimensions) {
		var ret []BaseReferenceDto
		return ret
	}
	return o.AssignedDimensions
}

// GetAssignedDimensionsOk returns a tuple with the AssignedDimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleAssignmentDto) GetAssignedDimensionsOk() ([]BaseReferenceDto, bool) {
	if o == nil || isNil(o.AssignedDimensions) {
		return nil, false
	}
	return o.AssignedDimensions, true
}

// HasAssignedDimensions returns a boolean if a field has been set.
func (o *RoleAssignmentDto) HasAssignedDimensions() bool {
	if o != nil && !isNil(o.AssignedDimensions) {
		return true
	}

	return false
}

// SetAssignedDimensions gets a reference to the given []BaseReferenceDto and assigns it to the AssignedDimensions field.
func (o *RoleAssignmentDto) SetAssignedDimensions(v []BaseReferenceDto) {
	o.AssignedDimensions = v
}

// GetAccessRequestContext returns the AccessRequestContext field value if set, zero value otherwise.
func (o *RoleAssignmentDto) GetAccessRequestContext() AccessRequestContext {
	if o == nil || isNil(o.AccessRequestContext) {
		var ret AccessRequestContext
		return ret
	}
	return *o.AccessRequestContext
}

// GetAccessRequestContextOk returns a tuple with the AccessRequestContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleAssignmentDto) GetAccessRequestContextOk() (*AccessRequestContext, bool) {
	if o == nil || isNil(o.AccessRequestContext) {
		return nil, false
	}
	return o.AccessRequestContext, true
}

// HasAccessRequestContext returns a boolean if a field has been set.
func (o *RoleAssignmentDto) HasAccessRequestContext() bool {
	if o != nil && !isNil(o.AccessRequestContext) {
		return true
	}

	return false
}

// SetAccessRequestContext gets a reference to the given AccessRequestContext and assigns it to the AccessRequestContext field.
func (o *RoleAssignmentDto) SetAccessRequestContext(v AccessRequestContext) {
	o.AccessRequestContext = &v
}

// GetAccountTargets returns the AccountTargets field value if set, zero value otherwise.
func (o *RoleAssignmentDto) GetAccountTargets() []RoleTargetDto {
	if o == nil || isNil(o.AccountTargets) {
		var ret []RoleTargetDto
		return ret
	}
	return o.AccountTargets
}

// GetAccountTargetsOk returns a tuple with the AccountTargets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleAssignmentDto) GetAccountTargetsOk() ([]RoleTargetDto, bool) {
	if o == nil || isNil(o.AccountTargets) {
		return nil, false
	}
	return o.AccountTargets, true
}

// HasAccountTargets returns a boolean if a field has been set.
func (o *RoleAssignmentDto) HasAccountTargets() bool {
	if o != nil && !isNil(o.AccountTargets) {
		return true
	}

	return false
}

// SetAccountTargets gets a reference to the given []RoleTargetDto and assigns it to the AccountTargets field.
func (o *RoleAssignmentDto) SetAccountTargets(v []RoleTargetDto) {
	o.AccountTargets = v
}

// GetRemoveDate returns the RemoveDate field value if set, zero value otherwise.
func (o *RoleAssignmentDto) GetRemoveDate() string {
	if o == nil || isNil(o.RemoveDate) {
		var ret string
		return ret
	}
	return *o.RemoveDate
}

// GetRemoveDateOk returns a tuple with the RemoveDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleAssignmentDto) GetRemoveDateOk() (*string, bool) {
	if o == nil || isNil(o.RemoveDate) {
		return nil, false
	}
	return o.RemoveDate, true
}

// HasRemoveDate returns a boolean if a field has been set.
func (o *RoleAssignmentDto) HasRemoveDate() bool {
	if o != nil && !isNil(o.RemoveDate) {
		return true
	}

	return false
}

// SetRemoveDate gets a reference to the given string and assigns it to the RemoveDate field.
func (o *RoleAssignmentDto) SetRemoveDate(v string) {
	o.RemoveDate = &v
}

func (o RoleAssignmentDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoleAssignmentDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !isNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}
	if !isNil(o.AssignmentSource) {
		toSerialize["assignmentSource"] = o.AssignmentSource
	}
	if !isNil(o.Assigner) {
		toSerialize["assigner"] = o.Assigner
	}
	if !isNil(o.AssignedDimensions) {
		toSerialize["assignedDimensions"] = o.AssignedDimensions
	}
	if !isNil(o.AccessRequestContext) {
		toSerialize["accessRequestContext"] = o.AccessRequestContext
	}
	if !isNil(o.AccountTargets) {
		toSerialize["accountTargets"] = o.AccountTargets
	}
	if !isNil(o.RemoveDate) {
		toSerialize["removeDate"] = o.RemoveDate
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RoleAssignmentDto) UnmarshalJSON(bytes []byte) (err error) {
	varRoleAssignmentDto := _RoleAssignmentDto{}

	if err = json.Unmarshal(bytes, &varRoleAssignmentDto); err == nil {
			*o = RoleAssignmentDto(varRoleAssignmentDto)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "role")
		delete(additionalProperties, "comments")
		delete(additionalProperties, "assignmentSource")
		delete(additionalProperties, "assigner")
		delete(additionalProperties, "assignedDimensions")
		delete(additionalProperties, "accessRequestContext")
		delete(additionalProperties, "accountTargets")
		delete(additionalProperties, "removeDate")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRoleAssignmentDto struct {
	value *RoleAssignmentDto
	isSet bool
}

func (v NullableRoleAssignmentDto) Get() *RoleAssignmentDto {
	return v.value
}

func (v *NullableRoleAssignmentDto) Set(val *RoleAssignmentDto) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleAssignmentDto) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleAssignmentDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleAssignmentDto(val *RoleAssignmentDto) *NullableRoleAssignmentDto {
	return &NullableRoleAssignmentDto{value: val, isSet: true}
}

func (v NullableRoleAssignmentDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleAssignmentDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


