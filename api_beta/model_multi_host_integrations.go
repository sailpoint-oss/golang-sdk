/*
Identity Security Cloud Beta API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the MultiHostIntegrations type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MultiHostIntegrations{}

// MultiHostIntegrations struct for MultiHostIntegrations
type MultiHostIntegrations struct {
	// Multi-Host Integration ID.
	Id string `json:"id"`
	// Multi-Host Integration's human-readable name.
	Name string `json:"name"`
	// Multi-Host Integration's human-readable description.
	Description string `json:"description"`
	Owner MultiHostIntegrationsOwner `json:"owner"`
	Cluster NullableMultiHostIntegrationsCluster `json:"cluster,omitempty"`
	// Specifies the type of system being managed e.g. Workday, Multi-Host - Microsoft SQL Server, etc.. If you are creating a delimited file source, you must set the `provisionasCsv` query parameter to `true`. 
	Type *string `json:"type,omitempty"`
	// Connector script name.
	Connector string `json:"connector"`
	// Last successfully uploaded source count of given Multi-Host Integration.
	LastSourceUploadSuccessCount *int32 `json:"lastSourceUploadSuccessCount,omitempty"`
	// Maximum sources that can contain in a aggregation group of Multi-Host Integration.
	MaxSourcesPerAggGroup *int32 `json:"maxSourcesPerAggGroup,omitempty"`
	// Fully qualified name of the Java class that implements the connector interface.
	ConnectorClass *string `json:"connectorClass,omitempty"`
	ConnectorAttributes *MultiHostIntegrationsConnectorAttributes `json:"connectorAttributes,omitempty"`
	// Number from 0 to 100 that specifies when to skip the delete phase.
	DeleteThreshold *int32 `json:"deleteThreshold,omitempty"`
	// When this is true, it indicates that the source is referenced by an identity profile.
	Authoritative *bool `json:"authoritative,omitempty"`
	ManagementWorkgroup NullableMultiHostIntegrationsManagementWorkgroup `json:"managementWorkgroup,omitempty"`
	// When this is true, it indicates that the source is healthy.
	Healthy *bool `json:"healthy,omitempty"`
	// Status identifier that gives specific information about why a source is or isn't healthy. 
	Status *string `json:"status,omitempty"`
	// Timestamp that shows when a source health check was last performed.
	Since *time.Time `json:"since,omitempty"`
	// Connector ID
	ConnectorId *string `json:"connectorId,omitempty"`
	// Name of the connector that was chosen during source creation.
	ConnectorName *string `json:"connectorName,omitempty"`
	// Type of connection (direct or file).
	ConnectionType *string `json:"connectionType,omitempty"`
	// Connector implementation ID.
	ConnectorImplementationId *string `json:"connectorImplementationId,omitempty"`
	// Date-time when the source was created
	Created *time.Time `json:"created,omitempty"`
	// Date-time when the source was last modified.
	Modified *time.Time `json:"modified,omitempty"`
	// If this is true, it enables a credential provider for the source. If credentialProvider is turned on,  then the source can use credential provider(s) to fetch credentials.
	CredentialProviderEnabled *bool `json:"credentialProviderEnabled,omitempty"`
	// Source category (e.g. null, CredentialProvider).
	Category NullableString `json:"category,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MultiHostIntegrations MultiHostIntegrations

// NewMultiHostIntegrations instantiates a new MultiHostIntegrations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultiHostIntegrations(id string, name string, description string, owner MultiHostIntegrationsOwner, connector string) *MultiHostIntegrations {
	this := MultiHostIntegrations{}
	this.Id = id
	this.Name = name
	this.Description = description
	this.Owner = owner
	this.Connector = connector
	var authoritative bool = false
	this.Authoritative = &authoritative
	var healthy bool = false
	this.Healthy = &healthy
	var credentialProviderEnabled bool = false
	this.CredentialProviderEnabled = &credentialProviderEnabled
	return &this
}

// NewMultiHostIntegrationsWithDefaults instantiates a new MultiHostIntegrations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultiHostIntegrationsWithDefaults() *MultiHostIntegrations {
	this := MultiHostIntegrations{}
	var authoritative bool = false
	this.Authoritative = &authoritative
	var healthy bool = false
	this.Healthy = &healthy
	var credentialProviderEnabled bool = false
	this.CredentialProviderEnabled = &credentialProviderEnabled
	return &this
}

// GetId returns the Id field value
func (o *MultiHostIntegrations) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrations) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *MultiHostIntegrations) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *MultiHostIntegrations) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrations) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MultiHostIntegrations) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *MultiHostIntegrations) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrations) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *MultiHostIntegrations) SetDescription(v string) {
	o.Description = v
}

// GetOwner returns the Owner field value
func (o *MultiHostIntegrations) GetOwner() MultiHostIntegrationsOwner {
	if o == nil {
		var ret MultiHostIntegrationsOwner
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrations) GetOwnerOk() (*MultiHostIntegrationsOwner, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *MultiHostIntegrations) SetOwner(v MultiHostIntegrationsOwner) {
	o.Owner = v
}

// GetCluster returns the Cluster field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MultiHostIntegrations) GetCluster() MultiHostIntegrationsCluster {
	if o == nil || IsNil(o.Cluster.Get()) {
		var ret MultiHostIntegrationsCluster
		return ret
	}
	return *o.Cluster.Get()
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MultiHostIntegrations) GetClusterOk() (*MultiHostIntegrationsCluster, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cluster.Get(), o.Cluster.IsSet()
}

// HasCluster returns a boolean if a field has been set.
func (o *MultiHostIntegrations) HasCluster() bool {
	if o != nil && o.Cluster.IsSet() {
		return true
	}

	return false
}

// SetCluster gets a reference to the given NullableMultiHostIntegrationsCluster and assigns it to the Cluster field.
func (o *MultiHostIntegrations) SetCluster(v MultiHostIntegrationsCluster) {
	o.Cluster.Set(&v)
}
// SetClusterNil sets the value for Cluster to be an explicit nil
func (o *MultiHostIntegrations) SetClusterNil() {
	o.Cluster.Set(nil)
}

// UnsetCluster ensures that no value is present for Cluster, not even an explicit nil
func (o *MultiHostIntegrations) UnsetCluster() {
	o.Cluster.Unset()
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *MultiHostIntegrations) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrations) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *MultiHostIntegrations) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *MultiHostIntegrations) SetType(v string) {
	o.Type = &v
}

// GetConnector returns the Connector field value
func (o *MultiHostIntegrations) GetConnector() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Connector
}

// GetConnectorOk returns a tuple with the Connector field value
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrations) GetConnectorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Connector, true
}

// SetConnector sets field value
func (o *MultiHostIntegrations) SetConnector(v string) {
	o.Connector = v
}

// GetLastSourceUploadSuccessCount returns the LastSourceUploadSuccessCount field value if set, zero value otherwise.
func (o *MultiHostIntegrations) GetLastSourceUploadSuccessCount() int32 {
	if o == nil || IsNil(o.LastSourceUploadSuccessCount) {
		var ret int32
		return ret
	}
	return *o.LastSourceUploadSuccessCount
}

// GetLastSourceUploadSuccessCountOk returns a tuple with the LastSourceUploadSuccessCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrations) GetLastSourceUploadSuccessCountOk() (*int32, bool) {
	if o == nil || IsNil(o.LastSourceUploadSuccessCount) {
		return nil, false
	}
	return o.LastSourceUploadSuccessCount, true
}

// HasLastSourceUploadSuccessCount returns a boolean if a field has been set.
func (o *MultiHostIntegrations) HasLastSourceUploadSuccessCount() bool {
	if o != nil && !IsNil(o.LastSourceUploadSuccessCount) {
		return true
	}

	return false
}

// SetLastSourceUploadSuccessCount gets a reference to the given int32 and assigns it to the LastSourceUploadSuccessCount field.
func (o *MultiHostIntegrations) SetLastSourceUploadSuccessCount(v int32) {
	o.LastSourceUploadSuccessCount = &v
}

// GetMaxSourcesPerAggGroup returns the MaxSourcesPerAggGroup field value if set, zero value otherwise.
func (o *MultiHostIntegrations) GetMaxSourcesPerAggGroup() int32 {
	if o == nil || IsNil(o.MaxSourcesPerAggGroup) {
		var ret int32
		return ret
	}
	return *o.MaxSourcesPerAggGroup
}

// GetMaxSourcesPerAggGroupOk returns a tuple with the MaxSourcesPerAggGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrations) GetMaxSourcesPerAggGroupOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxSourcesPerAggGroup) {
		return nil, false
	}
	return o.MaxSourcesPerAggGroup, true
}

// HasMaxSourcesPerAggGroup returns a boolean if a field has been set.
func (o *MultiHostIntegrations) HasMaxSourcesPerAggGroup() bool {
	if o != nil && !IsNil(o.MaxSourcesPerAggGroup) {
		return true
	}

	return false
}

// SetMaxSourcesPerAggGroup gets a reference to the given int32 and assigns it to the MaxSourcesPerAggGroup field.
func (o *MultiHostIntegrations) SetMaxSourcesPerAggGroup(v int32) {
	o.MaxSourcesPerAggGroup = &v
}

// GetConnectorClass returns the ConnectorClass field value if set, zero value otherwise.
func (o *MultiHostIntegrations) GetConnectorClass() string {
	if o == nil || IsNil(o.ConnectorClass) {
		var ret string
		return ret
	}
	return *o.ConnectorClass
}

// GetConnectorClassOk returns a tuple with the ConnectorClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrations) GetConnectorClassOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectorClass) {
		return nil, false
	}
	return o.ConnectorClass, true
}

// HasConnectorClass returns a boolean if a field has been set.
func (o *MultiHostIntegrations) HasConnectorClass() bool {
	if o != nil && !IsNil(o.ConnectorClass) {
		return true
	}

	return false
}

// SetConnectorClass gets a reference to the given string and assigns it to the ConnectorClass field.
func (o *MultiHostIntegrations) SetConnectorClass(v string) {
	o.ConnectorClass = &v
}

// GetConnectorAttributes returns the ConnectorAttributes field value if set, zero value otherwise.
func (o *MultiHostIntegrations) GetConnectorAttributes() MultiHostIntegrationsConnectorAttributes {
	if o == nil || IsNil(o.ConnectorAttributes) {
		var ret MultiHostIntegrationsConnectorAttributes
		return ret
	}
	return *o.ConnectorAttributes
}

// GetConnectorAttributesOk returns a tuple with the ConnectorAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrations) GetConnectorAttributesOk() (*MultiHostIntegrationsConnectorAttributes, bool) {
	if o == nil || IsNil(o.ConnectorAttributes) {
		return nil, false
	}
	return o.ConnectorAttributes, true
}

// HasConnectorAttributes returns a boolean if a field has been set.
func (o *MultiHostIntegrations) HasConnectorAttributes() bool {
	if o != nil && !IsNil(o.ConnectorAttributes) {
		return true
	}

	return false
}

// SetConnectorAttributes gets a reference to the given MultiHostIntegrationsConnectorAttributes and assigns it to the ConnectorAttributes field.
func (o *MultiHostIntegrations) SetConnectorAttributes(v MultiHostIntegrationsConnectorAttributes) {
	o.ConnectorAttributes = &v
}

// GetDeleteThreshold returns the DeleteThreshold field value if set, zero value otherwise.
func (o *MultiHostIntegrations) GetDeleteThreshold() int32 {
	if o == nil || IsNil(o.DeleteThreshold) {
		var ret int32
		return ret
	}
	return *o.DeleteThreshold
}

// GetDeleteThresholdOk returns a tuple with the DeleteThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrations) GetDeleteThresholdOk() (*int32, bool) {
	if o == nil || IsNil(o.DeleteThreshold) {
		return nil, false
	}
	return o.DeleteThreshold, true
}

// HasDeleteThreshold returns a boolean if a field has been set.
func (o *MultiHostIntegrations) HasDeleteThreshold() bool {
	if o != nil && !IsNil(o.DeleteThreshold) {
		return true
	}

	return false
}

// SetDeleteThreshold gets a reference to the given int32 and assigns it to the DeleteThreshold field.
func (o *MultiHostIntegrations) SetDeleteThreshold(v int32) {
	o.DeleteThreshold = &v
}

// GetAuthoritative returns the Authoritative field value if set, zero value otherwise.
func (o *MultiHostIntegrations) GetAuthoritative() bool {
	if o == nil || IsNil(o.Authoritative) {
		var ret bool
		return ret
	}
	return *o.Authoritative
}

// GetAuthoritativeOk returns a tuple with the Authoritative field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrations) GetAuthoritativeOk() (*bool, bool) {
	if o == nil || IsNil(o.Authoritative) {
		return nil, false
	}
	return o.Authoritative, true
}

// HasAuthoritative returns a boolean if a field has been set.
func (o *MultiHostIntegrations) HasAuthoritative() bool {
	if o != nil && !IsNil(o.Authoritative) {
		return true
	}

	return false
}

// SetAuthoritative gets a reference to the given bool and assigns it to the Authoritative field.
func (o *MultiHostIntegrations) SetAuthoritative(v bool) {
	o.Authoritative = &v
}

// GetManagementWorkgroup returns the ManagementWorkgroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MultiHostIntegrations) GetManagementWorkgroup() MultiHostIntegrationsManagementWorkgroup {
	if o == nil || IsNil(o.ManagementWorkgroup.Get()) {
		var ret MultiHostIntegrationsManagementWorkgroup
		return ret
	}
	return *o.ManagementWorkgroup.Get()
}

// GetManagementWorkgroupOk returns a tuple with the ManagementWorkgroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MultiHostIntegrations) GetManagementWorkgroupOk() (*MultiHostIntegrationsManagementWorkgroup, bool) {
	if o == nil {
		return nil, false
	}
	return o.ManagementWorkgroup.Get(), o.ManagementWorkgroup.IsSet()
}

// HasManagementWorkgroup returns a boolean if a field has been set.
func (o *MultiHostIntegrations) HasManagementWorkgroup() bool {
	if o != nil && o.ManagementWorkgroup.IsSet() {
		return true
	}

	return false
}

// SetManagementWorkgroup gets a reference to the given NullableMultiHostIntegrationsManagementWorkgroup and assigns it to the ManagementWorkgroup field.
func (o *MultiHostIntegrations) SetManagementWorkgroup(v MultiHostIntegrationsManagementWorkgroup) {
	o.ManagementWorkgroup.Set(&v)
}
// SetManagementWorkgroupNil sets the value for ManagementWorkgroup to be an explicit nil
func (o *MultiHostIntegrations) SetManagementWorkgroupNil() {
	o.ManagementWorkgroup.Set(nil)
}

// UnsetManagementWorkgroup ensures that no value is present for ManagementWorkgroup, not even an explicit nil
func (o *MultiHostIntegrations) UnsetManagementWorkgroup() {
	o.ManagementWorkgroup.Unset()
}

// GetHealthy returns the Healthy field value if set, zero value otherwise.
func (o *MultiHostIntegrations) GetHealthy() bool {
	if o == nil || IsNil(o.Healthy) {
		var ret bool
		return ret
	}
	return *o.Healthy
}

// GetHealthyOk returns a tuple with the Healthy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrations) GetHealthyOk() (*bool, bool) {
	if o == nil || IsNil(o.Healthy) {
		return nil, false
	}
	return o.Healthy, true
}

// HasHealthy returns a boolean if a field has been set.
func (o *MultiHostIntegrations) HasHealthy() bool {
	if o != nil && !IsNil(o.Healthy) {
		return true
	}

	return false
}

// SetHealthy gets a reference to the given bool and assigns it to the Healthy field.
func (o *MultiHostIntegrations) SetHealthy(v bool) {
	o.Healthy = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *MultiHostIntegrations) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrations) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *MultiHostIntegrations) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *MultiHostIntegrations) SetStatus(v string) {
	o.Status = &v
}

// GetSince returns the Since field value if set, zero value otherwise.
func (o *MultiHostIntegrations) GetSince() time.Time {
	if o == nil || IsNil(o.Since) {
		var ret time.Time
		return ret
	}
	return *o.Since
}

// GetSinceOk returns a tuple with the Since field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrations) GetSinceOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Since) {
		return nil, false
	}
	return o.Since, true
}

// HasSince returns a boolean if a field has been set.
func (o *MultiHostIntegrations) HasSince() bool {
	if o != nil && !IsNil(o.Since) {
		return true
	}

	return false
}

// SetSince gets a reference to the given time.Time and assigns it to the Since field.
func (o *MultiHostIntegrations) SetSince(v time.Time) {
	o.Since = &v
}

// GetConnectorId returns the ConnectorId field value if set, zero value otherwise.
func (o *MultiHostIntegrations) GetConnectorId() string {
	if o == nil || IsNil(o.ConnectorId) {
		var ret string
		return ret
	}
	return *o.ConnectorId
}

// GetConnectorIdOk returns a tuple with the ConnectorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrations) GetConnectorIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectorId) {
		return nil, false
	}
	return o.ConnectorId, true
}

// HasConnectorId returns a boolean if a field has been set.
func (o *MultiHostIntegrations) HasConnectorId() bool {
	if o != nil && !IsNil(o.ConnectorId) {
		return true
	}

	return false
}

// SetConnectorId gets a reference to the given string and assigns it to the ConnectorId field.
func (o *MultiHostIntegrations) SetConnectorId(v string) {
	o.ConnectorId = &v
}

// GetConnectorName returns the ConnectorName field value if set, zero value otherwise.
func (o *MultiHostIntegrations) GetConnectorName() string {
	if o == nil || IsNil(o.ConnectorName) {
		var ret string
		return ret
	}
	return *o.ConnectorName
}

// GetConnectorNameOk returns a tuple with the ConnectorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrations) GetConnectorNameOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectorName) {
		return nil, false
	}
	return o.ConnectorName, true
}

// HasConnectorName returns a boolean if a field has been set.
func (o *MultiHostIntegrations) HasConnectorName() bool {
	if o != nil && !IsNil(o.ConnectorName) {
		return true
	}

	return false
}

// SetConnectorName gets a reference to the given string and assigns it to the ConnectorName field.
func (o *MultiHostIntegrations) SetConnectorName(v string) {
	o.ConnectorName = &v
}

// GetConnectionType returns the ConnectionType field value if set, zero value otherwise.
func (o *MultiHostIntegrations) GetConnectionType() string {
	if o == nil || IsNil(o.ConnectionType) {
		var ret string
		return ret
	}
	return *o.ConnectionType
}

// GetConnectionTypeOk returns a tuple with the ConnectionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrations) GetConnectionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionType) {
		return nil, false
	}
	return o.ConnectionType, true
}

// HasConnectionType returns a boolean if a field has been set.
func (o *MultiHostIntegrations) HasConnectionType() bool {
	if o != nil && !IsNil(o.ConnectionType) {
		return true
	}

	return false
}

// SetConnectionType gets a reference to the given string and assigns it to the ConnectionType field.
func (o *MultiHostIntegrations) SetConnectionType(v string) {
	o.ConnectionType = &v
}

// GetConnectorImplementationId returns the ConnectorImplementationId field value if set, zero value otherwise.
func (o *MultiHostIntegrations) GetConnectorImplementationId() string {
	if o == nil || IsNil(o.ConnectorImplementationId) {
		var ret string
		return ret
	}
	return *o.ConnectorImplementationId
}

// GetConnectorImplementationIdOk returns a tuple with the ConnectorImplementationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrations) GetConnectorImplementationIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectorImplementationId) {
		return nil, false
	}
	return o.ConnectorImplementationId, true
}

// HasConnectorImplementationId returns a boolean if a field has been set.
func (o *MultiHostIntegrations) HasConnectorImplementationId() bool {
	if o != nil && !IsNil(o.ConnectorImplementationId) {
		return true
	}

	return false
}

// SetConnectorImplementationId gets a reference to the given string and assigns it to the ConnectorImplementationId field.
func (o *MultiHostIntegrations) SetConnectorImplementationId(v string) {
	o.ConnectorImplementationId = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *MultiHostIntegrations) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrations) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *MultiHostIntegrations) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *MultiHostIntegrations) SetCreated(v time.Time) {
	o.Created = &v
}

// GetModified returns the Modified field value if set, zero value otherwise.
func (o *MultiHostIntegrations) GetModified() time.Time {
	if o == nil || IsNil(o.Modified) {
		var ret time.Time
		return ret
	}
	return *o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrations) GetModifiedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Modified) {
		return nil, false
	}
	return o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *MultiHostIntegrations) HasModified() bool {
	if o != nil && !IsNil(o.Modified) {
		return true
	}

	return false
}

// SetModified gets a reference to the given time.Time and assigns it to the Modified field.
func (o *MultiHostIntegrations) SetModified(v time.Time) {
	o.Modified = &v
}

// GetCredentialProviderEnabled returns the CredentialProviderEnabled field value if set, zero value otherwise.
func (o *MultiHostIntegrations) GetCredentialProviderEnabled() bool {
	if o == nil || IsNil(o.CredentialProviderEnabled) {
		var ret bool
		return ret
	}
	return *o.CredentialProviderEnabled
}

// GetCredentialProviderEnabledOk returns a tuple with the CredentialProviderEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiHostIntegrations) GetCredentialProviderEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.CredentialProviderEnabled) {
		return nil, false
	}
	return o.CredentialProviderEnabled, true
}

// HasCredentialProviderEnabled returns a boolean if a field has been set.
func (o *MultiHostIntegrations) HasCredentialProviderEnabled() bool {
	if o != nil && !IsNil(o.CredentialProviderEnabled) {
		return true
	}

	return false
}

// SetCredentialProviderEnabled gets a reference to the given bool and assigns it to the CredentialProviderEnabled field.
func (o *MultiHostIntegrations) SetCredentialProviderEnabled(v bool) {
	o.CredentialProviderEnabled = &v
}

// GetCategory returns the Category field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MultiHostIntegrations) GetCategory() string {
	if o == nil || IsNil(o.Category.Get()) {
		var ret string
		return ret
	}
	return *o.Category.Get()
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MultiHostIntegrations) GetCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Category.Get(), o.Category.IsSet()
}

// HasCategory returns a boolean if a field has been set.
func (o *MultiHostIntegrations) HasCategory() bool {
	if o != nil && o.Category.IsSet() {
		return true
	}

	return false
}

// SetCategory gets a reference to the given NullableString and assigns it to the Category field.
func (o *MultiHostIntegrations) SetCategory(v string) {
	o.Category.Set(&v)
}
// SetCategoryNil sets the value for Category to be an explicit nil
func (o *MultiHostIntegrations) SetCategoryNil() {
	o.Category.Set(nil)
}

// UnsetCategory ensures that no value is present for Category, not even an explicit nil
func (o *MultiHostIntegrations) UnsetCategory() {
	o.Category.Unset()
}

func (o MultiHostIntegrations) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MultiHostIntegrations) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	toSerialize["owner"] = o.Owner
	if o.Cluster.IsSet() {
		toSerialize["cluster"] = o.Cluster.Get()
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["connector"] = o.Connector
	if !IsNil(o.LastSourceUploadSuccessCount) {
		toSerialize["lastSourceUploadSuccessCount"] = o.LastSourceUploadSuccessCount
	}
	if !IsNil(o.MaxSourcesPerAggGroup) {
		toSerialize["maxSourcesPerAggGroup"] = o.MaxSourcesPerAggGroup
	}
	if !IsNil(o.ConnectorClass) {
		toSerialize["connectorClass"] = o.ConnectorClass
	}
	if !IsNil(o.ConnectorAttributes) {
		toSerialize["connectorAttributes"] = o.ConnectorAttributes
	}
	if !IsNil(o.DeleteThreshold) {
		toSerialize["deleteThreshold"] = o.DeleteThreshold
	}
	if !IsNil(o.Authoritative) {
		toSerialize["authoritative"] = o.Authoritative
	}
	if o.ManagementWorkgroup.IsSet() {
		toSerialize["managementWorkgroup"] = o.ManagementWorkgroup.Get()
	}
	if !IsNil(o.Healthy) {
		toSerialize["healthy"] = o.Healthy
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Since) {
		toSerialize["since"] = o.Since
	}
	if !IsNil(o.ConnectorId) {
		toSerialize["connectorId"] = o.ConnectorId
	}
	if !IsNil(o.ConnectorName) {
		toSerialize["connectorName"] = o.ConnectorName
	}
	if !IsNil(o.ConnectionType) {
		toSerialize["connectionType"] = o.ConnectionType
	}
	if !IsNil(o.ConnectorImplementationId) {
		toSerialize["connectorImplementationId"] = o.ConnectorImplementationId
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Modified) {
		toSerialize["modified"] = o.Modified
	}
	if !IsNil(o.CredentialProviderEnabled) {
		toSerialize["credentialProviderEnabled"] = o.CredentialProviderEnabled
	}
	if o.Category.IsSet() {
		toSerialize["category"] = o.Category.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MultiHostIntegrations) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"description",
		"owner",
		"connector",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMultiHostIntegrations := _MultiHostIntegrations{}

	err = json.Unmarshal(data, &varMultiHostIntegrations)

	if err != nil {
		return err
	}

	*o = MultiHostIntegrations(varMultiHostIntegrations)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "owner")
		delete(additionalProperties, "cluster")
		delete(additionalProperties, "type")
		delete(additionalProperties, "connector")
		delete(additionalProperties, "lastSourceUploadSuccessCount")
		delete(additionalProperties, "maxSourcesPerAggGroup")
		delete(additionalProperties, "connectorClass")
		delete(additionalProperties, "connectorAttributes")
		delete(additionalProperties, "deleteThreshold")
		delete(additionalProperties, "authoritative")
		delete(additionalProperties, "managementWorkgroup")
		delete(additionalProperties, "healthy")
		delete(additionalProperties, "status")
		delete(additionalProperties, "since")
		delete(additionalProperties, "connectorId")
		delete(additionalProperties, "connectorName")
		delete(additionalProperties, "connectionType")
		delete(additionalProperties, "connectorImplementationId")
		delete(additionalProperties, "created")
		delete(additionalProperties, "modified")
		delete(additionalProperties, "credentialProviderEnabled")
		delete(additionalProperties, "category")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMultiHostIntegrations struct {
	value *MultiHostIntegrations
	isSet bool
}

func (v NullableMultiHostIntegrations) Get() *MultiHostIntegrations {
	return v.value
}

func (v *NullableMultiHostIntegrations) Set(val *MultiHostIntegrations) {
	v.value = val
	v.isSet = true
}

func (v NullableMultiHostIntegrations) IsSet() bool {
	return v.isSet
}

func (v *NullableMultiHostIntegrations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultiHostIntegrations(val *MultiHostIntegrations) *NullableMultiHostIntegrations {
	return &NullableMultiHostIntegrations{value: val, isSet: true}
}

func (v NullableMultiHostIntegrations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultiHostIntegrations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


