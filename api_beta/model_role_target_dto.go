/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
)

// checks if the RoleTargetDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoleTargetDto{}

// RoleTargetDto struct for RoleTargetDto
type RoleTargetDto struct {
	Source *BaseReferenceDto `json:"source,omitempty"`
	AccountInfo *AccountInfoDto `json:"accountInfo,omitempty"`
	// Specific role name for this target if using multiple accounts
	RoleName *string `json:"roleName,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RoleTargetDto RoleTargetDto

// NewRoleTargetDto instantiates a new RoleTargetDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleTargetDto() *RoleTargetDto {
	this := RoleTargetDto{}
	return &this
}

// NewRoleTargetDtoWithDefaults instantiates a new RoleTargetDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleTargetDtoWithDefaults() *RoleTargetDto {
	this := RoleTargetDto{}
	return &this
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *RoleTargetDto) GetSource() BaseReferenceDto {
	if o == nil || isNil(o.Source) {
		var ret BaseReferenceDto
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleTargetDto) GetSourceOk() (*BaseReferenceDto, bool) {
	if o == nil || isNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *RoleTargetDto) HasSource() bool {
	if o != nil && !isNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given BaseReferenceDto and assigns it to the Source field.
func (o *RoleTargetDto) SetSource(v BaseReferenceDto) {
	o.Source = &v
}

// GetAccountInfo returns the AccountInfo field value if set, zero value otherwise.
func (o *RoleTargetDto) GetAccountInfo() AccountInfoDto {
	if o == nil || isNil(o.AccountInfo) {
		var ret AccountInfoDto
		return ret
	}
	return *o.AccountInfo
}

// GetAccountInfoOk returns a tuple with the AccountInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleTargetDto) GetAccountInfoOk() (*AccountInfoDto, bool) {
	if o == nil || isNil(o.AccountInfo) {
		return nil, false
	}
	return o.AccountInfo, true
}

// HasAccountInfo returns a boolean if a field has been set.
func (o *RoleTargetDto) HasAccountInfo() bool {
	if o != nil && !isNil(o.AccountInfo) {
		return true
	}

	return false
}

// SetAccountInfo gets a reference to the given AccountInfoDto and assigns it to the AccountInfo field.
func (o *RoleTargetDto) SetAccountInfo(v AccountInfoDto) {
	o.AccountInfo = &v
}

// GetRoleName returns the RoleName field value if set, zero value otherwise.
func (o *RoleTargetDto) GetRoleName() string {
	if o == nil || isNil(o.RoleName) {
		var ret string
		return ret
	}
	return *o.RoleName
}

// GetRoleNameOk returns a tuple with the RoleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleTargetDto) GetRoleNameOk() (*string, bool) {
	if o == nil || isNil(o.RoleName) {
		return nil, false
	}
	return o.RoleName, true
}

// HasRoleName returns a boolean if a field has been set.
func (o *RoleTargetDto) HasRoleName() bool {
	if o != nil && !isNil(o.RoleName) {
		return true
	}

	return false
}

// SetRoleName gets a reference to the given string and assigns it to the RoleName field.
func (o *RoleTargetDto) SetRoleName(v string) {
	o.RoleName = &v
}

func (o RoleTargetDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoleTargetDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !isNil(o.AccountInfo) {
		toSerialize["accountInfo"] = o.AccountInfo
	}
	if !isNil(o.RoleName) {
		toSerialize["roleName"] = o.RoleName
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RoleTargetDto) UnmarshalJSON(bytes []byte) (err error) {
	varRoleTargetDto := _RoleTargetDto{}

	if err = json.Unmarshal(bytes, &varRoleTargetDto); err == nil {
			*o = RoleTargetDto(varRoleTargetDto)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "source")
		delete(additionalProperties, "accountInfo")
		delete(additionalProperties, "roleName")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRoleTargetDto struct {
	value *RoleTargetDto
	isSet bool
}

func (v NullableRoleTargetDto) Get() *RoleTargetDto {
	return v.value
}

func (v *NullableRoleTargetDto) Set(val *RoleTargetDto) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleTargetDto) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleTargetDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleTargetDto(val *RoleTargetDto) *NullableRoleTargetDto {
	return &NullableRoleTargetDto{value: val, isSet: true}
}

func (v NullableRoleTargetDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleTargetDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


