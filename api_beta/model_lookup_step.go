/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
)

// checks if the LookupStep type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LookupStep{}

// LookupStep The definition of an Identity according to the Reassignment Configuration service
type LookupStep struct {
	// The ID of the Identity who work is reassigned to
	ReassignedToId *string `json:"reassignedToId,omitempty"`
	// The ID of the Identity who work is reassigned from
	ReassignedFromId *string `json:"reassignedFromId,omitempty"`
	ReassignmentType *ReassignmentTypeEnum `json:"reassignmentType,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LookupStep LookupStep

// NewLookupStep instantiates a new LookupStep object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLookupStep() *LookupStep {
	this := LookupStep{}
	return &this
}

// NewLookupStepWithDefaults instantiates a new LookupStep object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLookupStepWithDefaults() *LookupStep {
	this := LookupStep{}
	return &this
}

// GetReassignedToId returns the ReassignedToId field value if set, zero value otherwise.
func (o *LookupStep) GetReassignedToId() string {
	if o == nil || isNil(o.ReassignedToId) {
		var ret string
		return ret
	}
	return *o.ReassignedToId
}

// GetReassignedToIdOk returns a tuple with the ReassignedToId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LookupStep) GetReassignedToIdOk() (*string, bool) {
	if o == nil || isNil(o.ReassignedToId) {
		return nil, false
	}
	return o.ReassignedToId, true
}

// HasReassignedToId returns a boolean if a field has been set.
func (o *LookupStep) HasReassignedToId() bool {
	if o != nil && !isNil(o.ReassignedToId) {
		return true
	}

	return false
}

// SetReassignedToId gets a reference to the given string and assigns it to the ReassignedToId field.
func (o *LookupStep) SetReassignedToId(v string) {
	o.ReassignedToId = &v
}

// GetReassignedFromId returns the ReassignedFromId field value if set, zero value otherwise.
func (o *LookupStep) GetReassignedFromId() string {
	if o == nil || isNil(o.ReassignedFromId) {
		var ret string
		return ret
	}
	return *o.ReassignedFromId
}

// GetReassignedFromIdOk returns a tuple with the ReassignedFromId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LookupStep) GetReassignedFromIdOk() (*string, bool) {
	if o == nil || isNil(o.ReassignedFromId) {
		return nil, false
	}
	return o.ReassignedFromId, true
}

// HasReassignedFromId returns a boolean if a field has been set.
func (o *LookupStep) HasReassignedFromId() bool {
	if o != nil && !isNil(o.ReassignedFromId) {
		return true
	}

	return false
}

// SetReassignedFromId gets a reference to the given string and assigns it to the ReassignedFromId field.
func (o *LookupStep) SetReassignedFromId(v string) {
	o.ReassignedFromId = &v
}

// GetReassignmentType returns the ReassignmentType field value if set, zero value otherwise.
func (o *LookupStep) GetReassignmentType() ReassignmentTypeEnum {
	if o == nil || isNil(o.ReassignmentType) {
		var ret ReassignmentTypeEnum
		return ret
	}
	return *o.ReassignmentType
}

// GetReassignmentTypeOk returns a tuple with the ReassignmentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LookupStep) GetReassignmentTypeOk() (*ReassignmentTypeEnum, bool) {
	if o == nil || isNil(o.ReassignmentType) {
		return nil, false
	}
	return o.ReassignmentType, true
}

// HasReassignmentType returns a boolean if a field has been set.
func (o *LookupStep) HasReassignmentType() bool {
	if o != nil && !isNil(o.ReassignmentType) {
		return true
	}

	return false
}

// SetReassignmentType gets a reference to the given ReassignmentTypeEnum and assigns it to the ReassignmentType field.
func (o *LookupStep) SetReassignmentType(v ReassignmentTypeEnum) {
	o.ReassignmentType = &v
}

func (o LookupStep) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LookupStep) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ReassignedToId) {
		toSerialize["reassignedToId"] = o.ReassignedToId
	}
	if !isNil(o.ReassignedFromId) {
		toSerialize["reassignedFromId"] = o.ReassignedFromId
	}
	if !isNil(o.ReassignmentType) {
		toSerialize["reassignmentType"] = o.ReassignmentType
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LookupStep) UnmarshalJSON(bytes []byte) (err error) {
	varLookupStep := _LookupStep{}

	if err = json.Unmarshal(bytes, &varLookupStep); err == nil {
	*o = LookupStep(varLookupStep)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "reassignedToId")
		delete(additionalProperties, "reassignedFromId")
		delete(additionalProperties, "reassignmentType")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLookupStep struct {
	value *LookupStep
	isSet bool
}

func (v NullableLookupStep) Get() *LookupStep {
	return v.value
}

func (v *NullableLookupStep) Set(val *LookupStep) {
	v.value = val
	v.isSet = true
}

func (v NullableLookupStep) IsSet() bool {
	return v.isSet
}

func (v *NullableLookupStep) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLookupStep(val *LookupStep) *NullableLookupStep {
	return &NullableLookupStep{value: val, isSet: true}
}

func (v NullableLookupStep) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLookupStep) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


