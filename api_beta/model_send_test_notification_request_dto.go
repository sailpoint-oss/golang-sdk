/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
)

// checks if the SendTestNotificationRequestDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SendTestNotificationRequestDto{}

// SendTestNotificationRequestDto struct for SendTestNotificationRequestDto
type SendTestNotificationRequestDto struct {
	// The template notification key.
	Key *string `json:"key,omitempty"`
	// The notification medium. Has to be one of the following enum values.
	Medium *string `json:"medium,omitempty"`
	// A Json object that denotes the context specific to the template.
	Context map[string]interface{} `json:"context,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SendTestNotificationRequestDto SendTestNotificationRequestDto

// NewSendTestNotificationRequestDto instantiates a new SendTestNotificationRequestDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSendTestNotificationRequestDto() *SendTestNotificationRequestDto {
	this := SendTestNotificationRequestDto{}
	return &this
}

// NewSendTestNotificationRequestDtoWithDefaults instantiates a new SendTestNotificationRequestDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSendTestNotificationRequestDtoWithDefaults() *SendTestNotificationRequestDto {
	this := SendTestNotificationRequestDto{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *SendTestNotificationRequestDto) GetKey() string {
	if o == nil || isNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendTestNotificationRequestDto) GetKeyOk() (*string, bool) {
	if o == nil || isNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *SendTestNotificationRequestDto) HasKey() bool {
	if o != nil && !isNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *SendTestNotificationRequestDto) SetKey(v string) {
	o.Key = &v
}

// GetMedium returns the Medium field value if set, zero value otherwise.
func (o *SendTestNotificationRequestDto) GetMedium() string {
	if o == nil || isNil(o.Medium) {
		var ret string
		return ret
	}
	return *o.Medium
}

// GetMediumOk returns a tuple with the Medium field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendTestNotificationRequestDto) GetMediumOk() (*string, bool) {
	if o == nil || isNil(o.Medium) {
		return nil, false
	}
	return o.Medium, true
}

// HasMedium returns a boolean if a field has been set.
func (o *SendTestNotificationRequestDto) HasMedium() bool {
	if o != nil && !isNil(o.Medium) {
		return true
	}

	return false
}

// SetMedium gets a reference to the given string and assigns it to the Medium field.
func (o *SendTestNotificationRequestDto) SetMedium(v string) {
	o.Medium = &v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *SendTestNotificationRequestDto) GetContext() map[string]interface{} {
	if o == nil || isNil(o.Context) {
		var ret map[string]interface{}
		return ret
	}
	return o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendTestNotificationRequestDto) GetContextOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Context) {
		return map[string]interface{}{}, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *SendTestNotificationRequestDto) HasContext() bool {
	if o != nil && !isNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given map[string]interface{} and assigns it to the Context field.
func (o *SendTestNotificationRequestDto) SetContext(v map[string]interface{}) {
	o.Context = v
}

func (o SendTestNotificationRequestDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SendTestNotificationRequestDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !isNil(o.Medium) {
		toSerialize["medium"] = o.Medium
	}
	if !isNil(o.Context) {
		toSerialize["context"] = o.Context
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SendTestNotificationRequestDto) UnmarshalJSON(bytes []byte) (err error) {
	varSendTestNotificationRequestDto := _SendTestNotificationRequestDto{}

	if err = json.Unmarshal(bytes, &varSendTestNotificationRequestDto); err == nil {
	*o = SendTestNotificationRequestDto(varSendTestNotificationRequestDto)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "key")
		delete(additionalProperties, "medium")
		delete(additionalProperties, "context")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSendTestNotificationRequestDto struct {
	value *SendTestNotificationRequestDto
	isSet bool
}

func (v NullableSendTestNotificationRequestDto) Get() *SendTestNotificationRequestDto {
	return v.value
}

func (v *NullableSendTestNotificationRequestDto) Set(val *SendTestNotificationRequestDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSendTestNotificationRequestDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSendTestNotificationRequestDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSendTestNotificationRequestDto(val *SendTestNotificationRequestDto) *NullableSendTestNotificationRequestDto {
	return &NullableSendTestNotificationRequestDto{value: val, isSet: true}
}

func (v NullableSendTestNotificationRequestDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSendTestNotificationRequestDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


