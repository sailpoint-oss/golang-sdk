/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
)

// checks if the MessageCatalogDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessageCatalogDto{}

// MessageCatalogDto struct for MessageCatalogDto
type MessageCatalogDto struct {
	// The language in which the messages are returned
	Locale *string `json:"locale,omitempty"`
	// The list of message with their keys and formats
	Messages []ResourceBundleMessage `json:"messages,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MessageCatalogDto MessageCatalogDto

// NewMessageCatalogDto instantiates a new MessageCatalogDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageCatalogDto() *MessageCatalogDto {
	this := MessageCatalogDto{}
	return &this
}

// NewMessageCatalogDtoWithDefaults instantiates a new MessageCatalogDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageCatalogDtoWithDefaults() *MessageCatalogDto {
	this := MessageCatalogDto{}
	return &this
}

// GetLocale returns the Locale field value if set, zero value otherwise.
func (o *MessageCatalogDto) GetLocale() string {
	if o == nil || isNil(o.Locale) {
		var ret string
		return ret
	}
	return *o.Locale
}

// GetLocaleOk returns a tuple with the Locale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageCatalogDto) GetLocaleOk() (*string, bool) {
	if o == nil || isNil(o.Locale) {
		return nil, false
	}
	return o.Locale, true
}

// HasLocale returns a boolean if a field has been set.
func (o *MessageCatalogDto) HasLocale() bool {
	if o != nil && !isNil(o.Locale) {
		return true
	}

	return false
}

// SetLocale gets a reference to the given string and assigns it to the Locale field.
func (o *MessageCatalogDto) SetLocale(v string) {
	o.Locale = &v
}

// GetMessages returns the Messages field value if set, zero value otherwise.
func (o *MessageCatalogDto) GetMessages() []ResourceBundleMessage {
	if o == nil || isNil(o.Messages) {
		var ret []ResourceBundleMessage
		return ret
	}
	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageCatalogDto) GetMessagesOk() ([]ResourceBundleMessage, bool) {
	if o == nil || isNil(o.Messages) {
		return nil, false
	}
	return o.Messages, true
}

// HasMessages returns a boolean if a field has been set.
func (o *MessageCatalogDto) HasMessages() bool {
	if o != nil && !isNil(o.Messages) {
		return true
	}

	return false
}

// SetMessages gets a reference to the given []ResourceBundleMessage and assigns it to the Messages field.
func (o *MessageCatalogDto) SetMessages(v []ResourceBundleMessage) {
	o.Messages = v
}

func (o MessageCatalogDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessageCatalogDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Locale) {
		toSerialize["locale"] = o.Locale
	}
	if !isNil(o.Messages) {
		toSerialize["messages"] = o.Messages
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MessageCatalogDto) UnmarshalJSON(bytes []byte) (err error) {
	varMessageCatalogDto := _MessageCatalogDto{}

	if err = json.Unmarshal(bytes, &varMessageCatalogDto); err == nil {
	*o = MessageCatalogDto(varMessageCatalogDto)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "locale")
		delete(additionalProperties, "messages")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMessageCatalogDto struct {
	value *MessageCatalogDto
	isSet bool
}

func (v NullableMessageCatalogDto) Get() *MessageCatalogDto {
	return v.value
}

func (v *NullableMessageCatalogDto) Set(val *MessageCatalogDto) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageCatalogDto) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageCatalogDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageCatalogDto(val *MessageCatalogDto) *NullableMessageCatalogDto {
	return &NullableMessageCatalogDto{value: val, isSet: true}
}

func (v NullableMessageCatalogDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageCatalogDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


