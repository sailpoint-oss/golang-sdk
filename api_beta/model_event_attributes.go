/*
Identity Security Cloud Beta API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EventAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventAttributes{}

// EventAttributes Attributes related to an IdentityNow ETS event
type EventAttributes struct {
	// The unique ID of the trigger
	Id NullableString `json:"id"`
	// JSON path expression that will limit which events the trigger will fire on
	Filter NullableString `json:"filter.$,omitempty"`
	// Description of the event trigger
	Description NullableString `json:"description,omitempty"`
	// The attribute to filter on
	AttributeToFilter NullableString `json:"attributeToFilter,omitempty"`
	// Form definition's unique identifier.
	FormDefinitionId NullableString `json:"formDefinitionId,omitempty"`
}

type _EventAttributes EventAttributes

// NewEventAttributes instantiates a new EventAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventAttributes(id NullableString) *EventAttributes {
	this := EventAttributes{}
	this.Id = id
	return &this
}

// NewEventAttributesWithDefaults instantiates a new EventAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventAttributesWithDefaults() *EventAttributes {
	this := EventAttributes{}
	return &this
}

// GetId returns the Id field value
// If the value is explicit nil, the zero value for string will be returned
func (o *EventAttributes) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}

	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventAttributes) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// SetId sets field value
func (o *EventAttributes) SetId(v string) {
	o.Id.Set(&v)
}

// GetFilter returns the Filter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EventAttributes) GetFilter() string {
	if o == nil || IsNil(o.Filter.Get()) {
		var ret string
		return ret
	}
	return *o.Filter.Get()
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventAttributes) GetFilterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Filter.Get(), o.Filter.IsSet()
}

// HasFilter returns a boolean if a field has been set.
func (o *EventAttributes) HasFilter() bool {
	if o != nil && o.Filter.IsSet() {
		return true
	}

	return false
}

// SetFilter gets a reference to the given NullableString and assigns it to the Filter field.
func (o *EventAttributes) SetFilter(v string) {
	o.Filter.Set(&v)
}
// SetFilterNil sets the value for Filter to be an explicit nil
func (o *EventAttributes) SetFilterNil() {
	o.Filter.Set(nil)
}

// UnsetFilter ensures that no value is present for Filter, not even an explicit nil
func (o *EventAttributes) UnsetFilter() {
	o.Filter.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EventAttributes) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventAttributes) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *EventAttributes) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *EventAttributes) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *EventAttributes) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *EventAttributes) UnsetDescription() {
	o.Description.Unset()
}

// GetAttributeToFilter returns the AttributeToFilter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EventAttributes) GetAttributeToFilter() string {
	if o == nil || IsNil(o.AttributeToFilter.Get()) {
		var ret string
		return ret
	}
	return *o.AttributeToFilter.Get()
}

// GetAttributeToFilterOk returns a tuple with the AttributeToFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventAttributes) GetAttributeToFilterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AttributeToFilter.Get(), o.AttributeToFilter.IsSet()
}

// HasAttributeToFilter returns a boolean if a field has been set.
func (o *EventAttributes) HasAttributeToFilter() bool {
	if o != nil && o.AttributeToFilter.IsSet() {
		return true
	}

	return false
}

// SetAttributeToFilter gets a reference to the given NullableString and assigns it to the AttributeToFilter field.
func (o *EventAttributes) SetAttributeToFilter(v string) {
	o.AttributeToFilter.Set(&v)
}
// SetAttributeToFilterNil sets the value for AttributeToFilter to be an explicit nil
func (o *EventAttributes) SetAttributeToFilterNil() {
	o.AttributeToFilter.Set(nil)
}

// UnsetAttributeToFilter ensures that no value is present for AttributeToFilter, not even an explicit nil
func (o *EventAttributes) UnsetAttributeToFilter() {
	o.AttributeToFilter.Unset()
}

// GetFormDefinitionId returns the FormDefinitionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EventAttributes) GetFormDefinitionId() string {
	if o == nil || IsNil(o.FormDefinitionId.Get()) {
		var ret string
		return ret
	}
	return *o.FormDefinitionId.Get()
}

// GetFormDefinitionIdOk returns a tuple with the FormDefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventAttributes) GetFormDefinitionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FormDefinitionId.Get(), o.FormDefinitionId.IsSet()
}

// HasFormDefinitionId returns a boolean if a field has been set.
func (o *EventAttributes) HasFormDefinitionId() bool {
	if o != nil && o.FormDefinitionId.IsSet() {
		return true
	}

	return false
}

// SetFormDefinitionId gets a reference to the given NullableString and assigns it to the FormDefinitionId field.
func (o *EventAttributes) SetFormDefinitionId(v string) {
	o.FormDefinitionId.Set(&v)
}
// SetFormDefinitionIdNil sets the value for FormDefinitionId to be an explicit nil
func (o *EventAttributes) SetFormDefinitionIdNil() {
	o.FormDefinitionId.Set(nil)
}

// UnsetFormDefinitionId ensures that no value is present for FormDefinitionId, not even an explicit nil
func (o *EventAttributes) UnsetFormDefinitionId() {
	o.FormDefinitionId.Unset()
}

func (o EventAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id.Get()
	if o.Filter.IsSet() {
		toSerialize["filter.$"] = o.Filter.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.AttributeToFilter.IsSet() {
		toSerialize["attributeToFilter"] = o.AttributeToFilter.Get()
	}
	if o.FormDefinitionId.IsSet() {
		toSerialize["formDefinitionId"] = o.FormDefinitionId.Get()
	}
	return toSerialize, nil
}

func (o *EventAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventAttributes := _EventAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEventAttributes)

	if err != nil {
		return err
	}

	*o = EventAttributes(varEventAttributes)

	return err
}

type NullableEventAttributes struct {
	value *EventAttributes
	isSet bool
}

func (v NullableEventAttributes) Get() *EventAttributes {
	return v.value
}

func (v *NullableEventAttributes) Set(val *EventAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableEventAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableEventAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventAttributes(val *EventAttributes) *NullableEventAttributes {
	return &NullableEventAttributes{value: val, isSet: true}
}

func (v NullableEventAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


