/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"fmt"
)

// checks if the Trigger type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Trigger{}

// Trigger struct for Trigger
type Trigger struct {
	// Unique identifier of the trigger.
	Id string `json:"id"`
	// Trigger Name.
	Name string `json:"name"`
	Type TriggerType `json:"type"`
	// Trigger Description.
	Description *string `json:"description,omitempty"`
	// The JSON schema of the payload that will be sent by the trigger to the subscribed service.
	InputSchema string `json:"inputSchema"`
	ExampleInput TriggerExampleInput `json:"exampleInput"`
	// The JSON schema of the response that will be sent by the subscribed service to the trigger in response to an event.  This only applies to a trigger type of `REQUEST_RESPONSE`.
	OutputSchema NullableString `json:"outputSchema,omitempty"`
	ExampleOutput NullableTriggerExampleOutput `json:"exampleOutput,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Trigger Trigger

// NewTrigger instantiates a new Trigger object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrigger(id string, name string, type_ TriggerType, inputSchema string, exampleInput TriggerExampleInput) *Trigger {
	this := Trigger{}
	this.Id = id
	this.Name = name
	this.Type = type_
	this.InputSchema = inputSchema
	this.ExampleInput = exampleInput
	return &this
}

// NewTriggerWithDefaults instantiates a new Trigger object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTriggerWithDefaults() *Trigger {
	this := Trigger{}
	return &this
}

// GetId returns the Id field value
func (o *Trigger) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Trigger) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Trigger) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Trigger) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Trigger) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Trigger) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *Trigger) GetType() TriggerType {
	if o == nil {
		var ret TriggerType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Trigger) GetTypeOk() (*TriggerType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Trigger) SetType(v TriggerType) {
	o.Type = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Trigger) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trigger) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Trigger) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Trigger) SetDescription(v string) {
	o.Description = &v
}

// GetInputSchema returns the InputSchema field value
func (o *Trigger) GetInputSchema() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InputSchema
}

// GetInputSchemaOk returns a tuple with the InputSchema field value
// and a boolean to check if the value has been set.
func (o *Trigger) GetInputSchemaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InputSchema, true
}

// SetInputSchema sets field value
func (o *Trigger) SetInputSchema(v string) {
	o.InputSchema = v
}

// GetExampleInput returns the ExampleInput field value
func (o *Trigger) GetExampleInput() TriggerExampleInput {
	if o == nil {
		var ret TriggerExampleInput
		return ret
	}

	return o.ExampleInput
}

// GetExampleInputOk returns a tuple with the ExampleInput field value
// and a boolean to check if the value has been set.
func (o *Trigger) GetExampleInputOk() (*TriggerExampleInput, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExampleInput, true
}

// SetExampleInput sets field value
func (o *Trigger) SetExampleInput(v TriggerExampleInput) {
	o.ExampleInput = v
}

// GetOutputSchema returns the OutputSchema field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Trigger) GetOutputSchema() string {
	if o == nil || isNil(o.OutputSchema.Get()) {
		var ret string
		return ret
	}
	return *o.OutputSchema.Get()
}

// GetOutputSchemaOk returns a tuple with the OutputSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Trigger) GetOutputSchemaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OutputSchema.Get(), o.OutputSchema.IsSet()
}

// HasOutputSchema returns a boolean if a field has been set.
func (o *Trigger) HasOutputSchema() bool {
	if o != nil && o.OutputSchema.IsSet() {
		return true
	}

	return false
}

// SetOutputSchema gets a reference to the given NullableString and assigns it to the OutputSchema field.
func (o *Trigger) SetOutputSchema(v string) {
	o.OutputSchema.Set(&v)
}
// SetOutputSchemaNil sets the value for OutputSchema to be an explicit nil
func (o *Trigger) SetOutputSchemaNil() {
	o.OutputSchema.Set(nil)
}

// UnsetOutputSchema ensures that no value is present for OutputSchema, not even an explicit nil
func (o *Trigger) UnsetOutputSchema() {
	o.OutputSchema.Unset()
}

// GetExampleOutput returns the ExampleOutput field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Trigger) GetExampleOutput() TriggerExampleOutput {
	if o == nil || isNil(o.ExampleOutput.Get()) {
		var ret TriggerExampleOutput
		return ret
	}
	return *o.ExampleOutput.Get()
}

// GetExampleOutputOk returns a tuple with the ExampleOutput field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Trigger) GetExampleOutputOk() (*TriggerExampleOutput, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExampleOutput.Get(), o.ExampleOutput.IsSet()
}

// HasExampleOutput returns a boolean if a field has been set.
func (o *Trigger) HasExampleOutput() bool {
	if o != nil && o.ExampleOutput.IsSet() {
		return true
	}

	return false
}

// SetExampleOutput gets a reference to the given NullableTriggerExampleOutput and assigns it to the ExampleOutput field.
func (o *Trigger) SetExampleOutput(v TriggerExampleOutput) {
	o.ExampleOutput.Set(&v)
}
// SetExampleOutputNil sets the value for ExampleOutput to be an explicit nil
func (o *Trigger) SetExampleOutputNil() {
	o.ExampleOutput.Set(nil)
}

// UnsetExampleOutput ensures that no value is present for ExampleOutput, not even an explicit nil
func (o *Trigger) UnsetExampleOutput() {
	o.ExampleOutput.Unset()
}

func (o Trigger) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Trigger) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["inputSchema"] = o.InputSchema
	toSerialize["exampleInput"] = o.ExampleInput
	if o.OutputSchema.IsSet() {
		toSerialize["outputSchema"] = o.OutputSchema.Get()
	}
	if o.ExampleOutput.IsSet() {
		toSerialize["exampleOutput"] = o.ExampleOutput.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Trigger) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"type",
		"inputSchema",
		"exampleInput",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTrigger := _Trigger{}

	if err = json.Unmarshal(bytes, &varTrigger); err == nil {
	*o = Trigger(varTrigger)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "type")
		delete(additionalProperties, "description")
		delete(additionalProperties, "inputSchema")
		delete(additionalProperties, "exampleInput")
		delete(additionalProperties, "outputSchema")
		delete(additionalProperties, "exampleOutput")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTrigger struct {
	value *Trigger
	isSet bool
}

func (v NullableTrigger) Get() *Trigger {
	return v.value
}

func (v *NullableTrigger) Set(val *Trigger) {
	v.value = val
	v.isSet = true
}

func (v NullableTrigger) IsSet() bool {
	return v.isSet
}

func (v *NullableTrigger) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrigger(val *Trigger) *NullableTrigger {
	return &NullableTrigger{value: val, isSet: true}
}

func (v NullableTrigger) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrigger) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


