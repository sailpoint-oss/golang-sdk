/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the InvocationStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InvocationStatus{}

// InvocationStatus struct for InvocationStatus
type InvocationStatus struct {
	// Invocation ID
	Id string `json:"id"`
	// Trigger ID
	TriggerId string `json:"triggerId"`
	// Subscription ID
	SubscriptionId string `json:"subscriptionId"`
	Type InvocationStatusType `json:"type"`
	// Invocation created timestamp. ISO-8601 in UTC.
	Created time.Time `json:"created"`
	// Invocation completed timestamp; empty fields imply invocation is in-flight or not completed. ISO-8601 in UTC.
	Completed *time.Time `json:"completed,omitempty"`
	StartInvocationInput StartInvocationInput `json:"startInvocationInput"`
	CompleteInvocationInput *CompleteInvocationInput `json:"completeInvocationInput,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InvocationStatus InvocationStatus

// NewInvocationStatus instantiates a new InvocationStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvocationStatus(id string, triggerId string, subscriptionId string, type_ InvocationStatusType, created time.Time, startInvocationInput StartInvocationInput) *InvocationStatus {
	this := InvocationStatus{}
	this.Id = id
	this.TriggerId = triggerId
	this.SubscriptionId = subscriptionId
	this.Type = type_
	this.Created = created
	this.StartInvocationInput = startInvocationInput
	return &this
}

// NewInvocationStatusWithDefaults instantiates a new InvocationStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvocationStatusWithDefaults() *InvocationStatus {
	this := InvocationStatus{}
	return &this
}

// GetId returns the Id field value
func (o *InvocationStatus) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *InvocationStatus) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *InvocationStatus) SetId(v string) {
	o.Id = v
}

// GetTriggerId returns the TriggerId field value
func (o *InvocationStatus) GetTriggerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TriggerId
}

// GetTriggerIdOk returns a tuple with the TriggerId field value
// and a boolean to check if the value has been set.
func (o *InvocationStatus) GetTriggerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TriggerId, true
}

// SetTriggerId sets field value
func (o *InvocationStatus) SetTriggerId(v string) {
	o.TriggerId = v
}

// GetSubscriptionId returns the SubscriptionId field value
func (o *InvocationStatus) GetSubscriptionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubscriptionId
}

// GetSubscriptionIdOk returns a tuple with the SubscriptionId field value
// and a boolean to check if the value has been set.
func (o *InvocationStatus) GetSubscriptionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubscriptionId, true
}

// SetSubscriptionId sets field value
func (o *InvocationStatus) SetSubscriptionId(v string) {
	o.SubscriptionId = v
}

// GetType returns the Type field value
func (o *InvocationStatus) GetType() InvocationStatusType {
	if o == nil {
		var ret InvocationStatusType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *InvocationStatus) GetTypeOk() (*InvocationStatusType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *InvocationStatus) SetType(v InvocationStatusType) {
	o.Type = v
}

// GetCreated returns the Created field value
func (o *InvocationStatus) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *InvocationStatus) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *InvocationStatus) SetCreated(v time.Time) {
	o.Created = v
}

// GetCompleted returns the Completed field value if set, zero value otherwise.
func (o *InvocationStatus) GetCompleted() time.Time {
	if o == nil || isNil(o.Completed) {
		var ret time.Time
		return ret
	}
	return *o.Completed
}

// GetCompletedOk returns a tuple with the Completed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvocationStatus) GetCompletedOk() (*time.Time, bool) {
	if o == nil || isNil(o.Completed) {
		return nil, false
	}
	return o.Completed, true
}

// HasCompleted returns a boolean if a field has been set.
func (o *InvocationStatus) HasCompleted() bool {
	if o != nil && !isNil(o.Completed) {
		return true
	}

	return false
}

// SetCompleted gets a reference to the given time.Time and assigns it to the Completed field.
func (o *InvocationStatus) SetCompleted(v time.Time) {
	o.Completed = &v
}

// GetStartInvocationInput returns the StartInvocationInput field value
func (o *InvocationStatus) GetStartInvocationInput() StartInvocationInput {
	if o == nil {
		var ret StartInvocationInput
		return ret
	}

	return o.StartInvocationInput
}

// GetStartInvocationInputOk returns a tuple with the StartInvocationInput field value
// and a boolean to check if the value has been set.
func (o *InvocationStatus) GetStartInvocationInputOk() (*StartInvocationInput, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartInvocationInput, true
}

// SetStartInvocationInput sets field value
func (o *InvocationStatus) SetStartInvocationInput(v StartInvocationInput) {
	o.StartInvocationInput = v
}

// GetCompleteInvocationInput returns the CompleteInvocationInput field value if set, zero value otherwise.
func (o *InvocationStatus) GetCompleteInvocationInput() CompleteInvocationInput {
	if o == nil || isNil(o.CompleteInvocationInput) {
		var ret CompleteInvocationInput
		return ret
	}
	return *o.CompleteInvocationInput
}

// GetCompleteInvocationInputOk returns a tuple with the CompleteInvocationInput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvocationStatus) GetCompleteInvocationInputOk() (*CompleteInvocationInput, bool) {
	if o == nil || isNil(o.CompleteInvocationInput) {
		return nil, false
	}
	return o.CompleteInvocationInput, true
}

// HasCompleteInvocationInput returns a boolean if a field has been set.
func (o *InvocationStatus) HasCompleteInvocationInput() bool {
	if o != nil && !isNil(o.CompleteInvocationInput) {
		return true
	}

	return false
}

// SetCompleteInvocationInput gets a reference to the given CompleteInvocationInput and assigns it to the CompleteInvocationInput field.
func (o *InvocationStatus) SetCompleteInvocationInput(v CompleteInvocationInput) {
	o.CompleteInvocationInput = &v
}

func (o InvocationStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InvocationStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["triggerId"] = o.TriggerId
	toSerialize["subscriptionId"] = o.SubscriptionId
	toSerialize["type"] = o.Type
	toSerialize["created"] = o.Created
	if !isNil(o.Completed) {
		toSerialize["completed"] = o.Completed
	}
	toSerialize["startInvocationInput"] = o.StartInvocationInput
	if !isNil(o.CompleteInvocationInput) {
		toSerialize["completeInvocationInput"] = o.CompleteInvocationInput
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InvocationStatus) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"triggerId",
		"subscriptionId",
		"type",
		"created",
		"startInvocationInput",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInvocationStatus := _InvocationStatus{}

	if err = json.Unmarshal(bytes, &varInvocationStatus); err == nil {
	*o = InvocationStatus(varInvocationStatus)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "triggerId")
		delete(additionalProperties, "subscriptionId")
		delete(additionalProperties, "type")
		delete(additionalProperties, "created")
		delete(additionalProperties, "completed")
		delete(additionalProperties, "startInvocationInput")
		delete(additionalProperties, "completeInvocationInput")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInvocationStatus struct {
	value *InvocationStatus
	isSet bool
}

func (v NullableInvocationStatus) Get() *InvocationStatus {
	return v.value
}

func (v *NullableInvocationStatus) Set(val *InvocationStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableInvocationStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableInvocationStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvocationStatus(val *InvocationStatus) *NullableInvocationStatus {
	return &NullableInvocationStatus{value: val, isSet: true}
}

func (v NullableInvocationStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvocationStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


