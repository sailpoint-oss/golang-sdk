/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
)

// checks if the FormUsedBy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FormUsedBy{}

// FormUsedBy struct for FormUsedBy
type FormUsedBy struct {
	// FormUsedByType value.  WORKFLOW FormUsedByTypeWorkflow SOURCE FormUsedByTypeSource
	Type *string `json:"type,omitempty"`
	// Unique identifier of the system using the form.
	Id *string `json:"id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FormUsedBy FormUsedBy

// NewFormUsedBy instantiates a new FormUsedBy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFormUsedBy() *FormUsedBy {
	this := FormUsedBy{}
	return &this
}

// NewFormUsedByWithDefaults instantiates a new FormUsedBy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormUsedByWithDefaults() *FormUsedBy {
	this := FormUsedBy{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *FormUsedBy) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormUsedBy) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *FormUsedBy) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *FormUsedBy) SetType(v string) {
	o.Type = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FormUsedBy) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormUsedBy) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FormUsedBy) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *FormUsedBy) SetId(v string) {
	o.Id = &v
}

func (o FormUsedBy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FormUsedBy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FormUsedBy) UnmarshalJSON(bytes []byte) (err error) {
	varFormUsedBy := _FormUsedBy{}

	if err = json.Unmarshal(bytes, &varFormUsedBy); err == nil {
	*o = FormUsedBy(varFormUsedBy)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFormUsedBy struct {
	value *FormUsedBy
	isSet bool
}

func (v NullableFormUsedBy) Get() *FormUsedBy {
	return v.value
}

func (v *NullableFormUsedBy) Set(val *FormUsedBy) {
	v.value = val
	v.isSet = true
}

func (v NullableFormUsedBy) IsSet() bool {
	return v.isSet
}

func (v *NullableFormUsedBy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormUsedBy(val *FormUsedBy) *NullableFormUsedBy {
	return &NullableFormUsedBy{value: val, isSet: true}
}

func (v NullableFormUsedBy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormUsedBy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


