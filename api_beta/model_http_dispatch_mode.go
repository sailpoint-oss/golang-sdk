/*
Identity Security Cloud Beta API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_beta

import (
	"encoding/json"
	"fmt"
)

// HttpDispatchMode HTTP response modes, i.e. SYNC, ASYNC, or DYNAMIC.
type HttpDispatchMode string

// List of HttpDispatchMode
const (
	HTTPDISPATCHMODE_SYNC HttpDispatchMode = "SYNC"
	HTTPDISPATCHMODE_ASYNC HttpDispatchMode = "ASYNC"
	HTTPDISPATCHMODE_DYNAMIC HttpDispatchMode = "DYNAMIC"
)

// All allowed values of HttpDispatchMode enum
var AllowedHttpDispatchModeEnumValues = []HttpDispatchMode{
	"SYNC",
	"ASYNC",
	"DYNAMIC",
}

func (v *HttpDispatchMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HttpDispatchMode(value)
	for _, existing := range AllowedHttpDispatchModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HttpDispatchMode", value)
}

// NewHttpDispatchModeFromValue returns a pointer to a valid HttpDispatchMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHttpDispatchModeFromValue(v string) (*HttpDispatchMode, error) {
	ev := HttpDispatchMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HttpDispatchMode: valid values are %v", v, AllowedHttpDispatchModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HttpDispatchMode) IsValid() bool {
	for _, existing := range AllowedHttpDispatchModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HttpDispatchMode value
func (v HttpDispatchMode) Ptr() *HttpDispatchMode {
	return &v
}

type NullableHttpDispatchMode struct {
	value *HttpDispatchMode
	isSet bool
}

func (v NullableHttpDispatchMode) Get() *HttpDispatchMode {
	return v.value
}

func (v *NullableHttpDispatchMode) Set(val *HttpDispatchMode) {
	v.value = val
	v.isSet = true
}

func (v NullableHttpDispatchMode) IsSet() bool {
	return v.isSet
}

func (v *NullableHttpDispatchMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHttpDispatchMode(val *HttpDispatchMode) *NullableHttpDispatchMode {
	return &NullableHttpDispatchMode{value: val, isSet: true}
}

func (v NullableHttpDispatchMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHttpDispatchMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

