/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v3

import (
	"encoding/json"
	"fmt"
)

// Operation Operation on a specific criteria
type Operation string

// List of Operation
const (
	OPERATION_EQUALS Operation = "EQUALS"
	OPERATION_NOT_EQUALS Operation = "NOT_EQUALS"
	OPERATION_CONTAINS Operation = "CONTAINS"
	OPERATION_STARTS_WITH Operation = "STARTS_WITH"
	OPERATION_ENDS_WITH Operation = "ENDS_WITH"
	OPERATION_AND Operation = "AND"
	OPERATION_OR Operation = "OR"
)

// All allowed values of Operation enum
var AllowedOperationEnumValues = []Operation{
	"EQUALS",
	"NOT_EQUALS",
	"CONTAINS",
	"STARTS_WITH",
	"ENDS_WITH",
	"AND",
	"OR",
}

func (v *Operation) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Operation(value)
	for _, existing := range AllowedOperationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Operation", value)
}

// NewOperationFromValue returns a pointer to a valid Operation
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOperationFromValue(v string) (*Operation, error) {
	ev := Operation(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Operation: valid values are %v", v, AllowedOperationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Operation) IsValid() bool {
	for _, existing := range AllowedOperationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Operation value
func (v Operation) Ptr() *Operation {
	return &v
}

type NullableOperation struct {
	value *Operation
	isSet bool
}

func (v NullableOperation) Get() *Operation {
	return v.value
}

func (v *NullableOperation) Set(val *Operation) {
	v.value = val
	v.isSet = true
}

func (v NullableOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOperation(val *Operation) *NullableOperation {
	return &NullableOperation{value: val, isSet: true}
}

func (v NullableOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

