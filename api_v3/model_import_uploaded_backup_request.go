/*
Identity Security Cloud V3 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v3

import (
	"encoding/json"
	"os"
	"fmt"
)

// checks if the ImportUploadedBackupRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImportUploadedBackupRequest{}

// ImportUploadedBackupRequest struct for ImportUploadedBackupRequest
type ImportUploadedBackupRequest struct {
	// JSON file containing the objects to be imported.
	Data *os.File `json:"data"`
	// Name that will be assigned to the uploaded file.
	Name string `json:"name"`
	AdditionalProperties map[string]interface{}
}

type _ImportUploadedBackupRequest ImportUploadedBackupRequest

// NewImportUploadedBackupRequest instantiates a new ImportUploadedBackupRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportUploadedBackupRequest(data *os.File, name string) *ImportUploadedBackupRequest {
	this := ImportUploadedBackupRequest{}
	this.Data = data
	this.Name = name
	return &this
}

// NewImportUploadedBackupRequestWithDefaults instantiates a new ImportUploadedBackupRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportUploadedBackupRequestWithDefaults() *ImportUploadedBackupRequest {
	this := ImportUploadedBackupRequest{}
	return &this
}

// GetData returns the Data field value
func (o *ImportUploadedBackupRequest) GetData() *os.File {
	if o == nil {
		var ret *os.File
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ImportUploadedBackupRequest) GetDataOk() (**os.File, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *ImportUploadedBackupRequest) SetData(v *os.File) {
	o.Data = v
}

// GetName returns the Name field value
func (o *ImportUploadedBackupRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ImportUploadedBackupRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ImportUploadedBackupRequest) SetName(v string) {
	o.Name = v
}

func (o ImportUploadedBackupRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImportUploadedBackupRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	toSerialize["name"] = o.Name

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ImportUploadedBackupRequest) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImportUploadedBackupRequest := _ImportUploadedBackupRequest{}

	if err = json.Unmarshal(bytes, &varImportUploadedBackupRequest); err == nil {
			*o = ImportUploadedBackupRequest(varImportUploadedBackupRequest)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "data")
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableImportUploadedBackupRequest struct {
	value *ImportUploadedBackupRequest
	isSet bool
}

func (v NullableImportUploadedBackupRequest) Get() *ImportUploadedBackupRequest {
	return v.value
}

func (v *NullableImportUploadedBackupRequest) Set(val *ImportUploadedBackupRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableImportUploadedBackupRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableImportUploadedBackupRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportUploadedBackupRequest(val *ImportUploadedBackupRequest) *NullableImportUploadedBackupRequest {
	return &NullableImportUploadedBackupRequest{value: val, isSet: true}
}

func (v NullableImportUploadedBackupRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportUploadedBackupRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


