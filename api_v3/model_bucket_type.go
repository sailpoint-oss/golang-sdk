/*
Identity Security Cloud V3 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v3

import (
	"encoding/json"
	"fmt"
)

// BucketType Enum representing the currently supported bucket aggregation types. Additional values may be added in the future without notice.
type BucketType string

// List of BucketType
const (
	BUCKETTYPE_TERMS BucketType = "TERMS"
)

// All allowed values of BucketType enum
var AllowedBucketTypeEnumValues = []BucketType{
	"TERMS",
}

func (v *BucketType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BucketType(value)
	for _, existing := range AllowedBucketTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BucketType", value)
}

// NewBucketTypeFromValue returns a pointer to a valid BucketType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBucketTypeFromValue(v string) (*BucketType, error) {
	ev := BucketType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BucketType: valid values are %v", v, AllowedBucketTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BucketType) IsValid() bool {
	for _, existing := range AllowedBucketTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BucketType value
func (v BucketType) Ptr() *BucketType {
	return &v
}

type NullableBucketType struct {
	value *BucketType
	isSet bool
}

func (v NullableBucketType) Get() *BucketType {
	return v.value
}

func (v *NullableBucketType) Set(val *BucketType) {
	v.value = val
	v.isSet = true
}

func (v NullableBucketType) IsSet() bool {
	return v.isSet
}

func (v *NullableBucketType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBucketType(val *BucketType) *NullableBucketType {
	return &NullableBucketType{value: val, isSet: true}
}

func (v NullableBucketType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBucketType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

