/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v3

import (
	"encoding/json"
	"fmt"
)

// checks if the RoleBulkDeleteRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoleBulkDeleteRequest{}

// RoleBulkDeleteRequest struct for RoleBulkDeleteRequest
type RoleBulkDeleteRequest struct {
	// List of IDs of Roles to be deleted.
	RoleIds []string `json:"roleIds"`
	AdditionalProperties map[string]interface{}
}

type _RoleBulkDeleteRequest RoleBulkDeleteRequest

// NewRoleBulkDeleteRequest instantiates a new RoleBulkDeleteRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleBulkDeleteRequest(roleIds []string) *RoleBulkDeleteRequest {
	this := RoleBulkDeleteRequest{}
	this.RoleIds = roleIds
	return &this
}

// NewRoleBulkDeleteRequestWithDefaults instantiates a new RoleBulkDeleteRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleBulkDeleteRequestWithDefaults() *RoleBulkDeleteRequest {
	this := RoleBulkDeleteRequest{}
	return &this
}

// GetRoleIds returns the RoleIds field value
func (o *RoleBulkDeleteRequest) GetRoleIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.RoleIds
}

// GetRoleIdsOk returns a tuple with the RoleIds field value
// and a boolean to check if the value has been set.
func (o *RoleBulkDeleteRequest) GetRoleIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RoleIds, true
}

// SetRoleIds sets field value
func (o *RoleBulkDeleteRequest) SetRoleIds(v []string) {
	o.RoleIds = v
}

func (o RoleBulkDeleteRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoleBulkDeleteRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["roleIds"] = o.RoleIds

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RoleBulkDeleteRequest) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"roleIds",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRoleBulkDeleteRequest := _RoleBulkDeleteRequest{}

	if err = json.Unmarshal(bytes, &varRoleBulkDeleteRequest); err == nil {
	*o = RoleBulkDeleteRequest(varRoleBulkDeleteRequest)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "roleIds")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRoleBulkDeleteRequest struct {
	value *RoleBulkDeleteRequest
	isSet bool
}

func (v NullableRoleBulkDeleteRequest) Get() *RoleBulkDeleteRequest {
	return v.value
}

func (v *NullableRoleBulkDeleteRequest) Set(val *RoleBulkDeleteRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleBulkDeleteRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleBulkDeleteRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleBulkDeleteRequest(val *RoleBulkDeleteRequest) *NullableRoleBulkDeleteRequest {
	return &NullableRoleBulkDeleteRequest{value: val, isSet: true}
}

func (v NullableRoleBulkDeleteRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleBulkDeleteRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


