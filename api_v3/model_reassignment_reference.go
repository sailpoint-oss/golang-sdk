/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v3

import (
	"encoding/json"
	"fmt"
)

// checks if the ReassignmentReference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReassignmentReference{}

// ReassignmentReference struct for ReassignmentReference
type ReassignmentReference struct {
	// The ID of item or identity being reassigned.
	Id string `json:"id"`
	// The type of item or identity being reassigned.
	Type string `json:"type"`
	AdditionalProperties map[string]interface{}
}

type _ReassignmentReference ReassignmentReference

// NewReassignmentReference instantiates a new ReassignmentReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReassignmentReference(id string, type_ string) *ReassignmentReference {
	this := ReassignmentReference{}
	this.Id = id
	this.Type = type_
	return &this
}

// NewReassignmentReferenceWithDefaults instantiates a new ReassignmentReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReassignmentReferenceWithDefaults() *ReassignmentReference {
	this := ReassignmentReference{}
	return &this
}

// GetId returns the Id field value
func (o *ReassignmentReference) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ReassignmentReference) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ReassignmentReference) SetId(v string) {
	o.Id = v
}

// GetType returns the Type field value
func (o *ReassignmentReference) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ReassignmentReference) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ReassignmentReference) SetType(v string) {
	o.Type = v
}

func (o ReassignmentReference) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReassignmentReference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["type"] = o.Type

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ReassignmentReference) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReassignmentReference := _ReassignmentReference{}

	if err = json.Unmarshal(bytes, &varReassignmentReference); err == nil {
	*o = ReassignmentReference(varReassignmentReference)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableReassignmentReference struct {
	value *ReassignmentReference
	isSet bool
}

func (v NullableReassignmentReference) Get() *ReassignmentReference {
	return v.value
}

func (v *NullableReassignmentReference) Set(val *ReassignmentReference) {
	v.value = val
	v.isSet = true
}

func (v NullableReassignmentReference) IsSet() bool {
	return v.isSet
}

func (v *NullableReassignmentReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReassignmentReference(val *ReassignmentReference) *NullableReassignmentReference {
	return &NullableReassignmentReference{value: val, isSet: true}
}

func (v NullableReassignmentReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReassignmentReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


