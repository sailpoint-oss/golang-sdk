/*
Identity Security Cloud V3 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v3

import (
	"encoding/json"
	"fmt"
)


// ReportDetailsArguments The string-object map(dictionary) with the arguments needed for report processing.
type ReportDetailsArguments struct {
	AccountsExportReportArguments *AccountsExportReportArguments
	IdentitiesDetailsReportArguments *IdentitiesDetailsReportArguments
	IdentitiesReportArguments *IdentitiesReportArguments
	IdentityProfileIdentityErrorReportArguments *IdentityProfileIdentityErrorReportArguments
	OrphanIdentitiesReportArguments *OrphanIdentitiesReportArguments
	SearchExportReportArguments *SearchExportReportArguments
	UncorrelatedAccountsReportArguments *UncorrelatedAccountsReportArguments
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *ReportDetailsArguments) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into AccountsExportReportArguments
	err = json.Unmarshal(data, &dst.AccountsExportReportArguments);
	if err == nil {
		jsonAccountsExportReportArguments, _ := json.Marshal(dst.AccountsExportReportArguments)
		if string(jsonAccountsExportReportArguments) == "{}" { // empty struct
			dst.AccountsExportReportArguments = nil
		} else {
			return nil // data stored in dst.AccountsExportReportArguments, return on the first match
		}
	} else {
		dst.AccountsExportReportArguments = nil
	}

	// try to unmarshal JSON data into IdentitiesDetailsReportArguments
	err = json.Unmarshal(data, &dst.IdentitiesDetailsReportArguments);
	if err == nil {
		jsonIdentitiesDetailsReportArguments, _ := json.Marshal(dst.IdentitiesDetailsReportArguments)
		if string(jsonIdentitiesDetailsReportArguments) == "{}" { // empty struct
			dst.IdentitiesDetailsReportArguments = nil
		} else {
			return nil // data stored in dst.IdentitiesDetailsReportArguments, return on the first match
		}
	} else {
		dst.IdentitiesDetailsReportArguments = nil
	}

	// try to unmarshal JSON data into IdentitiesReportArguments
	err = json.Unmarshal(data, &dst.IdentitiesReportArguments);
	if err == nil {
		jsonIdentitiesReportArguments, _ := json.Marshal(dst.IdentitiesReportArguments)
		if string(jsonIdentitiesReportArguments) == "{}" { // empty struct
			dst.IdentitiesReportArguments = nil
		} else {
			return nil // data stored in dst.IdentitiesReportArguments, return on the first match
		}
	} else {
		dst.IdentitiesReportArguments = nil
	}

	// try to unmarshal JSON data into IdentityProfileIdentityErrorReportArguments
	err = json.Unmarshal(data, &dst.IdentityProfileIdentityErrorReportArguments);
	if err == nil {
		jsonIdentityProfileIdentityErrorReportArguments, _ := json.Marshal(dst.IdentityProfileIdentityErrorReportArguments)
		if string(jsonIdentityProfileIdentityErrorReportArguments) == "{}" { // empty struct
			dst.IdentityProfileIdentityErrorReportArguments = nil
		} else {
			return nil // data stored in dst.IdentityProfileIdentityErrorReportArguments, return on the first match
		}
	} else {
		dst.IdentityProfileIdentityErrorReportArguments = nil
	}

	// try to unmarshal JSON data into OrphanIdentitiesReportArguments
	err = json.Unmarshal(data, &dst.OrphanIdentitiesReportArguments);
	if err == nil {
		jsonOrphanIdentitiesReportArguments, _ := json.Marshal(dst.OrphanIdentitiesReportArguments)
		if string(jsonOrphanIdentitiesReportArguments) == "{}" { // empty struct
			dst.OrphanIdentitiesReportArguments = nil
		} else {
			return nil // data stored in dst.OrphanIdentitiesReportArguments, return on the first match
		}
	} else {
		dst.OrphanIdentitiesReportArguments = nil
	}

	// try to unmarshal JSON data into SearchExportReportArguments
	err = json.Unmarshal(data, &dst.SearchExportReportArguments);
	if err == nil {
		jsonSearchExportReportArguments, _ := json.Marshal(dst.SearchExportReportArguments)
		if string(jsonSearchExportReportArguments) == "{}" { // empty struct
			dst.SearchExportReportArguments = nil
		} else {
			return nil // data stored in dst.SearchExportReportArguments, return on the first match
		}
	} else {
		dst.SearchExportReportArguments = nil
	}

	// try to unmarshal JSON data into UncorrelatedAccountsReportArguments
	err = json.Unmarshal(data, &dst.UncorrelatedAccountsReportArguments);
	if err == nil {
		jsonUncorrelatedAccountsReportArguments, _ := json.Marshal(dst.UncorrelatedAccountsReportArguments)
		if string(jsonUncorrelatedAccountsReportArguments) == "{}" { // empty struct
			dst.UncorrelatedAccountsReportArguments = nil
		} else {
			return nil // data stored in dst.UncorrelatedAccountsReportArguments, return on the first match
		}
	} else {
		dst.UncorrelatedAccountsReportArguments = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(ReportDetailsArguments)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *ReportDetailsArguments) MarshalJSON() ([]byte, error) {
	if src.AccountsExportReportArguments != nil {
		return json.Marshal(&src.AccountsExportReportArguments)
	}

	if src.IdentitiesDetailsReportArguments != nil {
		return json.Marshal(&src.IdentitiesDetailsReportArguments)
	}

	if src.IdentitiesReportArguments != nil {
		return json.Marshal(&src.IdentitiesReportArguments)
	}

	if src.IdentityProfileIdentityErrorReportArguments != nil {
		return json.Marshal(&src.IdentityProfileIdentityErrorReportArguments)
	}

	if src.OrphanIdentitiesReportArguments != nil {
		return json.Marshal(&src.OrphanIdentitiesReportArguments)
	}

	if src.SearchExportReportArguments != nil {
		return json.Marshal(&src.SearchExportReportArguments)
	}

	if src.UncorrelatedAccountsReportArguments != nil {
		return json.Marshal(&src.UncorrelatedAccountsReportArguments)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableReportDetailsArguments struct {
	value *ReportDetailsArguments
	isSet bool
}

func (v NullableReportDetailsArguments) Get() *ReportDetailsArguments {
	return v.value
}

func (v *NullableReportDetailsArguments) Set(val *ReportDetailsArguments) {
	v.value = val
	v.isSet = true
}

func (v NullableReportDetailsArguments) IsSet() bool {
	return v.isSet
}

func (v *NullableReportDetailsArguments) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportDetailsArguments(val *ReportDetailsArguments) *NullableReportDetailsArguments {
	return &NullableReportDetailsArguments{value: val, isSet: true}
}

func (v NullableReportDetailsArguments) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportDetailsArguments) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


