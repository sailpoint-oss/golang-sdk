/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v3

import (
	"encoding/json"
	"fmt"
)

// FilterType Enum representing the currently supported filter types. Additional values may be added in the future without notice.
type FilterType string

// List of FilterType
const (
	FILTERTYPE_EXISTS FilterType = "EXISTS"
	FILTERTYPE_RANGE FilterType = "RANGE"
	FILTERTYPE_TERMS FilterType = "TERMS"
)

// All allowed values of FilterType enum
var AllowedFilterTypeEnumValues = []FilterType{
	"EXISTS",
	"RANGE",
	"TERMS",
}

func (v *FilterType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FilterType(value)
	for _, existing := range AllowedFilterTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FilterType", value)
}

// NewFilterTypeFromValue returns a pointer to a valid FilterType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFilterTypeFromValue(v string) (*FilterType, error) {
	ev := FilterType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FilterType: valid values are %v", v, AllowedFilterTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FilterType) IsValid() bool {
	for _, existing := range AllowedFilterTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FilterType value
func (v FilterType) Ptr() *FilterType {
	return &v
}

type NullableFilterType struct {
	value *FilterType
	isSet bool
}

func (v NullableFilterType) Get() *FilterType {
	return v.value
}

func (v *NullableFilterType) Set(val *FilterType) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterType) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterType(val *FilterType) *NullableFilterType {
	return &NullableFilterType{value: val, isSet: true}
}

func (v NullableFilterType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

