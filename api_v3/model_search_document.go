/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v3

import (
	"encoding/json"
	"fmt"
)

// SearchDocument - struct for SearchDocument
type SearchDocument struct {
	AccessProfileDocument *AccessProfileDocument
	AccountActivityDocument *AccountActivityDocument
	EntitlementDocument *EntitlementDocument
	EventDocument *EventDocument
	IdentityDocument *IdentityDocument
	RoleDocument *RoleDocument
}

// AccessProfileDocumentAsSearchDocument is a convenience function that returns AccessProfileDocument wrapped in SearchDocument
func AccessProfileDocumentAsSearchDocument(v *AccessProfileDocument) SearchDocument {
	return SearchDocument{
		AccessProfileDocument: v,
	}
}

// AccountActivityDocumentAsSearchDocument is a convenience function that returns AccountActivityDocument wrapped in SearchDocument
func AccountActivityDocumentAsSearchDocument(v *AccountActivityDocument) SearchDocument {
	return SearchDocument{
		AccountActivityDocument: v,
	}
}

// EntitlementDocumentAsSearchDocument is a convenience function that returns EntitlementDocument wrapped in SearchDocument
func EntitlementDocumentAsSearchDocument(v *EntitlementDocument) SearchDocument {
	return SearchDocument{
		EntitlementDocument: v,
	}
}

// EventDocumentAsSearchDocument is a convenience function that returns EventDocument wrapped in SearchDocument
func EventDocumentAsSearchDocument(v *EventDocument) SearchDocument {
	return SearchDocument{
		EventDocument: v,
	}
}

// IdentityDocumentAsSearchDocument is a convenience function that returns IdentityDocument wrapped in SearchDocument
func IdentityDocumentAsSearchDocument(v *IdentityDocument) SearchDocument {
	return SearchDocument{
		IdentityDocument: v,
	}
}

// RoleDocumentAsSearchDocument is a convenience function that returns RoleDocument wrapped in SearchDocument
func RoleDocumentAsSearchDocument(v *RoleDocument) SearchDocument {
	return SearchDocument{
		RoleDocument: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SearchDocument) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AccessProfileDocument
	err = newStrictDecoder(data).Decode(&dst.AccessProfileDocument)
	if err == nil {
		jsonAccessProfileDocument, _ := json.Marshal(dst.AccessProfileDocument)
		if string(jsonAccessProfileDocument) == "{}" { // empty struct
			dst.AccessProfileDocument = nil
		} else {
			match++
		}
	} else {
		dst.AccessProfileDocument = nil
	}

	// try to unmarshal data into AccountActivityDocument
	err = newStrictDecoder(data).Decode(&dst.AccountActivityDocument)
	if err == nil {
		jsonAccountActivityDocument, _ := json.Marshal(dst.AccountActivityDocument)
		if string(jsonAccountActivityDocument) == "{}" { // empty struct
			dst.AccountActivityDocument = nil
		} else {
			match++
		}
	} else {
		dst.AccountActivityDocument = nil
	}

	// try to unmarshal data into EntitlementDocument
	err = newStrictDecoder(data).Decode(&dst.EntitlementDocument)
	if err == nil {
		jsonEntitlementDocument, _ := json.Marshal(dst.EntitlementDocument)
		if string(jsonEntitlementDocument) == "{}" { // empty struct
			dst.EntitlementDocument = nil
		} else {
			match++
		}
	} else {
		dst.EntitlementDocument = nil
	}

	// try to unmarshal data into EventDocument
	err = newStrictDecoder(data).Decode(&dst.EventDocument)
	if err == nil {
		jsonEventDocument, _ := json.Marshal(dst.EventDocument)
		if string(jsonEventDocument) == "{}" { // empty struct
			dst.EventDocument = nil
		} else {
			match++
		}
	} else {
		dst.EventDocument = nil
	}

	// try to unmarshal data into IdentityDocument
	err = newStrictDecoder(data).Decode(&dst.IdentityDocument)
	if err == nil {
		jsonIdentityDocument, _ := json.Marshal(dst.IdentityDocument)
		if string(jsonIdentityDocument) == "{}" { // empty struct
			dst.IdentityDocument = nil
		} else {
			match++
		}
	} else {
		dst.IdentityDocument = nil
	}

	// try to unmarshal data into RoleDocument
	err = newStrictDecoder(data).Decode(&dst.RoleDocument)
	if err == nil {
		jsonRoleDocument, _ := json.Marshal(dst.RoleDocument)
		if string(jsonRoleDocument) == "{}" { // empty struct
			dst.RoleDocument = nil
		} else {
			match++
		}
	} else {
		dst.RoleDocument = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AccessProfileDocument = nil
		dst.AccountActivityDocument = nil
		dst.EntitlementDocument = nil
		dst.EventDocument = nil
		dst.IdentityDocument = nil
		dst.RoleDocument = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SearchDocument)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SearchDocument)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SearchDocument) MarshalJSON() ([]byte, error) {
	if src.AccessProfileDocument != nil {
		return json.Marshal(&src.AccessProfileDocument)
	}

	if src.AccountActivityDocument != nil {
		return json.Marshal(&src.AccountActivityDocument)
	}

	if src.EntitlementDocument != nil {
		return json.Marshal(&src.EntitlementDocument)
	}

	if src.EventDocument != nil {
		return json.Marshal(&src.EventDocument)
	}

	if src.IdentityDocument != nil {
		return json.Marshal(&src.IdentityDocument)
	}

	if src.RoleDocument != nil {
		return json.Marshal(&src.RoleDocument)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SearchDocument) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AccessProfileDocument != nil {
		return obj.AccessProfileDocument
	}

	if obj.AccountActivityDocument != nil {
		return obj.AccountActivityDocument
	}

	if obj.EntitlementDocument != nil {
		return obj.EntitlementDocument
	}

	if obj.EventDocument != nil {
		return obj.EventDocument
	}

	if obj.IdentityDocument != nil {
		return obj.IdentityDocument
	}

	if obj.RoleDocument != nil {
		return obj.RoleDocument
	}

	// all schemas are nil
	return nil
}

type NullableSearchDocument struct {
	value *SearchDocument
	isSet bool
}

func (v NullableSearchDocument) Get() *SearchDocument {
	return v.value
}

func (v *NullableSearchDocument) Set(val *SearchDocument) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchDocument) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchDocument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchDocument(val *SearchDocument) *NullableSearchDocument {
	return &NullableSearchDocument{value: val, isSet: true}
}

func (v NullableSearchDocument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchDocument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


