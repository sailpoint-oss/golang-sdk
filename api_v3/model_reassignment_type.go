/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v3

import (
	"encoding/json"
	"fmt"
)

// ReassignmentType The approval reassignment type.  * MANUAL_REASSIGNMENT: An approval with this reassignment type has been specifically reassigned by the approval task's owner, from their queue to someone else's.  * AUTOMATIC_REASSIGNMENT: An approval with this reassignment type has been automatically reassigned from another approver's queue, according to that approver's reassignment configuration. The approver's reassignment configuration may be set up to automatically reassign approval tasks for a defined (or possibly open-ended) period of time. * AUTO_ESCALATION: An approval with this reassignment type has been automatically reassigned from another approver's queue, according to the request's escalation configuration. For more information about escalation configuration, refer to [Setting Global Reminders and Escalation Policies](https://documentation.sailpoint.com/saas/help/requests/config_emails.html). * SELF_REVIEW_DELEGATION: An approval with this reassignment type has been automatically reassigned by the system to prevent self-review. This helps prevent situations like a requester being tasked with approving their own request. For more information about preventing self-review, refer to [Self-review Prevention](https://documentation.sailpoint.com/saas/help/users/work_reassignment.html#self-review-prevention) and [Preventing Self-approval](https://documentation.sailpoint.com/saas/help/requests/config_ap_roles.html#preventing-self-approval).
type ReassignmentType string

// List of ReassignmentType
const (
	REASSIGNMENTTYPE_MANUAL_REASSIGNMENT ReassignmentType = "MANUAL_REASSIGNMENT"
	REASSIGNMENTTYPE_AUTOMATIC_REASSIGNMENT ReassignmentType = "AUTOMATIC_REASSIGNMENT"
	REASSIGNMENTTYPE_AUTO_ESCALATION ReassignmentType = "AUTO_ESCALATION"
	REASSIGNMENTTYPE_SELF_REVIEW_DELEGATION ReassignmentType = "SELF_REVIEW_DELEGATION"
)

// All allowed values of ReassignmentType enum
var AllowedReassignmentTypeEnumValues = []ReassignmentType{
	"MANUAL_REASSIGNMENT",
	"AUTOMATIC_REASSIGNMENT",
	"AUTO_ESCALATION",
	"SELF_REVIEW_DELEGATION",
}

func (v *ReassignmentType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReassignmentType(value)
	for _, existing := range AllowedReassignmentTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReassignmentType", value)
}

// NewReassignmentTypeFromValue returns a pointer to a valid ReassignmentType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReassignmentTypeFromValue(v string) (*ReassignmentType, error) {
	ev := ReassignmentType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReassignmentType: valid values are %v", v, AllowedReassignmentTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReassignmentType) IsValid() bool {
	for _, existing := range AllowedReassignmentTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReassignmentType value
func (v ReassignmentType) Ptr() *ReassignmentType {
	return &v
}

type NullableReassignmentType struct {
	value *ReassignmentType
	isSet bool
}

func (v NullableReassignmentType) Get() *ReassignmentType {
	return v.value
}

func (v *NullableReassignmentType) Set(val *ReassignmentType) {
	v.value = val
	v.isSet = true
}

func (v NullableReassignmentType) IsSet() bool {
	return v.isSet
}

func (v *NullableReassignmentType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReassignmentType(val *ReassignmentType) *NullableReassignmentType {
	return &NullableReassignmentType{value: val, isSet: true}
}

func (v NullableReassignmentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReassignmentType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

