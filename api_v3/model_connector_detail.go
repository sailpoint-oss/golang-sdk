/*
Identity Security Cloud V3 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v3

import (
	"encoding/json"
)

// checks if the ConnectorDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectorDetail{}

// ConnectorDetail struct for ConnectorDetail
type ConnectorDetail struct {
	// The connector name
	Name *string `json:"name,omitempty"`
	// The connector type
	Type *string `json:"type,omitempty"`
	// The connector class name
	ClassName *string `json:"className,omitempty"`
	// The connector script name
	ScriptName *string `json:"scriptName,omitempty"`
	// The connector application xml
	ApplicationXml *string `json:"applicationXml,omitempty"`
	// The connector correlation config xml
	CorrelationConfigXml *string `json:"correlationConfigXml,omitempty"`
	// The connector source config xml
	SourceConfigXml *string `json:"sourceConfigXml,omitempty"`
	// The connector source config
	SourceConfig *string `json:"sourceConfig,omitempty"`
	// The connector source config origin
	SourceConfigFrom *string `json:"sourceConfigFrom,omitempty"`
	// storage path key for this connector
	S3Location *string `json:"s3Location,omitempty"`
	// The list of uploaded files supported by the connector. If there was any executable files uploaded to thee connector. Typically this be empty as the executable be uploaded at source creation.
	UploadedFiles []string `json:"uploadedFiles,omitempty"`
	// true if the source is file upload
	FileUpload *bool `json:"fileUpload,omitempty"`
	// true if the source is a direct connect source
	DirectConnect *bool `json:"directConnect,omitempty"`
	// A map containing translation attributes by loacale key
	TranslationProperties map[string]interface{} `json:"translationProperties,omitempty"`
	// A map containing metadata pertinent to the UI to be used
	ConnectorMetadata map[string]interface{} `json:"connectorMetadata,omitempty"`
	// The connector status
	Status *string `json:"status,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ConnectorDetail ConnectorDetail

// NewConnectorDetail instantiates a new ConnectorDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectorDetail() *ConnectorDetail {
	this := ConnectorDetail{}
	var fileUpload bool = false
	this.FileUpload = &fileUpload
	var directConnect bool = false
	this.DirectConnect = &directConnect
	return &this
}

// NewConnectorDetailWithDefaults instantiates a new ConnectorDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectorDetailWithDefaults() *ConnectorDetail {
	this := ConnectorDetail{}
	var fileUpload bool = false
	this.FileUpload = &fileUpload
	var directConnect bool = false
	this.DirectConnect = &directConnect
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ConnectorDetail) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorDetail) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ConnectorDetail) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ConnectorDetail) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ConnectorDetail) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorDetail) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ConnectorDetail) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ConnectorDetail) SetType(v string) {
	o.Type = &v
}

// GetClassName returns the ClassName field value if set, zero value otherwise.
func (o *ConnectorDetail) GetClassName() string {
	if o == nil || isNil(o.ClassName) {
		var ret string
		return ret
	}
	return *o.ClassName
}

// GetClassNameOk returns a tuple with the ClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorDetail) GetClassNameOk() (*string, bool) {
	if o == nil || isNil(o.ClassName) {
		return nil, false
	}
	return o.ClassName, true
}

// HasClassName returns a boolean if a field has been set.
func (o *ConnectorDetail) HasClassName() bool {
	if o != nil && !isNil(o.ClassName) {
		return true
	}

	return false
}

// SetClassName gets a reference to the given string and assigns it to the ClassName field.
func (o *ConnectorDetail) SetClassName(v string) {
	o.ClassName = &v
}

// GetScriptName returns the ScriptName field value if set, zero value otherwise.
func (o *ConnectorDetail) GetScriptName() string {
	if o == nil || isNil(o.ScriptName) {
		var ret string
		return ret
	}
	return *o.ScriptName
}

// GetScriptNameOk returns a tuple with the ScriptName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorDetail) GetScriptNameOk() (*string, bool) {
	if o == nil || isNil(o.ScriptName) {
		return nil, false
	}
	return o.ScriptName, true
}

// HasScriptName returns a boolean if a field has been set.
func (o *ConnectorDetail) HasScriptName() bool {
	if o != nil && !isNil(o.ScriptName) {
		return true
	}

	return false
}

// SetScriptName gets a reference to the given string and assigns it to the ScriptName field.
func (o *ConnectorDetail) SetScriptName(v string) {
	o.ScriptName = &v
}

// GetApplicationXml returns the ApplicationXml field value if set, zero value otherwise.
func (o *ConnectorDetail) GetApplicationXml() string {
	if o == nil || isNil(o.ApplicationXml) {
		var ret string
		return ret
	}
	return *o.ApplicationXml
}

// GetApplicationXmlOk returns a tuple with the ApplicationXml field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorDetail) GetApplicationXmlOk() (*string, bool) {
	if o == nil || isNil(o.ApplicationXml) {
		return nil, false
	}
	return o.ApplicationXml, true
}

// HasApplicationXml returns a boolean if a field has been set.
func (o *ConnectorDetail) HasApplicationXml() bool {
	if o != nil && !isNil(o.ApplicationXml) {
		return true
	}

	return false
}

// SetApplicationXml gets a reference to the given string and assigns it to the ApplicationXml field.
func (o *ConnectorDetail) SetApplicationXml(v string) {
	o.ApplicationXml = &v
}

// GetCorrelationConfigXml returns the CorrelationConfigXml field value if set, zero value otherwise.
func (o *ConnectorDetail) GetCorrelationConfigXml() string {
	if o == nil || isNil(o.CorrelationConfigXml) {
		var ret string
		return ret
	}
	return *o.CorrelationConfigXml
}

// GetCorrelationConfigXmlOk returns a tuple with the CorrelationConfigXml field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorDetail) GetCorrelationConfigXmlOk() (*string, bool) {
	if o == nil || isNil(o.CorrelationConfigXml) {
		return nil, false
	}
	return o.CorrelationConfigXml, true
}

// HasCorrelationConfigXml returns a boolean if a field has been set.
func (o *ConnectorDetail) HasCorrelationConfigXml() bool {
	if o != nil && !isNil(o.CorrelationConfigXml) {
		return true
	}

	return false
}

// SetCorrelationConfigXml gets a reference to the given string and assigns it to the CorrelationConfigXml field.
func (o *ConnectorDetail) SetCorrelationConfigXml(v string) {
	o.CorrelationConfigXml = &v
}

// GetSourceConfigXml returns the SourceConfigXml field value if set, zero value otherwise.
func (o *ConnectorDetail) GetSourceConfigXml() string {
	if o == nil || isNil(o.SourceConfigXml) {
		var ret string
		return ret
	}
	return *o.SourceConfigXml
}

// GetSourceConfigXmlOk returns a tuple with the SourceConfigXml field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorDetail) GetSourceConfigXmlOk() (*string, bool) {
	if o == nil || isNil(o.SourceConfigXml) {
		return nil, false
	}
	return o.SourceConfigXml, true
}

// HasSourceConfigXml returns a boolean if a field has been set.
func (o *ConnectorDetail) HasSourceConfigXml() bool {
	if o != nil && !isNil(o.SourceConfigXml) {
		return true
	}

	return false
}

// SetSourceConfigXml gets a reference to the given string and assigns it to the SourceConfigXml field.
func (o *ConnectorDetail) SetSourceConfigXml(v string) {
	o.SourceConfigXml = &v
}

// GetSourceConfig returns the SourceConfig field value if set, zero value otherwise.
func (o *ConnectorDetail) GetSourceConfig() string {
	if o == nil || isNil(o.SourceConfig) {
		var ret string
		return ret
	}
	return *o.SourceConfig
}

// GetSourceConfigOk returns a tuple with the SourceConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorDetail) GetSourceConfigOk() (*string, bool) {
	if o == nil || isNil(o.SourceConfig) {
		return nil, false
	}
	return o.SourceConfig, true
}

// HasSourceConfig returns a boolean if a field has been set.
func (o *ConnectorDetail) HasSourceConfig() bool {
	if o != nil && !isNil(o.SourceConfig) {
		return true
	}

	return false
}

// SetSourceConfig gets a reference to the given string and assigns it to the SourceConfig field.
func (o *ConnectorDetail) SetSourceConfig(v string) {
	o.SourceConfig = &v
}

// GetSourceConfigFrom returns the SourceConfigFrom field value if set, zero value otherwise.
func (o *ConnectorDetail) GetSourceConfigFrom() string {
	if o == nil || isNil(o.SourceConfigFrom) {
		var ret string
		return ret
	}
	return *o.SourceConfigFrom
}

// GetSourceConfigFromOk returns a tuple with the SourceConfigFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorDetail) GetSourceConfigFromOk() (*string, bool) {
	if o == nil || isNil(o.SourceConfigFrom) {
		return nil, false
	}
	return o.SourceConfigFrom, true
}

// HasSourceConfigFrom returns a boolean if a field has been set.
func (o *ConnectorDetail) HasSourceConfigFrom() bool {
	if o != nil && !isNil(o.SourceConfigFrom) {
		return true
	}

	return false
}

// SetSourceConfigFrom gets a reference to the given string and assigns it to the SourceConfigFrom field.
func (o *ConnectorDetail) SetSourceConfigFrom(v string) {
	o.SourceConfigFrom = &v
}

// GetS3Location returns the S3Location field value if set, zero value otherwise.
func (o *ConnectorDetail) GetS3Location() string {
	if o == nil || isNil(o.S3Location) {
		var ret string
		return ret
	}
	return *o.S3Location
}

// GetS3LocationOk returns a tuple with the S3Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorDetail) GetS3LocationOk() (*string, bool) {
	if o == nil || isNil(o.S3Location) {
		return nil, false
	}
	return o.S3Location, true
}

// HasS3Location returns a boolean if a field has been set.
func (o *ConnectorDetail) HasS3Location() bool {
	if o != nil && !isNil(o.S3Location) {
		return true
	}

	return false
}

// SetS3Location gets a reference to the given string and assigns it to the S3Location field.
func (o *ConnectorDetail) SetS3Location(v string) {
	o.S3Location = &v
}

// GetUploadedFiles returns the UploadedFiles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConnectorDetail) GetUploadedFiles() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.UploadedFiles
}

// GetUploadedFilesOk returns a tuple with the UploadedFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConnectorDetail) GetUploadedFilesOk() ([]string, bool) {
	if o == nil || isNil(o.UploadedFiles) {
		return nil, false
	}
	return o.UploadedFiles, true
}

// HasUploadedFiles returns a boolean if a field has been set.
func (o *ConnectorDetail) HasUploadedFiles() bool {
	if o != nil && isNil(o.UploadedFiles) {
		return true
	}

	return false
}

// SetUploadedFiles gets a reference to the given []string and assigns it to the UploadedFiles field.
func (o *ConnectorDetail) SetUploadedFiles(v []string) {
	o.UploadedFiles = v
}

// GetFileUpload returns the FileUpload field value if set, zero value otherwise.
func (o *ConnectorDetail) GetFileUpload() bool {
	if o == nil || isNil(o.FileUpload) {
		var ret bool
		return ret
	}
	return *o.FileUpload
}

// GetFileUploadOk returns a tuple with the FileUpload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorDetail) GetFileUploadOk() (*bool, bool) {
	if o == nil || isNil(o.FileUpload) {
		return nil, false
	}
	return o.FileUpload, true
}

// HasFileUpload returns a boolean if a field has been set.
func (o *ConnectorDetail) HasFileUpload() bool {
	if o != nil && !isNil(o.FileUpload) {
		return true
	}

	return false
}

// SetFileUpload gets a reference to the given bool and assigns it to the FileUpload field.
func (o *ConnectorDetail) SetFileUpload(v bool) {
	o.FileUpload = &v
}

// GetDirectConnect returns the DirectConnect field value if set, zero value otherwise.
func (o *ConnectorDetail) GetDirectConnect() bool {
	if o == nil || isNil(o.DirectConnect) {
		var ret bool
		return ret
	}
	return *o.DirectConnect
}

// GetDirectConnectOk returns a tuple with the DirectConnect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorDetail) GetDirectConnectOk() (*bool, bool) {
	if o == nil || isNil(o.DirectConnect) {
		return nil, false
	}
	return o.DirectConnect, true
}

// HasDirectConnect returns a boolean if a field has been set.
func (o *ConnectorDetail) HasDirectConnect() bool {
	if o != nil && !isNil(o.DirectConnect) {
		return true
	}

	return false
}

// SetDirectConnect gets a reference to the given bool and assigns it to the DirectConnect field.
func (o *ConnectorDetail) SetDirectConnect(v bool) {
	o.DirectConnect = &v
}

// GetTranslationProperties returns the TranslationProperties field value if set, zero value otherwise.
func (o *ConnectorDetail) GetTranslationProperties() map[string]interface{} {
	if o == nil || isNil(o.TranslationProperties) {
		var ret map[string]interface{}
		return ret
	}
	return o.TranslationProperties
}

// GetTranslationPropertiesOk returns a tuple with the TranslationProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorDetail) GetTranslationPropertiesOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.TranslationProperties) {
		return map[string]interface{}{}, false
	}
	return o.TranslationProperties, true
}

// HasTranslationProperties returns a boolean if a field has been set.
func (o *ConnectorDetail) HasTranslationProperties() bool {
	if o != nil && !isNil(o.TranslationProperties) {
		return true
	}

	return false
}

// SetTranslationProperties gets a reference to the given map[string]interface{} and assigns it to the TranslationProperties field.
func (o *ConnectorDetail) SetTranslationProperties(v map[string]interface{}) {
	o.TranslationProperties = v
}

// GetConnectorMetadata returns the ConnectorMetadata field value if set, zero value otherwise.
func (o *ConnectorDetail) GetConnectorMetadata() map[string]interface{} {
	if o == nil || isNil(o.ConnectorMetadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.ConnectorMetadata
}

// GetConnectorMetadataOk returns a tuple with the ConnectorMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorDetail) GetConnectorMetadataOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.ConnectorMetadata) {
		return map[string]interface{}{}, false
	}
	return o.ConnectorMetadata, true
}

// HasConnectorMetadata returns a boolean if a field has been set.
func (o *ConnectorDetail) HasConnectorMetadata() bool {
	if o != nil && !isNil(o.ConnectorMetadata) {
		return true
	}

	return false
}

// SetConnectorMetadata gets a reference to the given map[string]interface{} and assigns it to the ConnectorMetadata field.
func (o *ConnectorDetail) SetConnectorMetadata(v map[string]interface{}) {
	o.ConnectorMetadata = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ConnectorDetail) GetStatus() string {
	if o == nil || isNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorDetail) GetStatusOk() (*string, bool) {
	if o == nil || isNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ConnectorDetail) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ConnectorDetail) SetStatus(v string) {
	o.Status = &v
}

func (o ConnectorDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectorDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.ClassName) {
		toSerialize["className"] = o.ClassName
	}
	if !isNil(o.ScriptName) {
		toSerialize["scriptName"] = o.ScriptName
	}
	if !isNil(o.ApplicationXml) {
		toSerialize["applicationXml"] = o.ApplicationXml
	}
	if !isNil(o.CorrelationConfigXml) {
		toSerialize["correlationConfigXml"] = o.CorrelationConfigXml
	}
	if !isNil(o.SourceConfigXml) {
		toSerialize["sourceConfigXml"] = o.SourceConfigXml
	}
	if !isNil(o.SourceConfig) {
		toSerialize["sourceConfig"] = o.SourceConfig
	}
	if !isNil(o.SourceConfigFrom) {
		toSerialize["sourceConfigFrom"] = o.SourceConfigFrom
	}
	if !isNil(o.S3Location) {
		toSerialize["s3Location"] = o.S3Location
	}
	if o.UploadedFiles != nil {
		toSerialize["uploadedFiles"] = o.UploadedFiles
	}
	if !isNil(o.FileUpload) {
		toSerialize["fileUpload"] = o.FileUpload
	}
	if !isNil(o.DirectConnect) {
		toSerialize["directConnect"] = o.DirectConnect
	}
	if !isNil(o.TranslationProperties) {
		toSerialize["translationProperties"] = o.TranslationProperties
	}
	if !isNil(o.ConnectorMetadata) {
		toSerialize["connectorMetadata"] = o.ConnectorMetadata
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ConnectorDetail) UnmarshalJSON(bytes []byte) (err error) {
	varConnectorDetail := _ConnectorDetail{}

	if err = json.Unmarshal(bytes, &varConnectorDetail); err == nil {
			*o = ConnectorDetail(varConnectorDetail)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "type")
		delete(additionalProperties, "className")
		delete(additionalProperties, "scriptName")
		delete(additionalProperties, "applicationXml")
		delete(additionalProperties, "correlationConfigXml")
		delete(additionalProperties, "sourceConfigXml")
		delete(additionalProperties, "sourceConfig")
		delete(additionalProperties, "sourceConfigFrom")
		delete(additionalProperties, "s3Location")
		delete(additionalProperties, "uploadedFiles")
		delete(additionalProperties, "fileUpload")
		delete(additionalProperties, "directConnect")
		delete(additionalProperties, "translationProperties")
		delete(additionalProperties, "connectorMetadata")
		delete(additionalProperties, "status")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableConnectorDetail struct {
	value *ConnectorDetail
	isSet bool
}

func (v NullableConnectorDetail) Get() *ConnectorDetail {
	return v.value
}

func (v *NullableConnectorDetail) Set(val *ConnectorDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorDetail(val *ConnectorDetail) *NullableConnectorDetail {
	return &NullableConnectorDetail{value: val, isSet: true}
}

func (v NullableConnectorDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


