/*
Identity Security Cloud V3 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v3

import (
	"encoding/json"
	"fmt"
)

// CriteriaType Type of the criteria in the filter. The `COMPOSITE` filter can contain multiple filters in an AND/OR relationship.
type CriteriaType string

// List of CriteriaType
const (
	CRITERIATYPE_COMPOSITE CriteriaType = "COMPOSITE"
	CRITERIATYPE_ROLE CriteriaType = "ROLE"
	CRITERIATYPE_IDENTITY CriteriaType = "IDENTITY"
	CRITERIATYPE_IDENTITY_ATTRIBUTE CriteriaType = "IDENTITY_ATTRIBUTE"
	CRITERIATYPE_ENTITLEMENT CriteriaType = "ENTITLEMENT"
	CRITERIATYPE_ACCESS_PROFILE CriteriaType = "ACCESS_PROFILE"
	CRITERIATYPE_SOURCE CriteriaType = "SOURCE"
	CRITERIATYPE_ACCOUNT CriteriaType = "ACCOUNT"
	CRITERIATYPE_AGGREGATED_ENTITLEMENT CriteriaType = "AGGREGATED_ENTITLEMENT"
	CRITERIATYPE_INVALID_CERTIFIABLE_ENTITY CriteriaType = "INVALID_CERTIFIABLE_ENTITY"
)

// All allowed values of CriteriaType enum
var AllowedCriteriaTypeEnumValues = []CriteriaType{
	"COMPOSITE",
	"ROLE",
	"IDENTITY",
	"IDENTITY_ATTRIBUTE",
	"ENTITLEMENT",
	"ACCESS_PROFILE",
	"SOURCE",
	"ACCOUNT",
	"AGGREGATED_ENTITLEMENT",
	"INVALID_CERTIFIABLE_ENTITY",
}

func (v *CriteriaType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CriteriaType(value)
	for _, existing := range AllowedCriteriaTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CriteriaType", value)
}

// NewCriteriaTypeFromValue returns a pointer to a valid CriteriaType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCriteriaTypeFromValue(v string) (*CriteriaType, error) {
	ev := CriteriaType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CriteriaType: valid values are %v", v, AllowedCriteriaTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CriteriaType) IsValid() bool {
	for _, existing := range AllowedCriteriaTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CriteriaType value
func (v CriteriaType) Ptr() *CriteriaType {
	return &v
}

type NullableCriteriaType struct {
	value *CriteriaType
	isSet bool
}

func (v NullableCriteriaType) Get() *CriteriaType {
	return v.value
}

func (v *NullableCriteriaType) Set(val *CriteriaType) {
	v.value = val
	v.isSet = true
}

func (v NullableCriteriaType) IsSet() bool {
	return v.isSet
}

func (v *NullableCriteriaType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCriteriaType(val *CriteriaType) *NullableCriteriaType {
	return &NullableCriteriaType{value: val, isSet: true}
}

func (v NullableCriteriaType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCriteriaType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

