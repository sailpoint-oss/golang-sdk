/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v3

import (
	"encoding/json"
	"time"
)

// checks if the IdentityCertificationDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdentityCertificationDto{}

// IdentityCertificationDto struct for IdentityCertificationDto
type IdentityCertificationDto struct {
	// id of the certification
	Id *string `json:"id,omitempty"`
	// name of the certification
	Name *string `json:"name,omitempty"`
	Campaign *CampaignReference `json:"campaign,omitempty"`
	// Have all decisions been made?
	Completed *bool `json:"completed,omitempty"`
	// The number of identities for whom all decisions have been made and are complete.
	IdentitiesCompleted *int32 `json:"identitiesCompleted,omitempty"`
	// The total number of identities in the Certification, both complete and incomplete.
	IdentitiesTotal *int32 `json:"identitiesTotal,omitempty"`
	// created date
	Created *time.Time `json:"created,omitempty"`
	// modified date
	Modified *time.Time `json:"modified,omitempty"`
	// The number of approve/revoke/acknowledge decisions that have been made.
	DecisionsMade *int32 `json:"decisionsMade,omitempty"`
	// The total number of approve/revoke/acknowledge decisions.
	DecisionsTotal *int32 `json:"decisionsTotal,omitempty"`
	// The due date of the certification.
	Due *time.Time `json:"due,omitempty"`
	// The date the reviewer signed off on the Certification.
	Signed NullableTime `json:"signed,omitempty"`
	Reviewer *Reviewer `json:"reviewer,omitempty"`
	Reassignment NullableReassignment `json:"reassignment,omitempty"`
	// Identifies if the certification has an error
	HasErrors *bool `json:"hasErrors,omitempty"`
	// Description of the certification error
	ErrorMessage NullableString `json:"errorMessage,omitempty"`
	Phase *CertificationPhase `json:"phase,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IdentityCertificationDto IdentityCertificationDto

// NewIdentityCertificationDto instantiates a new IdentityCertificationDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityCertificationDto() *IdentityCertificationDto {
	this := IdentityCertificationDto{}
	return &this
}

// NewIdentityCertificationDtoWithDefaults instantiates a new IdentityCertificationDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityCertificationDtoWithDefaults() *IdentityCertificationDto {
	this := IdentityCertificationDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IdentityCertificationDto) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityCertificationDto) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IdentityCertificationDto) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IdentityCertificationDto) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IdentityCertificationDto) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityCertificationDto) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IdentityCertificationDto) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IdentityCertificationDto) SetName(v string) {
	o.Name = &v
}

// GetCampaign returns the Campaign field value if set, zero value otherwise.
func (o *IdentityCertificationDto) GetCampaign() CampaignReference {
	if o == nil || isNil(o.Campaign) {
		var ret CampaignReference
		return ret
	}
	return *o.Campaign
}

// GetCampaignOk returns a tuple with the Campaign field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityCertificationDto) GetCampaignOk() (*CampaignReference, bool) {
	if o == nil || isNil(o.Campaign) {
		return nil, false
	}
	return o.Campaign, true
}

// HasCampaign returns a boolean if a field has been set.
func (o *IdentityCertificationDto) HasCampaign() bool {
	if o != nil && !isNil(o.Campaign) {
		return true
	}

	return false
}

// SetCampaign gets a reference to the given CampaignReference and assigns it to the Campaign field.
func (o *IdentityCertificationDto) SetCampaign(v CampaignReference) {
	o.Campaign = &v
}

// GetCompleted returns the Completed field value if set, zero value otherwise.
func (o *IdentityCertificationDto) GetCompleted() bool {
	if o == nil || isNil(o.Completed) {
		var ret bool
		return ret
	}
	return *o.Completed
}

// GetCompletedOk returns a tuple with the Completed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityCertificationDto) GetCompletedOk() (*bool, bool) {
	if o == nil || isNil(o.Completed) {
		return nil, false
	}
	return o.Completed, true
}

// HasCompleted returns a boolean if a field has been set.
func (o *IdentityCertificationDto) HasCompleted() bool {
	if o != nil && !isNil(o.Completed) {
		return true
	}

	return false
}

// SetCompleted gets a reference to the given bool and assigns it to the Completed field.
func (o *IdentityCertificationDto) SetCompleted(v bool) {
	o.Completed = &v
}

// GetIdentitiesCompleted returns the IdentitiesCompleted field value if set, zero value otherwise.
func (o *IdentityCertificationDto) GetIdentitiesCompleted() int32 {
	if o == nil || isNil(o.IdentitiesCompleted) {
		var ret int32
		return ret
	}
	return *o.IdentitiesCompleted
}

// GetIdentitiesCompletedOk returns a tuple with the IdentitiesCompleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityCertificationDto) GetIdentitiesCompletedOk() (*int32, bool) {
	if o == nil || isNil(o.IdentitiesCompleted) {
		return nil, false
	}
	return o.IdentitiesCompleted, true
}

// HasIdentitiesCompleted returns a boolean if a field has been set.
func (o *IdentityCertificationDto) HasIdentitiesCompleted() bool {
	if o != nil && !isNil(o.IdentitiesCompleted) {
		return true
	}

	return false
}

// SetIdentitiesCompleted gets a reference to the given int32 and assigns it to the IdentitiesCompleted field.
func (o *IdentityCertificationDto) SetIdentitiesCompleted(v int32) {
	o.IdentitiesCompleted = &v
}

// GetIdentitiesTotal returns the IdentitiesTotal field value if set, zero value otherwise.
func (o *IdentityCertificationDto) GetIdentitiesTotal() int32 {
	if o == nil || isNil(o.IdentitiesTotal) {
		var ret int32
		return ret
	}
	return *o.IdentitiesTotal
}

// GetIdentitiesTotalOk returns a tuple with the IdentitiesTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityCertificationDto) GetIdentitiesTotalOk() (*int32, bool) {
	if o == nil || isNil(o.IdentitiesTotal) {
		return nil, false
	}
	return o.IdentitiesTotal, true
}

// HasIdentitiesTotal returns a boolean if a field has been set.
func (o *IdentityCertificationDto) HasIdentitiesTotal() bool {
	if o != nil && !isNil(o.IdentitiesTotal) {
		return true
	}

	return false
}

// SetIdentitiesTotal gets a reference to the given int32 and assigns it to the IdentitiesTotal field.
func (o *IdentityCertificationDto) SetIdentitiesTotal(v int32) {
	o.IdentitiesTotal = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *IdentityCertificationDto) GetCreated() time.Time {
	if o == nil || isNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityCertificationDto) GetCreatedOk() (*time.Time, bool) {
	if o == nil || isNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *IdentityCertificationDto) HasCreated() bool {
	if o != nil && !isNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *IdentityCertificationDto) SetCreated(v time.Time) {
	o.Created = &v
}

// GetModified returns the Modified field value if set, zero value otherwise.
func (o *IdentityCertificationDto) GetModified() time.Time {
	if o == nil || isNil(o.Modified) {
		var ret time.Time
		return ret
	}
	return *o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityCertificationDto) GetModifiedOk() (*time.Time, bool) {
	if o == nil || isNil(o.Modified) {
		return nil, false
	}
	return o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *IdentityCertificationDto) HasModified() bool {
	if o != nil && !isNil(o.Modified) {
		return true
	}

	return false
}

// SetModified gets a reference to the given time.Time and assigns it to the Modified field.
func (o *IdentityCertificationDto) SetModified(v time.Time) {
	o.Modified = &v
}

// GetDecisionsMade returns the DecisionsMade field value if set, zero value otherwise.
func (o *IdentityCertificationDto) GetDecisionsMade() int32 {
	if o == nil || isNil(o.DecisionsMade) {
		var ret int32
		return ret
	}
	return *o.DecisionsMade
}

// GetDecisionsMadeOk returns a tuple with the DecisionsMade field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityCertificationDto) GetDecisionsMadeOk() (*int32, bool) {
	if o == nil || isNil(o.DecisionsMade) {
		return nil, false
	}
	return o.DecisionsMade, true
}

// HasDecisionsMade returns a boolean if a field has been set.
func (o *IdentityCertificationDto) HasDecisionsMade() bool {
	if o != nil && !isNil(o.DecisionsMade) {
		return true
	}

	return false
}

// SetDecisionsMade gets a reference to the given int32 and assigns it to the DecisionsMade field.
func (o *IdentityCertificationDto) SetDecisionsMade(v int32) {
	o.DecisionsMade = &v
}

// GetDecisionsTotal returns the DecisionsTotal field value if set, zero value otherwise.
func (o *IdentityCertificationDto) GetDecisionsTotal() int32 {
	if o == nil || isNil(o.DecisionsTotal) {
		var ret int32
		return ret
	}
	return *o.DecisionsTotal
}

// GetDecisionsTotalOk returns a tuple with the DecisionsTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityCertificationDto) GetDecisionsTotalOk() (*int32, bool) {
	if o == nil || isNil(o.DecisionsTotal) {
		return nil, false
	}
	return o.DecisionsTotal, true
}

// HasDecisionsTotal returns a boolean if a field has been set.
func (o *IdentityCertificationDto) HasDecisionsTotal() bool {
	if o != nil && !isNil(o.DecisionsTotal) {
		return true
	}

	return false
}

// SetDecisionsTotal gets a reference to the given int32 and assigns it to the DecisionsTotal field.
func (o *IdentityCertificationDto) SetDecisionsTotal(v int32) {
	o.DecisionsTotal = &v
}

// GetDue returns the Due field value if set, zero value otherwise.
func (o *IdentityCertificationDto) GetDue() time.Time {
	if o == nil || isNil(o.Due) {
		var ret time.Time
		return ret
	}
	return *o.Due
}

// GetDueOk returns a tuple with the Due field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityCertificationDto) GetDueOk() (*time.Time, bool) {
	if o == nil || isNil(o.Due) {
		return nil, false
	}
	return o.Due, true
}

// HasDue returns a boolean if a field has been set.
func (o *IdentityCertificationDto) HasDue() bool {
	if o != nil && !isNil(o.Due) {
		return true
	}

	return false
}

// SetDue gets a reference to the given time.Time and assigns it to the Due field.
func (o *IdentityCertificationDto) SetDue(v time.Time) {
	o.Due = &v
}

// GetSigned returns the Signed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityCertificationDto) GetSigned() time.Time {
	if o == nil || isNil(o.Signed.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Signed.Get()
}

// GetSignedOk returns a tuple with the Signed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityCertificationDto) GetSignedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Signed.Get(), o.Signed.IsSet()
}

// HasSigned returns a boolean if a field has been set.
func (o *IdentityCertificationDto) HasSigned() bool {
	if o != nil && o.Signed.IsSet() {
		return true
	}

	return false
}

// SetSigned gets a reference to the given NullableTime and assigns it to the Signed field.
func (o *IdentityCertificationDto) SetSigned(v time.Time) {
	o.Signed.Set(&v)
}
// SetSignedNil sets the value for Signed to be an explicit nil
func (o *IdentityCertificationDto) SetSignedNil() {
	o.Signed.Set(nil)
}

// UnsetSigned ensures that no value is present for Signed, not even an explicit nil
func (o *IdentityCertificationDto) UnsetSigned() {
	o.Signed.Unset()
}

// GetReviewer returns the Reviewer field value if set, zero value otherwise.
func (o *IdentityCertificationDto) GetReviewer() Reviewer {
	if o == nil || isNil(o.Reviewer) {
		var ret Reviewer
		return ret
	}
	return *o.Reviewer
}

// GetReviewerOk returns a tuple with the Reviewer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityCertificationDto) GetReviewerOk() (*Reviewer, bool) {
	if o == nil || isNil(o.Reviewer) {
		return nil, false
	}
	return o.Reviewer, true
}

// HasReviewer returns a boolean if a field has been set.
func (o *IdentityCertificationDto) HasReviewer() bool {
	if o != nil && !isNil(o.Reviewer) {
		return true
	}

	return false
}

// SetReviewer gets a reference to the given Reviewer and assigns it to the Reviewer field.
func (o *IdentityCertificationDto) SetReviewer(v Reviewer) {
	o.Reviewer = &v
}

// GetReassignment returns the Reassignment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityCertificationDto) GetReassignment() Reassignment {
	if o == nil || isNil(o.Reassignment.Get()) {
		var ret Reassignment
		return ret
	}
	return *o.Reassignment.Get()
}

// GetReassignmentOk returns a tuple with the Reassignment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityCertificationDto) GetReassignmentOk() (*Reassignment, bool) {
	if o == nil {
		return nil, false
	}
	return o.Reassignment.Get(), o.Reassignment.IsSet()
}

// HasReassignment returns a boolean if a field has been set.
func (o *IdentityCertificationDto) HasReassignment() bool {
	if o != nil && o.Reassignment.IsSet() {
		return true
	}

	return false
}

// SetReassignment gets a reference to the given NullableReassignment and assigns it to the Reassignment field.
func (o *IdentityCertificationDto) SetReassignment(v Reassignment) {
	o.Reassignment.Set(&v)
}
// SetReassignmentNil sets the value for Reassignment to be an explicit nil
func (o *IdentityCertificationDto) SetReassignmentNil() {
	o.Reassignment.Set(nil)
}

// UnsetReassignment ensures that no value is present for Reassignment, not even an explicit nil
func (o *IdentityCertificationDto) UnsetReassignment() {
	o.Reassignment.Unset()
}

// GetHasErrors returns the HasErrors field value if set, zero value otherwise.
func (o *IdentityCertificationDto) GetHasErrors() bool {
	if o == nil || isNil(o.HasErrors) {
		var ret bool
		return ret
	}
	return *o.HasErrors
}

// GetHasErrorsOk returns a tuple with the HasErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityCertificationDto) GetHasErrorsOk() (*bool, bool) {
	if o == nil || isNil(o.HasErrors) {
		return nil, false
	}
	return o.HasErrors, true
}

// HasHasErrors returns a boolean if a field has been set.
func (o *IdentityCertificationDto) HasHasErrors() bool {
	if o != nil && !isNil(o.HasErrors) {
		return true
	}

	return false
}

// SetHasErrors gets a reference to the given bool and assigns it to the HasErrors field.
func (o *IdentityCertificationDto) SetHasErrors(v bool) {
	o.HasErrors = &v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityCertificationDto) GetErrorMessage() string {
	if o == nil || isNil(o.ErrorMessage.Get()) {
		var ret string
		return ret
	}
	return *o.ErrorMessage.Get()
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityCertificationDto) GetErrorMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorMessage.Get(), o.ErrorMessage.IsSet()
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *IdentityCertificationDto) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage.IsSet() {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given NullableString and assigns it to the ErrorMessage field.
func (o *IdentityCertificationDto) SetErrorMessage(v string) {
	o.ErrorMessage.Set(&v)
}
// SetErrorMessageNil sets the value for ErrorMessage to be an explicit nil
func (o *IdentityCertificationDto) SetErrorMessageNil() {
	o.ErrorMessage.Set(nil)
}

// UnsetErrorMessage ensures that no value is present for ErrorMessage, not even an explicit nil
func (o *IdentityCertificationDto) UnsetErrorMessage() {
	o.ErrorMessage.Unset()
}

// GetPhase returns the Phase field value if set, zero value otherwise.
func (o *IdentityCertificationDto) GetPhase() CertificationPhase {
	if o == nil || isNil(o.Phase) {
		var ret CertificationPhase
		return ret
	}
	return *o.Phase
}

// GetPhaseOk returns a tuple with the Phase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityCertificationDto) GetPhaseOk() (*CertificationPhase, bool) {
	if o == nil || isNil(o.Phase) {
		return nil, false
	}
	return o.Phase, true
}

// HasPhase returns a boolean if a field has been set.
func (o *IdentityCertificationDto) HasPhase() bool {
	if o != nil && !isNil(o.Phase) {
		return true
	}

	return false
}

// SetPhase gets a reference to the given CertificationPhase and assigns it to the Phase field.
func (o *IdentityCertificationDto) SetPhase(v CertificationPhase) {
	o.Phase = &v
}

func (o IdentityCertificationDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdentityCertificationDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Campaign) {
		toSerialize["campaign"] = o.Campaign
	}
	if !isNil(o.Completed) {
		toSerialize["completed"] = o.Completed
	}
	if !isNil(o.IdentitiesCompleted) {
		toSerialize["identitiesCompleted"] = o.IdentitiesCompleted
	}
	if !isNil(o.IdentitiesTotal) {
		toSerialize["identitiesTotal"] = o.IdentitiesTotal
	}
	if !isNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !isNil(o.Modified) {
		toSerialize["modified"] = o.Modified
	}
	if !isNil(o.DecisionsMade) {
		toSerialize["decisionsMade"] = o.DecisionsMade
	}
	if !isNil(o.DecisionsTotal) {
		toSerialize["decisionsTotal"] = o.DecisionsTotal
	}
	if !isNil(o.Due) {
		toSerialize["due"] = o.Due
	}
	if o.Signed.IsSet() {
		toSerialize["signed"] = o.Signed.Get()
	}
	if !isNil(o.Reviewer) {
		toSerialize["reviewer"] = o.Reviewer
	}
	if o.Reassignment.IsSet() {
		toSerialize["reassignment"] = o.Reassignment.Get()
	}
	if !isNil(o.HasErrors) {
		toSerialize["hasErrors"] = o.HasErrors
	}
	if o.ErrorMessage.IsSet() {
		toSerialize["errorMessage"] = o.ErrorMessage.Get()
	}
	if !isNil(o.Phase) {
		toSerialize["phase"] = o.Phase
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IdentityCertificationDto) UnmarshalJSON(bytes []byte) (err error) {
	varIdentityCertificationDto := _IdentityCertificationDto{}

	if err = json.Unmarshal(bytes, &varIdentityCertificationDto); err == nil {
	*o = IdentityCertificationDto(varIdentityCertificationDto)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "campaign")
		delete(additionalProperties, "completed")
		delete(additionalProperties, "identitiesCompleted")
		delete(additionalProperties, "identitiesTotal")
		delete(additionalProperties, "created")
		delete(additionalProperties, "modified")
		delete(additionalProperties, "decisionsMade")
		delete(additionalProperties, "decisionsTotal")
		delete(additionalProperties, "due")
		delete(additionalProperties, "signed")
		delete(additionalProperties, "reviewer")
		delete(additionalProperties, "reassignment")
		delete(additionalProperties, "hasErrors")
		delete(additionalProperties, "errorMessage")
		delete(additionalProperties, "phase")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIdentityCertificationDto struct {
	value *IdentityCertificationDto
	isSet bool
}

func (v NullableIdentityCertificationDto) Get() *IdentityCertificationDto {
	return v.value
}

func (v *NullableIdentityCertificationDto) Set(val *IdentityCertificationDto) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityCertificationDto) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityCertificationDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityCertificationDto(val *IdentityCertificationDto) *NullableIdentityCertificationDto {
	return &NullableIdentityCertificationDto{value: val, isSet: true}
}

func (v NullableIdentityCertificationDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityCertificationDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


