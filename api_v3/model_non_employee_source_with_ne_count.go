/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v3

import (
	"encoding/json"
	"time"
)

// checks if the NonEmployeeSourceWithNECount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NonEmployeeSourceWithNECount{}

// NonEmployeeSourceWithNECount struct for NonEmployeeSourceWithNECount
type NonEmployeeSourceWithNECount struct {
	// Non-Employee source id.
	Id *string `json:"id,omitempty"`
	// Source Id associated with this non-employee source.
	SourceId *string `json:"sourceId,omitempty"`
	// Source name associated with this non-employee source.
	Name *string `json:"name,omitempty"`
	// Source description associated with this non-employee source.
	Description *string `json:"description,omitempty"`
	// List of approvers
	Approvers []NonEmployeeIdentityReferenceWithId `json:"approvers,omitempty"`
	// List of account managers
	AccountManagers []NonEmployeeIdentityReferenceWithId `json:"accountManagers,omitempty"`
	// When the request was last modified.
	Modified *time.Time `json:"modified,omitempty"`
	// When the request was created.
	Created *time.Time `json:"created,omitempty"`
	// Number of non-employee records associated with this source.
	NonEmployeeCount *int32 `json:"nonEmployeeCount,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NonEmployeeSourceWithNECount NonEmployeeSourceWithNECount

// NewNonEmployeeSourceWithNECount instantiates a new NonEmployeeSourceWithNECount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNonEmployeeSourceWithNECount() *NonEmployeeSourceWithNECount {
	this := NonEmployeeSourceWithNECount{}
	return &this
}

// NewNonEmployeeSourceWithNECountWithDefaults instantiates a new NonEmployeeSourceWithNECount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNonEmployeeSourceWithNECountWithDefaults() *NonEmployeeSourceWithNECount {
	this := NonEmployeeSourceWithNECount{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NonEmployeeSourceWithNECount) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonEmployeeSourceWithNECount) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NonEmployeeSourceWithNECount) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *NonEmployeeSourceWithNECount) SetId(v string) {
	o.Id = &v
}

// GetSourceId returns the SourceId field value if set, zero value otherwise.
func (o *NonEmployeeSourceWithNECount) GetSourceId() string {
	if o == nil || isNil(o.SourceId) {
		var ret string
		return ret
	}
	return *o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonEmployeeSourceWithNECount) GetSourceIdOk() (*string, bool) {
	if o == nil || isNil(o.SourceId) {
		return nil, false
	}
	return o.SourceId, true
}

// HasSourceId returns a boolean if a field has been set.
func (o *NonEmployeeSourceWithNECount) HasSourceId() bool {
	if o != nil && !isNil(o.SourceId) {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given string and assigns it to the SourceId field.
func (o *NonEmployeeSourceWithNECount) SetSourceId(v string) {
	o.SourceId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NonEmployeeSourceWithNECount) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonEmployeeSourceWithNECount) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NonEmployeeSourceWithNECount) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NonEmployeeSourceWithNECount) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *NonEmployeeSourceWithNECount) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonEmployeeSourceWithNECount) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *NonEmployeeSourceWithNECount) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *NonEmployeeSourceWithNECount) SetDescription(v string) {
	o.Description = &v
}

// GetApprovers returns the Approvers field value if set, zero value otherwise.
func (o *NonEmployeeSourceWithNECount) GetApprovers() []NonEmployeeIdentityReferenceWithId {
	if o == nil || isNil(o.Approvers) {
		var ret []NonEmployeeIdentityReferenceWithId
		return ret
	}
	return o.Approvers
}

// GetApproversOk returns a tuple with the Approvers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonEmployeeSourceWithNECount) GetApproversOk() ([]NonEmployeeIdentityReferenceWithId, bool) {
	if o == nil || isNil(o.Approvers) {
		return nil, false
	}
	return o.Approvers, true
}

// HasApprovers returns a boolean if a field has been set.
func (o *NonEmployeeSourceWithNECount) HasApprovers() bool {
	if o != nil && !isNil(o.Approvers) {
		return true
	}

	return false
}

// SetApprovers gets a reference to the given []NonEmployeeIdentityReferenceWithId and assigns it to the Approvers field.
func (o *NonEmployeeSourceWithNECount) SetApprovers(v []NonEmployeeIdentityReferenceWithId) {
	o.Approvers = v
}

// GetAccountManagers returns the AccountManagers field value if set, zero value otherwise.
func (o *NonEmployeeSourceWithNECount) GetAccountManagers() []NonEmployeeIdentityReferenceWithId {
	if o == nil || isNil(o.AccountManagers) {
		var ret []NonEmployeeIdentityReferenceWithId
		return ret
	}
	return o.AccountManagers
}

// GetAccountManagersOk returns a tuple with the AccountManagers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonEmployeeSourceWithNECount) GetAccountManagersOk() ([]NonEmployeeIdentityReferenceWithId, bool) {
	if o == nil || isNil(o.AccountManagers) {
		return nil, false
	}
	return o.AccountManagers, true
}

// HasAccountManagers returns a boolean if a field has been set.
func (o *NonEmployeeSourceWithNECount) HasAccountManagers() bool {
	if o != nil && !isNil(o.AccountManagers) {
		return true
	}

	return false
}

// SetAccountManagers gets a reference to the given []NonEmployeeIdentityReferenceWithId and assigns it to the AccountManagers field.
func (o *NonEmployeeSourceWithNECount) SetAccountManagers(v []NonEmployeeIdentityReferenceWithId) {
	o.AccountManagers = v
}

// GetModified returns the Modified field value if set, zero value otherwise.
func (o *NonEmployeeSourceWithNECount) GetModified() time.Time {
	if o == nil || isNil(o.Modified) {
		var ret time.Time
		return ret
	}
	return *o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonEmployeeSourceWithNECount) GetModifiedOk() (*time.Time, bool) {
	if o == nil || isNil(o.Modified) {
		return nil, false
	}
	return o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *NonEmployeeSourceWithNECount) HasModified() bool {
	if o != nil && !isNil(o.Modified) {
		return true
	}

	return false
}

// SetModified gets a reference to the given time.Time and assigns it to the Modified field.
func (o *NonEmployeeSourceWithNECount) SetModified(v time.Time) {
	o.Modified = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *NonEmployeeSourceWithNECount) GetCreated() time.Time {
	if o == nil || isNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonEmployeeSourceWithNECount) GetCreatedOk() (*time.Time, bool) {
	if o == nil || isNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *NonEmployeeSourceWithNECount) HasCreated() bool {
	if o != nil && !isNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *NonEmployeeSourceWithNECount) SetCreated(v time.Time) {
	o.Created = &v
}

// GetNonEmployeeCount returns the NonEmployeeCount field value if set, zero value otherwise.
func (o *NonEmployeeSourceWithNECount) GetNonEmployeeCount() int32 {
	if o == nil || isNil(o.NonEmployeeCount) {
		var ret int32
		return ret
	}
	return *o.NonEmployeeCount
}

// GetNonEmployeeCountOk returns a tuple with the NonEmployeeCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonEmployeeSourceWithNECount) GetNonEmployeeCountOk() (*int32, bool) {
	if o == nil || isNil(o.NonEmployeeCount) {
		return nil, false
	}
	return o.NonEmployeeCount, true
}

// HasNonEmployeeCount returns a boolean if a field has been set.
func (o *NonEmployeeSourceWithNECount) HasNonEmployeeCount() bool {
	if o != nil && !isNil(o.NonEmployeeCount) {
		return true
	}

	return false
}

// SetNonEmployeeCount gets a reference to the given int32 and assigns it to the NonEmployeeCount field.
func (o *NonEmployeeSourceWithNECount) SetNonEmployeeCount(v int32) {
	o.NonEmployeeCount = &v
}

func (o NonEmployeeSourceWithNECount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NonEmployeeSourceWithNECount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.SourceId) {
		toSerialize["sourceId"] = o.SourceId
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.Approvers) {
		toSerialize["approvers"] = o.Approvers
	}
	if !isNil(o.AccountManagers) {
		toSerialize["accountManagers"] = o.AccountManagers
	}
	if !isNil(o.Modified) {
		toSerialize["modified"] = o.Modified
	}
	if !isNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !isNil(o.NonEmployeeCount) {
		toSerialize["nonEmployeeCount"] = o.NonEmployeeCount
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NonEmployeeSourceWithNECount) UnmarshalJSON(bytes []byte) (err error) {
	varNonEmployeeSourceWithNECount := _NonEmployeeSourceWithNECount{}

	if err = json.Unmarshal(bytes, &varNonEmployeeSourceWithNECount); err == nil {
	*o = NonEmployeeSourceWithNECount(varNonEmployeeSourceWithNECount)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "sourceId")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "approvers")
		delete(additionalProperties, "accountManagers")
		delete(additionalProperties, "modified")
		delete(additionalProperties, "created")
		delete(additionalProperties, "nonEmployeeCount")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNonEmployeeSourceWithNECount struct {
	value *NonEmployeeSourceWithNECount
	isSet bool
}

func (v NullableNonEmployeeSourceWithNECount) Get() *NonEmployeeSourceWithNECount {
	return v.value
}

func (v *NullableNonEmployeeSourceWithNECount) Set(val *NonEmployeeSourceWithNECount) {
	v.value = val
	v.isSet = true
}

func (v NullableNonEmployeeSourceWithNECount) IsSet() bool {
	return v.isSet
}

func (v *NullableNonEmployeeSourceWithNECount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNonEmployeeSourceWithNECount(val *NonEmployeeSourceWithNECount) *NullableNonEmployeeSourceWithNECount {
	return &NullableNonEmployeeSourceWithNECount{value: val, isSet: true}
}

func (v NullableNonEmployeeSourceWithNECount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNonEmployeeSourceWithNECount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


