/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v3

import (
	"encoding/json"
	"fmt"
)

// checks if the FirstValid type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FirstValid{}

// FirstValid struct for FirstValid
type FirstValid struct {
	// An array of attributes to evaluate for existence.
	Values []map[string]interface{} `json:"values"`
	// a true or false value representing to move on to the next option if an error (like an Null Pointer Exception) were to occur.
	IgnoreErrors *bool `json:"ignoreErrors,omitempty"`
	// A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
	RequiresPeriodicRefresh *bool `json:"requiresPeriodicRefresh,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FirstValid FirstValid

// NewFirstValid instantiates a new FirstValid object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFirstValid(values []map[string]interface{}) *FirstValid {
	this := FirstValid{}
	this.Values = values
	var ignoreErrors bool = false
	this.IgnoreErrors = &ignoreErrors
	var requiresPeriodicRefresh bool = false
	this.RequiresPeriodicRefresh = &requiresPeriodicRefresh
	return &this
}

// NewFirstValidWithDefaults instantiates a new FirstValid object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFirstValidWithDefaults() *FirstValid {
	this := FirstValid{}
	var ignoreErrors bool = false
	this.IgnoreErrors = &ignoreErrors
	var requiresPeriodicRefresh bool = false
	this.RequiresPeriodicRefresh = &requiresPeriodicRefresh
	return &this
}

// GetValues returns the Values field value
func (o *FirstValid) GetValues() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.Values
}

// GetValuesOk returns a tuple with the Values field value
// and a boolean to check if the value has been set.
func (o *FirstValid) GetValuesOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Values, true
}

// SetValues sets field value
func (o *FirstValid) SetValues(v []map[string]interface{}) {
	o.Values = v
}

// GetIgnoreErrors returns the IgnoreErrors field value if set, zero value otherwise.
func (o *FirstValid) GetIgnoreErrors() bool {
	if o == nil || isNil(o.IgnoreErrors) {
		var ret bool
		return ret
	}
	return *o.IgnoreErrors
}

// GetIgnoreErrorsOk returns a tuple with the IgnoreErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirstValid) GetIgnoreErrorsOk() (*bool, bool) {
	if o == nil || isNil(o.IgnoreErrors) {
		return nil, false
	}
	return o.IgnoreErrors, true
}

// HasIgnoreErrors returns a boolean if a field has been set.
func (o *FirstValid) HasIgnoreErrors() bool {
	if o != nil && !isNil(o.IgnoreErrors) {
		return true
	}

	return false
}

// SetIgnoreErrors gets a reference to the given bool and assigns it to the IgnoreErrors field.
func (o *FirstValid) SetIgnoreErrors(v bool) {
	o.IgnoreErrors = &v
}

// GetRequiresPeriodicRefresh returns the RequiresPeriodicRefresh field value if set, zero value otherwise.
func (o *FirstValid) GetRequiresPeriodicRefresh() bool {
	if o == nil || isNil(o.RequiresPeriodicRefresh) {
		var ret bool
		return ret
	}
	return *o.RequiresPeriodicRefresh
}

// GetRequiresPeriodicRefreshOk returns a tuple with the RequiresPeriodicRefresh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirstValid) GetRequiresPeriodicRefreshOk() (*bool, bool) {
	if o == nil || isNil(o.RequiresPeriodicRefresh) {
		return nil, false
	}
	return o.RequiresPeriodicRefresh, true
}

// HasRequiresPeriodicRefresh returns a boolean if a field has been set.
func (o *FirstValid) HasRequiresPeriodicRefresh() bool {
	if o != nil && !isNil(o.RequiresPeriodicRefresh) {
		return true
	}

	return false
}

// SetRequiresPeriodicRefresh gets a reference to the given bool and assigns it to the RequiresPeriodicRefresh field.
func (o *FirstValid) SetRequiresPeriodicRefresh(v bool) {
	o.RequiresPeriodicRefresh = &v
}

func (o FirstValid) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FirstValid) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["values"] = o.Values
	if !isNil(o.IgnoreErrors) {
		toSerialize["ignoreErrors"] = o.IgnoreErrors
	}
	if !isNil(o.RequiresPeriodicRefresh) {
		toSerialize["requiresPeriodicRefresh"] = o.RequiresPeriodicRefresh
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FirstValid) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"values",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFirstValid := _FirstValid{}

	if err = json.Unmarshal(bytes, &varFirstValid); err == nil {
	*o = FirstValid(varFirstValid)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "values")
		delete(additionalProperties, "ignoreErrors")
		delete(additionalProperties, "requiresPeriodicRefresh")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFirstValid struct {
	value *FirstValid
	isSet bool
}

func (v NullableFirstValid) Get() *FirstValid {
	return v.value
}

func (v *NullableFirstValid) Set(val *FirstValid) {
	v.value = val
	v.isSet = true
}

func (v NullableFirstValid) IsSet() bool {
	return v.isSet
}

func (v *NullableFirstValid) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFirstValid(val *FirstValid) *NullableFirstValid {
	return &NullableFirstValid{value: val, isSet: true}
}

func (v NullableFirstValid) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFirstValid) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


