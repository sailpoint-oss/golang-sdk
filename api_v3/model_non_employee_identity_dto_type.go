/*
Identity Security Cloud V3 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v3

import (
	"encoding/json"
	"fmt"
)

// NonEmployeeIdentityDtoType Identifies if the identity is a normal identity or a governance group
type NonEmployeeIdentityDtoType string

// List of NonEmployeeIdentityDtoType
const (
	NONEMPLOYEEIDENTITYDTOTYPE_GOVERNANCE_GROUP NonEmployeeIdentityDtoType = "GOVERNANCE_GROUP"
	NONEMPLOYEEIDENTITYDTOTYPE_IDENTITY NonEmployeeIdentityDtoType = "IDENTITY"
)

// All allowed values of NonEmployeeIdentityDtoType enum
var AllowedNonEmployeeIdentityDtoTypeEnumValues = []NonEmployeeIdentityDtoType{
	"GOVERNANCE_GROUP",
	"IDENTITY",
}

func (v *NonEmployeeIdentityDtoType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NonEmployeeIdentityDtoType(value)
	for _, existing := range AllowedNonEmployeeIdentityDtoTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NonEmployeeIdentityDtoType", value)
}

// NewNonEmployeeIdentityDtoTypeFromValue returns a pointer to a valid NonEmployeeIdentityDtoType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNonEmployeeIdentityDtoTypeFromValue(v string) (*NonEmployeeIdentityDtoType, error) {
	ev := NonEmployeeIdentityDtoType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NonEmployeeIdentityDtoType: valid values are %v", v, AllowedNonEmployeeIdentityDtoTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NonEmployeeIdentityDtoType) IsValid() bool {
	for _, existing := range AllowedNonEmployeeIdentityDtoTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NonEmployeeIdentityDtoType value
func (v NonEmployeeIdentityDtoType) Ptr() *NonEmployeeIdentityDtoType {
	return &v
}

type NullableNonEmployeeIdentityDtoType struct {
	value *NonEmployeeIdentityDtoType
	isSet bool
}

func (v NullableNonEmployeeIdentityDtoType) Get() *NonEmployeeIdentityDtoType {
	return v.value
}

func (v *NullableNonEmployeeIdentityDtoType) Set(val *NonEmployeeIdentityDtoType) {
	v.value = val
	v.isSet = true
}

func (v NullableNonEmployeeIdentityDtoType) IsSet() bool {
	return v.isSet
}

func (v *NullableNonEmployeeIdentityDtoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNonEmployeeIdentityDtoType(val *NonEmployeeIdentityDtoType) *NullableNonEmployeeIdentityDtoType {
	return &NullableNonEmployeeIdentityDtoType{value: val, isSet: true}
}

func (v NullableNonEmployeeIdentityDtoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNonEmployeeIdentityDtoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

