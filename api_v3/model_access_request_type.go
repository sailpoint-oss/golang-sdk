/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v3

import (
	"encoding/json"
	"fmt"
)

// AccessRequestType Access request type. Defaults to GRANT_ACCESS. REVOKE_ACCESS type can only have a single Identity ID in the requestedFor field.
type AccessRequestType string

// List of AccessRequestType
const (
	ACCESSREQUESTTYPE_GRANT_ACCESS AccessRequestType = "GRANT_ACCESS"
	ACCESSREQUESTTYPE_REVOKE_ACCESS AccessRequestType = "REVOKE_ACCESS"
)

// All allowed values of AccessRequestType enum
var AllowedAccessRequestTypeEnumValues = []AccessRequestType{
	"GRANT_ACCESS",
	"REVOKE_ACCESS",
}

func (v *AccessRequestType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccessRequestType(value)
	for _, existing := range AllowedAccessRequestTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AccessRequestType", value)
}

// NewAccessRequestTypeFromValue returns a pointer to a valid AccessRequestType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccessRequestTypeFromValue(v string) (*AccessRequestType, error) {
	ev := AccessRequestType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AccessRequestType: valid values are %v", v, AllowedAccessRequestTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccessRequestType) IsValid() bool {
	for _, existing := range AllowedAccessRequestTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AccessRequestType value
func (v AccessRequestType) Ptr() *AccessRequestType {
	return &v
}

type NullableAccessRequestType struct {
	value *AccessRequestType
	isSet bool
}

func (v NullableAccessRequestType) Get() *AccessRequestType {
	return v.value
}

func (v *NullableAccessRequestType) Set(val *AccessRequestType) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessRequestType) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessRequestType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessRequestType(val *AccessRequestType) *NullableAccessRequestType {
	return &NullableAccessRequestType{value: val, isSet: true}
}

func (v NullableAccessRequestType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessRequestType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

