/*
Identity Security Cloud V3 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v3

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// PutClientLogConfigurationRequest - struct for PutClientLogConfigurationRequest
type PutClientLogConfigurationRequest struct {
	ClientLogConfigurationDurationMinutes *ClientLogConfigurationDurationMinutes
	ClientLogConfigurationExpiration *ClientLogConfigurationExpiration
}

// ClientLogConfigurationDurationMinutesAsPutClientLogConfigurationRequest is a convenience function that returns ClientLogConfigurationDurationMinutes wrapped in PutClientLogConfigurationRequest
func ClientLogConfigurationDurationMinutesAsPutClientLogConfigurationRequest(v *ClientLogConfigurationDurationMinutes) PutClientLogConfigurationRequest {
	return PutClientLogConfigurationRequest{
		ClientLogConfigurationDurationMinutes: v,
	}
}

// ClientLogConfigurationExpirationAsPutClientLogConfigurationRequest is a convenience function that returns ClientLogConfigurationExpiration wrapped in PutClientLogConfigurationRequest
func ClientLogConfigurationExpirationAsPutClientLogConfigurationRequest(v *ClientLogConfigurationExpiration) PutClientLogConfigurationRequest {
	return PutClientLogConfigurationRequest{
		ClientLogConfigurationExpiration: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PutClientLogConfigurationRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ClientLogConfigurationDurationMinutes
	err = newStrictDecoder(data).Decode(&dst.ClientLogConfigurationDurationMinutes)
	if err == nil {
		jsonClientLogConfigurationDurationMinutes, _ := json.Marshal(dst.ClientLogConfigurationDurationMinutes)
		if string(jsonClientLogConfigurationDurationMinutes) == "{}" { // empty struct
			dst.ClientLogConfigurationDurationMinutes = nil
		} else {
			if err = validator.Validate(dst.ClientLogConfigurationDurationMinutes); err != nil {
				dst.ClientLogConfigurationDurationMinutes = nil
			} else {
				match++
			}
		}
	} else {
		dst.ClientLogConfigurationDurationMinutes = nil
	}

	// try to unmarshal data into ClientLogConfigurationExpiration
	err = newStrictDecoder(data).Decode(&dst.ClientLogConfigurationExpiration)
	if err == nil {
		jsonClientLogConfigurationExpiration, _ := json.Marshal(dst.ClientLogConfigurationExpiration)
		if string(jsonClientLogConfigurationExpiration) == "{}" { // empty struct
			dst.ClientLogConfigurationExpiration = nil
		} else {
			if err = validator.Validate(dst.ClientLogConfigurationExpiration); err != nil {
				dst.ClientLogConfigurationExpiration = nil
			} else {
				match++
			}
		}
	} else {
		dst.ClientLogConfigurationExpiration = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ClientLogConfigurationDurationMinutes = nil
		dst.ClientLogConfigurationExpiration = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PutClientLogConfigurationRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PutClientLogConfigurationRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PutClientLogConfigurationRequest) MarshalJSON() ([]byte, error) {
	if src.ClientLogConfigurationDurationMinutes != nil {
		return json.Marshal(&src.ClientLogConfigurationDurationMinutes)
	}

	if src.ClientLogConfigurationExpiration != nil {
		return json.Marshal(&src.ClientLogConfigurationExpiration)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PutClientLogConfigurationRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ClientLogConfigurationDurationMinutes != nil {
		return obj.ClientLogConfigurationDurationMinutes
	}

	if obj.ClientLogConfigurationExpiration != nil {
		return obj.ClientLogConfigurationExpiration
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj PutClientLogConfigurationRequest) GetActualInstanceValue() (interface{}) {
	if obj.ClientLogConfigurationDurationMinutes != nil {
		return *obj.ClientLogConfigurationDurationMinutes
	}

	if obj.ClientLogConfigurationExpiration != nil {
		return *obj.ClientLogConfigurationExpiration
	}

	// all schemas are nil
	return nil
}

type NullablePutClientLogConfigurationRequest struct {
	value *PutClientLogConfigurationRequest
	isSet bool
}

func (v NullablePutClientLogConfigurationRequest) Get() *PutClientLogConfigurationRequest {
	return v.value
}

func (v *NullablePutClientLogConfigurationRequest) Set(val *PutClientLogConfigurationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePutClientLogConfigurationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePutClientLogConfigurationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePutClientLogConfigurationRequest(val *PutClientLogConfigurationRequest) *NullablePutClientLogConfigurationRequest {
	return &NullablePutClientLogConfigurationRequest{value: val, isSet: true}
}

func (v NullablePutClientLogConfigurationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePutClientLogConfigurationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


