/*
Identity Security Cloud V3 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v3

import (
	"encoding/json"
	
)

// checks if the SodPolicyRead type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SodPolicyRead{}

// SodPolicyRead struct for SodPolicyRead
type SodPolicyRead struct {
	// Policy id
	Id *string `json:"id,omitempty"`
	// Policy Business Name
	Name *string `json:"name,omitempty"`
	// The time when this SOD policy is created.
	Created *SailPointTime `json:"created,omitempty"`
	// The time when this SOD policy is modified.
	Modified *SailPointTime `json:"modified,omitempty"`
	// Optional description of the SOD policy
	Description NullableString `json:"description,omitempty"`
	OwnerRef *SodPolicyOwnerRef `json:"ownerRef,omitempty"`
	// Optional External Policy Reference
	ExternalPolicyReference NullableString `json:"externalPolicyReference,omitempty"`
	// Search query of the SOD policy
	PolicyQuery *string `json:"policyQuery,omitempty"`
	// Optional compensating controls(Mitigating Controls)
	CompensatingControls NullableString `json:"compensatingControls,omitempty"`
	// Optional correction advice
	CorrectionAdvice NullableString `json:"correctionAdvice,omitempty"`
	// whether the policy is enforced or not
	State *string `json:"state,omitempty"`
	// tags for this policy object
	Tags []string `json:"tags,omitempty"`
	// Policy's creator ID
	CreatorId *string `json:"creatorId,omitempty"`
	// Policy's modifier ID
	ModifierId NullableString `json:"modifierId,omitempty"`
	ViolationOwnerAssignmentConfig *ViolationOwnerAssignmentConfig `json:"violationOwnerAssignmentConfig,omitempty"`
	// defines whether a policy has been scheduled or not
	Scheduled *bool `json:"scheduled,omitempty"`
	// whether a policy is query based or conflicting access based
	Type *string `json:"type,omitempty"`
	ConflictingAccessCriteria *SodPolicyReadAllOfConflictingAccessCriteria `json:"conflictingAccessCriteria,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SodPolicyRead SodPolicyRead

// NewSodPolicyRead instantiates a new SodPolicyRead object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSodPolicyRead() *SodPolicyRead {
	this := SodPolicyRead{}
	var scheduled bool = false
	this.Scheduled = &scheduled
	var type_ string = "GENERAL"
	this.Type = &type_
	return &this
}

// NewSodPolicyReadWithDefaults instantiates a new SodPolicyRead object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSodPolicyReadWithDefaults() *SodPolicyRead {
	this := SodPolicyRead{}
	var scheduled bool = false
	this.Scheduled = &scheduled
	var type_ string = "GENERAL"
	this.Type = &type_
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SodPolicyRead) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SodPolicyRead) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SodPolicyRead) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SodPolicyRead) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SodPolicyRead) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SodPolicyRead) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SodPolicyRead) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SodPolicyRead) SetName(v string) {
	o.Name = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *SodPolicyRead) GetCreated() SailPointTime {
	if o == nil || IsNil(o.Created) {
		var ret SailPointTime
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SodPolicyRead) GetCreatedOk() (*SailPointTime, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *SodPolicyRead) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given SailPointTime and assigns it to the Created field.
func (o *SodPolicyRead) SetCreated(v SailPointTime) {
	o.Created = &v
}

// GetModified returns the Modified field value if set, zero value otherwise.
func (o *SodPolicyRead) GetModified() SailPointTime {
	if o == nil || IsNil(o.Modified) {
		var ret SailPointTime
		return ret
	}
	return *o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SodPolicyRead) GetModifiedOk() (*SailPointTime, bool) {
	if o == nil || IsNil(o.Modified) {
		return nil, false
	}
	return o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *SodPolicyRead) HasModified() bool {
	if o != nil && !IsNil(o.Modified) {
		return true
	}

	return false
}

// SetModified gets a reference to the given SailPointTime and assigns it to the Modified field.
func (o *SodPolicyRead) SetModified(v SailPointTime) {
	o.Modified = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SodPolicyRead) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SodPolicyRead) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *SodPolicyRead) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *SodPolicyRead) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *SodPolicyRead) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *SodPolicyRead) UnsetDescription() {
	o.Description.Unset()
}

// GetOwnerRef returns the OwnerRef field value if set, zero value otherwise.
func (o *SodPolicyRead) GetOwnerRef() SodPolicyOwnerRef {
	if o == nil || IsNil(o.OwnerRef) {
		var ret SodPolicyOwnerRef
		return ret
	}
	return *o.OwnerRef
}

// GetOwnerRefOk returns a tuple with the OwnerRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SodPolicyRead) GetOwnerRefOk() (*SodPolicyOwnerRef, bool) {
	if o == nil || IsNil(o.OwnerRef) {
		return nil, false
	}
	return o.OwnerRef, true
}

// HasOwnerRef returns a boolean if a field has been set.
func (o *SodPolicyRead) HasOwnerRef() bool {
	if o != nil && !IsNil(o.OwnerRef) {
		return true
	}

	return false
}

// SetOwnerRef gets a reference to the given SodPolicyOwnerRef and assigns it to the OwnerRef field.
func (o *SodPolicyRead) SetOwnerRef(v SodPolicyOwnerRef) {
	o.OwnerRef = &v
}

// GetExternalPolicyReference returns the ExternalPolicyReference field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SodPolicyRead) GetExternalPolicyReference() string {
	if o == nil || IsNil(o.ExternalPolicyReference.Get()) {
		var ret string
		return ret
	}
	return *o.ExternalPolicyReference.Get()
}

// GetExternalPolicyReferenceOk returns a tuple with the ExternalPolicyReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SodPolicyRead) GetExternalPolicyReferenceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExternalPolicyReference.Get(), o.ExternalPolicyReference.IsSet()
}

// HasExternalPolicyReference returns a boolean if a field has been set.
func (o *SodPolicyRead) HasExternalPolicyReference() bool {
	if o != nil && o.ExternalPolicyReference.IsSet() {
		return true
	}

	return false
}

// SetExternalPolicyReference gets a reference to the given NullableString and assigns it to the ExternalPolicyReference field.
func (o *SodPolicyRead) SetExternalPolicyReference(v string) {
	o.ExternalPolicyReference.Set(&v)
}
// SetExternalPolicyReferenceNil sets the value for ExternalPolicyReference to be an explicit nil
func (o *SodPolicyRead) SetExternalPolicyReferenceNil() {
	o.ExternalPolicyReference.Set(nil)
}

// UnsetExternalPolicyReference ensures that no value is present for ExternalPolicyReference, not even an explicit nil
func (o *SodPolicyRead) UnsetExternalPolicyReference() {
	o.ExternalPolicyReference.Unset()
}

// GetPolicyQuery returns the PolicyQuery field value if set, zero value otherwise.
func (o *SodPolicyRead) GetPolicyQuery() string {
	if o == nil || IsNil(o.PolicyQuery) {
		var ret string
		return ret
	}
	return *o.PolicyQuery
}

// GetPolicyQueryOk returns a tuple with the PolicyQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SodPolicyRead) GetPolicyQueryOk() (*string, bool) {
	if o == nil || IsNil(o.PolicyQuery) {
		return nil, false
	}
	return o.PolicyQuery, true
}

// HasPolicyQuery returns a boolean if a field has been set.
func (o *SodPolicyRead) HasPolicyQuery() bool {
	if o != nil && !IsNil(o.PolicyQuery) {
		return true
	}

	return false
}

// SetPolicyQuery gets a reference to the given string and assigns it to the PolicyQuery field.
func (o *SodPolicyRead) SetPolicyQuery(v string) {
	o.PolicyQuery = &v
}

// GetCompensatingControls returns the CompensatingControls field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SodPolicyRead) GetCompensatingControls() string {
	if o == nil || IsNil(o.CompensatingControls.Get()) {
		var ret string
		return ret
	}
	return *o.CompensatingControls.Get()
}

// GetCompensatingControlsOk returns a tuple with the CompensatingControls field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SodPolicyRead) GetCompensatingControlsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CompensatingControls.Get(), o.CompensatingControls.IsSet()
}

// HasCompensatingControls returns a boolean if a field has been set.
func (o *SodPolicyRead) HasCompensatingControls() bool {
	if o != nil && o.CompensatingControls.IsSet() {
		return true
	}

	return false
}

// SetCompensatingControls gets a reference to the given NullableString and assigns it to the CompensatingControls field.
func (o *SodPolicyRead) SetCompensatingControls(v string) {
	o.CompensatingControls.Set(&v)
}
// SetCompensatingControlsNil sets the value for CompensatingControls to be an explicit nil
func (o *SodPolicyRead) SetCompensatingControlsNil() {
	o.CompensatingControls.Set(nil)
}

// UnsetCompensatingControls ensures that no value is present for CompensatingControls, not even an explicit nil
func (o *SodPolicyRead) UnsetCompensatingControls() {
	o.CompensatingControls.Unset()
}

// GetCorrectionAdvice returns the CorrectionAdvice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SodPolicyRead) GetCorrectionAdvice() string {
	if o == nil || IsNil(o.CorrectionAdvice.Get()) {
		var ret string
		return ret
	}
	return *o.CorrectionAdvice.Get()
}

// GetCorrectionAdviceOk returns a tuple with the CorrectionAdvice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SodPolicyRead) GetCorrectionAdviceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CorrectionAdvice.Get(), o.CorrectionAdvice.IsSet()
}

// HasCorrectionAdvice returns a boolean if a field has been set.
func (o *SodPolicyRead) HasCorrectionAdvice() bool {
	if o != nil && o.CorrectionAdvice.IsSet() {
		return true
	}

	return false
}

// SetCorrectionAdvice gets a reference to the given NullableString and assigns it to the CorrectionAdvice field.
func (o *SodPolicyRead) SetCorrectionAdvice(v string) {
	o.CorrectionAdvice.Set(&v)
}
// SetCorrectionAdviceNil sets the value for CorrectionAdvice to be an explicit nil
func (o *SodPolicyRead) SetCorrectionAdviceNil() {
	o.CorrectionAdvice.Set(nil)
}

// UnsetCorrectionAdvice ensures that no value is present for CorrectionAdvice, not even an explicit nil
func (o *SodPolicyRead) UnsetCorrectionAdvice() {
	o.CorrectionAdvice.Unset()
}

// GetState returns the State field value if set, zero value otherwise.
func (o *SodPolicyRead) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SodPolicyRead) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *SodPolicyRead) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *SodPolicyRead) SetState(v string) {
	o.State = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *SodPolicyRead) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SodPolicyRead) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *SodPolicyRead) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *SodPolicyRead) SetTags(v []string) {
	o.Tags = v
}

// GetCreatorId returns the CreatorId field value if set, zero value otherwise.
func (o *SodPolicyRead) GetCreatorId() string {
	if o == nil || IsNil(o.CreatorId) {
		var ret string
		return ret
	}
	return *o.CreatorId
}

// GetCreatorIdOk returns a tuple with the CreatorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SodPolicyRead) GetCreatorIdOk() (*string, bool) {
	if o == nil || IsNil(o.CreatorId) {
		return nil, false
	}
	return o.CreatorId, true
}

// HasCreatorId returns a boolean if a field has been set.
func (o *SodPolicyRead) HasCreatorId() bool {
	if o != nil && !IsNil(o.CreatorId) {
		return true
	}

	return false
}

// SetCreatorId gets a reference to the given string and assigns it to the CreatorId field.
func (o *SodPolicyRead) SetCreatorId(v string) {
	o.CreatorId = &v
}

// GetModifierId returns the ModifierId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SodPolicyRead) GetModifierId() string {
	if o == nil || IsNil(o.ModifierId.Get()) {
		var ret string
		return ret
	}
	return *o.ModifierId.Get()
}

// GetModifierIdOk returns a tuple with the ModifierId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SodPolicyRead) GetModifierIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ModifierId.Get(), o.ModifierId.IsSet()
}

// HasModifierId returns a boolean if a field has been set.
func (o *SodPolicyRead) HasModifierId() bool {
	if o != nil && o.ModifierId.IsSet() {
		return true
	}

	return false
}

// SetModifierId gets a reference to the given NullableString and assigns it to the ModifierId field.
func (o *SodPolicyRead) SetModifierId(v string) {
	o.ModifierId.Set(&v)
}
// SetModifierIdNil sets the value for ModifierId to be an explicit nil
func (o *SodPolicyRead) SetModifierIdNil() {
	o.ModifierId.Set(nil)
}

// UnsetModifierId ensures that no value is present for ModifierId, not even an explicit nil
func (o *SodPolicyRead) UnsetModifierId() {
	o.ModifierId.Unset()
}

// GetViolationOwnerAssignmentConfig returns the ViolationOwnerAssignmentConfig field value if set, zero value otherwise.
func (o *SodPolicyRead) GetViolationOwnerAssignmentConfig() ViolationOwnerAssignmentConfig {
	if o == nil || IsNil(o.ViolationOwnerAssignmentConfig) {
		var ret ViolationOwnerAssignmentConfig
		return ret
	}
	return *o.ViolationOwnerAssignmentConfig
}

// GetViolationOwnerAssignmentConfigOk returns a tuple with the ViolationOwnerAssignmentConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SodPolicyRead) GetViolationOwnerAssignmentConfigOk() (*ViolationOwnerAssignmentConfig, bool) {
	if o == nil || IsNil(o.ViolationOwnerAssignmentConfig) {
		return nil, false
	}
	return o.ViolationOwnerAssignmentConfig, true
}

// HasViolationOwnerAssignmentConfig returns a boolean if a field has been set.
func (o *SodPolicyRead) HasViolationOwnerAssignmentConfig() bool {
	if o != nil && !IsNil(o.ViolationOwnerAssignmentConfig) {
		return true
	}

	return false
}

// SetViolationOwnerAssignmentConfig gets a reference to the given ViolationOwnerAssignmentConfig and assigns it to the ViolationOwnerAssignmentConfig field.
func (o *SodPolicyRead) SetViolationOwnerAssignmentConfig(v ViolationOwnerAssignmentConfig) {
	o.ViolationOwnerAssignmentConfig = &v
}

// GetScheduled returns the Scheduled field value if set, zero value otherwise.
func (o *SodPolicyRead) GetScheduled() bool {
	if o == nil || IsNil(o.Scheduled) {
		var ret bool
		return ret
	}
	return *o.Scheduled
}

// GetScheduledOk returns a tuple with the Scheduled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SodPolicyRead) GetScheduledOk() (*bool, bool) {
	if o == nil || IsNil(o.Scheduled) {
		return nil, false
	}
	return o.Scheduled, true
}

// HasScheduled returns a boolean if a field has been set.
func (o *SodPolicyRead) HasScheduled() bool {
	if o != nil && !IsNil(o.Scheduled) {
		return true
	}

	return false
}

// SetScheduled gets a reference to the given bool and assigns it to the Scheduled field.
func (o *SodPolicyRead) SetScheduled(v bool) {
	o.Scheduled = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SodPolicyRead) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SodPolicyRead) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SodPolicyRead) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SodPolicyRead) SetType(v string) {
	o.Type = &v
}

// GetConflictingAccessCriteria returns the ConflictingAccessCriteria field value if set, zero value otherwise.
func (o *SodPolicyRead) GetConflictingAccessCriteria() SodPolicyReadAllOfConflictingAccessCriteria {
	if o == nil || IsNil(o.ConflictingAccessCriteria) {
		var ret SodPolicyReadAllOfConflictingAccessCriteria
		return ret
	}
	return *o.ConflictingAccessCriteria
}

// GetConflictingAccessCriteriaOk returns a tuple with the ConflictingAccessCriteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SodPolicyRead) GetConflictingAccessCriteriaOk() (*SodPolicyReadAllOfConflictingAccessCriteria, bool) {
	if o == nil || IsNil(o.ConflictingAccessCriteria) {
		return nil, false
	}
	return o.ConflictingAccessCriteria, true
}

// HasConflictingAccessCriteria returns a boolean if a field has been set.
func (o *SodPolicyRead) HasConflictingAccessCriteria() bool {
	if o != nil && !IsNil(o.ConflictingAccessCriteria) {
		return true
	}

	return false
}

// SetConflictingAccessCriteria gets a reference to the given SodPolicyReadAllOfConflictingAccessCriteria and assigns it to the ConflictingAccessCriteria field.
func (o *SodPolicyRead) SetConflictingAccessCriteria(v SodPolicyReadAllOfConflictingAccessCriteria) {
	o.ConflictingAccessCriteria = &v
}

func (o SodPolicyRead) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SodPolicyRead) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Modified) {
		toSerialize["modified"] = o.Modified
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !IsNil(o.OwnerRef) {
		toSerialize["ownerRef"] = o.OwnerRef
	}
	if o.ExternalPolicyReference.IsSet() {
		toSerialize["externalPolicyReference"] = o.ExternalPolicyReference.Get()
	}
	if !IsNil(o.PolicyQuery) {
		toSerialize["policyQuery"] = o.PolicyQuery
	}
	if o.CompensatingControls.IsSet() {
		toSerialize["compensatingControls"] = o.CompensatingControls.Get()
	}
	if o.CorrectionAdvice.IsSet() {
		toSerialize["correctionAdvice"] = o.CorrectionAdvice.Get()
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.CreatorId) {
		toSerialize["creatorId"] = o.CreatorId
	}
	if o.ModifierId.IsSet() {
		toSerialize["modifierId"] = o.ModifierId.Get()
	}
	if !IsNil(o.ViolationOwnerAssignmentConfig) {
		toSerialize["violationOwnerAssignmentConfig"] = o.ViolationOwnerAssignmentConfig
	}
	if !IsNil(o.Scheduled) {
		toSerialize["scheduled"] = o.Scheduled
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.ConflictingAccessCriteria) {
		toSerialize["conflictingAccessCriteria"] = o.ConflictingAccessCriteria
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SodPolicyRead) UnmarshalJSON(data []byte) (err error) {
	varSodPolicyRead := _SodPolicyRead{}

	err = json.Unmarshal(data, &varSodPolicyRead)

	if err != nil {
		return err
	}

	*o = SodPolicyRead(varSodPolicyRead)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "created")
		delete(additionalProperties, "modified")
		delete(additionalProperties, "description")
		delete(additionalProperties, "ownerRef")
		delete(additionalProperties, "externalPolicyReference")
		delete(additionalProperties, "policyQuery")
		delete(additionalProperties, "compensatingControls")
		delete(additionalProperties, "correctionAdvice")
		delete(additionalProperties, "state")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "creatorId")
		delete(additionalProperties, "modifierId")
		delete(additionalProperties, "violationOwnerAssignmentConfig")
		delete(additionalProperties, "scheduled")
		delete(additionalProperties, "type")
		delete(additionalProperties, "conflictingAccessCriteria")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSodPolicyRead struct {
	value *SodPolicyRead
	isSet bool
}

func (v NullableSodPolicyRead) Get() *SodPolicyRead {
	return v.value
}

func (v *NullableSodPolicyRead) Set(val *SodPolicyRead) {
	v.value = val
	v.isSet = true
}

func (v NullableSodPolicyRead) IsSet() bool {
	return v.isSet
}

func (v *NullableSodPolicyRead) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSodPolicyRead(val *SodPolicyRead) *NullableSodPolicyRead {
	return &NullableSodPolicyRead{value: val, isSet: true}
}

func (v NullableSodPolicyRead) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSodPolicyRead) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


