/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v3

import (
	"encoding/json"
	"fmt"
)

// checks if the Bound type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Bound{}

// Bound struct for Bound
type Bound struct {
	// The value of the range's endpoint.
	Value string `json:"value"`
	// Indicates if the endpoint is included in the range.
	Inclusive *bool `json:"inclusive,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Bound Bound

// NewBound instantiates a new Bound object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBound(value string) *Bound {
	this := Bound{}
	this.Value = value
	var inclusive bool = false
	this.Inclusive = &inclusive
	return &this
}

// NewBoundWithDefaults instantiates a new Bound object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBoundWithDefaults() *Bound {
	this := Bound{}
	var inclusive bool = false
	this.Inclusive = &inclusive
	return &this
}

// GetValue returns the Value field value
func (o *Bound) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *Bound) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *Bound) SetValue(v string) {
	o.Value = v
}

// GetInclusive returns the Inclusive field value if set, zero value otherwise.
func (o *Bound) GetInclusive() bool {
	if o == nil || isNil(o.Inclusive) {
		var ret bool
		return ret
	}
	return *o.Inclusive
}

// GetInclusiveOk returns a tuple with the Inclusive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Bound) GetInclusiveOk() (*bool, bool) {
	if o == nil || isNil(o.Inclusive) {
		return nil, false
	}
	return o.Inclusive, true
}

// HasInclusive returns a boolean if a field has been set.
func (o *Bound) HasInclusive() bool {
	if o != nil && !isNil(o.Inclusive) {
		return true
	}

	return false
}

// SetInclusive gets a reference to the given bool and assigns it to the Inclusive field.
func (o *Bound) SetInclusive(v bool) {
	o.Inclusive = &v
}

func (o Bound) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Bound) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["value"] = o.Value
	if !isNil(o.Inclusive) {
		toSerialize["inclusive"] = o.Inclusive
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Bound) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBound := _Bound{}

	if err = json.Unmarshal(bytes, &varBound); err == nil {
	*o = Bound(varBound)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "value")
		delete(additionalProperties, "inclusive")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBound struct {
	value *Bound
	isSet bool
}

func (v NullableBound) Get() *Bound {
	return v.value
}

func (v *NullableBound) Set(val *Bound) {
	v.value = val
	v.isSet = true
}

func (v NullableBound) IsSet() bool {
	return v.isSet
}

func (v *NullableBound) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBound(val *Bound) *NullableBound {
	return &NullableBound{value: val, isSet: true}
}

func (v NullableBound) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBound) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


