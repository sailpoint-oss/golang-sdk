/*
Identity Security Cloud V3 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v3

import (
	"encoding/json"
	"os"
	"fmt"
)

// checks if the PutSourceConfigRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PutSourceConfigRequest{}

// PutSourceConfigRequest struct for PutSourceConfigRequest
type PutSourceConfigRequest struct {
	// connector source config xml file
	File *os.File `json:"file"`
	AdditionalProperties map[string]interface{}
}

type _PutSourceConfigRequest PutSourceConfigRequest

// NewPutSourceConfigRequest instantiates a new PutSourceConfigRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPutSourceConfigRequest(file *os.File) *PutSourceConfigRequest {
	this := PutSourceConfigRequest{}
	this.File = file
	return &this
}

// NewPutSourceConfigRequestWithDefaults instantiates a new PutSourceConfigRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPutSourceConfigRequestWithDefaults() *PutSourceConfigRequest {
	this := PutSourceConfigRequest{}
	return &this
}

// GetFile returns the File field value
func (o *PutSourceConfigRequest) GetFile() *os.File {
	if o == nil {
		var ret *os.File
		return ret
	}

	return o.File
}

// GetFileOk returns a tuple with the File field value
// and a boolean to check if the value has been set.
func (o *PutSourceConfigRequest) GetFileOk() (**os.File, bool) {
	if o == nil {
		return nil, false
	}
	return &o.File, true
}

// SetFile sets field value
func (o *PutSourceConfigRequest) SetFile(v *os.File) {
	o.File = v
}

func (o PutSourceConfigRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PutSourceConfigRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["file"] = o.File

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PutSourceConfigRequest) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"file",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPutSourceConfigRequest := _PutSourceConfigRequest{}

	if err = json.Unmarshal(bytes, &varPutSourceConfigRequest); err == nil {
			*o = PutSourceConfigRequest(varPutSourceConfigRequest)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "file")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePutSourceConfigRequest struct {
	value *PutSourceConfigRequest
	isSet bool
}

func (v NullablePutSourceConfigRequest) Get() *PutSourceConfigRequest {
	return v.value
}

func (v *NullablePutSourceConfigRequest) Set(val *PutSourceConfigRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePutSourceConfigRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePutSourceConfigRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePutSourceConfigRequest(val *PutSourceConfigRequest) *NullablePutSourceConfigRequest {
	return &NullablePutSourceConfigRequest{value: val, isSet: true}
}

func (v NullablePutSourceConfigRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePutSourceConfigRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


