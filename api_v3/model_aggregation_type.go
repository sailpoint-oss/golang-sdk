/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v3

import (
	"encoding/json"
	"fmt"
)

// AggregationType Enum representing the currently available query languages for aggregations, which are used to perform calculations or groupings on search results.  Additional values may be added in the future without notice. 
type AggregationType string

// List of AggregationType
const (
	AGGREGATIONTYPE_DSL AggregationType = "DSL"
	AGGREGATIONTYPE_SAILPOINT AggregationType = "SAILPOINT"
)

// All allowed values of AggregationType enum
var AllowedAggregationTypeEnumValues = []AggregationType{
	"DSL",
	"SAILPOINT",
}

func (v *AggregationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AggregationType(value)
	for _, existing := range AllowedAggregationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AggregationType", value)
}

// NewAggregationTypeFromValue returns a pointer to a valid AggregationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAggregationTypeFromValue(v string) (*AggregationType, error) {
	ev := AggregationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AggregationType: valid values are %v", v, AllowedAggregationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AggregationType) IsValid() bool {
	for _, existing := range AllowedAggregationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AggregationType value
func (v AggregationType) Ptr() *AggregationType {
	return &v
}

type NullableAggregationType struct {
	value *AggregationType
	isSet bool
}

func (v NullableAggregationType) Get() *AggregationType {
	return v.value
}

func (v *NullableAggregationType) Set(val *AggregationType) {
	v.value = val
	v.isSet = true
}

func (v NullableAggregationType) IsSet() bool {
	return v.isSet
}

func (v *NullableAggregationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAggregationType(val *AggregationType) *NullableAggregationType {
	return &NullableAggregationType{value: val, isSet: true}
}

func (v NullableAggregationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAggregationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

