/*
Identity Security Cloud V3 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v3

import (
	"encoding/json"
)

// checks if the ManagedClusterEncryptionConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManagedClusterEncryptionConfig{}

// ManagedClusterEncryptionConfig Defines the encryption settings for a managed cluster, including the format used for storing and processing encrypted data.
type ManagedClusterEncryptionConfig struct {
	// Specifies the format used for encrypted data, such as secrets. The format determines how the encrypted data is structured and processed.
	Format *string `json:"format,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ManagedClusterEncryptionConfig ManagedClusterEncryptionConfig

// NewManagedClusterEncryptionConfig instantiates a new ManagedClusterEncryptionConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagedClusterEncryptionConfig() *ManagedClusterEncryptionConfig {
	this := ManagedClusterEncryptionConfig{}
	return &this
}

// NewManagedClusterEncryptionConfigWithDefaults instantiates a new ManagedClusterEncryptionConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagedClusterEncryptionConfigWithDefaults() *ManagedClusterEncryptionConfig {
	this := ManagedClusterEncryptionConfig{}
	return &this
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *ManagedClusterEncryptionConfig) GetFormat() string {
	if o == nil || IsNil(o.Format) {
		var ret string
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedClusterEncryptionConfig) GetFormatOk() (*string, bool) {
	if o == nil || IsNil(o.Format) {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *ManagedClusterEncryptionConfig) HasFormat() bool {
	if o != nil && !IsNil(o.Format) {
		return true
	}

	return false
}

// SetFormat gets a reference to the given string and assigns it to the Format field.
func (o *ManagedClusterEncryptionConfig) SetFormat(v string) {
	o.Format = &v
}

func (o ManagedClusterEncryptionConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManagedClusterEncryptionConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Format) {
		toSerialize["format"] = o.Format
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ManagedClusterEncryptionConfig) UnmarshalJSON(data []byte) (err error) {
	varManagedClusterEncryptionConfig := _ManagedClusterEncryptionConfig{}

	err = json.Unmarshal(data, &varManagedClusterEncryptionConfig)

	if err != nil {
		return err
	}

	*o = ManagedClusterEncryptionConfig(varManagedClusterEncryptionConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "format")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableManagedClusterEncryptionConfig struct {
	value *ManagedClusterEncryptionConfig
	isSet bool
}

func (v NullableManagedClusterEncryptionConfig) Get() *ManagedClusterEncryptionConfig {
	return v.value
}

func (v *NullableManagedClusterEncryptionConfig) Set(val *ManagedClusterEncryptionConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableManagedClusterEncryptionConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableManagedClusterEncryptionConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagedClusterEncryptionConfig(val *ManagedClusterEncryptionConfig) *NullableManagedClusterEncryptionConfig {
	return &NullableManagedClusterEncryptionConfig{value: val, isSet: true}
}

func (v NullableManagedClusterEncryptionConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagedClusterEncryptionConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


