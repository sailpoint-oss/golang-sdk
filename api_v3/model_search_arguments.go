/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v3

import (
	"encoding/json"
)

// checks if the SearchArguments type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchArguments{}

// SearchArguments struct for SearchArguments
type SearchArguments struct {
	// The ID of the scheduled search that triggered the saved search execution. 
	ScheduleId *string `json:"scheduleId,omitempty"`
	// The owner of the scheduled search being tested. 
	Owner *TypedReference `json:"owner,omitempty"`
	// The email recipients of the scheduled search being tested. 
	Recipients []TypedReference `json:"recipients,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SearchArguments SearchArguments

// NewSearchArguments instantiates a new SearchArguments object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchArguments() *SearchArguments {
	this := SearchArguments{}
	return &this
}

// NewSearchArgumentsWithDefaults instantiates a new SearchArguments object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchArgumentsWithDefaults() *SearchArguments {
	this := SearchArguments{}
	return &this
}

// GetScheduleId returns the ScheduleId field value if set, zero value otherwise.
func (o *SearchArguments) GetScheduleId() string {
	if o == nil || IsNil(o.ScheduleId) {
		var ret string
		return ret
	}
	return *o.ScheduleId
}

// GetScheduleIdOk returns a tuple with the ScheduleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchArguments) GetScheduleIdOk() (*string, bool) {
	if o == nil || IsNil(o.ScheduleId) {
		return nil, false
	}
	return o.ScheduleId, true
}

// HasScheduleId returns a boolean if a field has been set.
func (o *SearchArguments) HasScheduleId() bool {
	if o != nil && !IsNil(o.ScheduleId) {
		return true
	}

	return false
}

// SetScheduleId gets a reference to the given string and assigns it to the ScheduleId field.
func (o *SearchArguments) SetScheduleId(v string) {
	o.ScheduleId = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *SearchArguments) GetOwner() TypedReference {
	if o == nil || IsNil(o.Owner) {
		var ret TypedReference
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchArguments) GetOwnerOk() (*TypedReference, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *SearchArguments) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given TypedReference and assigns it to the Owner field.
func (o *SearchArguments) SetOwner(v TypedReference) {
	o.Owner = &v
}

// GetRecipients returns the Recipients field value if set, zero value otherwise.
func (o *SearchArguments) GetRecipients() []TypedReference {
	if o == nil || IsNil(o.Recipients) {
		var ret []TypedReference
		return ret
	}
	return o.Recipients
}

// GetRecipientsOk returns a tuple with the Recipients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchArguments) GetRecipientsOk() ([]TypedReference, bool) {
	if o == nil || IsNil(o.Recipients) {
		return nil, false
	}
	return o.Recipients, true
}

// HasRecipients returns a boolean if a field has been set.
func (o *SearchArguments) HasRecipients() bool {
	if o != nil && !IsNil(o.Recipients) {
		return true
	}

	return false
}

// SetRecipients gets a reference to the given []TypedReference and assigns it to the Recipients field.
func (o *SearchArguments) SetRecipients(v []TypedReference) {
	o.Recipients = v
}

func (o SearchArguments) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchArguments) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ScheduleId) {
		toSerialize["scheduleId"] = o.ScheduleId
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.Recipients) {
		toSerialize["recipients"] = o.Recipients
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SearchArguments) UnmarshalJSON(data []byte) (err error) {
	varSearchArguments := _SearchArguments{}

	err = json.Unmarshal(data, &varSearchArguments)

	if err != nil {
		return err
	}

	*o = SearchArguments(varSearchArguments)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "scheduleId")
		delete(additionalProperties, "owner")
		delete(additionalProperties, "recipients")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSearchArguments struct {
	value *SearchArguments
	isSet bool
}

func (v NullableSearchArguments) Get() *SearchArguments {
	return v.value
}

func (v *NullableSearchArguments) Set(val *SearchArguments) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchArguments) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchArguments) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchArguments(val *SearchArguments) *NullableSearchArguments {
	return &NullableSearchArguments{value: val, isSet: true}
}

func (v NullableSearchArguments) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchArguments) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


