/*
Identity Security Cloud V3 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v3

import (
	"encoding/json"
	"time"
)

// checks if the Schema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Schema{}

// Schema struct for Schema
type Schema struct {
	// The id of the Schema.
	Id *string `json:"id,omitempty"`
	// The name of the Schema.
	Name *string `json:"name,omitempty"`
	// The name of the object type on the native system that the schema represents.
	NativeObjectType *string `json:"nativeObjectType,omitempty"`
	// The name of the attribute used to calculate the unique identifier for an object in the schema.
	IdentityAttribute *string `json:"identityAttribute,omitempty"`
	// The name of the attribute used to calculate the display value for an object in the schema.
	DisplayAttribute *string `json:"displayAttribute,omitempty"`
	// The name of the attribute whose values represent other objects in a hierarchy. Only relevant to group schemas.
	HierarchyAttribute *string `json:"hierarchyAttribute,omitempty"`
	// Flag indicating whether or not the include permissions with the object data when aggregating the schema.
	IncludePermissions *bool `json:"includePermissions,omitempty"`
	// Optional features that can be supported by a source. Modifying the features array may cause source configuration errors that are unsupportable. It is recommended to not modify this array for SailPoint supported connectors. * AUTHENTICATE: The source supports pass-through authentication. * COMPOSITE: The source supports composite source creation. * DIRECT_PERMISSIONS: The source supports returning DirectPermissions. * DISCOVER_SCHEMA: The source supports discovering schemas for users and groups. * ENABLE The source supports reading if an account is enabled or disabled. * MANAGER_LOOKUP: The source supports looking up managers as they are encountered in a feed. This is the opposite of NO_RANDOM_ACCESS. * NO_RANDOM_ACCESS: The source does not support random access and the getObject() methods should not be called and expected to perform. * PROXY: The source can serve as a proxy for another source. When an source has a proxy, all connector calls made with that source are redirected through the connector for the proxy source. * SEARCH * TEMPLATE * UNLOCK: The source supports reading if an account is locked or unlocked. * UNSTRUCTURED_TARGETS: The source supports returning unstructured Targets. * SHAREPOINT_TARGET: The source supports returning unstructured Target data for SharePoint. It will be typically used by AD, LDAP sources. * PROVISIONING: The source can both read and write accounts. Having this feature implies that the provision() method is implemented. It also means that direct and target permissions can also be provisioned if they can be returned by aggregation. * GROUP_PROVISIONING: The source can both read and write groups. Having this feature implies that the provision() method is implemented. * SYNC_PROVISIONING: The source can provision accounts synchronously. * PASSWORD: The source can provision password changes. Since sources can never read passwords, this is should only be used in conjunction with the PROVISIONING feature. * CURRENT_PASSWORD: Some source types support verification of the current password * ACCOUNT_ONLY_REQUEST: The source supports requesting accounts without entitlements. * ADDITIONAL_ACCOUNT_REQUEST: The source supports requesting additional accounts. * NO_AGGREGATION: A source that does not support aggregation. * GROUPS_HAVE_MEMBERS: The source models group memberships with a member attribute on the group object rather than a groups attribute on the account object. This effects the implementation of delta account aggregation. * NO_PERMISSIONS_PROVISIONING: Indicates that the connector cannot provision direct or target permissions for accounts. When DIRECT_PERMISSIONS and PROVISIONING features are present, it is assumed that the connector can also provision direct permissions. This feature disables that assumption and causes permission request to be converted to work items for accounts. * NO_GROUP_PERMISSIONS_PROVISIONING: Indicates that the connector cannot provision direct or target permissions for groups. When DIRECT_PERMISSIONS and PROVISIONING features are present, it is assumed that the connector can also provision direct permissions. This feature disables that assumption and causes permission request to be converted to work items for groups. * NO_UNSTRUCTURED_TARGETS_PROVISIONING: This string will be replaced by NO_GROUP_PERMISSIONS_PROVISIONING and NO_PERMISSIONS_PROVISIONING. * NO_DIRECT_PERMISSIONS_PROVISIONING: This string will be replaced by NO_GROUP_PERMISSIONS_PROVISIONING and NO_PERMISSIONS_PROVISIONING. * USES_UUID: Connectivity 2.0 flag used to indicate that the connector supports a compound naming structure. * PREFER_UUID: Used in ISC Provisioning AND Aggregation to decide if it should prefer account.uuid to account.nativeIdentity when data is read in through aggregation OR pushed out through provisioning. * ARM_SECURITY_EXTRACT: Indicates the application supports Security extracts for ARM * ARM_UTILIZATION_EXTRACT: Indicates the application supports Utilization extracts for ARM * ARM_CHANGELOG_EXTRACT: Indicates the application supports Change-log extracts for ARM
	Features []string `json:"features,omitempty"`
	// Holds any extra configuration data that the schema may require.
	Configuration map[string]interface{} `json:"configuration,omitempty"`
	// The attribute definitions which form the schema.
	Attributes []AttributeDefinition `json:"attributes,omitempty"`
	// The date the Schema was created.
	Created *time.Time `json:"created,omitempty"`
	// The date the Schema was last modified.
	Modified *time.Time `json:"modified,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Schema Schema

// NewSchema instantiates a new Schema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchema() *Schema {
	this := Schema{}
	return &this
}

// NewSchemaWithDefaults instantiates a new Schema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaWithDefaults() *Schema {
	this := Schema{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Schema) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Schema) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Schema) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Schema) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Schema) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Schema) SetName(v string) {
	o.Name = &v
}

// GetNativeObjectType returns the NativeObjectType field value if set, zero value otherwise.
func (o *Schema) GetNativeObjectType() string {
	if o == nil || IsNil(o.NativeObjectType) {
		var ret string
		return ret
	}
	return *o.NativeObjectType
}

// GetNativeObjectTypeOk returns a tuple with the NativeObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetNativeObjectTypeOk() (*string, bool) {
	if o == nil || IsNil(o.NativeObjectType) {
		return nil, false
	}
	return o.NativeObjectType, true
}

// HasNativeObjectType returns a boolean if a field has been set.
func (o *Schema) HasNativeObjectType() bool {
	if o != nil && !IsNil(o.NativeObjectType) {
		return true
	}

	return false
}

// SetNativeObjectType gets a reference to the given string and assigns it to the NativeObjectType field.
func (o *Schema) SetNativeObjectType(v string) {
	o.NativeObjectType = &v
}

// GetIdentityAttribute returns the IdentityAttribute field value if set, zero value otherwise.
func (o *Schema) GetIdentityAttribute() string {
	if o == nil || IsNil(o.IdentityAttribute) {
		var ret string
		return ret
	}
	return *o.IdentityAttribute
}

// GetIdentityAttributeOk returns a tuple with the IdentityAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetIdentityAttributeOk() (*string, bool) {
	if o == nil || IsNil(o.IdentityAttribute) {
		return nil, false
	}
	return o.IdentityAttribute, true
}

// HasIdentityAttribute returns a boolean if a field has been set.
func (o *Schema) HasIdentityAttribute() bool {
	if o != nil && !IsNil(o.IdentityAttribute) {
		return true
	}

	return false
}

// SetIdentityAttribute gets a reference to the given string and assigns it to the IdentityAttribute field.
func (o *Schema) SetIdentityAttribute(v string) {
	o.IdentityAttribute = &v
}

// GetDisplayAttribute returns the DisplayAttribute field value if set, zero value otherwise.
func (o *Schema) GetDisplayAttribute() string {
	if o == nil || IsNil(o.DisplayAttribute) {
		var ret string
		return ret
	}
	return *o.DisplayAttribute
}

// GetDisplayAttributeOk returns a tuple with the DisplayAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetDisplayAttributeOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayAttribute) {
		return nil, false
	}
	return o.DisplayAttribute, true
}

// HasDisplayAttribute returns a boolean if a field has been set.
func (o *Schema) HasDisplayAttribute() bool {
	if o != nil && !IsNil(o.DisplayAttribute) {
		return true
	}

	return false
}

// SetDisplayAttribute gets a reference to the given string and assigns it to the DisplayAttribute field.
func (o *Schema) SetDisplayAttribute(v string) {
	o.DisplayAttribute = &v
}

// GetHierarchyAttribute returns the HierarchyAttribute field value if set, zero value otherwise.
func (o *Schema) GetHierarchyAttribute() string {
	if o == nil || IsNil(o.HierarchyAttribute) {
		var ret string
		return ret
	}
	return *o.HierarchyAttribute
}

// GetHierarchyAttributeOk returns a tuple with the HierarchyAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetHierarchyAttributeOk() (*string, bool) {
	if o == nil || IsNil(o.HierarchyAttribute) {
		return nil, false
	}
	return o.HierarchyAttribute, true
}

// HasHierarchyAttribute returns a boolean if a field has been set.
func (o *Schema) HasHierarchyAttribute() bool {
	if o != nil && !IsNil(o.HierarchyAttribute) {
		return true
	}

	return false
}

// SetHierarchyAttribute gets a reference to the given string and assigns it to the HierarchyAttribute field.
func (o *Schema) SetHierarchyAttribute(v string) {
	o.HierarchyAttribute = &v
}

// GetIncludePermissions returns the IncludePermissions field value if set, zero value otherwise.
func (o *Schema) GetIncludePermissions() bool {
	if o == nil || IsNil(o.IncludePermissions) {
		var ret bool
		return ret
	}
	return *o.IncludePermissions
}

// GetIncludePermissionsOk returns a tuple with the IncludePermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetIncludePermissionsOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludePermissions) {
		return nil, false
	}
	return o.IncludePermissions, true
}

// HasIncludePermissions returns a boolean if a field has been set.
func (o *Schema) HasIncludePermissions() bool {
	if o != nil && !IsNil(o.IncludePermissions) {
		return true
	}

	return false
}

// SetIncludePermissions gets a reference to the given bool and assigns it to the IncludePermissions field.
func (o *Schema) SetIncludePermissions(v bool) {
	o.IncludePermissions = &v
}

// GetFeatures returns the Features field value if set, zero value otherwise.
func (o *Schema) GetFeatures() []string {
	if o == nil || IsNil(o.Features) {
		var ret []string
		return ret
	}
	return o.Features
}

// GetFeaturesOk returns a tuple with the Features field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetFeaturesOk() ([]string, bool) {
	if o == nil || IsNil(o.Features) {
		return nil, false
	}
	return o.Features, true
}

// HasFeatures returns a boolean if a field has been set.
func (o *Schema) HasFeatures() bool {
	if o != nil && !IsNil(o.Features) {
		return true
	}

	return false
}

// SetFeatures gets a reference to the given []string and assigns it to the Features field.
func (o *Schema) SetFeatures(v []string) {
	o.Features = v
}

// GetConfiguration returns the Configuration field value if set, zero value otherwise.
func (o *Schema) GetConfiguration() map[string]interface{} {
	if o == nil || IsNil(o.Configuration) {
		var ret map[string]interface{}
		return ret
	}
	return o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetConfigurationOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Configuration) {
		return map[string]interface{}{}, false
	}
	return o.Configuration, true
}

// HasConfiguration returns a boolean if a field has been set.
func (o *Schema) HasConfiguration() bool {
	if o != nil && !IsNil(o.Configuration) {
		return true
	}

	return false
}

// SetConfiguration gets a reference to the given map[string]interface{} and assigns it to the Configuration field.
func (o *Schema) SetConfiguration(v map[string]interface{}) {
	o.Configuration = v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *Schema) GetAttributes() []AttributeDefinition {
	if o == nil || IsNil(o.Attributes) {
		var ret []AttributeDefinition
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetAttributesOk() ([]AttributeDefinition, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *Schema) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given []AttributeDefinition and assigns it to the Attributes field.
func (o *Schema) SetAttributes(v []AttributeDefinition) {
	o.Attributes = v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *Schema) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *Schema) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *Schema) SetCreated(v time.Time) {
	o.Created = &v
}

// GetModified returns the Modified field value if set, zero value otherwise.
func (o *Schema) GetModified() time.Time {
	if o == nil || IsNil(o.Modified) {
		var ret time.Time
		return ret
	}
	return *o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetModifiedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Modified) {
		return nil, false
	}
	return o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *Schema) HasModified() bool {
	if o != nil && !IsNil(o.Modified) {
		return true
	}

	return false
}

// SetModified gets a reference to the given time.Time and assigns it to the Modified field.
func (o *Schema) SetModified(v time.Time) {
	o.Modified = &v
}

func (o Schema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Schema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NativeObjectType) {
		toSerialize["nativeObjectType"] = o.NativeObjectType
	}
	if !IsNil(o.IdentityAttribute) {
		toSerialize["identityAttribute"] = o.IdentityAttribute
	}
	if !IsNil(o.DisplayAttribute) {
		toSerialize["displayAttribute"] = o.DisplayAttribute
	}
	if !IsNil(o.HierarchyAttribute) {
		toSerialize["hierarchyAttribute"] = o.HierarchyAttribute
	}
	if !IsNil(o.IncludePermissions) {
		toSerialize["includePermissions"] = o.IncludePermissions
	}
	if !IsNil(o.Features) {
		toSerialize["features"] = o.Features
	}
	if !IsNil(o.Configuration) {
		toSerialize["configuration"] = o.Configuration
	}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Modified) {
		toSerialize["modified"] = o.Modified
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Schema) UnmarshalJSON(data []byte) (err error) {
	varSchema := _Schema{}

	err = json.Unmarshal(data, &varSchema)

	if err != nil {
		return err
	}

	*o = Schema(varSchema)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "nativeObjectType")
		delete(additionalProperties, "identityAttribute")
		delete(additionalProperties, "displayAttribute")
		delete(additionalProperties, "hierarchyAttribute")
		delete(additionalProperties, "includePermissions")
		delete(additionalProperties, "features")
		delete(additionalProperties, "configuration")
		delete(additionalProperties, "attributes")
		delete(additionalProperties, "created")
		delete(additionalProperties, "modified")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSchema struct {
	value *Schema
	isSet bool
}

func (v NullableSchema) Get() *Schema {
	return v.value
}

func (v *NullableSchema) Set(val *Schema) {
	v.value = val
	v.isSet = true
}

func (v NullableSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchema(val *Schema) *NullableSchema {
	return &NullableSchema{value: val, isSet: true}
}

func (v NullableSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


