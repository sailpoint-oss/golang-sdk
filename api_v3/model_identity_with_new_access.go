/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v3

import (
	"encoding/json"
	"fmt"
)

// checks if the IdentityWithNewAccess type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdentityWithNewAccess{}

// IdentityWithNewAccess An identity with a set of access to be added
type IdentityWithNewAccess struct {
	// Identity id to be checked.
	IdentityId string `json:"identityId"`
	// The list of entitlements to consider for possible violations in a preventive check.
	AccessRefs []IdentityWithNewAccessAccessRefsInner `json:"accessRefs"`
	AdditionalProperties map[string]interface{}
}

type _IdentityWithNewAccess IdentityWithNewAccess

// NewIdentityWithNewAccess instantiates a new IdentityWithNewAccess object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityWithNewAccess(identityId string, accessRefs []IdentityWithNewAccessAccessRefsInner) *IdentityWithNewAccess {
	this := IdentityWithNewAccess{}
	this.IdentityId = identityId
	this.AccessRefs = accessRefs
	return &this
}

// NewIdentityWithNewAccessWithDefaults instantiates a new IdentityWithNewAccess object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityWithNewAccessWithDefaults() *IdentityWithNewAccess {
	this := IdentityWithNewAccess{}
	return &this
}

// GetIdentityId returns the IdentityId field value
func (o *IdentityWithNewAccess) GetIdentityId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IdentityId
}

// GetIdentityIdOk returns a tuple with the IdentityId field value
// and a boolean to check if the value has been set.
func (o *IdentityWithNewAccess) GetIdentityIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IdentityId, true
}

// SetIdentityId sets field value
func (o *IdentityWithNewAccess) SetIdentityId(v string) {
	o.IdentityId = v
}

// GetAccessRefs returns the AccessRefs field value
func (o *IdentityWithNewAccess) GetAccessRefs() []IdentityWithNewAccessAccessRefsInner {
	if o == nil {
		var ret []IdentityWithNewAccessAccessRefsInner
		return ret
	}

	return o.AccessRefs
}

// GetAccessRefsOk returns a tuple with the AccessRefs field value
// and a boolean to check if the value has been set.
func (o *IdentityWithNewAccess) GetAccessRefsOk() ([]IdentityWithNewAccessAccessRefsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccessRefs, true
}

// SetAccessRefs sets field value
func (o *IdentityWithNewAccess) SetAccessRefs(v []IdentityWithNewAccessAccessRefsInner) {
	o.AccessRefs = v
}

func (o IdentityWithNewAccess) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdentityWithNewAccess) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["identityId"] = o.IdentityId
	toSerialize["accessRefs"] = o.AccessRefs

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IdentityWithNewAccess) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"identityId",
		"accessRefs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIdentityWithNewAccess := _IdentityWithNewAccess{}

	if err = json.Unmarshal(bytes, &varIdentityWithNewAccess); err == nil {
	*o = IdentityWithNewAccess(varIdentityWithNewAccess)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "identityId")
		delete(additionalProperties, "accessRefs")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIdentityWithNewAccess struct {
	value *IdentityWithNewAccess
	isSet bool
}

func (v NullableIdentityWithNewAccess) Get() *IdentityWithNewAccess {
	return v.value
}

func (v *NullableIdentityWithNewAccess) Set(val *IdentityWithNewAccess) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityWithNewAccess) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityWithNewAccess) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityWithNewAccess(val *IdentityWithNewAccess) *NullableIdentityWithNewAccess {
	return &NullableIdentityWithNewAccess{value: val, isSet: true}
}

func (v NullableIdentityWithNewAccess) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityWithNewAccess) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


