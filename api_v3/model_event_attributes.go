/*
Identity Security Cloud V3 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v3

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EventAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventAttributes{}

// EventAttributes Attributes related to an IdentityNow ETS event
type EventAttributes struct {
	// The unique ID of the trigger
	Id string `json:"id"`
	// JSON path expression that will limit which events the trigger will fire on
	Filter *string `json:"filter.$,omitempty"`
	// Description of the event trigger
	Description *string `json:"description,omitempty"`
	// The attribute to filter on
	AttributeToFilter *string `json:"attributeToFilter,omitempty"`
}

type _EventAttributes EventAttributes

// NewEventAttributes instantiates a new EventAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventAttributes(id string) *EventAttributes {
	this := EventAttributes{}
	this.Id = id
	return &this
}

// NewEventAttributesWithDefaults instantiates a new EventAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventAttributesWithDefaults() *EventAttributes {
	this := EventAttributes{}
	return &this
}

// GetId returns the Id field value
func (o *EventAttributes) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *EventAttributes) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *EventAttributes) SetId(v string) {
	o.Id = v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *EventAttributes) GetFilter() string {
	if o == nil || IsNil(o.Filter) {
		var ret string
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventAttributes) GetFilterOk() (*string, bool) {
	if o == nil || IsNil(o.Filter) {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *EventAttributes) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given string and assigns it to the Filter field.
func (o *EventAttributes) SetFilter(v string) {
	o.Filter = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EventAttributes) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventAttributes) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EventAttributes) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EventAttributes) SetDescription(v string) {
	o.Description = &v
}

// GetAttributeToFilter returns the AttributeToFilter field value if set, zero value otherwise.
func (o *EventAttributes) GetAttributeToFilter() string {
	if o == nil || IsNil(o.AttributeToFilter) {
		var ret string
		return ret
	}
	return *o.AttributeToFilter
}

// GetAttributeToFilterOk returns a tuple with the AttributeToFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventAttributes) GetAttributeToFilterOk() (*string, bool) {
	if o == nil || IsNil(o.AttributeToFilter) {
		return nil, false
	}
	return o.AttributeToFilter, true
}

// HasAttributeToFilter returns a boolean if a field has been set.
func (o *EventAttributes) HasAttributeToFilter() bool {
	if o != nil && !IsNil(o.AttributeToFilter) {
		return true
	}

	return false
}

// SetAttributeToFilter gets a reference to the given string and assigns it to the AttributeToFilter field.
func (o *EventAttributes) SetAttributeToFilter(v string) {
	o.AttributeToFilter = &v
}

func (o EventAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Filter) {
		toSerialize["filter.$"] = o.Filter
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.AttributeToFilter) {
		toSerialize["attributeToFilter"] = o.AttributeToFilter
	}
	return toSerialize, nil
}

func (o *EventAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventAttributes := _EventAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEventAttributes)

	if err != nil {
		return err
	}

	*o = EventAttributes(varEventAttributes)

	return err
}

type NullableEventAttributes struct {
	value *EventAttributes
	isSet bool
}

func (v NullableEventAttributes) Get() *EventAttributes {
	return v.value
}

func (v *NullableEventAttributes) Set(val *EventAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableEventAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableEventAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventAttributes(val *EventAttributes) *NullableEventAttributes {
	return &NullableEventAttributes{value: val, isSet: true}
}

func (v NullableEventAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


