/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v3

import (
	"encoding/json"
	"fmt"
)

// SelectorType Enum representing the currently supported selector types.  LIST - the *values* array contains one or more distinct values.  RANGE - the *values* array contains two values: the start and end of the range, inclusive.  Additional values may be added in the future without notice. 
type SelectorType string

// List of SelectorType
const (
	SELECTORTYPE_LIST SelectorType = "LIST"
	SELECTORTYPE_RANGE SelectorType = "RANGE"
)

// All allowed values of SelectorType enum
var AllowedSelectorTypeEnumValues = []SelectorType{
	"LIST",
	"RANGE",
}

func (v *SelectorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SelectorType(value)
	for _, existing := range AllowedSelectorTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SelectorType", value)
}

// NewSelectorTypeFromValue returns a pointer to a valid SelectorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSelectorTypeFromValue(v string) (*SelectorType, error) {
	ev := SelectorType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SelectorType: valid values are %v", v, AllowedSelectorTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SelectorType) IsValid() bool {
	for _, existing := range AllowedSelectorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SelectorType value
func (v SelectorType) Ptr() *SelectorType {
	return &v
}

type NullableSelectorType struct {
	value *SelectorType
	isSet bool
}

func (v NullableSelectorType) Get() *SelectorType {
	return v.value
}

func (v *NullableSelectorType) Set(val *SelectorType) {
	v.value = val
	v.isSet = true
}

func (v NullableSelectorType) IsSet() bool {
	return v.isSet
}

func (v *NullableSelectorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSelectorType(val *SelectorType) *NullableSelectorType {
	return &NullableSelectorType{value: val, isSet: true}
}

func (v NullableSelectorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSelectorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

