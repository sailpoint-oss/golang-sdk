/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v3

import (
	"encoding/json"
)

// checks if the MultiPolicyRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MultiPolicyRequest{}

// MultiPolicyRequest struct for MultiPolicyRequest
type MultiPolicyRequest struct {
	// Multi-policy report will be run for this list of ids
	FilteredPolicyList []string `json:"filteredPolicyList,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MultiPolicyRequest MultiPolicyRequest

// NewMultiPolicyRequest instantiates a new MultiPolicyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultiPolicyRequest() *MultiPolicyRequest {
	this := MultiPolicyRequest{}
	return &this
}

// NewMultiPolicyRequestWithDefaults instantiates a new MultiPolicyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultiPolicyRequestWithDefaults() *MultiPolicyRequest {
	this := MultiPolicyRequest{}
	return &this
}

// GetFilteredPolicyList returns the FilteredPolicyList field value if set, zero value otherwise.
func (o *MultiPolicyRequest) GetFilteredPolicyList() []string {
	if o == nil || isNil(o.FilteredPolicyList) {
		var ret []string
		return ret
	}
	return o.FilteredPolicyList
}

// GetFilteredPolicyListOk returns a tuple with the FilteredPolicyList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiPolicyRequest) GetFilteredPolicyListOk() ([]string, bool) {
	if o == nil || isNil(o.FilteredPolicyList) {
		return nil, false
	}
	return o.FilteredPolicyList, true
}

// HasFilteredPolicyList returns a boolean if a field has been set.
func (o *MultiPolicyRequest) HasFilteredPolicyList() bool {
	if o != nil && !isNil(o.FilteredPolicyList) {
		return true
	}

	return false
}

// SetFilteredPolicyList gets a reference to the given []string and assigns it to the FilteredPolicyList field.
func (o *MultiPolicyRequest) SetFilteredPolicyList(v []string) {
	o.FilteredPolicyList = v
}

func (o MultiPolicyRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MultiPolicyRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.FilteredPolicyList) {
		toSerialize["filteredPolicyList"] = o.FilteredPolicyList
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MultiPolicyRequest) UnmarshalJSON(bytes []byte) (err error) {
	varMultiPolicyRequest := _MultiPolicyRequest{}

	if err = json.Unmarshal(bytes, &varMultiPolicyRequest); err == nil {
	*o = MultiPolicyRequest(varMultiPolicyRequest)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "filteredPolicyList")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMultiPolicyRequest struct {
	value *MultiPolicyRequest
	isSet bool
}

func (v NullableMultiPolicyRequest) Get() *MultiPolicyRequest {
	return v.value
}

func (v *NullableMultiPolicyRequest) Set(val *MultiPolicyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableMultiPolicyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableMultiPolicyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultiPolicyRequest(val *MultiPolicyRequest) *NullableMultiPolicyRequest {
	return &NullableMultiPolicyRequest{value: val, isSet: true}
}

func (v NullableMultiPolicyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultiPolicyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


