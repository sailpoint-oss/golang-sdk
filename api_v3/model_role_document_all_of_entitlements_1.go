/*
Identity Security Cloud V3 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v3

import (
	"encoding/json"
)

// checks if the RoleDocumentAllOfEntitlements1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoleDocumentAllOfEntitlements1{}

// RoleDocumentAllOfEntitlements1 struct for RoleDocumentAllOfEntitlements1
type RoleDocumentAllOfEntitlements1 struct {
	// Indicates whether the entitlement has permissions.
	HasPermissions *bool `json:"hasPermissions,omitempty"`
	// Entitlement's description.
	Description NullableString `json:"description,omitempty"`
	// Entitlement attribute's name.
	Attribute *string `json:"attribute,omitempty"`
	// Entitlement's value.
	Value *string `json:"value,omitempty"`
	// Entitlement's schema.
	Schema *string `json:"schema,omitempty"`
	// Indicates whether the entitlement is privileged.
	Privileged *bool `json:"privileged,omitempty"`
	// Entitlement's ID.
	Id *string `json:"id,omitempty"`
	// Entitlement's name.
	Name *string `json:"name,omitempty"`
	// Schema objectType.
	SourceSchemaObjectType *string `json:"sourceSchemaObjectType,omitempty"`
	// Read-only calculated hash value of an entitlement.
	Hash *string `json:"hash,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RoleDocumentAllOfEntitlements1 RoleDocumentAllOfEntitlements1

// NewRoleDocumentAllOfEntitlements1 instantiates a new RoleDocumentAllOfEntitlements1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleDocumentAllOfEntitlements1() *RoleDocumentAllOfEntitlements1 {
	this := RoleDocumentAllOfEntitlements1{}
	var hasPermissions bool = false
	this.HasPermissions = &hasPermissions
	var privileged bool = false
	this.Privileged = &privileged
	return &this
}

// NewRoleDocumentAllOfEntitlements1WithDefaults instantiates a new RoleDocumentAllOfEntitlements1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleDocumentAllOfEntitlements1WithDefaults() *RoleDocumentAllOfEntitlements1 {
	this := RoleDocumentAllOfEntitlements1{}
	var hasPermissions bool = false
	this.HasPermissions = &hasPermissions
	var privileged bool = false
	this.Privileged = &privileged
	return &this
}

// GetHasPermissions returns the HasPermissions field value if set, zero value otherwise.
func (o *RoleDocumentAllOfEntitlements1) GetHasPermissions() bool {
	if o == nil || IsNil(o.HasPermissions) {
		var ret bool
		return ret
	}
	return *o.HasPermissions
}

// GetHasPermissionsOk returns a tuple with the HasPermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleDocumentAllOfEntitlements1) GetHasPermissionsOk() (*bool, bool) {
	if o == nil || IsNil(o.HasPermissions) {
		return nil, false
	}
	return o.HasPermissions, true
}

// HasHasPermissions returns a boolean if a field has been set.
func (o *RoleDocumentAllOfEntitlements1) HasHasPermissions() bool {
	if o != nil && !IsNil(o.HasPermissions) {
		return true
	}

	return false
}

// SetHasPermissions gets a reference to the given bool and assigns it to the HasPermissions field.
func (o *RoleDocumentAllOfEntitlements1) SetHasPermissions(v bool) {
	o.HasPermissions = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RoleDocumentAllOfEntitlements1) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RoleDocumentAllOfEntitlements1) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *RoleDocumentAllOfEntitlements1) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *RoleDocumentAllOfEntitlements1) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *RoleDocumentAllOfEntitlements1) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *RoleDocumentAllOfEntitlements1) UnsetDescription() {
	o.Description.Unset()
}

// GetAttribute returns the Attribute field value if set, zero value otherwise.
func (o *RoleDocumentAllOfEntitlements1) GetAttribute() string {
	if o == nil || IsNil(o.Attribute) {
		var ret string
		return ret
	}
	return *o.Attribute
}

// GetAttributeOk returns a tuple with the Attribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleDocumentAllOfEntitlements1) GetAttributeOk() (*string, bool) {
	if o == nil || IsNil(o.Attribute) {
		return nil, false
	}
	return o.Attribute, true
}

// HasAttribute returns a boolean if a field has been set.
func (o *RoleDocumentAllOfEntitlements1) HasAttribute() bool {
	if o != nil && !IsNil(o.Attribute) {
		return true
	}

	return false
}

// SetAttribute gets a reference to the given string and assigns it to the Attribute field.
func (o *RoleDocumentAllOfEntitlements1) SetAttribute(v string) {
	o.Attribute = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *RoleDocumentAllOfEntitlements1) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleDocumentAllOfEntitlements1) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *RoleDocumentAllOfEntitlements1) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *RoleDocumentAllOfEntitlements1) SetValue(v string) {
	o.Value = &v
}

// GetSchema returns the Schema field value if set, zero value otherwise.
func (o *RoleDocumentAllOfEntitlements1) GetSchema() string {
	if o == nil || IsNil(o.Schema) {
		var ret string
		return ret
	}
	return *o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleDocumentAllOfEntitlements1) GetSchemaOk() (*string, bool) {
	if o == nil || IsNil(o.Schema) {
		return nil, false
	}
	return o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *RoleDocumentAllOfEntitlements1) HasSchema() bool {
	if o != nil && !IsNil(o.Schema) {
		return true
	}

	return false
}

// SetSchema gets a reference to the given string and assigns it to the Schema field.
func (o *RoleDocumentAllOfEntitlements1) SetSchema(v string) {
	o.Schema = &v
}

// GetPrivileged returns the Privileged field value if set, zero value otherwise.
func (o *RoleDocumentAllOfEntitlements1) GetPrivileged() bool {
	if o == nil || IsNil(o.Privileged) {
		var ret bool
		return ret
	}
	return *o.Privileged
}

// GetPrivilegedOk returns a tuple with the Privileged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleDocumentAllOfEntitlements1) GetPrivilegedOk() (*bool, bool) {
	if o == nil || IsNil(o.Privileged) {
		return nil, false
	}
	return o.Privileged, true
}

// HasPrivileged returns a boolean if a field has been set.
func (o *RoleDocumentAllOfEntitlements1) HasPrivileged() bool {
	if o != nil && !IsNil(o.Privileged) {
		return true
	}

	return false
}

// SetPrivileged gets a reference to the given bool and assigns it to the Privileged field.
func (o *RoleDocumentAllOfEntitlements1) SetPrivileged(v bool) {
	o.Privileged = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RoleDocumentAllOfEntitlements1) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleDocumentAllOfEntitlements1) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RoleDocumentAllOfEntitlements1) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RoleDocumentAllOfEntitlements1) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RoleDocumentAllOfEntitlements1) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleDocumentAllOfEntitlements1) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RoleDocumentAllOfEntitlements1) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RoleDocumentAllOfEntitlements1) SetName(v string) {
	o.Name = &v
}

// GetSourceSchemaObjectType returns the SourceSchemaObjectType field value if set, zero value otherwise.
func (o *RoleDocumentAllOfEntitlements1) GetSourceSchemaObjectType() string {
	if o == nil || IsNil(o.SourceSchemaObjectType) {
		var ret string
		return ret
	}
	return *o.SourceSchemaObjectType
}

// GetSourceSchemaObjectTypeOk returns a tuple with the SourceSchemaObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleDocumentAllOfEntitlements1) GetSourceSchemaObjectTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SourceSchemaObjectType) {
		return nil, false
	}
	return o.SourceSchemaObjectType, true
}

// HasSourceSchemaObjectType returns a boolean if a field has been set.
func (o *RoleDocumentAllOfEntitlements1) HasSourceSchemaObjectType() bool {
	if o != nil && !IsNil(o.SourceSchemaObjectType) {
		return true
	}

	return false
}

// SetSourceSchemaObjectType gets a reference to the given string and assigns it to the SourceSchemaObjectType field.
func (o *RoleDocumentAllOfEntitlements1) SetSourceSchemaObjectType(v string) {
	o.SourceSchemaObjectType = &v
}

// GetHash returns the Hash field value if set, zero value otherwise.
func (o *RoleDocumentAllOfEntitlements1) GetHash() string {
	if o == nil || IsNil(o.Hash) {
		var ret string
		return ret
	}
	return *o.Hash
}

// GetHashOk returns a tuple with the Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleDocumentAllOfEntitlements1) GetHashOk() (*string, bool) {
	if o == nil || IsNil(o.Hash) {
		return nil, false
	}
	return o.Hash, true
}

// HasHash returns a boolean if a field has been set.
func (o *RoleDocumentAllOfEntitlements1) HasHash() bool {
	if o != nil && !IsNil(o.Hash) {
		return true
	}

	return false
}

// SetHash gets a reference to the given string and assigns it to the Hash field.
func (o *RoleDocumentAllOfEntitlements1) SetHash(v string) {
	o.Hash = &v
}

func (o RoleDocumentAllOfEntitlements1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoleDocumentAllOfEntitlements1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HasPermissions) {
		toSerialize["hasPermissions"] = o.HasPermissions
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !IsNil(o.Attribute) {
		toSerialize["attribute"] = o.Attribute
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Schema) {
		toSerialize["schema"] = o.Schema
	}
	if !IsNil(o.Privileged) {
		toSerialize["privileged"] = o.Privileged
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.SourceSchemaObjectType) {
		toSerialize["sourceSchemaObjectType"] = o.SourceSchemaObjectType
	}
	if !IsNil(o.Hash) {
		toSerialize["hash"] = o.Hash
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RoleDocumentAllOfEntitlements1) UnmarshalJSON(data []byte) (err error) {
	varRoleDocumentAllOfEntitlements1 := _RoleDocumentAllOfEntitlements1{}

	err = json.Unmarshal(data, &varRoleDocumentAllOfEntitlements1)

	if err != nil {
		return err
	}

	*o = RoleDocumentAllOfEntitlements1(varRoleDocumentAllOfEntitlements1)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "hasPermissions")
		delete(additionalProperties, "description")
		delete(additionalProperties, "attribute")
		delete(additionalProperties, "value")
		delete(additionalProperties, "schema")
		delete(additionalProperties, "privileged")
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "sourceSchemaObjectType")
		delete(additionalProperties, "hash")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRoleDocumentAllOfEntitlements1 struct {
	value *RoleDocumentAllOfEntitlements1
	isSet bool
}

func (v NullableRoleDocumentAllOfEntitlements1) Get() *RoleDocumentAllOfEntitlements1 {
	return v.value
}

func (v *NullableRoleDocumentAllOfEntitlements1) Set(val *RoleDocumentAllOfEntitlements1) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleDocumentAllOfEntitlements1) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleDocumentAllOfEntitlements1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleDocumentAllOfEntitlements1(val *RoleDocumentAllOfEntitlements1) *NullableRoleDocumentAllOfEntitlements1 {
	return &NullableRoleDocumentAllOfEntitlements1{value: val, isSet: true}
}

func (v NullableRoleDocumentAllOfEntitlements1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleDocumentAllOfEntitlements1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


