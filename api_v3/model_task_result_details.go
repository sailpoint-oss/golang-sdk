/*
Identity Security Cloud V3 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v3

import (
	"encoding/json"
	"time"
)

// checks if the TaskResultDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskResultDetails{}

// TaskResultDetails Details about job or task type, state and lifecycle.
type TaskResultDetails struct {
	// Type of the job or task underlying in the report processing. It could be a quartz task, QPOC or MENTOS jobs or a refresh/sync task.
	Type *string `json:"type,omitempty"`
	// Unique task definition identifier.
	Id *string `json:"id,omitempty"`
	// Use this property to define what report should be processed in the RDE service.
	ReportType map[string]interface{} `json:"reportType,omitempty"`
	// Description of the report purpose and/or contents.
	Description *string `json:"description,omitempty"`
	// Name of the parent task/report if exists.
	ParentName NullableString `json:"parentName,omitempty"`
	// Name of the report processing initiator.
	Launcher *string `json:"launcher,omitempty"`
	// Report creation date
	Created *time.Time `json:"created,omitempty"`
	// Report start date
	Launched NullableTime `json:"launched,omitempty"`
	// Report completion date
	Completed NullableTime `json:"completed,omitempty"`
	// Report completion status.
	CompletionStatus NullableString `json:"completionStatus,omitempty"`
	// List of the messages dedicated to the report.  From task definition perspective here usually should be warnings or errors.
	Messages []TaskResultDetailsMessagesInner `json:"messages,omitempty"`
	// Task definition results, if necessary.
	Returns []TaskResultDetailsReturnsInner `json:"returns,omitempty"`
	// Extra attributes map(dictionary) needed for the report.
	Attributes map[string]map[string]interface{} `json:"attributes,omitempty"`
	// Current report state.
	Progress NullableString `json:"progress,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TaskResultDetails TaskResultDetails

// NewTaskResultDetails instantiates a new TaskResultDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskResultDetails() *TaskResultDetails {
	this := TaskResultDetails{}
	return &this
}

// NewTaskResultDetailsWithDefaults instantiates a new TaskResultDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskResultDetailsWithDefaults() *TaskResultDetails {
	this := TaskResultDetails{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TaskResultDetails) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskResultDetails) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TaskResultDetails) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *TaskResultDetails) SetType(v string) {
	o.Type = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TaskResultDetails) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskResultDetails) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TaskResultDetails) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TaskResultDetails) SetId(v string) {
	o.Id = &v
}

// GetReportType returns the ReportType field value if set, zero value otherwise.
func (o *TaskResultDetails) GetReportType() map[string]interface{} {
	if o == nil || IsNil(o.ReportType) {
		var ret map[string]interface{}
		return ret
	}
	return o.ReportType
}

// GetReportTypeOk returns a tuple with the ReportType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskResultDetails) GetReportTypeOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ReportType) {
		return map[string]interface{}{}, false
	}
	return o.ReportType, true
}

// HasReportType returns a boolean if a field has been set.
func (o *TaskResultDetails) HasReportType() bool {
	if o != nil && !IsNil(o.ReportType) {
		return true
	}

	return false
}

// SetReportType gets a reference to the given map[string]interface{} and assigns it to the ReportType field.
func (o *TaskResultDetails) SetReportType(v map[string]interface{}) {
	o.ReportType = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TaskResultDetails) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskResultDetails) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TaskResultDetails) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TaskResultDetails) SetDescription(v string) {
	o.Description = &v
}

// GetParentName returns the ParentName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskResultDetails) GetParentName() string {
	if o == nil || IsNil(o.ParentName.Get()) {
		var ret string
		return ret
	}
	return *o.ParentName.Get()
}

// GetParentNameOk returns a tuple with the ParentName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskResultDetails) GetParentNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentName.Get(), o.ParentName.IsSet()
}

// HasParentName returns a boolean if a field has been set.
func (o *TaskResultDetails) HasParentName() bool {
	if o != nil && o.ParentName.IsSet() {
		return true
	}

	return false
}

// SetParentName gets a reference to the given NullableString and assigns it to the ParentName field.
func (o *TaskResultDetails) SetParentName(v string) {
	o.ParentName.Set(&v)
}
// SetParentNameNil sets the value for ParentName to be an explicit nil
func (o *TaskResultDetails) SetParentNameNil() {
	o.ParentName.Set(nil)
}

// UnsetParentName ensures that no value is present for ParentName, not even an explicit nil
func (o *TaskResultDetails) UnsetParentName() {
	o.ParentName.Unset()
}

// GetLauncher returns the Launcher field value if set, zero value otherwise.
func (o *TaskResultDetails) GetLauncher() string {
	if o == nil || IsNil(o.Launcher) {
		var ret string
		return ret
	}
	return *o.Launcher
}

// GetLauncherOk returns a tuple with the Launcher field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskResultDetails) GetLauncherOk() (*string, bool) {
	if o == nil || IsNil(o.Launcher) {
		return nil, false
	}
	return o.Launcher, true
}

// HasLauncher returns a boolean if a field has been set.
func (o *TaskResultDetails) HasLauncher() bool {
	if o != nil && !IsNil(o.Launcher) {
		return true
	}

	return false
}

// SetLauncher gets a reference to the given string and assigns it to the Launcher field.
func (o *TaskResultDetails) SetLauncher(v string) {
	o.Launcher = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *TaskResultDetails) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskResultDetails) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *TaskResultDetails) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *TaskResultDetails) SetCreated(v time.Time) {
	o.Created = &v
}

// GetLaunched returns the Launched field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskResultDetails) GetLaunched() time.Time {
	if o == nil || IsNil(o.Launched.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Launched.Get()
}

// GetLaunchedOk returns a tuple with the Launched field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskResultDetails) GetLaunchedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Launched.Get(), o.Launched.IsSet()
}

// HasLaunched returns a boolean if a field has been set.
func (o *TaskResultDetails) HasLaunched() bool {
	if o != nil && o.Launched.IsSet() {
		return true
	}

	return false
}

// SetLaunched gets a reference to the given NullableTime and assigns it to the Launched field.
func (o *TaskResultDetails) SetLaunched(v time.Time) {
	o.Launched.Set(&v)
}
// SetLaunchedNil sets the value for Launched to be an explicit nil
func (o *TaskResultDetails) SetLaunchedNil() {
	o.Launched.Set(nil)
}

// UnsetLaunched ensures that no value is present for Launched, not even an explicit nil
func (o *TaskResultDetails) UnsetLaunched() {
	o.Launched.Unset()
}

// GetCompleted returns the Completed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskResultDetails) GetCompleted() time.Time {
	if o == nil || IsNil(o.Completed.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Completed.Get()
}

// GetCompletedOk returns a tuple with the Completed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskResultDetails) GetCompletedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Completed.Get(), o.Completed.IsSet()
}

// HasCompleted returns a boolean if a field has been set.
func (o *TaskResultDetails) HasCompleted() bool {
	if o != nil && o.Completed.IsSet() {
		return true
	}

	return false
}

// SetCompleted gets a reference to the given NullableTime and assigns it to the Completed field.
func (o *TaskResultDetails) SetCompleted(v time.Time) {
	o.Completed.Set(&v)
}
// SetCompletedNil sets the value for Completed to be an explicit nil
func (o *TaskResultDetails) SetCompletedNil() {
	o.Completed.Set(nil)
}

// UnsetCompleted ensures that no value is present for Completed, not even an explicit nil
func (o *TaskResultDetails) UnsetCompleted() {
	o.Completed.Unset()
}

// GetCompletionStatus returns the CompletionStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskResultDetails) GetCompletionStatus() string {
	if o == nil || IsNil(o.CompletionStatus.Get()) {
		var ret string
		return ret
	}
	return *o.CompletionStatus.Get()
}

// GetCompletionStatusOk returns a tuple with the CompletionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskResultDetails) GetCompletionStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CompletionStatus.Get(), o.CompletionStatus.IsSet()
}

// HasCompletionStatus returns a boolean if a field has been set.
func (o *TaskResultDetails) HasCompletionStatus() bool {
	if o != nil && o.CompletionStatus.IsSet() {
		return true
	}

	return false
}

// SetCompletionStatus gets a reference to the given NullableString and assigns it to the CompletionStatus field.
func (o *TaskResultDetails) SetCompletionStatus(v string) {
	o.CompletionStatus.Set(&v)
}
// SetCompletionStatusNil sets the value for CompletionStatus to be an explicit nil
func (o *TaskResultDetails) SetCompletionStatusNil() {
	o.CompletionStatus.Set(nil)
}

// UnsetCompletionStatus ensures that no value is present for CompletionStatus, not even an explicit nil
func (o *TaskResultDetails) UnsetCompletionStatus() {
	o.CompletionStatus.Unset()
}

// GetMessages returns the Messages field value if set, zero value otherwise.
func (o *TaskResultDetails) GetMessages() []TaskResultDetailsMessagesInner {
	if o == nil || IsNil(o.Messages) {
		var ret []TaskResultDetailsMessagesInner
		return ret
	}
	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskResultDetails) GetMessagesOk() ([]TaskResultDetailsMessagesInner, bool) {
	if o == nil || IsNil(o.Messages) {
		return nil, false
	}
	return o.Messages, true
}

// HasMessages returns a boolean if a field has been set.
func (o *TaskResultDetails) HasMessages() bool {
	if o != nil && !IsNil(o.Messages) {
		return true
	}

	return false
}

// SetMessages gets a reference to the given []TaskResultDetailsMessagesInner and assigns it to the Messages field.
func (o *TaskResultDetails) SetMessages(v []TaskResultDetailsMessagesInner) {
	o.Messages = v
}

// GetReturns returns the Returns field value if set, zero value otherwise.
func (o *TaskResultDetails) GetReturns() []TaskResultDetailsReturnsInner {
	if o == nil || IsNil(o.Returns) {
		var ret []TaskResultDetailsReturnsInner
		return ret
	}
	return o.Returns
}

// GetReturnsOk returns a tuple with the Returns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskResultDetails) GetReturnsOk() ([]TaskResultDetailsReturnsInner, bool) {
	if o == nil || IsNil(o.Returns) {
		return nil, false
	}
	return o.Returns, true
}

// HasReturns returns a boolean if a field has been set.
func (o *TaskResultDetails) HasReturns() bool {
	if o != nil && !IsNil(o.Returns) {
		return true
	}

	return false
}

// SetReturns gets a reference to the given []TaskResultDetailsReturnsInner and assigns it to the Returns field.
func (o *TaskResultDetails) SetReturns(v []TaskResultDetailsReturnsInner) {
	o.Returns = v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *TaskResultDetails) GetAttributes() map[string]map[string]interface{} {
	if o == nil || IsNil(o.Attributes) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskResultDetails) GetAttributesOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Attributes) {
		return map[string]map[string]interface{}{}, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *TaskResultDetails) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]map[string]interface{} and assigns it to the Attributes field.
func (o *TaskResultDetails) SetAttributes(v map[string]map[string]interface{}) {
	o.Attributes = v
}

// GetProgress returns the Progress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskResultDetails) GetProgress() string {
	if o == nil || IsNil(o.Progress.Get()) {
		var ret string
		return ret
	}
	return *o.Progress.Get()
}

// GetProgressOk returns a tuple with the Progress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskResultDetails) GetProgressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Progress.Get(), o.Progress.IsSet()
}

// HasProgress returns a boolean if a field has been set.
func (o *TaskResultDetails) HasProgress() bool {
	if o != nil && o.Progress.IsSet() {
		return true
	}

	return false
}

// SetProgress gets a reference to the given NullableString and assigns it to the Progress field.
func (o *TaskResultDetails) SetProgress(v string) {
	o.Progress.Set(&v)
}
// SetProgressNil sets the value for Progress to be an explicit nil
func (o *TaskResultDetails) SetProgressNil() {
	o.Progress.Set(nil)
}

// UnsetProgress ensures that no value is present for Progress, not even an explicit nil
func (o *TaskResultDetails) UnsetProgress() {
	o.Progress.Unset()
}

func (o TaskResultDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskResultDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ReportType) {
		toSerialize["reportType"] = o.ReportType
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if o.ParentName.IsSet() {
		toSerialize["parentName"] = o.ParentName.Get()
	}
	if !IsNil(o.Launcher) {
		toSerialize["launcher"] = o.Launcher
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if o.Launched.IsSet() {
		toSerialize["launched"] = o.Launched.Get()
	}
	if o.Completed.IsSet() {
		toSerialize["completed"] = o.Completed.Get()
	}
	if o.CompletionStatus.IsSet() {
		toSerialize["completionStatus"] = o.CompletionStatus.Get()
	}
	if !IsNil(o.Messages) {
		toSerialize["messages"] = o.Messages
	}
	if !IsNil(o.Returns) {
		toSerialize["returns"] = o.Returns
	}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if o.Progress.IsSet() {
		toSerialize["progress"] = o.Progress.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TaskResultDetails) UnmarshalJSON(data []byte) (err error) {
	varTaskResultDetails := _TaskResultDetails{}

	err = json.Unmarshal(data, &varTaskResultDetails)

	if err != nil {
		return err
	}

	*o = TaskResultDetails(varTaskResultDetails)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "id")
		delete(additionalProperties, "reportType")
		delete(additionalProperties, "description")
		delete(additionalProperties, "parentName")
		delete(additionalProperties, "launcher")
		delete(additionalProperties, "created")
		delete(additionalProperties, "launched")
		delete(additionalProperties, "completed")
		delete(additionalProperties, "completionStatus")
		delete(additionalProperties, "messages")
		delete(additionalProperties, "returns")
		delete(additionalProperties, "attributes")
		delete(additionalProperties, "progress")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTaskResultDetails struct {
	value *TaskResultDetails
	isSet bool
}

func (v NullableTaskResultDetails) Get() *TaskResultDetails {
	return v.value
}

func (v *NullableTaskResultDetails) Set(val *TaskResultDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskResultDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskResultDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskResultDetails(val *TaskResultDetails) *NullableTaskResultDetails {
	return &NullableTaskResultDetails{value: val, isSet: true}
}

func (v NullableTaskResultDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskResultDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


