/*
Identity Security Cloud V3 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v3

import (
	"encoding/json"
)

// checks if the SodPolicyReadAllOfConflictingAccessCriteria type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SodPolicyReadAllOfConflictingAccessCriteria{}

// SodPolicyReadAllOfConflictingAccessCriteria struct for SodPolicyReadAllOfConflictingAccessCriteria
type SodPolicyReadAllOfConflictingAccessCriteria struct {
	LeftCriteria *AccessCriteria `json:"leftCriteria,omitempty"`
	RightCriteria *AccessCriteria `json:"rightCriteria,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SodPolicyReadAllOfConflictingAccessCriteria SodPolicyReadAllOfConflictingAccessCriteria

// NewSodPolicyReadAllOfConflictingAccessCriteria instantiates a new SodPolicyReadAllOfConflictingAccessCriteria object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSodPolicyReadAllOfConflictingAccessCriteria() *SodPolicyReadAllOfConflictingAccessCriteria {
	this := SodPolicyReadAllOfConflictingAccessCriteria{}
	return &this
}

// NewSodPolicyReadAllOfConflictingAccessCriteriaWithDefaults instantiates a new SodPolicyReadAllOfConflictingAccessCriteria object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSodPolicyReadAllOfConflictingAccessCriteriaWithDefaults() *SodPolicyReadAllOfConflictingAccessCriteria {
	this := SodPolicyReadAllOfConflictingAccessCriteria{}
	return &this
}

// GetLeftCriteria returns the LeftCriteria field value if set, zero value otherwise.
func (o *SodPolicyReadAllOfConflictingAccessCriteria) GetLeftCriteria() AccessCriteria {
	if o == nil || IsNil(o.LeftCriteria) {
		var ret AccessCriteria
		return ret
	}
	return *o.LeftCriteria
}

// GetLeftCriteriaOk returns a tuple with the LeftCriteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SodPolicyReadAllOfConflictingAccessCriteria) GetLeftCriteriaOk() (*AccessCriteria, bool) {
	if o == nil || IsNil(o.LeftCriteria) {
		return nil, false
	}
	return o.LeftCriteria, true
}

// HasLeftCriteria returns a boolean if a field has been set.
func (o *SodPolicyReadAllOfConflictingAccessCriteria) HasLeftCriteria() bool {
	if o != nil && !IsNil(o.LeftCriteria) {
		return true
	}

	return false
}

// SetLeftCriteria gets a reference to the given AccessCriteria and assigns it to the LeftCriteria field.
func (o *SodPolicyReadAllOfConflictingAccessCriteria) SetLeftCriteria(v AccessCriteria) {
	o.LeftCriteria = &v
}

// GetRightCriteria returns the RightCriteria field value if set, zero value otherwise.
func (o *SodPolicyReadAllOfConflictingAccessCriteria) GetRightCriteria() AccessCriteria {
	if o == nil || IsNil(o.RightCriteria) {
		var ret AccessCriteria
		return ret
	}
	return *o.RightCriteria
}

// GetRightCriteriaOk returns a tuple with the RightCriteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SodPolicyReadAllOfConflictingAccessCriteria) GetRightCriteriaOk() (*AccessCriteria, bool) {
	if o == nil || IsNil(o.RightCriteria) {
		return nil, false
	}
	return o.RightCriteria, true
}

// HasRightCriteria returns a boolean if a field has been set.
func (o *SodPolicyReadAllOfConflictingAccessCriteria) HasRightCriteria() bool {
	if o != nil && !IsNil(o.RightCriteria) {
		return true
	}

	return false
}

// SetRightCriteria gets a reference to the given AccessCriteria and assigns it to the RightCriteria field.
func (o *SodPolicyReadAllOfConflictingAccessCriteria) SetRightCriteria(v AccessCriteria) {
	o.RightCriteria = &v
}

func (o SodPolicyReadAllOfConflictingAccessCriteria) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SodPolicyReadAllOfConflictingAccessCriteria) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LeftCriteria) {
		toSerialize["leftCriteria"] = o.LeftCriteria
	}
	if !IsNil(o.RightCriteria) {
		toSerialize["rightCriteria"] = o.RightCriteria
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SodPolicyReadAllOfConflictingAccessCriteria) UnmarshalJSON(data []byte) (err error) {
	varSodPolicyReadAllOfConflictingAccessCriteria := _SodPolicyReadAllOfConflictingAccessCriteria{}

	err = json.Unmarshal(data, &varSodPolicyReadAllOfConflictingAccessCriteria)

	if err != nil {
		return err
	}

	*o = SodPolicyReadAllOfConflictingAccessCriteria(varSodPolicyReadAllOfConflictingAccessCriteria)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "leftCriteria")
		delete(additionalProperties, "rightCriteria")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSodPolicyReadAllOfConflictingAccessCriteria struct {
	value *SodPolicyReadAllOfConflictingAccessCriteria
	isSet bool
}

func (v NullableSodPolicyReadAllOfConflictingAccessCriteria) Get() *SodPolicyReadAllOfConflictingAccessCriteria {
	return v.value
}

func (v *NullableSodPolicyReadAllOfConflictingAccessCriteria) Set(val *SodPolicyReadAllOfConflictingAccessCriteria) {
	v.value = val
	v.isSet = true
}

func (v NullableSodPolicyReadAllOfConflictingAccessCriteria) IsSet() bool {
	return v.isSet
}

func (v *NullableSodPolicyReadAllOfConflictingAccessCriteria) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSodPolicyReadAllOfConflictingAccessCriteria(val *SodPolicyReadAllOfConflictingAccessCriteria) *NullableSodPolicyReadAllOfConflictingAccessCriteria {
	return &NullableSodPolicyReadAllOfConflictingAccessCriteria{value: val, isSet: true}
}

func (v NullableSodPolicyReadAllOfConflictingAccessCriteria) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSodPolicyReadAllOfConflictingAccessCriteria) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


