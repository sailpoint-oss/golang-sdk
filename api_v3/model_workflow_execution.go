/*
Identity Security Cloud V3 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v3

import (
	"encoding/json"
	"time"
)

// checks if the WorkflowExecution type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkflowExecution{}

// WorkflowExecution struct for WorkflowExecution
type WorkflowExecution struct {
	// Workflow execution ID.
	Id *string `json:"id,omitempty"`
	// Workflow ID.
	WorkflowId *string `json:"workflowId,omitempty"`
	// Backend ID that tracks a workflow request in the system. Provide this ID in a customer support ticket for debugging purposes.
	RequestId *string `json:"requestId,omitempty"`
	// Date/time when the workflow started.
	StartTime *time.Time `json:"startTime,omitempty"`
	// Date/time when the workflow ended.
	CloseTime *time.Time `json:"closeTime,omitempty"`
	// Workflow execution status.
	Status *string `json:"status,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _WorkflowExecution WorkflowExecution

// NewWorkflowExecution instantiates a new WorkflowExecution object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkflowExecution() *WorkflowExecution {
	this := WorkflowExecution{}
	return &this
}

// NewWorkflowExecutionWithDefaults instantiates a new WorkflowExecution object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkflowExecutionWithDefaults() *WorkflowExecution {
	this := WorkflowExecution{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *WorkflowExecution) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowExecution) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *WorkflowExecution) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *WorkflowExecution) SetId(v string) {
	o.Id = &v
}

// GetWorkflowId returns the WorkflowId field value if set, zero value otherwise.
func (o *WorkflowExecution) GetWorkflowId() string {
	if o == nil || IsNil(o.WorkflowId) {
		var ret string
		return ret
	}
	return *o.WorkflowId
}

// GetWorkflowIdOk returns a tuple with the WorkflowId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowExecution) GetWorkflowIdOk() (*string, bool) {
	if o == nil || IsNil(o.WorkflowId) {
		return nil, false
	}
	return o.WorkflowId, true
}

// HasWorkflowId returns a boolean if a field has been set.
func (o *WorkflowExecution) HasWorkflowId() bool {
	if o != nil && !IsNil(o.WorkflowId) {
		return true
	}

	return false
}

// SetWorkflowId gets a reference to the given string and assigns it to the WorkflowId field.
func (o *WorkflowExecution) SetWorkflowId(v string) {
	o.WorkflowId = &v
}

// GetRequestId returns the RequestId field value if set, zero value otherwise.
func (o *WorkflowExecution) GetRequestId() string {
	if o == nil || IsNil(o.RequestId) {
		var ret string
		return ret
	}
	return *o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowExecution) GetRequestIdOk() (*string, bool) {
	if o == nil || IsNil(o.RequestId) {
		return nil, false
	}
	return o.RequestId, true
}

// HasRequestId returns a boolean if a field has been set.
func (o *WorkflowExecution) HasRequestId() bool {
	if o != nil && !IsNil(o.RequestId) {
		return true
	}

	return false
}

// SetRequestId gets a reference to the given string and assigns it to the RequestId field.
func (o *WorkflowExecution) SetRequestId(v string) {
	o.RequestId = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *WorkflowExecution) GetStartTime() time.Time {
	if o == nil || IsNil(o.StartTime) {
		var ret time.Time
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowExecution) GetStartTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *WorkflowExecution) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given time.Time and assigns it to the StartTime field.
func (o *WorkflowExecution) SetStartTime(v time.Time) {
	o.StartTime = &v
}

// GetCloseTime returns the CloseTime field value if set, zero value otherwise.
func (o *WorkflowExecution) GetCloseTime() time.Time {
	if o == nil || IsNil(o.CloseTime) {
		var ret time.Time
		return ret
	}
	return *o.CloseTime
}

// GetCloseTimeOk returns a tuple with the CloseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowExecution) GetCloseTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CloseTime) {
		return nil, false
	}
	return o.CloseTime, true
}

// HasCloseTime returns a boolean if a field has been set.
func (o *WorkflowExecution) HasCloseTime() bool {
	if o != nil && !IsNil(o.CloseTime) {
		return true
	}

	return false
}

// SetCloseTime gets a reference to the given time.Time and assigns it to the CloseTime field.
func (o *WorkflowExecution) SetCloseTime(v time.Time) {
	o.CloseTime = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *WorkflowExecution) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowExecution) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *WorkflowExecution) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *WorkflowExecution) SetStatus(v string) {
	o.Status = &v
}

func (o WorkflowExecution) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkflowExecution) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.WorkflowId) {
		toSerialize["workflowId"] = o.WorkflowId
	}
	if !IsNil(o.RequestId) {
		toSerialize["requestId"] = o.RequestId
	}
	if !IsNil(o.StartTime) {
		toSerialize["startTime"] = o.StartTime
	}
	if !IsNil(o.CloseTime) {
		toSerialize["closeTime"] = o.CloseTime
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WorkflowExecution) UnmarshalJSON(data []byte) (err error) {
	varWorkflowExecution := _WorkflowExecution{}

	err = json.Unmarshal(data, &varWorkflowExecution)

	if err != nil {
		return err
	}

	*o = WorkflowExecution(varWorkflowExecution)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "workflowId")
		delete(additionalProperties, "requestId")
		delete(additionalProperties, "startTime")
		delete(additionalProperties, "closeTime")
		delete(additionalProperties, "status")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWorkflowExecution struct {
	value *WorkflowExecution
	isSet bool
}

func (v NullableWorkflowExecution) Get() *WorkflowExecution {
	return v.value
}

func (v *NullableWorkflowExecution) Set(val *WorkflowExecution) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowExecution) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowExecution) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowExecution(val *WorkflowExecution) *NullableWorkflowExecution {
	return &NullableWorkflowExecution{value: val, isSet: true}
}

func (v NullableWorkflowExecution) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowExecution) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


