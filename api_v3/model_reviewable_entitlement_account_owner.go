/*
Identity Security Cloud V3 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v3

import (
	"encoding/json"
)

// checks if the ReviewableEntitlementAccountOwner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReviewableEntitlementAccountOwner{}

// ReviewableEntitlementAccountOwner Information about the machine account owner
type ReviewableEntitlementAccountOwner struct {
	// The id associated with the machine account owner
	Id NullableString `json:"id,omitempty"`
	// An enumeration of the types of Owner supported within the IdentityNow infrastructure.
	Type *string `json:"type,omitempty"`
	// The machine account owner's display name
	DisplayName NullableString `json:"displayName,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ReviewableEntitlementAccountOwner ReviewableEntitlementAccountOwner

// NewReviewableEntitlementAccountOwner instantiates a new ReviewableEntitlementAccountOwner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReviewableEntitlementAccountOwner() *ReviewableEntitlementAccountOwner {
	this := ReviewableEntitlementAccountOwner{}
	return &this
}

// NewReviewableEntitlementAccountOwnerWithDefaults instantiates a new ReviewableEntitlementAccountOwner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReviewableEntitlementAccountOwnerWithDefaults() *ReviewableEntitlementAccountOwner {
	this := ReviewableEntitlementAccountOwner{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReviewableEntitlementAccountOwner) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReviewableEntitlementAccountOwner) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *ReviewableEntitlementAccountOwner) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *ReviewableEntitlementAccountOwner) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *ReviewableEntitlementAccountOwner) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *ReviewableEntitlementAccountOwner) UnsetId() {
	o.Id.Unset()
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ReviewableEntitlementAccountOwner) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReviewableEntitlementAccountOwner) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ReviewableEntitlementAccountOwner) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ReviewableEntitlementAccountOwner) SetType(v string) {
	o.Type = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReviewableEntitlementAccountOwner) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName.Get()) {
		var ret string
		return ret
	}
	return *o.DisplayName.Get()
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReviewableEntitlementAccountOwner) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisplayName.Get(), o.DisplayName.IsSet()
}

// HasDisplayName returns a boolean if a field has been set.
func (o *ReviewableEntitlementAccountOwner) HasDisplayName() bool {
	if o != nil && o.DisplayName.IsSet() {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given NullableString and assigns it to the DisplayName field.
func (o *ReviewableEntitlementAccountOwner) SetDisplayName(v string) {
	o.DisplayName.Set(&v)
}
// SetDisplayNameNil sets the value for DisplayName to be an explicit nil
func (o *ReviewableEntitlementAccountOwner) SetDisplayNameNil() {
	o.DisplayName.Set(nil)
}

// UnsetDisplayName ensures that no value is present for DisplayName, not even an explicit nil
func (o *ReviewableEntitlementAccountOwner) UnsetDisplayName() {
	o.DisplayName.Unset()
}

func (o ReviewableEntitlementAccountOwner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReviewableEntitlementAccountOwner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if o.DisplayName.IsSet() {
		toSerialize["displayName"] = o.DisplayName.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ReviewableEntitlementAccountOwner) UnmarshalJSON(data []byte) (err error) {
	varReviewableEntitlementAccountOwner := _ReviewableEntitlementAccountOwner{}

	err = json.Unmarshal(data, &varReviewableEntitlementAccountOwner)

	if err != nil {
		return err
	}

	*o = ReviewableEntitlementAccountOwner(varReviewableEntitlementAccountOwner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "type")
		delete(additionalProperties, "displayName")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableReviewableEntitlementAccountOwner struct {
	value *ReviewableEntitlementAccountOwner
	isSet bool
}

func (v NullableReviewableEntitlementAccountOwner) Get() *ReviewableEntitlementAccountOwner {
	return v.value
}

func (v *NullableReviewableEntitlementAccountOwner) Set(val *ReviewableEntitlementAccountOwner) {
	v.value = val
	v.isSet = true
}

func (v NullableReviewableEntitlementAccountOwner) IsSet() bool {
	return v.isSet
}

func (v *NullableReviewableEntitlementAccountOwner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReviewableEntitlementAccountOwner(val *ReviewableEntitlementAccountOwner) *NullableReviewableEntitlementAccountOwner {
	return &NullableReviewableEntitlementAccountOwner{value: val, isSet: true}
}

func (v NullableReviewableEntitlementAccountOwner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReviewableEntitlementAccountOwner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


