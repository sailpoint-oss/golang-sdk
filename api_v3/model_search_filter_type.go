/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v3

import (
	"encoding/json"
	"fmt"
)

// SearchFilterType Enum representing the currently supported filter aggregation types. Additional values may be added in the future without notice.
type SearchFilterType string

// List of SearchFilterType
const (
	SEARCHFILTERTYPE_TERM SearchFilterType = "TERM"
)

// All allowed values of SearchFilterType enum
var AllowedSearchFilterTypeEnumValues = []SearchFilterType{
	"TERM",
}

func (v *SearchFilterType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SearchFilterType(value)
	for _, existing := range AllowedSearchFilterTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SearchFilterType", value)
}

// NewSearchFilterTypeFromValue returns a pointer to a valid SearchFilterType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSearchFilterTypeFromValue(v string) (*SearchFilterType, error) {
	ev := SearchFilterType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SearchFilterType: valid values are %v", v, AllowedSearchFilterTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SearchFilterType) IsValid() bool {
	for _, existing := range AllowedSearchFilterTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SearchFilterType value
func (v SearchFilterType) Ptr() *SearchFilterType {
	return &v
}

type NullableSearchFilterType struct {
	value *SearchFilterType
	isSet bool
}

func (v NullableSearchFilterType) Get() *SearchFilterType {
	return v.value
}

func (v *NullableSearchFilterType) Set(val *SearchFilterType) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchFilterType) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchFilterType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchFilterType(val *SearchFilterType) *NullableSearchFilterType {
	return &NullableSearchFilterType{value: val, isSet: true}
}

func (v NullableSearchFilterType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchFilterType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

