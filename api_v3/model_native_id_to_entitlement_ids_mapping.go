/*
Identity Security Cloud V3 API

Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v3

import (
	"encoding/json"
	"fmt"
)

// checks if the NativeIdToEntitlementIdsMapping type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NativeIdToEntitlementIdsMapping{}

// NativeIdToEntitlementIdsMapping Native ID to Entitlement IDs mapping.
type NativeIdToEntitlementIdsMapping struct {
	// The native ID in the source system.
	NativeId string `json:"nativeId"`
	// The list of entitlement IDs associated with the native ID in the source system.
	EntitlementIds []string `json:"entitlementIds"`
	AdditionalProperties map[string]interface{}
}

type _NativeIdToEntitlementIdsMapping NativeIdToEntitlementIdsMapping

// NewNativeIdToEntitlementIdsMapping instantiates a new NativeIdToEntitlementIdsMapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNativeIdToEntitlementIdsMapping(nativeId string, entitlementIds []string) *NativeIdToEntitlementIdsMapping {
	this := NativeIdToEntitlementIdsMapping{}
	this.NativeId = nativeId
	this.EntitlementIds = entitlementIds
	return &this
}

// NewNativeIdToEntitlementIdsMappingWithDefaults instantiates a new NativeIdToEntitlementIdsMapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNativeIdToEntitlementIdsMappingWithDefaults() *NativeIdToEntitlementIdsMapping {
	this := NativeIdToEntitlementIdsMapping{}
	return &this
}

// GetNativeId returns the NativeId field value
func (o *NativeIdToEntitlementIdsMapping) GetNativeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NativeId
}

// GetNativeIdOk returns a tuple with the NativeId field value
// and a boolean to check if the value has been set.
func (o *NativeIdToEntitlementIdsMapping) GetNativeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NativeId, true
}

// SetNativeId sets field value
func (o *NativeIdToEntitlementIdsMapping) SetNativeId(v string) {
	o.NativeId = v
}

// GetEntitlementIds returns the EntitlementIds field value
func (o *NativeIdToEntitlementIdsMapping) GetEntitlementIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.EntitlementIds
}

// GetEntitlementIdsOk returns a tuple with the EntitlementIds field value
// and a boolean to check if the value has been set.
func (o *NativeIdToEntitlementIdsMapping) GetEntitlementIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EntitlementIds, true
}

// SetEntitlementIds sets field value
func (o *NativeIdToEntitlementIdsMapping) SetEntitlementIds(v []string) {
	o.EntitlementIds = v
}

func (o NativeIdToEntitlementIdsMapping) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NativeIdToEntitlementIdsMapping) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["nativeId"] = o.NativeId
	toSerialize["entitlementIds"] = o.EntitlementIds

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NativeIdToEntitlementIdsMapping) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"nativeId",
		"entitlementIds",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNativeIdToEntitlementIdsMapping := _NativeIdToEntitlementIdsMapping{}

	err = json.Unmarshal(data, &varNativeIdToEntitlementIdsMapping)

	if err != nil {
		return err
	}

	*o = NativeIdToEntitlementIdsMapping(varNativeIdToEntitlementIdsMapping)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "nativeId")
		delete(additionalProperties, "entitlementIds")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNativeIdToEntitlementIdsMapping struct {
	value *NativeIdToEntitlementIdsMapping
	isSet bool
}

func (v NullableNativeIdToEntitlementIdsMapping) Get() *NativeIdToEntitlementIdsMapping {
	return v.value
}

func (v *NullableNativeIdToEntitlementIdsMapping) Set(val *NativeIdToEntitlementIdsMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableNativeIdToEntitlementIdsMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableNativeIdToEntitlementIdsMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNativeIdToEntitlementIdsMapping(val *NativeIdToEntitlementIdsMapping) *NullableNativeIdToEntitlementIdsMapping {
	return &NullableNativeIdToEntitlementIdsMapping{value: val, isSet: true}
}

func (v NullableNativeIdToEntitlementIdsMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNativeIdToEntitlementIdsMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


