/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v3

import (
	"encoding/json"
)

// checks if the RequestOnBehalfOfConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RequestOnBehalfOfConfig{}

// RequestOnBehalfOfConfig struct for RequestOnBehalfOfConfig
type RequestOnBehalfOfConfig struct {
	// If anyone can request access for anyone.
	AllowRequestOnBehalfOfAnyoneByAnyone *bool `json:"allowRequestOnBehalfOfAnyoneByAnyone,omitempty"`
	// If a manager can request access for his/her direct reports.
	AllowRequestOnBehalfOfEmployeeByManager *bool `json:"allowRequestOnBehalfOfEmployeeByManager,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RequestOnBehalfOfConfig RequestOnBehalfOfConfig

// NewRequestOnBehalfOfConfig instantiates a new RequestOnBehalfOfConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequestOnBehalfOfConfig() *RequestOnBehalfOfConfig {
	this := RequestOnBehalfOfConfig{}
	return &this
}

// NewRequestOnBehalfOfConfigWithDefaults instantiates a new RequestOnBehalfOfConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequestOnBehalfOfConfigWithDefaults() *RequestOnBehalfOfConfig {
	this := RequestOnBehalfOfConfig{}
	return &this
}

// GetAllowRequestOnBehalfOfAnyoneByAnyone returns the AllowRequestOnBehalfOfAnyoneByAnyone field value if set, zero value otherwise.
func (o *RequestOnBehalfOfConfig) GetAllowRequestOnBehalfOfAnyoneByAnyone() bool {
	if o == nil || isNil(o.AllowRequestOnBehalfOfAnyoneByAnyone) {
		var ret bool
		return ret
	}
	return *o.AllowRequestOnBehalfOfAnyoneByAnyone
}

// GetAllowRequestOnBehalfOfAnyoneByAnyoneOk returns a tuple with the AllowRequestOnBehalfOfAnyoneByAnyone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestOnBehalfOfConfig) GetAllowRequestOnBehalfOfAnyoneByAnyoneOk() (*bool, bool) {
	if o == nil || isNil(o.AllowRequestOnBehalfOfAnyoneByAnyone) {
		return nil, false
	}
	return o.AllowRequestOnBehalfOfAnyoneByAnyone, true
}

// HasAllowRequestOnBehalfOfAnyoneByAnyone returns a boolean if a field has been set.
func (o *RequestOnBehalfOfConfig) HasAllowRequestOnBehalfOfAnyoneByAnyone() bool {
	if o != nil && !isNil(o.AllowRequestOnBehalfOfAnyoneByAnyone) {
		return true
	}

	return false
}

// SetAllowRequestOnBehalfOfAnyoneByAnyone gets a reference to the given bool and assigns it to the AllowRequestOnBehalfOfAnyoneByAnyone field.
func (o *RequestOnBehalfOfConfig) SetAllowRequestOnBehalfOfAnyoneByAnyone(v bool) {
	o.AllowRequestOnBehalfOfAnyoneByAnyone = &v
}

// GetAllowRequestOnBehalfOfEmployeeByManager returns the AllowRequestOnBehalfOfEmployeeByManager field value if set, zero value otherwise.
func (o *RequestOnBehalfOfConfig) GetAllowRequestOnBehalfOfEmployeeByManager() bool {
	if o == nil || isNil(o.AllowRequestOnBehalfOfEmployeeByManager) {
		var ret bool
		return ret
	}
	return *o.AllowRequestOnBehalfOfEmployeeByManager
}

// GetAllowRequestOnBehalfOfEmployeeByManagerOk returns a tuple with the AllowRequestOnBehalfOfEmployeeByManager field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestOnBehalfOfConfig) GetAllowRequestOnBehalfOfEmployeeByManagerOk() (*bool, bool) {
	if o == nil || isNil(o.AllowRequestOnBehalfOfEmployeeByManager) {
		return nil, false
	}
	return o.AllowRequestOnBehalfOfEmployeeByManager, true
}

// HasAllowRequestOnBehalfOfEmployeeByManager returns a boolean if a field has been set.
func (o *RequestOnBehalfOfConfig) HasAllowRequestOnBehalfOfEmployeeByManager() bool {
	if o != nil && !isNil(o.AllowRequestOnBehalfOfEmployeeByManager) {
		return true
	}

	return false
}

// SetAllowRequestOnBehalfOfEmployeeByManager gets a reference to the given bool and assigns it to the AllowRequestOnBehalfOfEmployeeByManager field.
func (o *RequestOnBehalfOfConfig) SetAllowRequestOnBehalfOfEmployeeByManager(v bool) {
	o.AllowRequestOnBehalfOfEmployeeByManager = &v
}

func (o RequestOnBehalfOfConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RequestOnBehalfOfConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AllowRequestOnBehalfOfAnyoneByAnyone) {
		toSerialize["allowRequestOnBehalfOfAnyoneByAnyone"] = o.AllowRequestOnBehalfOfAnyoneByAnyone
	}
	if !isNil(o.AllowRequestOnBehalfOfEmployeeByManager) {
		toSerialize["allowRequestOnBehalfOfEmployeeByManager"] = o.AllowRequestOnBehalfOfEmployeeByManager
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RequestOnBehalfOfConfig) UnmarshalJSON(bytes []byte) (err error) {
	varRequestOnBehalfOfConfig := _RequestOnBehalfOfConfig{}

	if err = json.Unmarshal(bytes, &varRequestOnBehalfOfConfig); err == nil {
	*o = RequestOnBehalfOfConfig(varRequestOnBehalfOfConfig)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "allowRequestOnBehalfOfAnyoneByAnyone")
		delete(additionalProperties, "allowRequestOnBehalfOfEmployeeByManager")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRequestOnBehalfOfConfig struct {
	value *RequestOnBehalfOfConfig
	isSet bool
}

func (v NullableRequestOnBehalfOfConfig) Get() *RequestOnBehalfOfConfig {
	return v.value
}

func (v *NullableRequestOnBehalfOfConfig) Set(val *RequestOnBehalfOfConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestOnBehalfOfConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestOnBehalfOfConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestOnBehalfOfConfig(val *RequestOnBehalfOfConfig) *NullableRequestOnBehalfOfConfig {
	return &NullableRequestOnBehalfOfConfig{value: val, isSet: true}
}

func (v NullableRequestOnBehalfOfConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestOnBehalfOfConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


