/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v3

import (
	"encoding/json"
	"fmt"
)

// CompletedApprovalState Enum represents completed approval object's state.
type CompletedApprovalState string

// List of CompletedApprovalState
const (
	COMPLETEDAPPROVALSTATE_APPROVED CompletedApprovalState = "APPROVED"
	COMPLETEDAPPROVALSTATE_REJECTED CompletedApprovalState = "REJECTED"
)

// All allowed values of CompletedApprovalState enum
var AllowedCompletedApprovalStateEnumValues = []CompletedApprovalState{
	"APPROVED",
	"REJECTED",
}

func (v *CompletedApprovalState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CompletedApprovalState(value)
	for _, existing := range AllowedCompletedApprovalStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CompletedApprovalState", value)
}

// NewCompletedApprovalStateFromValue returns a pointer to a valid CompletedApprovalState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCompletedApprovalStateFromValue(v string) (*CompletedApprovalState, error) {
	ev := CompletedApprovalState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CompletedApprovalState: valid values are %v", v, AllowedCompletedApprovalStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CompletedApprovalState) IsValid() bool {
	for _, existing := range AllowedCompletedApprovalStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CompletedApprovalState value
func (v CompletedApprovalState) Ptr() *CompletedApprovalState {
	return &v
}

type NullableCompletedApprovalState struct {
	value *CompletedApprovalState
	isSet bool
}

func (v NullableCompletedApprovalState) Get() *CompletedApprovalState {
	return v.value
}

func (v *NullableCompletedApprovalState) Set(val *CompletedApprovalState) {
	v.value = val
	v.isSet = true
}

func (v NullableCompletedApprovalState) IsSet() bool {
	return v.isSet
}

func (v *NullableCompletedApprovalState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompletedApprovalState(val *CompletedApprovalState) *NullableCompletedApprovalState {
	return &NullableCompletedApprovalState{value: val, isSet: true}
}

func (v NullableCompletedApprovalState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompletedApprovalState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

