/*
SailPoint SaaS API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_v2

import (
	"encoding/json"
)

// checks if the UpdateOrgSettingsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateOrgSettingsRequest{}

// UpdateOrgSettingsRequest struct for UpdateOrgSettingsRequest
type UpdateOrgSettingsRequest struct {
	CountryCodes []string `json:"countryCodes,omitempty"`
	EnableExternalPasswordChange *bool `json:"enableExternalPasswordChange,omitempty"`
	EnableAutomaticPasswordReplay *bool `json:"enableAutomaticPasswordReplay,omitempty"`
	EnableAutomationGeneration *bool `json:"enableAutomationGeneration,omitempty"`
	KbaReqAnswers *int32 `json:"kbaReqAnswers,omitempty"`
	KbaReqForAuthn *int32 `json:"kbaReqForAuthn,omitempty"`
	LockoutAttemptThreshold *int32 `json:"lockoutAttemptThreshold,omitempty"`
	LockoutTimeMinutes *int32 `json:"lockoutTimeMinutes,omitempty"`
	LoginUrl *string `json:"loginUrl,omitempty"`
	Netmasks []string `json:"netmasks,omitempty"`
	NotifyAuthenticationSettingChange *bool `json:"notifyAuthenticationSettingChange,omitempty"`
	PasswordReplayState *string `json:"passwordReplayState,omitempty"`
	PreferredIdentityInviteTemplate *string `json:"preferredIdentityInviteTemplate,omitempty"`
	RedirectPatterns []string `json:"redirectPatterns,omitempty"`
	SsoPartnerSource *string `json:"ssoPartnerSource,omitempty"`
	SystemNotificationEmails []string `json:"systemNotificationEmails,omitempty"`
	TrackAnalytics *bool `json:"trackAnalytics,omitempty"`
	UsageCertRequired *bool `json:"usageCertRequired,omitempty"`
	UsageCertText *string `json:"usageCertText,omitempty"`
	UsernameEmptyText *string `json:"usernameEmptyText,omitempty"`
	UsernameLabel *string `json:"usernameLabel,omitempty"`
	WhiteList *bool `json:"whiteList,omitempty"`
	ApprovalConfig *GetOrgSettings200ResponseApprovalConfig `json:"approvalConfig,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateOrgSettingsRequest UpdateOrgSettingsRequest

// NewUpdateOrgSettingsRequest instantiates a new UpdateOrgSettingsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateOrgSettingsRequest() *UpdateOrgSettingsRequest {
	this := UpdateOrgSettingsRequest{}
	return &this
}

// NewUpdateOrgSettingsRequestWithDefaults instantiates a new UpdateOrgSettingsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateOrgSettingsRequestWithDefaults() *UpdateOrgSettingsRequest {
	this := UpdateOrgSettingsRequest{}
	return &this
}

// GetCountryCodes returns the CountryCodes field value if set, zero value otherwise.
func (o *UpdateOrgSettingsRequest) GetCountryCodes() []string {
	if o == nil || isNil(o.CountryCodes) {
		var ret []string
		return ret
	}
	return o.CountryCodes
}

// GetCountryCodesOk returns a tuple with the CountryCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOrgSettingsRequest) GetCountryCodesOk() ([]string, bool) {
	if o == nil || isNil(o.CountryCodes) {
		return nil, false
	}
	return o.CountryCodes, true
}

// HasCountryCodes returns a boolean if a field has been set.
func (o *UpdateOrgSettingsRequest) HasCountryCodes() bool {
	if o != nil && !isNil(o.CountryCodes) {
		return true
	}

	return false
}

// SetCountryCodes gets a reference to the given []string and assigns it to the CountryCodes field.
func (o *UpdateOrgSettingsRequest) SetCountryCodes(v []string) {
	o.CountryCodes = v
}

// GetEnableExternalPasswordChange returns the EnableExternalPasswordChange field value if set, zero value otherwise.
func (o *UpdateOrgSettingsRequest) GetEnableExternalPasswordChange() bool {
	if o == nil || isNil(o.EnableExternalPasswordChange) {
		var ret bool
		return ret
	}
	return *o.EnableExternalPasswordChange
}

// GetEnableExternalPasswordChangeOk returns a tuple with the EnableExternalPasswordChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOrgSettingsRequest) GetEnableExternalPasswordChangeOk() (*bool, bool) {
	if o == nil || isNil(o.EnableExternalPasswordChange) {
		return nil, false
	}
	return o.EnableExternalPasswordChange, true
}

// HasEnableExternalPasswordChange returns a boolean if a field has been set.
func (o *UpdateOrgSettingsRequest) HasEnableExternalPasswordChange() bool {
	if o != nil && !isNil(o.EnableExternalPasswordChange) {
		return true
	}

	return false
}

// SetEnableExternalPasswordChange gets a reference to the given bool and assigns it to the EnableExternalPasswordChange field.
func (o *UpdateOrgSettingsRequest) SetEnableExternalPasswordChange(v bool) {
	o.EnableExternalPasswordChange = &v
}

// GetEnableAutomaticPasswordReplay returns the EnableAutomaticPasswordReplay field value if set, zero value otherwise.
func (o *UpdateOrgSettingsRequest) GetEnableAutomaticPasswordReplay() bool {
	if o == nil || isNil(o.EnableAutomaticPasswordReplay) {
		var ret bool
		return ret
	}
	return *o.EnableAutomaticPasswordReplay
}

// GetEnableAutomaticPasswordReplayOk returns a tuple with the EnableAutomaticPasswordReplay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOrgSettingsRequest) GetEnableAutomaticPasswordReplayOk() (*bool, bool) {
	if o == nil || isNil(o.EnableAutomaticPasswordReplay) {
		return nil, false
	}
	return o.EnableAutomaticPasswordReplay, true
}

// HasEnableAutomaticPasswordReplay returns a boolean if a field has been set.
func (o *UpdateOrgSettingsRequest) HasEnableAutomaticPasswordReplay() bool {
	if o != nil && !isNil(o.EnableAutomaticPasswordReplay) {
		return true
	}

	return false
}

// SetEnableAutomaticPasswordReplay gets a reference to the given bool and assigns it to the EnableAutomaticPasswordReplay field.
func (o *UpdateOrgSettingsRequest) SetEnableAutomaticPasswordReplay(v bool) {
	o.EnableAutomaticPasswordReplay = &v
}

// GetEnableAutomationGeneration returns the EnableAutomationGeneration field value if set, zero value otherwise.
func (o *UpdateOrgSettingsRequest) GetEnableAutomationGeneration() bool {
	if o == nil || isNil(o.EnableAutomationGeneration) {
		var ret bool
		return ret
	}
	return *o.EnableAutomationGeneration
}

// GetEnableAutomationGenerationOk returns a tuple with the EnableAutomationGeneration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOrgSettingsRequest) GetEnableAutomationGenerationOk() (*bool, bool) {
	if o == nil || isNil(o.EnableAutomationGeneration) {
		return nil, false
	}
	return o.EnableAutomationGeneration, true
}

// HasEnableAutomationGeneration returns a boolean if a field has been set.
func (o *UpdateOrgSettingsRequest) HasEnableAutomationGeneration() bool {
	if o != nil && !isNil(o.EnableAutomationGeneration) {
		return true
	}

	return false
}

// SetEnableAutomationGeneration gets a reference to the given bool and assigns it to the EnableAutomationGeneration field.
func (o *UpdateOrgSettingsRequest) SetEnableAutomationGeneration(v bool) {
	o.EnableAutomationGeneration = &v
}

// GetKbaReqAnswers returns the KbaReqAnswers field value if set, zero value otherwise.
func (o *UpdateOrgSettingsRequest) GetKbaReqAnswers() int32 {
	if o == nil || isNil(o.KbaReqAnswers) {
		var ret int32
		return ret
	}
	return *o.KbaReqAnswers
}

// GetKbaReqAnswersOk returns a tuple with the KbaReqAnswers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOrgSettingsRequest) GetKbaReqAnswersOk() (*int32, bool) {
	if o == nil || isNil(o.KbaReqAnswers) {
		return nil, false
	}
	return o.KbaReqAnswers, true
}

// HasKbaReqAnswers returns a boolean if a field has been set.
func (o *UpdateOrgSettingsRequest) HasKbaReqAnswers() bool {
	if o != nil && !isNil(o.KbaReqAnswers) {
		return true
	}

	return false
}

// SetKbaReqAnswers gets a reference to the given int32 and assigns it to the KbaReqAnswers field.
func (o *UpdateOrgSettingsRequest) SetKbaReqAnswers(v int32) {
	o.KbaReqAnswers = &v
}

// GetKbaReqForAuthn returns the KbaReqForAuthn field value if set, zero value otherwise.
func (o *UpdateOrgSettingsRequest) GetKbaReqForAuthn() int32 {
	if o == nil || isNil(o.KbaReqForAuthn) {
		var ret int32
		return ret
	}
	return *o.KbaReqForAuthn
}

// GetKbaReqForAuthnOk returns a tuple with the KbaReqForAuthn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOrgSettingsRequest) GetKbaReqForAuthnOk() (*int32, bool) {
	if o == nil || isNil(o.KbaReqForAuthn) {
		return nil, false
	}
	return o.KbaReqForAuthn, true
}

// HasKbaReqForAuthn returns a boolean if a field has been set.
func (o *UpdateOrgSettingsRequest) HasKbaReqForAuthn() bool {
	if o != nil && !isNil(o.KbaReqForAuthn) {
		return true
	}

	return false
}

// SetKbaReqForAuthn gets a reference to the given int32 and assigns it to the KbaReqForAuthn field.
func (o *UpdateOrgSettingsRequest) SetKbaReqForAuthn(v int32) {
	o.KbaReqForAuthn = &v
}

// GetLockoutAttemptThreshold returns the LockoutAttemptThreshold field value if set, zero value otherwise.
func (o *UpdateOrgSettingsRequest) GetLockoutAttemptThreshold() int32 {
	if o == nil || isNil(o.LockoutAttemptThreshold) {
		var ret int32
		return ret
	}
	return *o.LockoutAttemptThreshold
}

// GetLockoutAttemptThresholdOk returns a tuple with the LockoutAttemptThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOrgSettingsRequest) GetLockoutAttemptThresholdOk() (*int32, bool) {
	if o == nil || isNil(o.LockoutAttemptThreshold) {
		return nil, false
	}
	return o.LockoutAttemptThreshold, true
}

// HasLockoutAttemptThreshold returns a boolean if a field has been set.
func (o *UpdateOrgSettingsRequest) HasLockoutAttemptThreshold() bool {
	if o != nil && !isNil(o.LockoutAttemptThreshold) {
		return true
	}

	return false
}

// SetLockoutAttemptThreshold gets a reference to the given int32 and assigns it to the LockoutAttemptThreshold field.
func (o *UpdateOrgSettingsRequest) SetLockoutAttemptThreshold(v int32) {
	o.LockoutAttemptThreshold = &v
}

// GetLockoutTimeMinutes returns the LockoutTimeMinutes field value if set, zero value otherwise.
func (o *UpdateOrgSettingsRequest) GetLockoutTimeMinutes() int32 {
	if o == nil || isNil(o.LockoutTimeMinutes) {
		var ret int32
		return ret
	}
	return *o.LockoutTimeMinutes
}

// GetLockoutTimeMinutesOk returns a tuple with the LockoutTimeMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOrgSettingsRequest) GetLockoutTimeMinutesOk() (*int32, bool) {
	if o == nil || isNil(o.LockoutTimeMinutes) {
		return nil, false
	}
	return o.LockoutTimeMinutes, true
}

// HasLockoutTimeMinutes returns a boolean if a field has been set.
func (o *UpdateOrgSettingsRequest) HasLockoutTimeMinutes() bool {
	if o != nil && !isNil(o.LockoutTimeMinutes) {
		return true
	}

	return false
}

// SetLockoutTimeMinutes gets a reference to the given int32 and assigns it to the LockoutTimeMinutes field.
func (o *UpdateOrgSettingsRequest) SetLockoutTimeMinutes(v int32) {
	o.LockoutTimeMinutes = &v
}

// GetLoginUrl returns the LoginUrl field value if set, zero value otherwise.
func (o *UpdateOrgSettingsRequest) GetLoginUrl() string {
	if o == nil || isNil(o.LoginUrl) {
		var ret string
		return ret
	}
	return *o.LoginUrl
}

// GetLoginUrlOk returns a tuple with the LoginUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOrgSettingsRequest) GetLoginUrlOk() (*string, bool) {
	if o == nil || isNil(o.LoginUrl) {
		return nil, false
	}
	return o.LoginUrl, true
}

// HasLoginUrl returns a boolean if a field has been set.
func (o *UpdateOrgSettingsRequest) HasLoginUrl() bool {
	if o != nil && !isNil(o.LoginUrl) {
		return true
	}

	return false
}

// SetLoginUrl gets a reference to the given string and assigns it to the LoginUrl field.
func (o *UpdateOrgSettingsRequest) SetLoginUrl(v string) {
	o.LoginUrl = &v
}

// GetNetmasks returns the Netmasks field value if set, zero value otherwise.
func (o *UpdateOrgSettingsRequest) GetNetmasks() []string {
	if o == nil || isNil(o.Netmasks) {
		var ret []string
		return ret
	}
	return o.Netmasks
}

// GetNetmasksOk returns a tuple with the Netmasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOrgSettingsRequest) GetNetmasksOk() ([]string, bool) {
	if o == nil || isNil(o.Netmasks) {
		return nil, false
	}
	return o.Netmasks, true
}

// HasNetmasks returns a boolean if a field has been set.
func (o *UpdateOrgSettingsRequest) HasNetmasks() bool {
	if o != nil && !isNil(o.Netmasks) {
		return true
	}

	return false
}

// SetNetmasks gets a reference to the given []string and assigns it to the Netmasks field.
func (o *UpdateOrgSettingsRequest) SetNetmasks(v []string) {
	o.Netmasks = v
}

// GetNotifyAuthenticationSettingChange returns the NotifyAuthenticationSettingChange field value if set, zero value otherwise.
func (o *UpdateOrgSettingsRequest) GetNotifyAuthenticationSettingChange() bool {
	if o == nil || isNil(o.NotifyAuthenticationSettingChange) {
		var ret bool
		return ret
	}
	return *o.NotifyAuthenticationSettingChange
}

// GetNotifyAuthenticationSettingChangeOk returns a tuple with the NotifyAuthenticationSettingChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOrgSettingsRequest) GetNotifyAuthenticationSettingChangeOk() (*bool, bool) {
	if o == nil || isNil(o.NotifyAuthenticationSettingChange) {
		return nil, false
	}
	return o.NotifyAuthenticationSettingChange, true
}

// HasNotifyAuthenticationSettingChange returns a boolean if a field has been set.
func (o *UpdateOrgSettingsRequest) HasNotifyAuthenticationSettingChange() bool {
	if o != nil && !isNil(o.NotifyAuthenticationSettingChange) {
		return true
	}

	return false
}

// SetNotifyAuthenticationSettingChange gets a reference to the given bool and assigns it to the NotifyAuthenticationSettingChange field.
func (o *UpdateOrgSettingsRequest) SetNotifyAuthenticationSettingChange(v bool) {
	o.NotifyAuthenticationSettingChange = &v
}

// GetPasswordReplayState returns the PasswordReplayState field value if set, zero value otherwise.
func (o *UpdateOrgSettingsRequest) GetPasswordReplayState() string {
	if o == nil || isNil(o.PasswordReplayState) {
		var ret string
		return ret
	}
	return *o.PasswordReplayState
}

// GetPasswordReplayStateOk returns a tuple with the PasswordReplayState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOrgSettingsRequest) GetPasswordReplayStateOk() (*string, bool) {
	if o == nil || isNil(o.PasswordReplayState) {
		return nil, false
	}
	return o.PasswordReplayState, true
}

// HasPasswordReplayState returns a boolean if a field has been set.
func (o *UpdateOrgSettingsRequest) HasPasswordReplayState() bool {
	if o != nil && !isNil(o.PasswordReplayState) {
		return true
	}

	return false
}

// SetPasswordReplayState gets a reference to the given string and assigns it to the PasswordReplayState field.
func (o *UpdateOrgSettingsRequest) SetPasswordReplayState(v string) {
	o.PasswordReplayState = &v
}

// GetPreferredIdentityInviteTemplate returns the PreferredIdentityInviteTemplate field value if set, zero value otherwise.
func (o *UpdateOrgSettingsRequest) GetPreferredIdentityInviteTemplate() string {
	if o == nil || isNil(o.PreferredIdentityInviteTemplate) {
		var ret string
		return ret
	}
	return *o.PreferredIdentityInviteTemplate
}

// GetPreferredIdentityInviteTemplateOk returns a tuple with the PreferredIdentityInviteTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOrgSettingsRequest) GetPreferredIdentityInviteTemplateOk() (*string, bool) {
	if o == nil || isNil(o.PreferredIdentityInviteTemplate) {
		return nil, false
	}
	return o.PreferredIdentityInviteTemplate, true
}

// HasPreferredIdentityInviteTemplate returns a boolean if a field has been set.
func (o *UpdateOrgSettingsRequest) HasPreferredIdentityInviteTemplate() bool {
	if o != nil && !isNil(o.PreferredIdentityInviteTemplate) {
		return true
	}

	return false
}

// SetPreferredIdentityInviteTemplate gets a reference to the given string and assigns it to the PreferredIdentityInviteTemplate field.
func (o *UpdateOrgSettingsRequest) SetPreferredIdentityInviteTemplate(v string) {
	o.PreferredIdentityInviteTemplate = &v
}

// GetRedirectPatterns returns the RedirectPatterns field value if set, zero value otherwise.
func (o *UpdateOrgSettingsRequest) GetRedirectPatterns() []string {
	if o == nil || isNil(o.RedirectPatterns) {
		var ret []string
		return ret
	}
	return o.RedirectPatterns
}

// GetRedirectPatternsOk returns a tuple with the RedirectPatterns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOrgSettingsRequest) GetRedirectPatternsOk() ([]string, bool) {
	if o == nil || isNil(o.RedirectPatterns) {
		return nil, false
	}
	return o.RedirectPatterns, true
}

// HasRedirectPatterns returns a boolean if a field has been set.
func (o *UpdateOrgSettingsRequest) HasRedirectPatterns() bool {
	if o != nil && !isNil(o.RedirectPatterns) {
		return true
	}

	return false
}

// SetRedirectPatterns gets a reference to the given []string and assigns it to the RedirectPatterns field.
func (o *UpdateOrgSettingsRequest) SetRedirectPatterns(v []string) {
	o.RedirectPatterns = v
}

// GetSsoPartnerSource returns the SsoPartnerSource field value if set, zero value otherwise.
func (o *UpdateOrgSettingsRequest) GetSsoPartnerSource() string {
	if o == nil || isNil(o.SsoPartnerSource) {
		var ret string
		return ret
	}
	return *o.SsoPartnerSource
}

// GetSsoPartnerSourceOk returns a tuple with the SsoPartnerSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOrgSettingsRequest) GetSsoPartnerSourceOk() (*string, bool) {
	if o == nil || isNil(o.SsoPartnerSource) {
		return nil, false
	}
	return o.SsoPartnerSource, true
}

// HasSsoPartnerSource returns a boolean if a field has been set.
func (o *UpdateOrgSettingsRequest) HasSsoPartnerSource() bool {
	if o != nil && !isNil(o.SsoPartnerSource) {
		return true
	}

	return false
}

// SetSsoPartnerSource gets a reference to the given string and assigns it to the SsoPartnerSource field.
func (o *UpdateOrgSettingsRequest) SetSsoPartnerSource(v string) {
	o.SsoPartnerSource = &v
}

// GetSystemNotificationEmails returns the SystemNotificationEmails field value if set, zero value otherwise.
func (o *UpdateOrgSettingsRequest) GetSystemNotificationEmails() []string {
	if o == nil || isNil(o.SystemNotificationEmails) {
		var ret []string
		return ret
	}
	return o.SystemNotificationEmails
}

// GetSystemNotificationEmailsOk returns a tuple with the SystemNotificationEmails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOrgSettingsRequest) GetSystemNotificationEmailsOk() ([]string, bool) {
	if o == nil || isNil(o.SystemNotificationEmails) {
		return nil, false
	}
	return o.SystemNotificationEmails, true
}

// HasSystemNotificationEmails returns a boolean if a field has been set.
func (o *UpdateOrgSettingsRequest) HasSystemNotificationEmails() bool {
	if o != nil && !isNil(o.SystemNotificationEmails) {
		return true
	}

	return false
}

// SetSystemNotificationEmails gets a reference to the given []string and assigns it to the SystemNotificationEmails field.
func (o *UpdateOrgSettingsRequest) SetSystemNotificationEmails(v []string) {
	o.SystemNotificationEmails = v
}

// GetTrackAnalytics returns the TrackAnalytics field value if set, zero value otherwise.
func (o *UpdateOrgSettingsRequest) GetTrackAnalytics() bool {
	if o == nil || isNil(o.TrackAnalytics) {
		var ret bool
		return ret
	}
	return *o.TrackAnalytics
}

// GetTrackAnalyticsOk returns a tuple with the TrackAnalytics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOrgSettingsRequest) GetTrackAnalyticsOk() (*bool, bool) {
	if o == nil || isNil(o.TrackAnalytics) {
		return nil, false
	}
	return o.TrackAnalytics, true
}

// HasTrackAnalytics returns a boolean if a field has been set.
func (o *UpdateOrgSettingsRequest) HasTrackAnalytics() bool {
	if o != nil && !isNil(o.TrackAnalytics) {
		return true
	}

	return false
}

// SetTrackAnalytics gets a reference to the given bool and assigns it to the TrackAnalytics field.
func (o *UpdateOrgSettingsRequest) SetTrackAnalytics(v bool) {
	o.TrackAnalytics = &v
}

// GetUsageCertRequired returns the UsageCertRequired field value if set, zero value otherwise.
func (o *UpdateOrgSettingsRequest) GetUsageCertRequired() bool {
	if o == nil || isNil(o.UsageCertRequired) {
		var ret bool
		return ret
	}
	return *o.UsageCertRequired
}

// GetUsageCertRequiredOk returns a tuple with the UsageCertRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOrgSettingsRequest) GetUsageCertRequiredOk() (*bool, bool) {
	if o == nil || isNil(o.UsageCertRequired) {
		return nil, false
	}
	return o.UsageCertRequired, true
}

// HasUsageCertRequired returns a boolean if a field has been set.
func (o *UpdateOrgSettingsRequest) HasUsageCertRequired() bool {
	if o != nil && !isNil(o.UsageCertRequired) {
		return true
	}

	return false
}

// SetUsageCertRequired gets a reference to the given bool and assigns it to the UsageCertRequired field.
func (o *UpdateOrgSettingsRequest) SetUsageCertRequired(v bool) {
	o.UsageCertRequired = &v
}

// GetUsageCertText returns the UsageCertText field value if set, zero value otherwise.
func (o *UpdateOrgSettingsRequest) GetUsageCertText() string {
	if o == nil || isNil(o.UsageCertText) {
		var ret string
		return ret
	}
	return *o.UsageCertText
}

// GetUsageCertTextOk returns a tuple with the UsageCertText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOrgSettingsRequest) GetUsageCertTextOk() (*string, bool) {
	if o == nil || isNil(o.UsageCertText) {
		return nil, false
	}
	return o.UsageCertText, true
}

// HasUsageCertText returns a boolean if a field has been set.
func (o *UpdateOrgSettingsRequest) HasUsageCertText() bool {
	if o != nil && !isNil(o.UsageCertText) {
		return true
	}

	return false
}

// SetUsageCertText gets a reference to the given string and assigns it to the UsageCertText field.
func (o *UpdateOrgSettingsRequest) SetUsageCertText(v string) {
	o.UsageCertText = &v
}

// GetUsernameEmptyText returns the UsernameEmptyText field value if set, zero value otherwise.
func (o *UpdateOrgSettingsRequest) GetUsernameEmptyText() string {
	if o == nil || isNil(o.UsernameEmptyText) {
		var ret string
		return ret
	}
	return *o.UsernameEmptyText
}

// GetUsernameEmptyTextOk returns a tuple with the UsernameEmptyText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOrgSettingsRequest) GetUsernameEmptyTextOk() (*string, bool) {
	if o == nil || isNil(o.UsernameEmptyText) {
		return nil, false
	}
	return o.UsernameEmptyText, true
}

// HasUsernameEmptyText returns a boolean if a field has been set.
func (o *UpdateOrgSettingsRequest) HasUsernameEmptyText() bool {
	if o != nil && !isNil(o.UsernameEmptyText) {
		return true
	}

	return false
}

// SetUsernameEmptyText gets a reference to the given string and assigns it to the UsernameEmptyText field.
func (o *UpdateOrgSettingsRequest) SetUsernameEmptyText(v string) {
	o.UsernameEmptyText = &v
}

// GetUsernameLabel returns the UsernameLabel field value if set, zero value otherwise.
func (o *UpdateOrgSettingsRequest) GetUsernameLabel() string {
	if o == nil || isNil(o.UsernameLabel) {
		var ret string
		return ret
	}
	return *o.UsernameLabel
}

// GetUsernameLabelOk returns a tuple with the UsernameLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOrgSettingsRequest) GetUsernameLabelOk() (*string, bool) {
	if o == nil || isNil(o.UsernameLabel) {
		return nil, false
	}
	return o.UsernameLabel, true
}

// HasUsernameLabel returns a boolean if a field has been set.
func (o *UpdateOrgSettingsRequest) HasUsernameLabel() bool {
	if o != nil && !isNil(o.UsernameLabel) {
		return true
	}

	return false
}

// SetUsernameLabel gets a reference to the given string and assigns it to the UsernameLabel field.
func (o *UpdateOrgSettingsRequest) SetUsernameLabel(v string) {
	o.UsernameLabel = &v
}

// GetWhiteList returns the WhiteList field value if set, zero value otherwise.
func (o *UpdateOrgSettingsRequest) GetWhiteList() bool {
	if o == nil || isNil(o.WhiteList) {
		var ret bool
		return ret
	}
	return *o.WhiteList
}

// GetWhiteListOk returns a tuple with the WhiteList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOrgSettingsRequest) GetWhiteListOk() (*bool, bool) {
	if o == nil || isNil(o.WhiteList) {
		return nil, false
	}
	return o.WhiteList, true
}

// HasWhiteList returns a boolean if a field has been set.
func (o *UpdateOrgSettingsRequest) HasWhiteList() bool {
	if o != nil && !isNil(o.WhiteList) {
		return true
	}

	return false
}

// SetWhiteList gets a reference to the given bool and assigns it to the WhiteList field.
func (o *UpdateOrgSettingsRequest) SetWhiteList(v bool) {
	o.WhiteList = &v
}

// GetApprovalConfig returns the ApprovalConfig field value if set, zero value otherwise.
func (o *UpdateOrgSettingsRequest) GetApprovalConfig() GetOrgSettings200ResponseApprovalConfig {
	if o == nil || isNil(o.ApprovalConfig) {
		var ret GetOrgSettings200ResponseApprovalConfig
		return ret
	}
	return *o.ApprovalConfig
}

// GetApprovalConfigOk returns a tuple with the ApprovalConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOrgSettingsRequest) GetApprovalConfigOk() (*GetOrgSettings200ResponseApprovalConfig, bool) {
	if o == nil || isNil(o.ApprovalConfig) {
		return nil, false
	}
	return o.ApprovalConfig, true
}

// HasApprovalConfig returns a boolean if a field has been set.
func (o *UpdateOrgSettingsRequest) HasApprovalConfig() bool {
	if o != nil && !isNil(o.ApprovalConfig) {
		return true
	}

	return false
}

// SetApprovalConfig gets a reference to the given GetOrgSettings200ResponseApprovalConfig and assigns it to the ApprovalConfig field.
func (o *UpdateOrgSettingsRequest) SetApprovalConfig(v GetOrgSettings200ResponseApprovalConfig) {
	o.ApprovalConfig = &v
}

func (o UpdateOrgSettingsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateOrgSettingsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.CountryCodes) {
		toSerialize["countryCodes"] = o.CountryCodes
	}
	if !isNil(o.EnableExternalPasswordChange) {
		toSerialize["enableExternalPasswordChange"] = o.EnableExternalPasswordChange
	}
	if !isNil(o.EnableAutomaticPasswordReplay) {
		toSerialize["enableAutomaticPasswordReplay"] = o.EnableAutomaticPasswordReplay
	}
	if !isNil(o.EnableAutomationGeneration) {
		toSerialize["enableAutomationGeneration"] = o.EnableAutomationGeneration
	}
	if !isNil(o.KbaReqAnswers) {
		toSerialize["kbaReqAnswers"] = o.KbaReqAnswers
	}
	if !isNil(o.KbaReqForAuthn) {
		toSerialize["kbaReqForAuthn"] = o.KbaReqForAuthn
	}
	if !isNil(o.LockoutAttemptThreshold) {
		toSerialize["lockoutAttemptThreshold"] = o.LockoutAttemptThreshold
	}
	if !isNil(o.LockoutTimeMinutes) {
		toSerialize["lockoutTimeMinutes"] = o.LockoutTimeMinutes
	}
	if !isNil(o.LoginUrl) {
		toSerialize["loginUrl"] = o.LoginUrl
	}
	if !isNil(o.Netmasks) {
		toSerialize["netmasks"] = o.Netmasks
	}
	if !isNil(o.NotifyAuthenticationSettingChange) {
		toSerialize["notifyAuthenticationSettingChange"] = o.NotifyAuthenticationSettingChange
	}
	if !isNil(o.PasswordReplayState) {
		toSerialize["passwordReplayState"] = o.PasswordReplayState
	}
	if !isNil(o.PreferredIdentityInviteTemplate) {
		toSerialize["preferredIdentityInviteTemplate"] = o.PreferredIdentityInviteTemplate
	}
	if !isNil(o.RedirectPatterns) {
		toSerialize["redirectPatterns"] = o.RedirectPatterns
	}
	if !isNil(o.SsoPartnerSource) {
		toSerialize["ssoPartnerSource"] = o.SsoPartnerSource
	}
	if !isNil(o.SystemNotificationEmails) {
		toSerialize["systemNotificationEmails"] = o.SystemNotificationEmails
	}
	if !isNil(o.TrackAnalytics) {
		toSerialize["trackAnalytics"] = o.TrackAnalytics
	}
	if !isNil(o.UsageCertRequired) {
		toSerialize["usageCertRequired"] = o.UsageCertRequired
	}
	if !isNil(o.UsageCertText) {
		toSerialize["usageCertText"] = o.UsageCertText
	}
	if !isNil(o.UsernameEmptyText) {
		toSerialize["usernameEmptyText"] = o.UsernameEmptyText
	}
	if !isNil(o.UsernameLabel) {
		toSerialize["usernameLabel"] = o.UsernameLabel
	}
	if !isNil(o.WhiteList) {
		toSerialize["whiteList"] = o.WhiteList
	}
	if !isNil(o.ApprovalConfig) {
		toSerialize["approvalConfig"] = o.ApprovalConfig
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateOrgSettingsRequest) UnmarshalJSON(bytes []byte) (err error) {
	varUpdateOrgSettingsRequest := _UpdateOrgSettingsRequest{}

	if err = json.Unmarshal(bytes, &varUpdateOrgSettingsRequest); err == nil {
	*o = UpdateOrgSettingsRequest(varUpdateOrgSettingsRequest)
}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "countryCodes")
		delete(additionalProperties, "enableExternalPasswordChange")
		delete(additionalProperties, "enableAutomaticPasswordReplay")
		delete(additionalProperties, "enableAutomationGeneration")
		delete(additionalProperties, "kbaReqAnswers")
		delete(additionalProperties, "kbaReqForAuthn")
		delete(additionalProperties, "lockoutAttemptThreshold")
		delete(additionalProperties, "lockoutTimeMinutes")
		delete(additionalProperties, "loginUrl")
		delete(additionalProperties, "netmasks")
		delete(additionalProperties, "notifyAuthenticationSettingChange")
		delete(additionalProperties, "passwordReplayState")
		delete(additionalProperties, "preferredIdentityInviteTemplate")
		delete(additionalProperties, "redirectPatterns")
		delete(additionalProperties, "ssoPartnerSource")
		delete(additionalProperties, "systemNotificationEmails")
		delete(additionalProperties, "trackAnalytics")
		delete(additionalProperties, "usageCertRequired")
		delete(additionalProperties, "usageCertText")
		delete(additionalProperties, "usernameEmptyText")
		delete(additionalProperties, "usernameLabel")
		delete(additionalProperties, "whiteList")
		delete(additionalProperties, "approvalConfig")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateOrgSettingsRequest struct {
	value *UpdateOrgSettingsRequest
	isSet bool
}

func (v NullableUpdateOrgSettingsRequest) Get() *UpdateOrgSettingsRequest {
	return v.value
}

func (v *NullableUpdateOrgSettingsRequest) Set(val *UpdateOrgSettingsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateOrgSettingsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateOrgSettingsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateOrgSettingsRequest(val *UpdateOrgSettingsRequest) *NullableUpdateOrgSettingsRequest {
	return &NullableUpdateOrgSettingsRequest{value: val, isSet: true}
}

func (v NullableUpdateOrgSettingsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateOrgSettingsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


